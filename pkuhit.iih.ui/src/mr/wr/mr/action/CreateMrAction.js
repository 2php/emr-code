Ext.define('iih.mr.wr.mr.action.CreateMrAction', {
	extend: 'Xap.ej.action.ServiceInvocation',
	doExecute: function(context) {
		this.superiorDoctorName=context.superiorDoctorName;
		this.timeAutoGenerated=context.timeAutoGenerated;
		this.higherLvlEmpId=context.higherLvlEmpId;
	   var tplTree = Ext.getCmp('mrTempSortTree');
       //病历文书类型
	   var treeNode = tplTree.getSelectionModel().getSelection();
	   console.log(treeNode);
       var typeCode = treeNode[0].raw.data.templateTypeCode;
       if(!typeCode){
    	   return;
       }
       //就诊号
	   var encounterSn = IMER_GLOBAL.encounterSn;
	   var data = {'typeCode':typeCode,'encounterPk':encounterSn};
	   this.prepareOperations(context.operations,data);
	},
    prepareOperations: function(operations,data) {
        var url = 'canCreate';
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            method: METHODS.METHOD_CREATE,
            data:data,
            condition: null,
            scope: this,
            success: this.onSuccess
        };
        operations.push(operation);
    },
    onSuccess: function(operation) {
       if(operation.result){
       	   var canCreate = operation.result.data.canCreate;
	       if(canCreate!=1){
	           Ext.Msg.alert('提示','首次病程记录已存在！');
	           return
	       }
       }
       var tplTree = Ext.getCmp('mrTempSortTree');
       var treeNode = tplTree.getSelectionModel().getSelection();
       var temp = treeNode[0].raw.data;
       var typecode = temp.templateTypeCode;
/*       if(typecode=='MRM16.19'||typecode=='MRM16.20'){
    	  if(data.higherLvlEmpId==''){
  	         Ext.Msg.alert('提示','请选择上级查房医师！');
  	         return
  	      }
    	  var datakeys= this.getBlock('content').down("xapcombobox[name=higherLvlEmpId]").getStore().data.keys;
    	  //上级查房医师无效下拉框的所有数据value跟传入的对比一致通过
    	  var reg=false;
    	  for (var i = 0; i < datakeys.length; i++) {
			if(datakeys[i]==data.higherLvlEmpId){
				reg=true;
				break;
			}
    	  }
    	  if(reg==false){
   	         Ext.Msg.alert('提示','你选择的上级查房医师无效，请重新选择！');
   	         return
   	      }
   	      */
       	var superiorDoctorName='';
       	var timeAutoGenerated=0;
       	var name=temp.templateName;
       	var higherLvlEmpId=null;
       	if(this.timeAutoGenerated){
       		timeAutoGenerated=this.timeAutoGenerated;
       	}
       	if(this.higherLvlEmpId){
       		higherLvlEmpId=this.higherLvlEmpId;
       		name=this.superiorDoctorName;
       		superiorDoctorName=name.substring(0,name.indexOf(' '));
       	}
       	
            var medicalRecord={
            		filePk:temp.filePk,
            		name:name,
            		encounterPk:IMER_GLOBAL.encounterSn,
//            		bizTime:new Date().getTime(),
            		typeCode:typecode,
            		signLevelCode:temp.signLevelCode,
            		superiorDoctorId:higherLvlEmpId,
            		superiorDoctorName:superiorDoctorName,
            		timeAutoGenerated:timeAutoGenerated,
            		templeCode:temp.id};
            
		    //得到文书编辑器tab
		    /*var workpageview = properties.data.workpageview;
            if(workpageview){
            	workpageview.ownerCt.remove(workpageview);
            }*/
            var canvas = Xap.getCanvas();            
            var config = {
                    xclass: 'iih.mr.wr.mr.view.MrDocEditView',
                    pageTitle: name,
                    pageCode:'mrdoceditview',
                    viewConfig:{
                        opType:'new',
                        medicalRecord:medicalRecord
                    },
                    assistantConfig:{
                        tgtObCd: 'MRB02',
                        tgtObPk: null
                    }
            };       
            canvas.fireEvent("addWorkPage",config);             
    }       
});
