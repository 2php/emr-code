Ext.define('Xap.ej.action.Action', {

    constructor: function() {
        this.callParent(arguments);
        var arg = arguments[0];
        if(arg) {
        	Ext.apply(this, arg);
        }
        this.blocks = {};
    },

    execute:function(){
        Xap.debug('execute action [' + Ext.getClassName(this) + ']');
    },

    addBlock: function(name, block) {
        if(name && block) {
            // TODO log
            this.blocks[name] = block;
        }
    },

    getBlock: function(name) {
        return this.blocks[name];
    },

    getOwner: function() {
        return this.owner;
    }
});
Ext.define('iih.mr.action.editor.EmrCmdDispatchAction', {
	extend:  Xap.ej.action.Action ,
	
	/*
	* @Override
	*/
	execute: function(context) {
	    Ext.useShims=true;
	    this.callParent();    
        var event = context.event;
        var method = event.arguments[0];
        var owner = this.getOwner();
        var chain = owner.getActionChain(method);
        if(!chain) {
            chain = owner.getActionChain('task');
        }
        if(chain) {
            chain.execute(context);
        }
    }
});

Ext.define('Xap.ej.action.ServiceInvocation', {
	extend:  Xap.ej.action.Action ,

    statics: {
        METHOD_CREATE: 'POST',

        METHOD_DELETE: 'DELETE',

        METHOD_UPDATE: 'PUT',

        METHOD_GET: 'GET'
    },

	/*
	* @Override
	*/
    execute:function(context){
    	this.callParent();

        if(!context.operations) {
            context.operations = [];
        };
        if(!this.doExecute(context))
			return;
        var operations = context.operations;
        for(var i = 0; i < operations.length; i++) {
            var o = operations[i];
            if(!o.success) {
                // TODO 不要临时定义function
                o.success = function(o) {
                    this.onSuccess(o.result);
                }
            }
            if(!o.fail) {
                o.fail = function(o) {
                    this.onFailure();
                }
            }
            if(!o.scope) {
                o.scope = this;
            }
        };
    },

    getInvocationMethods: function() {
        return Xap.ej.action.ServiceInvocation;
    },

    // 返回false表明不再继续
    doExecute: Ext.emptyFn,

    /* 
    * 成功的回调
    * @param data 后端服务返回的结果
    */
    onSuccess: Ext.emptyFn,
	/* 
    * 失败的总回调
    */
	doFailureCallback: Ext.emptyFn,
    // 失败的回调
    onFailure: Ext.emptyFn,

	showLoading: function() {
		var owner = this.getOwner();
		//if(!this.isGridreeComponents(owner))return;
		if (owner) {
			if (!owner.loadingMask) {
				owner.loadingMask = Ext.create('Xap.ej.element.window.LoadMask', owner);
			}
			owner.loadingMask.show();
		}
	},
	
	hideLoading: function() {
		var owner = this.getOwner();
		//if(!this.isGridreeComponents(owner))return;
		if (owner && owner.loadingMask) {
			owner.loadingMask.hide();
			owner.updateLayout();
		}
	},

	isGridreeComponents: function(component) {
		if(component){
			var gridtreeComponents = component.query('xapgrid, xaptree');
			if(gridtreeComponents.length > 0)return true;
		}
		return false;
	},
	
	showSubmitProgressBar: function() {
		var owner = this.getOwner();
		if (owner) {
			if (!owner.progressBar) {
				owner.progressBar = Ext.create('Xap.ej.element.MessageBox.MessageBox', owner);
			}
			var title = FuiLocale.get('messagebox', 'submit');
			var textSaving = FuiLocale.get('messagebox', 'saving');
			owner.progressBar.wait('', title, {
				interval: 500,
				increment: 10,
				text: textSaving
			},owner);
		}
	},

	closeSubmitProgressBar: function() {
		var owner = this.getOwner();
		if (owner && owner.progressBar) {
			owner.progressBar.progressBar.reset();
			owner.progressBar.close();
			owner.updateLayout();
		}
	}
});

/*
 * 对象视图，用于加载显示Object标签的内容
 * 配置说明：
 * 	object: object配置，用于生成object标签
 * 	param：	object的参数配置
 * @author：chenyajie<chen_yajie@founder.com>
 *
 *## example xapcombobox
 *     @example 
 *	    	Ext.create('Ext.panel.Panel', {				
 *	    	    bodyPadding: 5,  // Don't want content to crunch against the borders				
 *	    	    				
 *	    	    title: 'Panel',				
 *	    		//html: "<object id='plugin0' type='application/x-founderoffice' width='100%' height='500'><param name='onload' value='pluginLoaded' /><PARAM NAME='src' VALUE='d:/demo.odt'> <PARAM NAME='readonly' VALUE='false'></object>",			
 *	    		items: [			
 *	    			{ 		
 *	    				xtype: 'fuiobjectview',	
 *	    				object: {	
 *	    					id: 'iemrEditor',
 *	    					type: 'application/x-founderoffice',
 *	    					width: '100%',
 *	    					height: 500
 *	    				},	
 *	    				param: [{	
 *	    					name: 'src',
 *	    					value:'d:/demo.odt'
 *	    				}]	
 *	    			}		
 *	    		],	
 *	    	    renderTo: Ext.getBody()			
 *	    	});			
 *
 *
 */
 
Ext.define('Xap.ej.element.objectview.ObjectView', {
	extend:  Ext.panel.Panel ,
	
	alias: 'widget.objectview',
	
	header: false,
	
	layout: 'fit',
	
	initComponent: function() {
		var config = this.initialConfig;
		if (config.object) {
			Ext.apply(config.object, { tag: 'object' });
			if (config.param) {
				config.param = Ext.isArray(config.param) ? config.param : [config.param];
				var params = [];
				for (var i = 0; i < config.param.length; i++) {
					var param = config.param[i];
					param = Ext.apply(param, { tag: 'param' });
					params.push(param);
				}
				config.object.children = params;
			}

			this.html = config.object;
		}
		
		this.callParent();
	}
});
Ext.define('iih.mr.action.editor.EmrEditorOperatorAction', {
    extend:  Xap.ej.action.ServiceInvocation ,

                                                       
    /**
     * 将指定page中增加编辑器组件
     * 
     * @param page
     *            需要加入编辑器组件的page
     * @param params.objectId
     *            编辑器组件Id params.sstream 文档base64编码 params.mr_mode 编辑器打开模式 1：书写
     *            2：模板编辑 3：浏览 params.readonly 只读标识 'true':只读 'false'：非只读
     */
    insertWriter: function(page, params) {
        Ext.useShims=true;
		var self = this;
		var initEditor = function(o){
			
			var p = document.getElementById(params.objectId);
			p.tagName='AA';
			var b=new Date();
			console.log('%c'+b+':'+b.getMilliseconds()+'毫秒     编辑器加载完毕...','color: #86CC00; background-color: black; font-size: 20px; padding: 3px;');
			//编译器增加监听
			self.addOfficeEvent(p,page);
			//报错2014-12-6，田玉岩修改
			if(params.callBackAction){
				var callBackAction = page.getActionChain(params.callBackAction);
				if(callBackAction){
					callBackAction.execute();
				}
			}
		};
        var items = [{
            xtype: 'objectview',
            border:0,
            padding: '0 0 0 0',
            region: 'center',
            object: {
                id: params.objectId,
                type: 'application/x-founderoffice',
                width: '100%',
                height: '100%'
            },
            param: [{
                name: 'sstream',
                value: params.sstream
            }, {
                name: 'mr_mode',
                value: params.mr_mode
            }, {
                name: 'readonly',
                value: params.readonly
            }, {
                name: 'hidden',
                value: params.hidden
            }],
			afterRender: initEditor
        }];
        var a=new Date();
        console.log('%c'+a+':'+a.getMilliseconds()+'毫秒     开始将编辑器加载到当前页面,初始化参数如下：','color: #86CC00; background-color: black; font-size: 20px; padding: 3px;');
        console.log(items);
        page.insert(0, items);
    },

    /**
     * 给编辑器增加事件，该事件触发后，会给隐藏按钮editorEvent触发editorEvent事件
     * 
     * @param object
     *            事件宿主对象
     * @param page
     *            宿主对象所在page
     */
    addOfficeEvent: function(object, page) {
        object.addEventListener('OfficeEvent', function(arg) {
        	console.log('--------点击'+arg+'--------');
            var button = page.down('[name=editorEvent]');
            button.fireEvent('editorEvent', arg);
        });
    },
    
    /**
     * 给隱藏按鈕增加事件
     * 
     * @param page
     *            宿主对象所在page
     */
    addEditorEvent: function(page) {
        var editorEvent = page.down('button[name=editorEvent]');
        editorEvent.addEvents('editorEvent');
    },

    /**
     * 关闭进度条
     */
    closeProgress: function() {
        setTimeout(function() {
            Ext.MessageBox.hide();
        }, 200);
    },

    /**
     * 显示进度条
     */
    showProgress: function() {
        Ext.MessageBox.show({
            title: '请稍候',
            msg: '正在加载病历编辑器组件...',
//            progressText: '正在加载病历编辑器组件...',
            width: 300,
            progress: true,
            closable: false,
            modal: true,
            animateTarget: 'mb6'
        });

        var setRate = function(intCount) {
            return function() {
                if (intCount != 50) {
                    var i = intCount / 49;
                    Ext.MessageBox.updateProgress(i, Math.round(99 * i) + '% 已完成');
                }
            };
        };
        for ( var i = 1; i < 50; i++) {
            setTimeout(setRate(i), i * 20);
        }

    }
});

Ext.define('iih.mr.archive.patient_mediclRecord_archive.action.AmrConfirmArchiveAction', {
	extend:  Xap.ej.action.ServiceInvocation ,

	/*
	 * @Override
	 */
	execute : function(context) {
		var record=context.record;
		var operations = context.operations;
		if (!operations) {
			return;
		}
		var self=this;
		XapMessageBox.confirm2('归档进行中，是否继续?', function(
				btn) {
			if (btn == 'yes') {
				var patientArchive=self.getOwner().getActionChain("patientArchive");
				patientArchive.execute({'record':record});
			}

		});
	}

});

Ext.define('iih.mr.archive.patient_mediclRecord_archive.action.MediclRecordArchiveBtnStaAction', {
	extend:  Xap.ej.action.Action ,
	
	/*
	* @Override
	*/
	execute: function(context) {
		//獲取grid如有選中
		var view =this.getOwner();
		var block=view.getBlock('content');
		var grid=block.down('xapgrid');
		var reds=grid.getSelectionModel().getSelection();
		var btn=view.getBlock('condition').down('button[name=uploadFileBtn]');
		if(reds&&reds.length>0){
			btn.setDisabled(false);
		}else{
			btn.setDisabled(true);
		}
	}

});

Ext.define('iih.mr.archive.patient_mediclRecord_archive.action.MediclRecordArchiveFileAction', {
    	extend:  Xap.ej.action.ServiceInvocation ,
    	execute: function(context) {
    		var view=this.getOwner();
    		var grid=view.getBlock('content').down('xapgrid');
    		var s= grid.getSelectionModel().getSelection();
    		var btn=view.getBlock('condition').down('button[name=uploadFileBtn]');
    		var dataList =[];
    		btn.setDisabled(true);//归档按钮致灰
    		//获取患者病历mr_pk
    		for(var i=0;i<s.length;i++){
    			dataList.push(s[i].data);
    	    }
    	    //参照接口文件，多条记录启用
    		//"archiveUserId":IMER_GLOBAL.user.code
    		var data ={"list":dataList};
    		this.prepareOperations(context.operations,data);
    		//将mrpks传入后台进行处理
        },
        
        prepareOperations: function(operations,data) {
        	var view=this.getOwner();
    		var block=view.getBlock('content');
        	 var mclass = null;
             if(block.getModelClass) {
                 mclass = block.getModelClass();
             }
        	var METHODS = this.getInvocationMethods();
            var operation = {
                    url:this.url,
                    mclass:mclass,
                    method:METHODS.METHOD_UPDATE,//METHOD_CREATE,
                    data: data,
                    scope: this,
                    success: this.onSuccess
                    // fail: this.onFail
                };
            operations.push(operation);
        },
        onSuccess: function(operation) {
        	var date=operation.result.dataList;
        	var defeat=0;
        	var succeed=0;
        	if(date!=null){
	        	for (var i = 0; i < date.length; i++) {
					if(date[i].arcF!=1){
						defeat++;
					}else{
						succeed++;
					}
				}
        	}
        	//返回所有odt文档
        	var succeedMsg="succeed+'份病历归档成功。"; 
        	if(defeat>0){
        		if(succeed>0){
        			Ext.Msg.alert('提示',succeedMsg+defeat+'份病历归档失败,请重新选择归档!');
        		}else{
        			Ext.Msg.alert('提示',defeat+'份病历归档失败,请重新选择归档!');
        		}
        	}else{
        		Ext.Msg.alert('提示','归档成功');
        	}
        	var search=Ext.getCmp('mediclrecordviewid').getActionChain("search");
        	search.execute();
        	
        	var view=this.getOwner();
        	var btn=view.getBlock('condition').down('button[name=uploadFileBtn]');
    		btn.setDisabled(false);
        }
       
    });

Ext.define('iih.mr.archive.patient_mediclRecord_archive.action.MediclRecordSearchAction', {
    	extend:  Xap.ej.action.ServiceInvocation ,
    	execute: function(context) {
    		var enPk=Ext.getCmp('patientandmediclrecordview').pk;
    		if(context.event != undefined && context.event.name=='combochange' && context.event.from.rawValue != ""){
    			return;
    		}
    		this.showLoading();
    		var pageNum,pageSize;
    		if(context.event == undefined){
    			pageNum = context.pageNum; 
    			pageSize = context.pageSize; 
    		}else{
    			pageNum = context.event.arguments[0]; 
    			pageSize = context.event.arguments[1]; 
    		}
    		var medicalBlock = Ext.getCmp('mediclrecordviewid').getBlock('content');
    		medicalBlock.pageSize = pageSize;
    		var data = {
    				enPk : enPk,
    				pageNum:pageNum,
    				pageSize:pageSize
    		};
        	var owner = Ext.getCmp('mediclrecordviewid');
            var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
            properties.setData({
                parentWindow: context.parentWindow,
                sourceView: context.sourceView,
                pageSize:pageSize,
                pageNum:pageNum
            });
        	var operations = context.operations;
        	if(!operations) {
        		return;
        	}
        	this.prepareOperations(operations,data);
        },
        
        prepareOperations: function(operations,data) {
            var view = Ext.getCmp('mediclrecordviewid').getBlock('condition');
            var block = Ext.getCmp('mediclrecordviewid').getBlock('content');
        	var condition = view.getData();
        	if(data.enPk != undefined){
        		condition.enPk = data.enPk;
        	}
            var url = this.url;
            var pageNum = data.pageNum; 
    		var pageSize = data.pageSize; 
            if(condition) {
                var qs = Ext.Object.toQueryString(condition);
                	if(data.pageSize == undefined || typeof(data.pageSize)=='object'){
                		if(qs) {
                			url += '?' + qs; //+"&workScreen=" + iih.mr.qa.QaStatusGlobal.workScreenWorkProcess;
                		}else{
                			url += '?';// +"&workScreen=" + iih.mr.qa.QaStatusGlobal.workScreenWorkProcess;
                		}
                	}else{
                		if(qs) {
                    		url += '?' + qs+"&pageNum="+ pageNum +"&pageSize="+ pageSize;//+"&workScreen=" + iih.mr.qa.QaStatusGlobal.workScreenWorkProcess 
                		}else{
                			url +='?' + "pageNum="+ pageNum +"&pageSize="+ pageSize;// + "&workScreen=" + iih.mr.qa.QaStatusGlobal.workScreenWorkProcess
                		}
                	}
                console.log(url);
            }
            var mclass = null;
            if(block.getModelClass) {
                mclass = block.getModelClass();
            }
        	var operation = {
                url: url,
        		mclass: mclass,
        		method: 'get',
        		condition: condition,
        		scope: this,
        		success: this.onSuccess
        	};
        	operations.length = 0;
        	operations.push(operation);
        },

        onSuccess: function(operation) {
        	var block = Ext.getCmp('mediclrecordviewid').getBlock('content');
            if(block){
    	        var pageSize =block.pageSize;//取的是上面保存的block.pageSize值
    	        var m = operation.result;
    	        m.pageSize = pageSize;
    	        if(m){
	    	        if(m instanceof Ext.data.Model) {
	    	            block.setData({
	    	                mclass: operation.mclass,
	    	                data: m.getData(true)
	    	            });
	    	        }
	    	        else {
	    	        	block.setData(m);
	    	        	console.log(m);
	    	        }
	    	     
	            }
            }
            var grid =block.down('xapgrid');
//            grid.getSelectionModel().selectAll(true); //可以循环行数据来选中
//            
//            var r=grid.getSelectionModel().getSelection();
//            for (var i = 0; i < r.length; i++) {
//            	if(r[i].data.arcF==1){
//            		grid.getSelectionModel().deselect(i,false,true);
//            	}
//			}
            var reds=grid.getSelectionModel().getSelection();
    		var btn=Ext.getCmp('mediclrecordviewid').getBlock('condition').down('button[name=uploadFileBtn]');
    		if(reds&&reds.length>0){
    			btn.setDisabled(false);
    		}else{
    			btn.setDisabled(true);
    		}
        }
    });

Ext.define('iih.mr.archive.patient_mediclRecord_archive.action.MrConfirmArchiveAction', {
	extend:  Xap.ej.action.ServiceInvocation ,

	/*
	 * @Override
	 */
	execute : function(context) {
		var operations = context.operations;
		if (!operations) {
			return;
		}
		var self=this;
		XapMessageBox.confirm2('归档进行中，是否继续?', function(
				btn) {
			if (btn == 'yes') {
				var mediclRecordarchivefile=self.getOwner().getActionChain("mediclRecordarchivefile");
				mediclRecordarchivefile.execute();
			}

		});
	}

});

Ext.define('iih.mr.archive.patient_mediclRecord_archive.action.PatientArchiveAction', {
    	extend:  Xap.ej.action.ServiceInvocation ,
    	execute: function(context) {
    		console.info(context.record.data.pk);//record
    		var enPk=context.record.data.pk;//患者编号
    		//确认了归档将enPk传到后台
    		this.prepareOperations(context.operations,enPk);
        },
        
        prepareOperations: function(operations,data) {
            var operation = {
                    url:this.url+"/"+data,
                    method:'get',//METHOD_CREATE,
                    //data: data,
                    scope: this,
                    success: this.onSuccess
                    // fail: this.onFail
                };
            operations.push(operation);
        },
        onSuccess: function(operation) {
        	var date=operation.result.dataList;
        	var defeat=0;
        	var succeed=0;
        	if(date!=null){
	        	for (var i = 0; i < date.length; i++) {
					if(date[i].arcF!=1){
						defeat++;
					}else{
						succeed++;
					}
				}
        	}
        	var succeedMsg="succeed+'份病历归档成功。"; 
        	if(defeat>0){
        		if(succeed>0){
        			Ext.Msg.alert('提示',succeedMsg+defeat+'份病历归档失败,请重新选择归档!');
        		}else{
        			Ext.Msg.alert('提示',defeat+'份病历归档失败,请重新选择归档!');
        		}
        	}else{
        		Ext.Msg.alert('提示','归档成功');
        	}
        	
        	var search=Ext.getCmp('patientandmediclrecordview').getActionChain("search");
        	search.execute();
        	
        }
       
    });

Ext.define('iih.mr.archive.patient_mediclRecord_archive.action.PatientArchiveBtnStaAction', {
	extend:  Xap.ej.action.Action ,
	
	/*
	* @Override
	*/
	execute: function(context) {
		//獲取grid如有選中
		var view =this.getOwner();
		var block=view.getBlock('content');
		var grid=block.down('xapgrid');
		var reds=grid.getSelectionModel().getSelection();
		var btn=view.getBlock('condition').down('button[name=uploadFileBtn]');
		if(reds&&reds.length>0){
			btn.setDisabled(false);
		}else{
			btn.setDisabled(true);
		}
	}

});

Ext.define('iih.mr.archive.patient_mediclRecord_archive.action.PatientInitAction', {
	extend:  Xap.ej.action.Action ,
	
	/*
	* @Override
	*/
	execute: function(context) {
		//患者查询初始化信息
		var block = this.getOwner().getBlock('condition');
//        var form = block.down('xapform');
//        form.getForm().reset();
		var block = this.getBlock('content');
		var crtTimeStart = block.down('xapdatefield[name=crtTimeStart]');
	    var crtTimeEnd = block.down('xapdatefield[name=crtTimeEnd]');
	    var curDeptNm = block.down('comboxgrid[name=curDeptNm]');
	    
	    var amrNo = block.down('xaptextfield[name=amrNo]');
	    var patientName = block.down('xaptextfield[name=patientName]');
	    var gsCd = block.down('xapcombobox[name=gsCd]');
	    amrNo.setValue();
	    patientName.setValue();
	    gsCd.setValue("全部");
	    var curDate = new Date();
		var curDateTime = curDate.getTime();
		var preDateTime = curDateTime - 24*60*60*1000*30;  
		crtTimeStart.setValue(preDateTime);
		crtTimeEnd.setValue(curDateTime);
		curDeptNm.select(IMER_GLOBAL.department.code,true,true) ;
		curDeptNm.comboxHiddenValue = IMER_GLOBAL.department.code;
		
		
	}

});

Ext.define('iih.mr.archive.patient_mediclRecord_archive.action.PatientListArchiveAction', {
    	extend:  Xap.ej.action.ServiceInvocation ,
    	execute: function(context) {
    		console.info('iih.mr.archive.patient_mediclRecord_archive.action.PatientListArchiveAction');
    		var view=this.getOwner();
    		var grid=view.getBlock('content').down('xapgrid');
    		var s= grid.getSelectionModel().getSelection();
    		//s是个list带有选中的数据行
    		if(s.length<1){
    			Ext.Msg.alert('提示','请选中病历后归档!');
    			return;
    		}
    	}
    });

var formatDate =function (date) {
    	if(date==0||date==""||date=="null"||date==null){
    		return null;
    	}
        var y = date.getFullYear();
        var m = date.getMonth() + 1;
        m = m < 10 ? '0' + m : m;
        var d = date.getDate();
        d = d < 10 ? ('0' + d) : d;
        return y + '-' + m + '-' + d;
    };
Ext.define('iih.mr.archive.patient_mediclRecord_archive.action.PatientListSearchAction', {
    	extend:  Xap.ej.action.ServiceInvocation ,
    	execute: function(context) {
    		if(context.event != undefined && context.event.name=='combochange' && context.event.from.rawValue != ""){
    			return;
    		}
    		var view = this.getOwner().getBlock('condition');
            var block = this.getOwner().getBlock('content');
        	var currentDeptCode= view.down('comboxgrid[name=curDeptNm]').getValue();
    		var receiveTime= view.down('xapdatefield[name=crtTimeStart]').getValue();
    		var finishTime= view.down('xapdatefield[name=crtTimeEnd]').getValue();
    		var amrNo= view.down('xaptextfield[name=amrNo]').getValue();
    		var patientName= view.down('xaptextfield[name=patientName]').getValue();
    		var gsCd= view.down('xapcombobox[name=gsCd]').getValue();
    		if(gsCd=="全部"){
    			gsCd="";
    		}
    		if(receiveTime != "" && finishTime!=""){
        		if(finishTime < receiveTime){
    				 XapMessageBox.info("开始日期大于结束日期，请重新选择！");
    	    		return;
        		}
        	}
    		this.showLoading();
    		var pageNum,pageSize;
    		if(context.event == undefined){
    			pageNum = context.pageNum; 
    			pageSize = context.pageSize; 
    		}else{
    			pageNum = context.event.arguments[0];
    			pageSize = context.event.arguments[1];
    		}
    		block.pageSize = pageSize;
    		var data = {
    				currentDeptCode : currentDeptCode,
    				receiveTime : formatDate(receiveTime),
    				finishTime:formatDate(finishTime),
    				amrNo:amrNo,
    				patientName:patientName,
    				pageNum:pageNum,
					pageSize:pageSize,
					gsCd:gsCd
    		};
        	var owner = this.getOwner();
            var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
            properties.setData({
                parentWindow: context.parentWindow,
                sourceView: context.sourceView,
                pageSize:pageSize,
                pageNum:pageNum
            });
        	var operations = context.operations;
        	if(!operations) {
        		return;
        	}
        	this.prepareOperations(operations,data);
        },
        
        prepareOperations: function(operations,data) {
            var view = this.getOwner().getBlock('condition');
            var block = this.getOwner().getBlock('content');
        	var condition = view.getData();
        	if(data.currentDeptCode != undefined){
        		condition.currentDeptCode = data.currentDeptCode;
        	}
        	if(data.receiveTime != undefined){
        		condition.receiveTime = data.receiveTime;
        	}
        	if(data.finishTime != undefined){
        		condition.finishTime = data.finishTime;
        	}
        	if(data.amrNo != undefined){
        		condition.amrNo = data.amrNo;
        	}
        	if(data.patientName != undefined){
        		condition.patientName = data.patientName;
        	}
        	if(data.gsCd != undefined){
        		condition.gsCd = data.gsCd;
        	}
            var url = this.url;
            var pageNum = data.pageNum; 
    		var pageSize = data.pageSize; 
            if(condition) {
                var qs = Ext.Object.toQueryString(condition);
                	if(data.pageSize == undefined || typeof(data.pageSize)=='object'){
                		if(qs) {
                			url += '?' + qs; //+"&workScreen=" + iih.mr.qa.QaStatusGlobal.workScreenWorkProcess;
                		}else{
                			url += '?';// +"&workScreen=" + iih.mr.qa.QaStatusGlobal.workScreenWorkProcess;
                		}
                	}else{
                		if(qs) {
                    		url += '?' + qs+"&pageNum="+ pageNum +"&pageSize="+ pageSize;//+"&workScreen=" + iih.mr.qa.QaStatusGlobal.workScreenWorkProcess 
                		}else{
                			url +='?' + "pageNum="+ pageNum +"&pageSize="+ pageSize;// + "&workScreen=" + iih.mr.qa.QaStatusGlobal.workScreenWorkProcess
                		}
                	}
                console.log(url);
            }
            var mclass = null;
            if(block.getModelClass) {
                mclass = block.getModelClass();
            }
        	var operation = {
                url: url,
        		mclass: mclass,
        		method: 'get',
        		condition: condition,
        		scope: this,
        		success: this.onSuccess
        	};
        	operations.length = 0;
        	operations.push(operation);
        },

        onSuccess: function(operation) {
            var block = this.getOwner().getBlock('content');
            if(block){
    	        var pageSize = block.pageSize;
    	        var m = operation.result;
    	        m.pageSize = pageSize;
    	        // TODO 数据格式就这样了？
    	        if(m instanceof Ext.data.Model) {
    	            block.setData({
    	                mclass: operation.mclass,
    	                data: m.getData(true)
    	            });
    	        }
    	        else {
    	        	block.setData(m);
    	        	console.log(m);
    	        }
    	     
            }
            var grid =block.down('xapgrid');
            grid.getSelectionModel().selectAll(true); 
            
            var datas=grid.getSelectionModel().store.data.items;
            var xapgrid=grid.getSelectionModel();
            for (var i = 0; i < datas.length; i++) {
            	 var rec=datas[i].data.statusCode;
				if(rec=="MRM22.07"){//已归档   select*from md_gs where obj_cd = 'MRM22'表
					xapgrid.deselect(i,false,true);
				}
			}
            
            
            var reds=grid.getSelectionModel().getSelection();
    		var btn=this.getOwner().getBlock('condition').down('button[name=uploadFileBtn]');
    		if(reds&&reds.length>0){
    			btn.setDisabled(false);
    		}else{
    			btn.setDisabled(true);
    		}

        }
    });

Ext.define('Xap.ej.stl.action.PopUpCloseAction', {
	extend:  Xap.ej.action.Action ,
	
	/*
	* @Override
	*/
	execute: function(context) {
    	this.callParent();
        this.beforeClosing();
        if(this.target && Ext.isFunction(this.target.close)) {
            this.target.close();
        }
    },

    setTarget: function(target) {
        this.target = target;
    },

    beforeClosing: Ext.emptyFn
});

// TODO 确保展示的视图唯一，不会重复弹出
Ext.define('Xap.ej.action.PopAction', {
	extend:  Xap.ej.action.Action ,
	
	           
                               
                                            
      

    defaultConfig: {
        width: 800,
        height: 600,
        layout : 'fit',
        modal: true
    },
	 
    execute: function(context) {
        this.callParent();
        if(this.viewConfig) {
            var config = this.viewConfig;
            Xap.create(config).show();
        }
        else if(context && context.contentConfig && context.contentConfig.xtype) {
            // TODO xtype?
            var windowConfig = Ext.apply({}, this.defaultConfig);
            if(context.width) {
                windowConfig.width = context.width;
                context.width = null;
            }
            if(context.height) {
                windowConfig.height = context.height;
                context.height = null;
            }
            if(context.title) {
                windowConfig.title = context.title;
                context.title = null;
            }

            // 弹出窗口
            var window = Ext.create('Ext.window.Window', windowConfig);

            var contentConfig = context.contentConfig;
            var initChainConfig = contentConfig.initChain;
            contentConfig.initChain = null;

            window.add(contentConfig);
            window.show();

            // 调用初始化Action
            if(initChainConfig) {
                var content = window.down(contentConfig.xtype);
                var chain = content.getActionChain(initChainConfig.name);
                if(chain) {
                    var ctx = initChainConfig.context || {};
                    ctx.parentWindow = window;
                    chain.execute(ctx);
                }
            }
        }
    }
});

Ext.define('Xap.ej.action.ActionFactory', {
    singleton: true,
	/*
	* @param Action类型
	* @return Action对象
	*/
    createAction:function(config){
        return Xap.create(config);
    },
	
	createChain: function(config) {
        config.xclass = 'Xap.ej.action.Chain';
        return Xap.create(config);
	}
});
Ext.define('Xap.ej.action.Phase', {
    constructor: function() {
        this.callParent(arguments);
        this.name = '';
        this.actions = [];
    },

    getName: function() {
        return this.name;
    },

    addAction: function(action) {
        this.actions.push(action);
    },

    getActions: function() {
        return this.actions;
    },

    getSize: function() {
        return 0;
    },

    // TODO remove

    execute: function() {
        for(var i = 0; i < this.actions.length; i++) {
            var action = this.actions[i];
            // TODO 如果执行失败应当中断执行
            // TODO try catch
            // TODO 
            // action.execute(context);
            if(action.execute)
                action.execute({});
        }
    }
});
Ext.define('Xap.ej.action.ChainExecutor', {
                                      

    constructor: function() {
        this.callParent(arguments);
    },

    execute: function(chain, context) {
		this.setChain(chain);
        // TODO 支持链的“阶段”
        var phase = chain.getPhase('default');
        var executions = {
            flow: [],
            close: false,
            success: null,
            fail: null
        };
        this.prepareExecutionsByPhase(phase, executions);
        this.doExecute(executions.flow, context);
    },

    // 用于继承
    doExecute: Ext.emptyFn,

    prepareExecutionsByPhase: function(phase, executions) {
        var actions = phase.getActions();
        for(var i = 0; i < actions.length; i++) {
            var action = actions[i];
            if(action instanceof Xap.ej.action.Chain) {
                this.prepareExecutionsByChain(action, executions);
            }
            else if(action instanceof Xap.ej.action.Action) {
                this.prepareExecutionsByAction(action, executions);
            }
        }
    },

    prepareExecutionsByChain: function(chain, executions) {
        // TODO 目前只支持default阶段
        var phase = chain.getPhase('default');
        this.prepareExecutionsByPhase(phase, executions);
    },

    prepareExecutionsByAction: function(action, executions) {
        executions.flow.push(action);
    },

    doOperationCallback: function(operation) {
        if(operation.success && Ext.isFunction(operation.success)) {
            operation.success.call(operation.scope, operation);
        }
    },
	
	setChain: function(chain) {
		this.chain = chain;
	},
	
	getChain: function() {
		return this.chain;
	}
    // TODO doAction
});
Ext.define('Xap.ej.data.DataModel', {
	/*
	mixins: {
        observable: 'Ext.util.Observable'
    },
    */
    constructor: function() {
        this.callParent(arguments);
        // this.mixins.observable.constructor.call(this, config);
        // this.addEvents('datachanged');

		// this.model = null;
		// this.store = null;
        var arg = arguments[0];
        if(arg) {
        	Ext.apply(this, arg);
        }
        /*
        this.store.on(
        	'datachanged', 
        	this.onStoreDatachanged, 
        	this
        );
        */
    },

	/*
	* 查询数据
	*/
	get: function(context) {
		var condition = context.condition;
		var data = null;
		if(condition) {
			data = condition.data;
		}

		if(!data) {
			data = condition;
		}
		
		if(!data) {
			return this.store.getRange();
		}
		var m = this.model.create(data);
		var id = m.getId();
		if(id) {
			return this.store.getById(id);
		}
		else {
			var r = this.store.queryBy(function(record, id) {
				var b = false;
				for(n in data) {
					var v = data[n];
					if(!v) {
						continue;
					}
					if(v == record.get(n)) {
						b = true;
					} 
					else {
						b = false;
						break;
					}
				}
				return b;
			});
			return r.getRange();
		}
	},

	/*
	* 修改数据
	*/
	save: function(context) {
		var data = context.data;
		if(!data)
			return;
		var newObj = this.model.create(data);
		var oldObj = null;
		var id = newObj.getId();
		if(id) {
			oldObj = this.store.getById(id);
		}
		if(oldObj) {
			// TODO 更新
			this.store.loadRawData(data, true);
		}
		else {
			// 可能ID被自动生成
			this.store.loadRawData(data, true);
		}
		// 保存到Proxy指向的位置
		this.store.sync();
	},

	remove: function(context) {
		// TODO 实现删除
		console.log(context);
	},

	loadData: function(data) {
		this.store.loadRawData(data);
		this.store.sync();
	}
});
Ext.define('Xap.ej.data.Bucket', {
	getName: function() {
		return this.name;
	},

	put: function(obj) {
		var action = Xap.create({
			xclass: 'Xap.ej.action.StorageServiceInvocation',
			url: 'xapss/' + this.name
		});
		Xap.runAction(action, {
			options: {
				method: 'POST',
				success: this.onSuccess,
				scope: this,
				data: obj.data
				// binaryData: obj.data // 字节数组
			}
		});
	},

	onSuccess: function(o) {
        console.log(o);
    },
});
Ext.define('Xap.ej.data.DataManager', {

	extend:  Ext.util.MixedCollection ,

	           
		                        
		                    
	  

	singleton: true,

	dms: {},

	createDataModel: function(context) {
		var key = context.key;
		var dm = this.getDataModel(key);
		// 已经创建过，直接返回
		if(dm)
			return dm;

		var m = this.findModel(context);
		// 没有数据模型的定义，返回空
		if(!m)
			// TODO log
			return null;

		var sm = Ext.data.StoreManager.lookup(key);
		if(!sm) {
			sm = Xap.create({
				xclass: 'Ext.data.Store',
				model: context.mclass,
				// TODO class as id?
				storeId: key
			});
		}
		dm = Xap.create({
			xclass: 'Xap.ej.data.DataModel',
			model: m,
			store: sm
		});
		// 保存数据模型对象
		this.dms[key] = dm;
		return dm;
	},

	findModel: function(context) {
		var mc = context.mclass;
		var obj = Ext.ModelManager.getModel(mc);
		if(!obj)
			return null;

		// TODO 没有Proxy才设置Proxy
		obj.setProxy({
			type: 'localstorage',
			id  : mc
		});
		return obj;
	},

	getDataModel: function(key) {
		return this.dms[key];
	},

	/*
	* @param config.model
	* @param config.data
	*/
	loadData: function(config) {
		if(!config.model)
			return;
		var key = config.url;
		if(!key) {
			key = config.model;
		}
		var dm = this.createDataModel({
			key: key,
			mclass: config.model
		});
		dm.loadData(config.data);
	},

	getBucket: function(name) {
		if(!this.nativeBinarySupport()) {
			Xap.debug('native binary is not supported in this browser!');
			// TODO return dummyLocalBucket
			return null;
		}
		if(name) {
			var bucket = Xap.create({
				xclass: 'Xap.ej.data.Bucket'
			});
			bucket.name = name;
			return bucket;
		}
	},

    nativeBinarySupport: function() {
        return Ext.isChrome ||
            (Ext.isSafari && Ext.isDefined(window.Uint8Array)) ||
            (Ext.isGecko && Ext.isDefined(window.Uint8Array));
    }
});
Ext.define('Xap.ej.action.LocalChainExecutor', {
    extend:  Xap.ej.action.ChainExecutor ,

               
                                      
                                 
      

    // @Override
    doExecute: function(flow, context) {
        // TODO command
        var operations = [];
        for(var i = 0; i < flow.length; i++) {
            var action = flow[i];
            var ctx = {
                operations: []
            };
            ctx = Ext.apply(ctx, context);
            // TODO apply
            var r = action.execute(ctx);
            // 如果是false中断执行
            if(Ext.isBoolean(r) && !r)
                break;
            Ext.Array.push(operations, ctx.operations);
        }
        this.doOperations(operations);
    },

    doOperations: function(operations) {
        for(var i = 0; i < operations.length; i++) {
            var operation = operations[i];

            // 从URL取得查找数据模型的关键信息
            var keyInfo = this.parseUrlToKeyInfo(operation.url);
            var dm = this.findDataModel(keyInfo);
            // 假设数据模型对象已经在应用初始化时被创建，因此程序中不应该出现运行时创建模型对象的代码

            // TODO如果没有找到数据模型对象，则创建一个新的
            /*
            if(!dm) {
                dm = dmgr.createDataModel({
                    key: keyInfo.baseUrl,
                    mclass: operation.mclass
                });
            }
            */

            if(!dm)
                // TODO log 没找到模型对象
                return;

            if('save' == operation.method) {
                dm.save({
                    data: operation.data
                });
            }
            else if ('get' == operation.method) {
                var r = dm.get({
                    condition: keyInfo.query
                });
                operation.result = r;
            }
            // TODO 区分成功和失败
            this.doOperationCallback(operation);
        }
    },

    parseUrlToKeyInfo: function(url) {
        var strings = url.split('?');
        var baseUrl = null;
        var query = null;
        if(strings.length >= 1) {
            baseUrl = strings[0];
        }
        if(strings.length > 1) {
            var queryString = strings[1];
            query = Ext.Object.fromQueryString(queryString);
        }
        var keyInfo = {
            baseUrl: baseUrl,
            query: query
        }
        return keyInfo;
    },

    findDataModel: function(keyInfo) {
        var dmgr = Xap.ej.data.DataManager;
        var baseUrl = keyInfo.baseUrl;
        var paths = baseUrl.split('/');
        if(paths.length > 0) {
            var i = 0;
            var path = paths[i++];
            do {
                var dm = dmgr.getDataModel(path);
                // 找到了
                if(dm) {
                    return dm;
                }
                path = path + '/' + paths[i++];
            }
            while(i <= paths.length);
        }
        return null;
    }
});
Ext.define('Xap.ej.action.Chain', {
               
                              
                                          
      

    inheritableStatics: {
        setExecutor: function(executor) {
            this.executor = this.prototype.executor = executor;
            return executor;
        },

        getExecutor: function() {
            var executor = this.executor;
            if(!executor) {
                executor = this.prototype.executor;
            }
            // TODO 默认Executor
            /*
            if(!executor) {
                this.executor = this.setExecutor(Xap.create({
                    xclass: 'Xap.ej.action.LocalChainExecutor'
                }));
            }*/
            return executor;
        }
    },

    constructor: function() {
        this.callParent(arguments);
        this.phases = {},
        // 初始化
        this.createPhase('default');
    },

    findExecutor: function() {
        var clazz = Xap.ej.action.Chain;
        return clazz.getExecutor();
    },

    /*
    * 追加Action
    * @param obj 单个Action或者带有阶段信息的对象
    */
    addAction: function(obj) {
        if(!obj) {
            return;
        }
        var phase = null;
        var action = null;
        // 是单个Action对象
        if(!obj.phase) {
            phase = this.getPhase('default');
            action = obj;
        }
        else {
            phase = obj.phase();
            action = obj.action();
        }
        phase.addAction(action);
    },

    /*
    * 追加Chain
    * @param obj 单个Chain或者带有阶段信息的对象
    */
    /*addChain: function(obj) {
        if(!obj) {
            return;
        }
        var phase = null;
        var chain = null;
        // 是单个Action对象
        if(!obj.phase) {
            phase = getPhase('default');
            chain = obj;
        }
        else {
            phase = obj.phase();
            chain = obj.chain();
        }
        phase.addChain(phase.getSize(), chain);
    },*/

    setChain: function(i, obj) {
        if(!obj || i < 0) {
            return;
        }
        var phase = null;
        var chain = null;
        // 是单个Action对象
        if(!obj.getPhase) {
            phase = getPhase('default');
            chain = obj;
        }
        else {
            phase = obj.getPhase();
            chain = obj.getChain();
        }
        phase.insertChain(i, action);
    },

    /*
    * 覆盖Action
    * @param obj 单个Action、Action链条或者带有阶段信息的对象
    * 如果没有阶段信息，则认为需要添加到default阶段
    */
    setAction: function(i, obj) {
    },

    getPhase: function(pn) {
        // 无效的参数，直接返回
        if(!pn || pn.length <= 0) {
            return null;
        }

        if(!this.phases) {
            this.phases = {};
        }
        if(!this.phases[pn]) {
            createPhase(pn);
        }
        return this.phases[pn];
    },

    getPhases: function() {
        return this.phases;
    },

    createPhase: function(pn) {
        if(Ext.isString(pn) && !Ext.isEmpty(pn)) {
            this.phases[pn] = Xap.create({
                xclass: 'Xap.ej.action.Phase',
                name: pn
            });
        }
    },

    execute: function(context) {
        var executor = this.findExecutor();
        executor.execute(this, context);
        /*for(var pn in this.phases) {
            var phase = this.phases[pn];
            phase.execute(context);
        }*/
    },

    getActionByClass: function(cls) {
        if(!cls) {
            return null;
        }
        var phase = this.getPhase('default');
        var actions = phase.getActions();
        for(var i = 0; i < actions.length; i++) {
            var action = actions[i];
            var r = null;
            if(action instanceof Xap.ej.action.Chain) {
                r = action.getActionByClass(cls);
            }
            else {
                var cn = Ext.getClassName(action);
                if(cn == cls) {
                    r = action;
                }
            }
            if(r) {
                return r;
            }
        }
        return null;
    }
});
Ext.define('Xap.ej.platform.ExtensionPoint', {
	extensions: [],

	name: null,

	getName: function() {
		return this.name;
	},

	setName: function(name) {
		this.name = name;
	},

	addExtension: function(ext) {
		if(Ext.isArray(ext)) {
			this.extensions = this.extensions.concat(ext);
		}
		else {
			this.extensions.push(ext);
		}
	},

	getExtensions: function() {
		return this.extensions;
	}
})
Ext.define('Xap.ej.platform.Plugin', {
	                                             

	statics: {
		points: {},

		getExtensionPoint: function(name) {
			return this.points[name];
		},

		addExtensionPoint: function(ep) {
			if(ep instanceof Xap.ej.platform.ExtensionPoint) {
				this.points[ep.getName()] = ep;
			}
		},

		load: function(plugins) {
			if(Ext.isArray(plugins)) {
				for(var i = 0; i < plugins.length; i++) {
					var pluginName = plugins[i];
					if(pluginName) {
						var p = Xap.create(pluginName);
						p.init();
					}
				}
			}
		}
    },

	constructor: function() {
		// 配置Plugin的时候，应该已经把依赖的类Require了
		var extensions = this.pluginConfig.extensions;
		for(var name in extensions) {
			this.createExtensionPoint(name, extensions[name]);
		}
    },

    createExtensionPoint: function(name, extPointConfig) {
    	var plugin = Xap.ej.platform.Plugin;
    	var ep = plugin.getExtensionPoint(name);
    	if(name && !ep) {
    		// TODO 用new关键字？
    		ep = new Xap.ej.platform.ExtensionPoint();
    		ep.setName(name);
    		plugin.addExtensionPoint(ep);
    	}
    	ep.addExtension(extPointConfig);
    },

	getExtensions: function(extPointName) {
		var plugin = Xap.ej.platform.Plugin;
		var extPoint = plugin.getExtensionPoint(extPointName);
		if(extPoint) {
			return extPoint.getExtensions();
		}
	},

	init: Ext.emptyFn
})
Ext.define('Xap.ej.block.LayerFactory', {
	            
		                        
	  

	singleton: true,

	createLayer: function(name, owner) {
		if(!name) 
			return;
		if(!this.creators) {
			this.creators = {};
		}
		var creator = this.creators[name];
		if(!creator) {
			creator = this.findCreator(name);
		}
		if(!creator) {
			creator = this.findCreator('default');
		}
		var layer = creator.create();
		layer.setOwner(owner);
		return layer;
	},

	findCreator: function(name) {
		var plugin = Xap.ej.platform.Plugin;
		var ep = plugin.getExtensionPoint('xap.core.block.layer.creators');
		var result = null;
		if(ep) {
			var exts = ep.getExtensions();
			for(var i = 0; i < exts.length; i++) {
				var config = exts[i];
				if(config.xclass && config.name && config.name == name) {
					var creator = Xap.create(config);
					this.creators[creator.name] = creator;
					result = creator;
					break;
				}
			}
		}
		else {
			if(!this.defaultCreator) {
				this.defaultCreator = Xap.create({
					xclass: 'Xap.ej.block.DefaultLayerCreator'
				});
			}
			result = this.defaultCreator;
		}
		return result;
	}
});
Ext.define('Xap.ej.block.Block', {
	extend :  Ext.container.Container ,

	alias : 'widget.xapblock',

	            
		                              
		                      
		                           
	  

	initComponent : function() {
		this.callParent();
		this.initBlock();
		this.refreshLayers();
	},
	/*
	 * 打开等待遮罩层
	 * author chenyajie
	 */
	openMask : function() {
		this.getEl( ).mask('正在处理中，请稍候......'); 
	},
	/*
	 * 关闭等待遮罩层
	 * author chenyajie
	 */
	closeMask : function() {
		this.getEl( ).unmask(); 
	},
	/*
	 * 初始化Block，考虑在afterrender事件后需要进行事件绑定时被调用
	 */
	initBlock : Ext.emptyFn,

	refreshLayers: Ext.emptyFn,

	getData : Ext.emptyFn,

	setData : Ext.emptyFn,

	getLayer: function(name) {
		if(!name)
			return null;
		if(!this.layers) {
			this.layers = {};
		}
		var l = this.layers[name];
		// canvas层是全局的
		if(!l) {
			// TODO 插件Layer工厂
			var layerFactory = Xap.getLayerFactory();
			l = layerFactory.createLayer(name, this);
			this.layers[name] = l;
		}
		return l;
	},

	isValid : Ext.emptyFn,

	connect : function() {
		var obj, event, chain;
		var length = arguments.length;
		if(length >= 3) {
			var selector = arguments[0];
			obj = this.down(selector);
			event = arguments[1];
			chain = arguments[2];
		}
		else if(length == 2) {
			obj = this;
			event = arguments[0];
			chain = arguments[1];
		}
		/* var obj = this.down(selector);
		if(!obj) {
			obj = this;
		}*/
		if(!event || !chain)
			// TODO log
			return;
		// TODO 避免重复监听一个事件
		obj.on(event, function() {
			Xap.debug('Event[' + event + '] begin...');
			chain.execute({
				event: {
					from: obj,
					name: event,
					arguments: arguments
				}
			});
			Xap.debug('Event[' + event + '] end.');
		});
	},

	// TODO 实现
	disconnect : Ext.emptyFn
});
Ext.define('Xap.ej.block.PropertyBlock', {
	extend :  Xap.ej.block.Block ,

	alias : 'widget.xappropertyblock',

	getData : function() {
		return this.properties;
	},

	setData : function(data) {
		if(data) {
			if(!this.properties) {
				this.properties = {};
			}
			this.properties = Ext.apply(this.properties, data);
		}
	}
});
Ext.define('Xap.ej.config.Configable', {
                                           
    
    doCheckXapConfig: Ext.emptyFn,

    doXapConfig: function() {
        var config = this.doXapConfigMerge();
        this.doBlockConfig(config);
        this.doActionConfig(config);
        this.doChainConfig(config);
        this.doConnectionConfig(config);
    },

    doXapConfigMerge: function() {
        var config = Ext.clone(this.xapConfig);
        // 合并默认的配置
        if(this.defaultXapConfig) {
            var dc = Ext.clone(this.defaultXapConfig);
            config = Ext.merge(dc, config);
        }
        return config;
    },

    doBlockConfig: function(config) {
        var blockConfig = config.blocks;
        for(var bn in blockConfig) {
            var bc = blockConfig[bn];
            bc.xapId = bn;
            var block = Xap.create(bc);
            this.add(block);
            this.addBlock(bn, block);
        }
        // 添加一个默认的properties块
        var pb = this.getBlock('properties');
        if(!pb) {
            pb = Xap.create({
                xclass: 'Xap.ej.block.PropertyBlock'
            })
            this.addBlock('properties', pb);
        }
    },

    doActionConfig: function(config) {
        var af = Xap.ej.action.ActionFactory;
        var actionConfig = config.actions;
        for(var an in actionConfig) {
            var ac = actionConfig[an];
            // TODO 添加新属性都要修改这里，稍显繁琐，需要更好的方式
            // TODO action配置里的blocks属性怎么办？目前直接加到Ext.create里去了，有点儿风险
            var action = af.createAction(ac);
            action.owner = this;
            /*
            var action = af.createAction({
                xclass: ac.xclass,
                url: ac.url
            });
            */
            this.doActionBlockConfig(action, ac);
            // TODO
            this.addAction(an, action);
        }
    },

    doActionBlockConfig: function(action, actionConfig) {
        var blocks = actionConfig.blocks;
        for(var k in blocks) {
            var b = this.getBlock(blocks[k]);
            if(!b)
                continue;
            action.addBlock(k, b);
        }
    },

    doChainConfig: function(config) {
        var af = Xap.ej.action.ActionFactory;
        var chainConfig = config.chains;
        for(var cn in chainConfig) {
            var cc = chainConfig[cn];
            // 根据名称创建Chain
            var chain = af.createChain({
                name: cn
            });

            for(var i = 0; i < cc.length; i++) {
                var action = this.getAction(cc[i]);
                chain.addAction(action);
            }
            this.addActionChain(cn, chain);
        }
    },

    doConnectionConfig: function(config) {
        var connectionConfig = config.connections;
        for(var bn in connectionConfig) {
            var block = this.getBlock(bn);
            var cc = connectionConfig[bn];
            for(var i = 0; i < cc.length; i++) {
                var c = cc[i];
                var chain = this.getActionChain(c.chain);
                if(c.selector) {
                    block.connect(c.selector, c.event, chain);
                    /*
                    block.on('afterrender', function() {
                        block.connect(c.selector, c.event, chain);
                    }
                  );*/
                }
                else {
                    block.connect(c.event, chain);
                }
            }
        }
    },

    addAction: function(name, action) {
        if (Ext.isString(name)) {
            this.actions[name] = action;
        }
    },

    getAction: function(name) {
        return this.actions[name];
    },
    
	addActionChain : function(name, chain) {
		if (Ext.isString(name)) {
			this.chains[name] = chain;
		}
	},

	/*
	 * 返回当前Block关联的Action @param action的名字
	 */
	getActionChain : function(name) {
		return this.chains[name];
	},

    getBlock: function(name) {
        return this.blocks[name];
    },

    addBlock: function(name, block) {
        if(name && block) {
            this.blocks[name] = block;
        }
    }
});

Ext.define('Xap.ej.template.BaseTemplate', {
    extend:  Xap.ej.block.Block ,

                                           

    alias: 'widget.xapbasetemplate',

    border: 0,

    mixins: [ Xap.ej.config.Configable ],

    initBlock: function() {
        this.callParent();
        this.actions = {};
        this.chains = {};
        this.blocks = {};
        if(this.doCheckXapConfig) {
            this.doCheckXapConfig();
        }
        this.doXapConfig();
    }
});


/** 
 *
 * 一个用于简化列定义的子类，适用于日期类型的渲染。 默认转换为本地化的时间，也可配置format属性。
 * @extends Ext.grid.column.Date
 * 
 * @author ：chenyajie<chen_yajie@founder.com>
 **/

Ext.define('Xap.ej.element.grid.column.Date', {
	extend :  Ext.grid.column.Date ,
	alias : ['widget.xapdatecolumn'],
	//默认格式化格式
	format:'Y-m-d H:i',
	renderer: function(value, cellmeta, record, rowIndex, colIndex, store){
		if (value) {
			if (Ext.isNumber(value)) {
				value = new Date(value);
				return Ext.util.Format.date(value, 'Y-m-d H:i');
			}
			return value;
		}
	}
});

/** 
 *
 * 复选框
 * @extends Ext.form.field.Checkbox
 * @author：chenyajie<chen_yajie@founder.com>
 * 
 *
 */
Ext.define('Xap.ej.element.field.Checkbox', {
	extend:  Ext.form.field.Checkbox ,
	alias: 'widget.xapcheckbox'
});

/** 
 * 
 * @extends Ext.button.Button
 * 按钮 
 * @author ：chenyajie<chen_yajie@founder.com>
 */ 
Ext.define('Xap.ej.element.button.Button', {
	extend:  Ext.button.Button ,
	alias: 'widget.xapbutton'
});
/*
 * 本地化类
 */
Ext.define('Xap.ej.locale.Locale', {
	locale: null,
	
	constructor: function() {
		if (window.locale) {
			this.locale = window.locale;
			try {
				//ie下删除会有问题，故而加入到try-catch
				delete window.locale;
			} catch (e) {
				
			}
		}
	},
	
	get: function(subClass, key, values) {
		var result = '';
		if (this.locale && this.locale[subClass]) {
			//从文件获得
			var subClass = this.locale[subClass];
			result = subClass[key] || '';
		} else {
			var i18n = 'i18n_' + (navigator.language || navigator.systemLanguage);
			if (window.iemr && window.iemr.extensions && window.iemr.extensions[i18n]) {
				//从扩展点获得
				i18n = window.iemr.extensions[i18n];
				for (var i = 0; i < i18n.length; i++) {
					var lang = i18n[i];
					if (lang[subClass]) {
						result = (lang[subClass])[key] || '';
						break;
					}
				}
			}
		}
		if (Ext.isFunction(result)) {
			result = result.call(null, values);
		} else if (values) {
			result = result.replace(/\{(\d+)\}/g, function(m, i) {
	            return values[i];
	        });
		}
		
		return result;
	}
}, function() {
	window.XapLocale = Ext.create('Xap.ej.locale.Locale');
});
/** 
 * 基本Store
 * @extends Ext.data.Store
 * @author ：chenyajie<chen_yajie@founder.com>
 * 
 *
 */
Ext.define('Xap.ej.element.store.Store', {
	extend:  Ext.data.Store ,
	alias: 'widget.xapstore',
	
	/**     
	* 得到该Store的数据
	* @return object [{},{}] 
	*/
	getData:function(){
		var arr = [];
		this.each(function(record) {
			arr.push(record.getData());
		});
		return arr;
    },
	/**     
	* 给该Store赋新值  
	* @param {data} [{},{}] 
	*/
	setData:function(data){
		this.loadData(data);
    }
});
/** 
 *
 * 下拉列表
 * @extend: 'Ext.form.field.ComboBox'
 * @author：chenyajie<chen_yajie@founder.com>
 *
 *## example xapcombobox
 *     @example 
 *     xtype: 'xapcombobox',			
 *     dictionary: 'sex',			
 *     comboData: [			
 *          {"value":"1", "text":"男"},		
 *          {"value":"2", "text":"女"}		
 *     ]			
 *	
 *
 */
 

Ext.define('Xap.ej.element.field.ComboBox', {
	extend:  Ext.form.field.ComboBox ,
	alias: 'widget.xapcombobox',
	          
		                            
	  
	/** 
     * @cfg {String} 为该ComboBox指定字典类型。
     */ 
	dictionary: null,
	
	/** 
     * @cfg {String} 为该ComboBox指定默认值。
     */ 
	comboVal: null,
	
	/** 
     * @cfg {object} 指定本地数据集
	 * [
	 * {"value":"AL", "text":"Alabama"},
	 * {"value":"AZ", "text":"Arizona"}
	 * ]
     */ 
	comboData : [],
	
	/** 
     * @cfg {String} ComboBox加载本地数据
     */
	queryMode: 'local',
	/** 
     * @cfg {boolean} 全部选项
     */
	allOptions: false,
	/** 
     * @cfg {String} 相关的数据域名称绑定到ComboBox。
     */
	displayField: 'text',
	/** 
     * @cfg {String} 相关的数据值名称绑定到ComboBox。
     */
	valueField: 'value',
	/** 
     * @cfg {Boolean} 是否根据选择的单选框查询表格数据。
     */
	isGridQuery:false,
	
	initComponent: function() {
		//显示全部选项
		if(this.comboData&&this.allOptions){
			var allOption = {};
			allOption[this.displayField] = "全部";
			allOption[this.valueField] = "ALL";
			//console.log( Ext.Array.contains(Ext.Array.pluck(this.comboData,this.valueField),"ALL"));
			this.data = Ext.Array.clone(this.comboData);
			this.data.unshift(allOption);
			
		}else{
			this.data = Ext.Array.clone(this.comboData);
		}
		
		if(!this.store){
			//初始化Store
			this.initStore();
		};
		if(this.isGridQuery){
			this.on("change",this.comboBoxChange,this);
		}
        this.callParent(arguments);
		
        this.on("afterrender",this.after_render,this);
		
    },
	/** 
     * 初始化完成
     */ 
    after_render:function(boolean){
    	if(this.comboVal){
			this.value = this.comboVal;
		}
    },
	/** 
     * 如果只读时，设置样式为灰色
     */ 
    setReadOnly:function(boolean){
    	this.callParent(arguments);
		if(boolean){
			this.addCls("readOnlyCss");
		}else{
			this.removeCls("readOnlyCss");
		};
    },
	/** 
     * 触发表格查询事件
     */ 
    comboBoxChange:function(){
    	this.up('xapform').fireEvent("gridquery",this);
    },
	/**     
	* 初始化Store 
	* @param {object} [{},{}] 
	*/
	initStore:function(){
		var fields = [this.displayField,this.valueField];
		this.store = Ext.create('Xap.ej.element.store.Store', {
			fields: fields,
			data : this.data
		});
    },
	/**     
	* 选中第几个
	* @param {number} 
	*/
	selectAt:function(num){
		this.select(this.getStore().getAt(num));
    },
	/**     
	* 根据value选中
	* @param {string}
	*/
	selectByValue:function(val){
		this.select(this.getStore().findRecord(this.valueField,val));	
    },
	/**     
	* 给该ComboBox赋新值  
	* @param {object} [{},{}] 
	*/
	setData:function(data){
		if(this.allOptions){
			var allOption = {};
			allOption[this.displayField] = "全部";
			allOption[this.valueField] = "ALL";
			data.unshift(allOption);
		}
    	this.store.setData(data);
		if(this.comboVal){
			this.selectByValue(this.comboVal);
		}
    },
	/**     
	* 获得该ComboBox所有值  
	* @return {object} [{},{}] 
	*/
	getData:function(){
		var data=this.store.getData();
		if(this.allOptions){
			var redata=data.shift();
		}
    	return data;
    }
});
/*
* 块（Block）由多个层次（Layer）组成，目前一般只有一个层次
*/
Ext.define('Xap.ej.block.Layer', {
	requires : [],

	statics: {
		PROPERTIES: 'properties',

		CANVAS: 'canvas',

		DICTIONARY: 'dictionary',

		DEFAULT: 'default'
	},

	// 取得所有者，其实就是块（Block）
	getOwner: function() {
		return this.owner;
	},

	// 设置所有者
	setOwner: function(owner) {
		this.owner = owner;
	},

	// 取得数据
	getData: function() {
		return this.data;
	},

	// 设置数据
	setData: function(data) {
		if(!this.data) {
			this.data = {};
		}
		
		if(data) {
			this.data = Ext.apply(this.data, data);
		}
	},

	// 绘制，通常是根据数据（Data）向所在（Owner）绘图
	render: Ext.emptyFn
});
Ext.define('Xap.ej.action.IntelligentInputAction', {
	extend:  Xap.ej.action.ServiceInvocation ,

                                     

    doExecute: function(context) {
        this.prepareOperations(context);
    },

    prepareOperations: function(context) {
        var operations = context.operations;
        if(!operations) 
            return;
        var params = context.params;
        if(params && params.length >= 1) {
            var param = params[0];
            if(param) {
                var url = context.url;
                url += '?' + Ext.Object.toQueryString(param);
                var operation = {
                    url: url,
                    method: 'get',
                    scope: this,
                    success: this.onSuccess,
                    // TODO 更好的Callback方案，目前的实现只是为了跑通
                    callback: context.callback
                };
                operations.push(operation);
            }
        }
    },

    onSuccess: function(operation) {
        var result = operation.result;
		var data;
		if(Ext.isArray(result.dataList)) {
			data = result.dataList;
		};
		if(!Ext.isEmpty(result.data,false)) {
			data = result.data;
		};
		if(Ext.isArray(result) && Ext.isEmpty(result.data,false) && !Ext.isArray(result.dataList)) {
            var data = {};
            for(var i = 0; i < result.length; i++) {
                var d = result[i];
                if(d.id) {
                    data[d.id] = d;
                }
            }
        };
        if(operation.callback && Ext.isFunction(operation.callback)) {
			operation.callback(data);
		}
    }
});

/** 
 *
 * 联想多列下拉框，选中下拉框值时会触发combochange带newValue, oldValue, 和recordData参数;并执行callback函数。
 * @extend: 'Ext.form.field.ComboBox'
 * @author：chenyajie<chen_yajie@founder.com>
 * 
 *
 */
Ext.define('Xap.ej.element.field.ComboBoxGrid', {
	extend:  Ext.form.field.ComboBox ,
	alias: 'widget.comboxgrid',
	          
		                             
		                                      
	  
	/** 
     * @cfg {String} 为该ComboBox指定字典类型。
     */ 
	dictionary: null,
	url: null,
	gridPageSize: 20,
	//是否可编辑
	editable : this.editable||true,
	//ComboBox加载数据方式
	queryMode : 'local',
    //放置到空表单项中的默认文本
    emptyText : this.emptyText||"请输入",
    allowBlank : this.allowBlank||true,
    //如果 allowBlank 校验失败时需要显示的出错信息
    blankText : this.blankText||"必须输入!",
    //当触发器被点击时需要执行的操作。 
    triggerAction : 'all',
	width : 150,
	//联想结果宽度
	listWidth : null,
    displayField : 'text',
    valueField : 'value',
	//点击行数据
	comboRecord : null,
    //隐藏值 只有被展开并选定值时才重置该值
    comboxHiddenValue : null,
	//失去焦点时 赋值
	blurSetValue : false,
	//combo父组件 如果指定 让该父组件抛出事件
    parentXtype : null,
    //查询的字段 默认按照displayField 如果不是searchParam : ['',''],
    searchParam : null,
    tpl : '',
    grid: null,
    //默认显示grid表头
    hideHeaders : false,
    columns: [],
	//键盘监听启用
	enableKeyEvents : true ,
	//设置键按起时进行查询
	listEmptyText: true ,
	//第一次时，先有'steel-id' DOM 再render render以后改为false
	first : true ,
	//用于本地setData
	comboData : null,
	//下拉选择器(picker)的宽度是否要准确地和表单项的宽度一致。默认值是true。
	matchFieldWidth : false,
    
    onSelect : Ext.emptyFn,
	initComponent : function() {
		var me = this;
		//初始化Store 
		this.store = Ext.create('Xap.ej.element.store.Store', {
			fields: [],
			data : [[]]
		});
		
		this.tpl = "<tpl for='.'><div id='steel-"+this.getId()+"'></div></tpl>";
		
		
		//初始化grid
		this.init_grid();
		//如果单列显示结果信息 宽度跟下拉框对齐
		if(me.hideHeaders||!this.listWidth){
			me.matchFieldWidth = true;
		}
		//监听展开事件
		this.on('expand',this.expandEvent,this);
		//监听键盘按下
		this.on('keydown',this.keydownEvent,this);
		this.on('keyup',this.keyup,this);
		//监听change事件
		this.on('change',this.changeEvent,this);
		//监听失去焦点事件
		this.on('blur',this.blurEvent,this);
		this.callParent(arguments);
	},
	/**     
	* 初始化grid
	*/
	init_grid: function() {
		var me = this;
		this.grid = Ext.create('Xap.ej.element.grid.Grid', {
			height : 200,
        	searchBar: true,
        	checkBox : false,
			pageComboxButton: false,
			//分页条的刷新按钮是否显示 
			pageRefreshButton : false,
			hideHeaders : me.hideHeaders,
			gridData : me.gridData,
			CM_JR_Record:me.columns
		});
		//如果非单列显示结果信息 宽度按指定宽度
		if(!me.hideHeaders){
			this.grid.width = me.listWidth;
		}
		//给grid注册rowclick事件
        this.grid.on('itemclick', me.grid_itemclick,this);
		//给grid注册cellkeydown事件
        this.grid.on('cellkeydown', me.grid_cellkeydown,this);
	},
	/**     
	* 给grid注册rowclick事件
	*/
	grid_cellkeydown: function(grid, td, cellIndex, record, tr, rowIndex, e, eOpts) {
		console.log('grid_cellkeydown');
		var me = this;
		//处理回车按键 让combox选择选中数据
		if('13'==e.getKey()){
			this.combox_select(record,rowIndex);
		}
	},
	/**     
	* 给grid注册rowclick事件
	*/
	grid_itemclick: function(grid,record,item, rowIndex, e) {
		console.log('grid_itemclick');
		var me = this;
		this.combox_select(record,rowIndex);
	},
	/**     
	* 让combox选择选中数据
	*/
	combox_select: function(record,rowIndex) {
		var me = this;
		if(me.fireEvent('beforeselect', me, record, rowIndex) !== false){
			me.collapse();
			//me.fireEvent('select', me, record, rowIndex);
			me.callback(record.data[me.valueField],me.comboxHiddenValue,record.raw);
			me.setRecordData(record.data);
		}
	},
	
	/**     
	* 得到选中的值
	*/
	getValue: function() {
		return this.comboxHiddenValue;
	},
	getSubmitValue: function() {
		return this.comboxHiddenValue;
	},
	reset: function() {
		var record = {};
		record[this.valueField] = '';
		record[this.displayField] = '';
		this.setRecordData(record);
	},
    /**     
	* overwrite 
	* 
	*/
	doQuery: function(q, forceAll) {
		//判断是否已展开
    	if(this.isExpanded){
    		this.collapse();
    	}
        this.expand();
		//第一次时，先有'steel-id' DOM 再render
		if(this.first){
			this.grid.render('steel-'+this.getId());
			//判断是否已展开
			if(this.isExpanded){
				this.collapse();
			}
			this.expand();
			this.first = false;
		}
		
	},
	
	/**     
	* 监听展开事件 执行的方法
	* 
	*/
	expandEvent : function(){
		//如果本地setData
		if(this.comboData){
			this.grid.setData(this.comboData);
		};
		var me = this;
		var component = this.getGrid();
		if(!this.getRawValue() && this.getData().length==0){
			if(this.dictionary){
				var searchObject={
					dictionary: this.dictionary,
					searchParam: this.searchParam||[this.displayField],
					searchValue: this.getRawValue()
				};
				if(this.parentXtype){
					this.up(this.parentXtype).fireEvent('combochange',searchObject,this);
				}
			}else{
				var chain = this.getChain();
				var param = {
					'pageSize': this.gridPageSize
				};
				Ext.apply(param,this.searchParam||{});
				chain.execute({
					operations: [],
					params: [param],
					url: this.url,
					callback: function(data) {
						if(data) {
							component.setData(data);
						}
					}
				});
			}
		}
	},
	
	/**     
	* 监听按键 执行的方法
	*/
	keydownEvent : function(me,e){
		//监听按下40键 自动选中第一行
		this.submitQuery = false;
		if(e.getKey()==40){
			var count = this.grid.getStore().getCount();
			if(count>0){
				this.grid.selectFirstRange();
			}
		}
	},
	/**     
	* 监听按键 执行的方法
	*/
	keyup : function(){
		var me = this;
		//如果文本框时，全部值，制空
		if(!this.getRawValue()){
			this.reset();
		}
		if(this.dictionary){
			var searchObject={
				dictionary: this.dictionary,
				searchParam: this.searchParam||[this.displayField],
				searchValue: this.getRawValue()
			};
			if(this.parentXtype){
				this.up(this.parentXtype).fireEvent('combochange',searchObject,this);
			}
		}else{
			this.submitQuery = true;
			setTimeout(function(){
				me.submit();
			},500);
		}
		this.fireEvent('combochange',this);
	},
	
	/**     
	* 监听change事件 执行的方法
	*/
	changeEvent : function( v, newValue, oldValue, eOpts ){
		console.log('newValue:'+newValue+',oldValue:'+oldValue+',RecordData:'+this.getRecord().data);
		/*var searchObject={
			dictionary: this.dictionary,
			searchParam: [this.displayField],
			searchValue: this.getRawValue()
		}*/
		//this.fireEvent('inputchange',searchObject);
		//this.fireEvent('combochange',newValue,oldValue,this.getRecord().data,searchObject);
		//this.callback(newValue,oldValue,this.getRecord().data);
		
	},
	
	/**     
	* 监听失去焦点事件 执行的方法
	*/
	blurEvent : function(combo, the, eOpts){
		console.log('blurEvent');
		if(this.blurSetValue){
			combo.comboxHiddenValue = combo.getRawValue();
		}
	},
	
	/**     
	* 得到该grid
	* 
	* @return grid 
	*/
	getGrid : function(){
		return this.grid;
	},
	
	/**     
	* 给该combo赋新值  
	* @param {data} [{},{}] 
	*/
	setData : function(data){
		this.comboData = data;
		this.doQuery();
		this.expand();
	},
	/**     
	* 获取该combo 数据 
	* @param {data} [{},{}] 
	*/
	getData : function(){
		var data = [];
		if(this.getGrid().getData()){
			data = this.getGrid().getData();
		}
		
		return data;
	},
	/**     
	* 该combo改变值后 回调函数 
	* @param {newValue} 
	*/
	callback : function(newValue,oldValue,record){
		
	},
	
	/**     
	* 得到选中行的Record，隐藏值也可以从这里取。
	* export JAVA_LIBRARY_PATH=$HADOOP_HOME/lib/native
	* @return Record 
	*/
	getRecord : function(){
		return this.comboRecord;
	},
	/**     
	* 给该combo赋新Record值  
	* @param {Object} {} 
	*/
	setRecordData : function(record){
		console.log(record);
		console.log(record[this.valueField]);
		console.log(record[this.displayField]);
		this.comboRecord = record;
		this.comboxHiddenValue = record[this.valueField];
		this.setRawValue(record[this.displayField]);
	},	
	/**     
	* 给该combo赋新值  
	* @param {String}  
	*/
	setValue : function(v){
		console.log('setValue: '+v);
		//this.callParent(arguments);
        //this.value = v;
		var me = this;
		var component = this.getGrid();
		if(v){
			var chain = this.getChain();
			var param = {
				'id': v
			};
			console.log(param);
			chain.execute({
				operations: [],
				params: [param],
				url: this.url,
				callback: function(data) {
					if(data && data.length > 0) {
						me.setRecordData(data[0]);
						component.setData(data);
					}
				}
			});
		}
		//this.fireEvent('combochange',this);
        return this;
    },
	
	submit: function() {
		if(this.submitQuery){
			var me = this;
			var component = this.getGrid();
			var chain = this.getChain();
			var param = {
				'keyword': this.getRawValue(),
				'pageSize': this.gridPageSize
			};
			Ext.apply(param,this.searchParam||{});
			chain.execute({
				operations: [],
				params: [param],
				url: this.url,
				callback: function(data) {
					if(data) {
						component.setData(data);
						if(data.length==1)
							me.setRecordData(data[0]);
					}
				}
			});
		}
	},

	getChain: function() {
		if(!this.chain) {
			// TODO 构造函数创建
			this.chain = Xap.create({
				xclass: 'Xap.ej.action.Chain'
			});
			var action = Xap.create({
				xclass: 'Xap.ej.action.IntelligentInputAction'
			});
			this.chain.addAction(action);
		}
		return this.chain;
	}
});
/** 
 *
 * 表单
 * @extends Ext.form.Panel
 * @author ：chenyajie<chen_yajie@founder.com>
 * 
 *
 */
Ext.define('Xap.ej.element.form.Form', {
	extend:  Ext.form.Panel ,
	alias: 'widget.xapform',
	          
		                       
		                                
		                                   
	  
	gridData:null,
	
	initComponent: function() {
		//初始化参数
		this.inti_param();
		//用于更改表单元素 让grid查询 by zhangdan
		this.on("gridquery",this.gridQuery,this);
		//初始化combo
        this.init_combo(this.items);
        this.callParent(arguments);
		//初始化后给combo赋值
		this.addListener('afterrender',this.set_combox_data);
    },
	/**     
	* 初始化combo
	*/
	init_combo:function(items){
		var me = this;
		Ext.each(items, function (item, index)
		{
			//是否主数据
			if(item.dictionary){
				//是否已存在comboboxs中
				if(me.comboboxs[item.dictionary]){
					items[index] = me.comboboxs[item.dictionary];
				}else{
				    var combo ;
					if('xapcombobox'==item.xtype){
						combo = Ext.create("Xap.ej.element.field.ComboBox", items[index]);
						me.comboboxs[item.dictionary] = combo;
					}else if('comboxgrid'==item.xtype){
						combo = Ext.create("Xap.ej.element.field.ComboBoxGrid", items[index]);
					}
					items[index] = combo;
				}
			}
		});
	},
	/**
	 * 给combobox赋值
	 */
	inti_param : function() {
		// 用于记录combobox
		this.comboboxs = {};
	},	
	/**
	 * 给combobox赋值
	 */
	set_combox_data : function() {
		var xapcomboboxs = this.query("xapcombobox");
		if(xapcomboboxs){
			this.fireEvent('comboxready',this.comboboxs);
		}
		/*var comboData = [ 
			{"value":"1","text":"佚名"},
			{"value":"2","text":"管理员"},
			{"value":"3","text":"编辑"},
			{"value":"4","text":"总编辑"},
			{"value":"5","text":"测试员"}
		];
		console.log('---************----');
		for (var combobox in this.comboboxs){
		console.log(combobox);
			this.comboboxs[combobox].setData(comboData);
		}*/
		
	},	
	/** 
     * 给form赋值
	 * @param {object} 
     */ 
    setData:function(data){
    	var me = this;
    	me.getForm( ).setValues(data);
    },
	/** 
     * 获取form值
	 * @return object 
     */ 
    getData:function(){
    	var me = this;
    	return me.getForm( ).getValues( );
    },
    /** 
     * 根据选择条件查询grid 
     */ 
    gridQuery:function(e){
    	var me = this;
    	//得到form中的值
    	var values = me.getValues();
    	//得到grid
    	var xapgrid = this.up('panel').down('xapgrid');
    	if(!this.gridData){
    		this.gridData = xapgrid.getData();
    	}
    	var newStore = Ext.Array.clone(this.gridData); 
    	Ext.Array.each(this.gridData,function(record, idx) {
    		for(var parm in values ){
    			if(values[parm]!=''){
	    			if(record[parm]!=values[parm]){
	    				Ext.Array.remove(newStore,record); 
	    			}
    			}	
    		}
        },me);
        xapgrid.setData(newStore);
    }
});

/*
 * 范围组件开始值验证
 */
Ext.apply(Ext.form.field.VTypes, {

	requires: ['Xap.ej.locale.Locale'],

	cStartValue: null,
	
	cStartField: null,
	
	startValueText: '开始值不能大于结束值',
	
	startValue: function(value, field) {
    	var me = this;
    	if (this.cStartValue == value && this.cStartField == field) return field.wasValid;
    	field.validateOnBlur = false;
    	this.cStartValue = value;
    	this.cStartField = field;

    	var flag = false;
		var startField = field.ownerCt.items.items[0];
		var endField = field.ownerCt.items.items[2];
    	if (!Ext.isDefined(startField.value) || startField.value == null) {
    		endField.setMinValue(null);
    		return flag;
    	}
		endField.setMinValue(field.value);
    	if (!Ext.isDefined(endField.value) || endField.value == null) return true;
    	if (field.fieldType == 'number') {
    		flag = field.value <= endField.value;
    	} else {
    		flag = field.value.getTime() <= endField.value.getTime();
    	}
    	if (flag) {
    		endField.clearInvalid();
    		endField.wasValid = true;
    	}
    	return flag;
    }
});

/*
 * 范围组件结束值验证
 */
Ext.apply(Ext.form.field.VTypes, {

	requires: ['Xap.ej.locale.Locale'],

	cEndValue: null,
	
	cEndField: null,
	
	endValueText: '结束值不能小于开始值',
	
	endValue: function(value, field) {
    	var me = this;
    	if (this.cEndValue == value && this.cEndField == field) return field.wasValid;
    	field.validateOnBlur = false;
    	this.cEndValue = value;
    	this.cEndField = field;
    	
    	var flag = false;
    	var startField = field.ownerCt.items.items[0];
    	var endField = field.ownerCt.items.items[2];
    	if (!Ext.isDefined(endField.value) || endField.value == null) {
    		startField.setMaxValue(null);
    		return flag;
    	}
    	startField.setMaxValue(field.value);
    	if (!Ext.isDefined(startField.value) || startField.value == null) return true;
    	if (field.fieldType == 'number') {
    		flag = field.value >= startField.value;
    	} else {
    		flag = field.value.getTime() >= startField.value.getTime();
    	}
		if (flag) {
			startField.clearInvalid();
			startField.wasValid = true;
		}
    	return flag;
    }
});
/** 
 *
 * 日期编辑框
 * @extends Ext.form.field.Date
 * @author：chenyajie<chen_yajie@founder.com>
 * 
 *
 */
Ext.define('Xap.ej.element.field.DateField', {
	extend:  Ext.form.field.Date ,
	alias: 'widget.xapdatefield',
	//默认格式化格式
	format:'Y-m-d',
	//返回该表单项在表单中的值 毫秒
	getSubmitValue: function() {
		var value = this.getValue();
		return value ? value.getTime() : '';
	},
	//设置日期项的值。
	setValue: function(value) {
		//如果传递的是millisecond timestamp格式的日期，转换为Date对象
		if (value) {
			if (Ext.isString(value)) {
				var number = Ext.Number.from(value);
				if (number) {
					value = number;
				}
			}
			if (Ext.isNumber(value)) {
				value = Ext.Date.parse(value, 'time', true);
			}
		}
		this.callParent([value]);
	}
});
Ext.define('Xap.ej.block.FormBlock', {
	// extend : 'Ext.form.Panel',
	extend:  Xap.ej.element.form.Form ,

	            
		                     
		                    
	  

	alias : 'widget.xapformblock',

	mixins : [ Xap.ej.block.Block ],
	
	constructor: function(config) {
		//为了提供table布局的灵活性，对ext的table布局增强了列均等的特性。
		//在使用table布局时，通过设置layout.xapExt值为true打开这一特性。
		//当打开列均等特性后，会自动生成一行高度为2像素的伪列并设置列的
		//CSS属性width为[100/totalCols+'%']，让浏览器渲染时能够保证列的
		//的宽度均等。
		//Added by wujunhui<wu.junhui@founder.com> 2014/8/11
		var layout = config.layout || this.layout || {};
		var items = config.items || this.items;
		if (layout && layout.type == 'table' && layout.columns > 0 && layout.xapExt) {
		  var dummyCells = [], totalCols = layout.columns;
		  for (var i=0; i<totalCols; i++) {
		    Ext.Array.push(dummyCells, {
		        xtype: 'tbspacer',
		        colspan:1});
		  }
		  Ext.Array.insert(items, 0, dummyCells);
		      
		  layout.tdAttrs = layout.tdAttrs || {};
		  Ext.merge(layout.tdAttrs, {style:{width:100/totalCols+'%'}});
		}
		//End

		this.callParent([config]);
	},

	initComponent: function() {
		Xap.debug('begin...');
		this.callParent();
		this.initBlock();
		this.refreshLayers();
		
		Xap.debug('end...');
	},

	refreshLayers: function() {
		// TODO 插件，插入各种层 xap.core.block.form
		// 取得字典数据层
		var dict = this.getLayer(Xap.ej.block.Layer.DICTIONARY);
		dict.render();
	},
	
	getModelClass : function() {
		return this.mclass;
	},

	getItemData : function(item) {
		var data = {};

		if (item instanceof Xap.ej.block.Block) {
			data = Ext.apply(data, item.getData());
		} else {
			if (Ext.isFunction(item.getValue)) {
				data[item.name || item.xtype + Ext.id()] = item
						.getValue();
			} else if (item instanceof Ext.container.Container) {
				var items = item.items;
				for (var i = 0; i < items.length; i++) {
					data = Ext.apply(data, this
									.getItemData(items.items[i]));
				}
			}
		}
		return data;
	},

  /**
   * 从FormBlock块获取页面数据(FormBlock里面不允许再嵌套FormBlock)。
   * 返回的数据结构约定如下：
   *  {
   *      name1:value1,
   *      name2:value2,
   *      //xapgrid元素时，key名称应该与元素的xapId属性保持一致。数据结构与元素的setData方法保持一致，
   *      //详细数据结构请参考Xap.ej.element.grid.Grid类的getData方法。
   *      xapId1:{       
   *        total:99,
   *        results:[]
   *      },           
   *      //xaptree元素时，key名称应该与元素的xapId属性保持一致。数据结构与元素的setData方法保持一致，
   *      //详细数据结构请参考Xap.ej.element.tree.Tree类的getData方法。
   *      xapId2:[{}]   //xaptree元素的xapId
   *      }
   *  }
   * 
   * @return {} Block块页面数据
   */
  getData : function() {
    Xap.debug('begin...');
    var me = this;
    var formData = me.getValues();
    var gridtreeComponents = me.query('xapgrid, xaptree');
    Ext.Array.each(gridtreeComponents, function(item) {
        formData[item.xapId] = item.getData();
    });
    
    Xap.debug('end...');
    return formData;
  },

  /**
   * 设置数据到FormBlock块(FormBlock里面不允许再嵌套FormBlock)。
   * @param {Object} formData 设定到块的数据.
   *  {
   *      name1:value1,
   *      name2:value2,
   *      //xapgrid元素时，key名称应该与元素的xapId属性保持一致。数据结构与元素的setData方法保持一致，
   *      //详细数据结构请参考Xap.ej.element.grid.Grid类的setData方法。
   *      xapId1:{       
   *        total:99,
   *        results:[]
   *      },           
   *      //xaptree元素时，key名称应该与元素的xapId属性保持一致。数据结构与元素的setData方法保持一致，
   *      //详细数据结构请参考Xap.ej.element.tree.Tree类的setData方法。
   *      xapId2:[{}]   //xaptree元素的xapId
   *  }
   */
  setData : function(formData) {
    Xap.debug('begin...');
    var me = this;
    if (Ext.isObject(formData)) {
      me.getForm().setValues(formData);
      Ext.Object.each(formData, function(key, item) {
          var selector = 'xapgrid[xapId=' + key + '], xaptree[xapId=' + key + ']';
          var itemComponent = me.query(selector)[0];
          if (itemComponent && itemComponent.setData) {
            itemComponent.setData(item);
          }
      });
    } else {
      Xap.debug('The format of formData is not correct.');
    }
    Xap.debug('end...');
  }
});
Ext.define('iih.mr.archive.patient_mediclRecord_archive.block.MediclRecordListBlock', {
	extend :  Xap.ej.block.FormBlock ,

	requires : [],

	alias : 'widget.mediclrecordlistblock',

	border : 0,

	items : [ {
		// title: '患者病历查询',
		xtype : 'xapform',
		layout : {
			type : 'table',
			columns : 6,
			// width: 1024,
			tableAttrs : {
				border : 0,
				cellpadding : 0,
				cellspacing : 1,
				width : '100%',
				height : 56
			},
			tdAttrs : {
				valign : 'left'
			}
		},
		items : [ {
			xtype : 'button',
			text : '选中归档',
			name : 'uploadFileBtn',
			height : 35,
			width : 80,
			disabled:true,
			iconCls: 'icon-archive',
			margin : '10 0 10 850',
			handler: function() {
				var owner = this.up('mediclrecordview');
				var finishDeptChain = owner.getActionChain("mrconfirmArchive");
				finishDeptChain.execute();
			}	
		} ]
	} ]

});

/** 
* @class Xap.ej.element.grid.Grid
* @extends Ext.grid.Panel 
* @author ：chenyajie<chen_yajie@founder.com>
* 该面板为Ext.grid.Panel派生而来，因此可以传入所有符合Ext.grid.Panel的配置选项和方法
*
*## example xapGrid
*
*     @example
*      Ext.create('Ext.panel.Panel', {
*         title: 'Panel',
*         items: [{
*           xtype: 'xapGrid',
*			url: '',// 本地数据用gridData
*      		CM_JR_Record: [
*      			{ header: '姓名',  dataIndex: 'name', field: 'textfield' ,     type: 'string'},
* 	     		{ header: 'Email', dataIndex: 'email', flex: 1,     type: 'string',
* 	     			field: {
* 	     				xtype: 'textfield',
* 		     			vtype: 'email',
* 		     			allowBlank: false
* 		     		}
* 	     		},
* 	     		{ header: 'Phone', dataIndex: 'phone',     type: 'string' }
* 	     	]
*         }],
*          renderTo: Ext.getBody()
*      });
* 
*/ 


Ext.define('Xap.ej.element.grid.Grid', {
    extend:  Ext.grid.Panel ,
    alias: 'widget.xapgrid',
	          
		                             
		                                
		                                   
	  
	/** 
     * @cfg {String} 为该grid指定id，默认'xapGridId'。
     */ 
	xapId : 'xapGridId',
	/** 
     * @cfg {boolean} 'true'使用溢出：'自动'的组件布局元素，并在必要时自动显示滚动条， 'false'溢出的内容。
     */ 
	autoScroll : true,
	/** 
     * @cfg {String} 为该grid指定url,数据将根据url远程获取。
     */ 
	url : null,
	/**
	 * @cfg {object} 
	 *  记录行id
	 */
	nodeId: null,
	 
	/**
	 * @cfg {string} 
	 *  根据行id选中行
	 */
	selectBy: 'id',	
	/**
	 * @cfg {string} 
	 *  multi,simple,single；默认为单选single
	 */
	mode: 'single',
	/**
	 * @cfg {boolean} 
	 *  如果值为true，则只用点击checkbox列才能选中此条记录
	 */
	checkOnly: false,
	/**
	 * @cfg {boolean} 
	 *  编辑时保持选中状态 false: 不保持
	 */
	isEditKeepSelect: true,
	/**
	 * @cfg {number} 
	 *  每页显示行数
	 */
	pageSize : 10,
	/**
	 * @cfg {number} 
	 *  总页码
	 */
	pageCount : 0,
	/**
	 * @cfg {number} 
	 *  当前页码
	 */
	currentPage : 1,
	/**
	 * @cfg {boolean} 
	 *  是否setData后选中行
	 */
	ifSelect: true,
	/** 
     * @cfg {boolean} 是否显示分页 false 不显示
     */ 
	pageShow : false,
	/** 
     * @cfg {boolean} 是否显示复选框
     */ 
	checkboxShow : false,
	/** 
     * @cfg {boolean} 是否显示全选复选框
     */ 
	showHeaderCheckbox : true,
	/** 
     * @cfg {boolean} 自动生成数字，为每行提供编号的列。 是否显示 false: 不显示
     */ 
	rownumShow : true,
	
	/** 
     * @cfg {String} 为该grid指定本地数据 total总条数 dataList结果集
	 * {'total':4,'dataList':[
	 * { 'name': 'Lisa',  "email":"lisa@simpsons.com",  "personNumber":"555-111-1"  },
	 * { 'name': 'Bart',  "email":"bart@simpsons.com",  "personNumber":"555-222-2" },
	 * { 'name': 'Homer', "email":"home@simpsons.com",  "personNumber":"555-222-3"  },
	 * { 'name': 'Marge', "email":"marge@simpsons.com", "personNumber":"555-222-4"  }
	 * ]}
     */ 
	gridData : null,
	
	/** 
     * @cfg {String} modle
     */
	ModleClass : null,
	
	/** 
     * @cfg {Object} 用于创建Modle和store
     */
	CM_JR_Record : null,
	
	/** 
     * @cfg {Object} 顶部按钮
     */
	topButton : [],
	
	initComponent: function() {
		//this.tbar = this.tools;
		//this.tools = this.tbar;
		//this.tbar = null;
		//初始化参数
		this.inti_param();	
		//初始化列表栏
		if (this.CM_JR_Record) {
			this.init_SM_CM_DS();
		}
		//初始化复选框
		if (this.checkboxShow) {
			this.init_selModel();
		}
		//初始化右键菜单
		this.addListener('itemcontextmenu',this.bandContextMenu);
		//单元格点击事件
		this.addListener('cellclick',this.cell_click);
		//行点击事件
		this.addListener('itemclick',this.item_click);
		//用于右键菜单
		this.topButton = this.tbar;
        this.callParent(arguments);
		//初始化后给combo赋值
		this.addListener('afterrender',this.set_combox_data);
		//当列有显示不全时，自动出现tip提示
		this.addListener('afterrender',this.show_cell_toolTip);
    },
	/**     
     * 根据行id选中行
	 * @param {String} 
	 */
	selectById:function(nodeId){
		if(nodeId){
			var r = this.getStore().find( this.selectBy, nodeId, 0, false, true, true );
			this.getSelectionModel( ).select(r);
		}
		
    },
	/**
	 * 给combobox赋值
	 */
	inti_param : function() {
		// 用于记录combobox
		this.comboboxs = {};
	},	
	/**
	 * 给combobox赋值
	 */
	set_combox_data : function() {
		this.fireEvent('comboxready',this.comboboxs);
		  /** 
		var comboData = [ 
			{"value":"1","text":"佚名"},
			{"value":"2","text":"管理员"},
			{"value":"3","text":"编辑"},
			{"value":"4","text":"总编辑"},
			{"value":"5","text":"测试员"}
		];
		
		
		if(this.comboboxs.combo){
			this.comboboxs.combo.setData(comboData);
		}
		if(this.comboboxs.myname){
			this.comboboxs.myname.setData(comboData);
		}
		if(this.comboboxs.QAM01){
		console.log(this.comboboxs);
		this.down('xapcombobox[t_dictionary=QAM01]').setData(this.comboboxs.QAM01.getData());
			//this.comboboxs.QAM01.setData(comboData);
		}
		
		var gridData =[
			{ 'xname': 'Lisa', 'name': '1', 'myname': '2',  "email":"lisa@simpsons.com",  "personNumber":"555-111-1"  },
			{ 'xname': 'Lisa','name': '2', 'myname': '3',  "email":"bart@simpsons.com",  "personNumber":"555-222-2" },
			{ 'xname': 'Lisa','name': '3', 'myname': '2',  "email":"bart@simpsons.com",  "personNumber":"555-222-2" },
			{ 'xname': 'Lisa','name': '4', 'myname': '1', "email":"marge@simpsons.com", "personNumber":"555-222-4"  }
		];
		this.setData(gridData);
		*/
	},
	
	/**
	 * 自动出现tip提示
	 */
	show_cell_toolTip : function() {
		var view = this.getView();
		this._toolTip = Ext.create('Ext.tip.ToolTip', {
			target: view.getEl(),
			delegate: '.x-grid-cell',
			trackMouse: true,
			renderTo: Ext.getBody(),
			listeners: {
				beforeshow: function updateTipBody(tip) {
					var td = tip.triggerElement;
					var tr = td.parentElement;
					var index = Ext.fly(tr).query('.x-grid-cell').indexOf(td);
					if(!view.ownerCt)return false;
					var column = view.getHeaderAtIndex(index);
					var width = column.getWidth();
					var measure = Ext.util.TextMetrics.measure(td, Ext.fly(td).getHTML());
					if(column.isCheckerHd)return false;
					if (column.xtype == 'xapdatecolumn' && measure.width >= width) {
						var record = view.getRecord(tr);
						var value = record.get(column.dataIndex);
						value = new Date(value);
						tip.update(Ext.util.Format.date(value, 'Y-m-d H:i'));
					}else if (measure.width >= width) {
						var record = view.getRecord(tr);
						tip.update(record.get(column.dataIndex));
					}else {
						return false;
					}
				}
			}
		});
	},

	/**     
	* 初始化复选框
	*/
	init_selModel:function(colButton){
		var me = this;
		this.selModel = Ext.create('Ext.selection.CheckboxModel', {
			showHeaderCheckbox : this.showHeaderCheckbox,
			injectCheckbox : 1,
			mode:me.mode,//multi,simple,single；默认为多选multi
			checkOnly:me.checkOnly//如果值为true，则只用点击checkbox列才能选中此条记录
		});
    },
	/**     
	* 行点击事件
	*/
	item_click:function(view, record,item,index,e,eOpts){
		//记录点击行的id
		this.nodeId = record.data[this.selectBy];
		//如果编辑时保持选中状态
		if(this.isEditKeepSelect&&this.isEditSelect){
			this.getSelectionModel().select(this.records,true,true);
			this.isEditSelect = false;
		};
    },
	/**     
	* 单元格点击事件
	*/
	cell_click:function(view, td, cellIndex, record, tr, rowIndex, e, eOpts){
		//点击单元格列
		var index =cellIndex;
		if(this.checkboxShow&&index>0){
			index--;
		};
		//如果是超链接 点击抛出事件
		if(this.columns[index].alink){
			var target=e.getTarget();
            if(e.getTarget().tagName.toLowerCase() == 'a')
				this.fireEvent('linkClick',record.data);
		}
		//console.log(cellIndex);
		//console.log(this.checkboxShow);
		//var plugin = this.getPlugin();
		
		//console.log(this.columns);
		//record.beginEdit();
		//console.log(this.getPlugin().startEdit(1,4));
		//this.getPlugin().startEdit(rowIndex,cellIndex-3);
		//debugger;
		//return false;
		//this.startEditing( 1 , 4 );
    },
	/**     
	* 
	* 绑定右键菜单
	* 
	*/
	bandContextMenu:function(menutree,record,items,index,e){
    	var me = this;			
		e.preventDefault();  
		e.stopEvent();
		//var leaf = record.data.leaf;
		var items = [];
		if(this.topButton){
			console.log(this.topButton);
			Ext.Array.forEach(this.topButton,function(button,index,array){
				//过滤掉右键隐藏按钮和流程按钮
				console.log(button);
				if(!button.rightButtonHidden&&!button.process){
					var rightButton =me.getRightButton(button,record);
					items.push(rightButton);
				}
			});
		}
		//加入流程按钮
		if(record.get('processTask')){
			//重置tbar button按钮可用性
			this.resetTbar(me,record);
			//遍历task
			Ext.Array.forEach(record.get('processTask').executingTask,function(task,index,array){ 
				//根据task查询到要显示的流程按钮
				console.log(task);
				var rightButton = me.getRightButtonByTask(task,record);
				items.push(rightButton);
			})
		}
		//判断是否配置菜单项
		if(this.contextmenu){
			Ext.Array.forEach(this.contextmenu,function(button,index,array){ 
				var rightButton =me.getRightButton(button,record);
				items.push(rightButton);
			});
		}
		if(items.length){
			var nodemenu = new Ext.menu.Menu({  
				floating:true,  
				items:items
			});	
			nodemenu.showAt(e.getXY());  
		}
		
    },
	/**     
	* 
	* 指定某行某列可编辑
	* 行列从0开始
	*/
	startEdit:function(rowIndex,cellIndex){		
		this.getPlugin().startEdit(rowIndex,cellIndex);
    },
	/**     
	* 添加超链接样式
	*/
	renderer_Link:function(value){
		return "<a class='link' href='#'>"+value+"</a>";
    },
	/**
	 * 初始化超链接样式
	 */
	init_Link : function() {
		var me = this;
		for (var i = 0; i < this.CM_JR_Record.length; i++) {
			var  record = this.CM_JR_Record[i];
			//如果是超链接，添加超链接样式
			if(record.alink){
				record.renderer = me.renderer_Link;
			}
			
		}
		
	},
	/**
	 * 初始化columns
	 */
	init_CM : function() {
		//初始化combo
		this.init_combo(this.CM_JR_Record);
		//添加超链接样式
		this.init_Link(this.CM_JR_Record);
		//初始化columns
		var columns = Ext.Array.clone(this.CM_JR_Record); // 克隆数组
		//是否显示序号
		if(this.rownumShow){
			columns.unshift({ header: "序号" ,width : 35 , xtype: "rownumberer"}); 
		}
		
		Ext.Array.forEach(columns,function(column,index,array){		
			//添加 menuDisabled 属性
			column.menuDisabled = true;
		});
		
		this.columns = columns;
		
	},
	/**
	 * 初始化列表栏
	 */
	init_SM_CM_DS : function() {
		var me = this;
		//初始化columns
		this.init_CM();
		//定义modle
		var gridModel ;
		if(this.ModleClass){
			gridModel = this.ModleClass;
		}else{
			//初始化'Ext.data.Model'
			var fields = new Array(); 
			for (var i = 0; i < this.CM_JR_Record.length; i++) {
				var  record = this.CM_JR_Record[i];
				if(record.dataIndex){
					var rec={
						name: record.dataIndex,  
						mapping : record.mappingField || record.dataIndex,
						type: record.type || ''
					}
					fields.push(rec);
				}
				
			}
			//初始化Model
			Ext.define( 'gridModel', {
				extend:  Ext.data.Model ,
				fields: fields
			});	
			gridModel = 'gridModel';
		}
		
		//初始化Store
		if(this.url){
			this.store = Ext.create('Xap.ej.element.store.Store', {
				//autoLoad: true,
				model: gridModel,
				proxy: {
					type: 'ajax',
					url: this.url,
					pageSize: this.pageSize || 10,
					reader: {
						type: 'json',
						root: 'dataList',
						totalProperty: 'total',
						successProperty : 'success'
					}
				}
			});
		}else{
			var gridDataDefault = {'dataList':[]};
			if(this.gridData){
				gridDataDefault = this.gridData;
			}
			this.store = Ext.create('Xap.ej.element.store.Store', {
				model: gridModel,
				data:gridDataDefault,
				pageSize: this.pageSize || 10,
				proxy: {
					type: 'memory',
					reader: {
						type: 'json',
						root: 'dataList',
						totalProperty: 'total'
					}
				}
			});
		}
		//初始化分页信息
		if(this.pageShow){
			this.bbar = [
				{text: '首页',pageName: 'first',disabled : true,
					handler: function() {
						me.currentPage=1;
						me.setDisabled_up_page(true);
						me.setDisabled_down_page(false);
						me.turn_page(1);
					}
				},
				{text: '上一页',pageName: 'back',disabled : true,
					handler: function() {
						me.currentPage--;
						if(me.currentPage==1){
							me.setDisabled_up_page(true);
						}
						me.setDisabled_down_page(false);
						me.turn_page(me.currentPage);
					}
				},
				'-','-',
				{xtype: "label",text: '没有数据！',pageName: 'info'},
				'-','-',
				{text: '下一页',pageName: 'forward',disabled : true,
					handler: function() {
						var pageCount = me.pageCount;
						me.currentPage++;
						if(me.currentPage==pageCount){
							me.setDisabled_down_page(true);
						}
						me.setDisabled_up_page(false);
						me.turn_page(me.currentPage);
					}
				},
				{text: '末页',pageName: 'last',disabled : true,
					handler: function() {
						var pageCount = me.pageCount;
						me.currentPage = pageCount;
						me.setDisabled_down_page(true);
						me.setDisabled_up_page(false);
						me.turn_page(me.currentPage);
					}
				}
				
				
			];
			
			/*this.bbar = Ext.create('Ext.PagingToolbar', {   
				store: this.store,   
				displayInfo: true, 
				emptyMsg: '没有数据',			
				//displayMsg: '显示 {0} - {1} 条，共计 {2} 条',   
				displayMsg: ' ',   
				beforePageText: '第',
				afterPageText: '页/共{0}页'
				}  
			)*/
		}
		
		
	},
	/**     
	* 翻页
	*/
	turn_page:function(currentPage){
		this.set_page_info(currentPage);
		this.fireEvent('turnpage',currentPage,this.pageSize);
	},
	/**     
	* 翻页
	*/
	set_page_info:function(currentPage){
		if(currentPage){
			this.down('label[pageName=info]')
				.setText('第'+currentPage+'页/共'+this.pageCount+'页');
		}else{
			this.down('label[pageName=info]').setText('没有数据！');
		}
	},
	/**     
	* 设置向下翻页可用性
	*/
	setDisabled_down_page:function(  disabled ){
		this.down('button[pageName=forward]').setDisabled(disabled);
		this.down('button[pageName=last]').setDisabled(disabled);
	},
	/**     
	* 设置向上翻页可用性
	*/
	setDisabled_up_page:function(  disabled ){
		this.down('button[pageName=first]').setDisabled(disabled);
		this.down('button[pageName=back]').setDisabled(disabled);
	},
	/**     
	* 赋值分页数据
	*/
	setPageData:function( data ){
		var me = this;
		if(data.total>0){
			var pageCount = Math.ceil(data.total/me.pageSize);
			me.pageCount = pageCount;
			if(pageCount>1){
				me.setDisabled_down_page(false);
			}else{
				me.setDisabled_down_page(true);
			}
			me.setDisabled_up_page(true);
			me.currentPage = 1;
			me.set_page_info(1);
			me.setData(data.dataList);
		}else{
			me.setDisabled_down_page(true);
			me.setDisabled_up_page(true);
			me.set_page_info(null);
			me.setData([]);
		}
	},
	/**     
	* 初始化combo
	*/
	init_combo:function(columns){
		var me = this;
		//字典下拉框赋值	
		Ext.Array.forEach(columns,function(column,index,array){		
			//过滤掉非主数据
			if(column.dictionary){
				if(me.comboboxs[column.dictionary]){
					Ext.apply(column,{
						field:me.comboboxs[column.dictionary],
						renderer: function(value, cellmeta, record,rowIndex,colIndex,store){
							return this.rendererData(value,me.comboboxs[column.dictionary]);
						}	
					});
				}else{
					var combo = Ext.create("Xap.ej.element.field.ComboBox", column);					
					Ext.apply(column,{
						field:combo,
						renderer: function(value, cellmeta, record,rowIndex,colIndex,store){
							return this.rendererData(value,combo);
						}	
					});
					//var combobox ={};
					me.comboboxs[column.dictionary] = combo;
					
				}
			}
		});
		//tools 字典下拉框赋值	
		if(me.tools){
			Ext.Array.forEach(me.tools,function(tool,index,array){		
				//过滤掉非主数据
				if(tool.dictionary){
					if(!me.comboboxs[tool.dictionary]){
						var combo = Ext.create("Xap.ej.element.field.ComboBox", tool);					
						me.comboboxs[tool.dictionary] = combo;
					}
				}
			});
		}
		//tbar 字典下拉框赋值	
		if(me.tbar){
			Ext.Array.forEach(me.tbar,function(bar,index,array){		
				//过滤掉非主数据
				if(bar.dictionary){
					if(!me.comboboxs[bar.dictionary]){
						var combo = Ext.create("Xap.ej.element.field.ComboBox", bar);					
						me.comboboxs[bar.dictionary] = combo;
					}
				}
			});
		}
		
    },
	
	/**     
	* 组件右键按钮
	*/
	getRightButton:function(button,record){
		var me = this;
		var rightButton ={
			text : button.text,
			method : button.method,
			disabled: button.disabled,
			handler : function() { 
				//得到tbar
				var toolbar = me.getTopToolbar();
				//触发事件
				var tbarButton = toolbar.down("button[method="+button.method+"]");
				tbarButton.fireEvent('click');
				//console.log(tbarButton);
				//触发事件
				me.fireEvent('contextmenuclick',button.method,record);
			}
		}
		return rightButton;
    },
	
	/**     
	* 根据task查询到要显示的流程按钮
	*/
	getRightButtonByTask:function(task,record){
		var me = this ;
		var rightButton = {};
		Ext.Array.forEach(this.topButton,function(button,index,array){ 
			//过滤掉右键隐藏按钮和流程按钮
			if(button.method==task.method){
				rightButton =me.getRightButton(button,record);
			}
		});
		return rightButton;
    },
    
	/**     
	* 得到该grid的ModleClass
	* 
	* @return ModleClass 
	*/
	getModleClass:function(){
    	var store = this.getStore();
		var mClass = store.model.getName( );
		return mClass;
    },
    
	/**     
	* 得到该grid的数据
	* @return object [{},{}] 
	*/
	getData:function(){
    	var store = this.getStore();
		return store.getData();
    },
	/**     
	* 给该grid赋新值  
	* @param {object} 
	* [{},{}] 
	*/
	setData:function(data){
    	if(data){
			var store = this.getStore();
			store.setData(data);

			//如果赋值后选择上次已选节点
			if(this.ifSelect){
				this.selectById(this.nodeId);
			}
		}
    },
	/**     
	* 给该grid 创建主数据 对应显示值
	*/
	rendererData : function(value,combo){
		var record = combo.findRecord(combo.valueField, value);
		if(record){
			return record.get(combo.displayField);
		}
		return value;
		
	},
	/** 
     * 得到该grid toolbar
	 * @return Ext.toolbar.Toolbar
     */ 
	getTopToolbar:function(){
		return this.down('toolbar');
    },
    /** 
     * 刷新grid
     */ 
    refresh:function(){
    	this.getView().refresh();
    },

	selectFirstRange:function(){
		this.getSelectionModel( ).select(0);
	}
        
});
Ext.define('iih.mr.archive.patient_mediclRecord_archive.block.MediclRecordListGridBlock',{
	extend :  Xap.ej.block.Block ,
	
	requires: [],

	alias:'widget.mediclrecordlistgridblock',
	
	layout: 'fit',
	border: 0,

    items:  [{
        xtype: 'xapgrid',
        ifSelect : true,
        selectBy: 'mrPk',
		title: '选择病历',
		name:'mediclGrid',
		autoScroll:true,
		pageSize : 25,
		pageShow : true,
		checkboxShow:true,
		ifSelect: false,
		mode:'simple',
		showHeaderCheckbox : true,
		rownumShow : true,
  		CM_JR_Record: [   
  				{ header: '病历编号', dataIndex: 'mrPk',field: 'textfield',type: 'string',width:250},
  				{ header: '病历文书名称', dataIndex: 'name',field: 'textfield',type: 'string',width:180 },
//                { header: '病历文书类型', dataIndex: 'templeCode',field: 'textfield',type: 'string',width:110 },
                { header: '文书类型', dataIndex: 'typeName',field: 'textfield',flex:1,width:110},
                { header: '系统标示编码', dataIndex: 'typeCode',field: 'textfield',flex:1,width:110,hidden:true},
                { header: '系统标示编码', dataIndex: 'filePk',field: 'textfield',flex:1,width:110,hidden:true},
                { header: '患者编号', dataIndex: 'encounterPk',field: 'textfield',flex:1,width:110,hidden:true},
                
                { header: '创建人', dataIndex: 'createUserName',field: 'textfield',flex:1,width:80 },
                { header: '是否归档', dataIndex: 'arcF',field: 'textfield',flex:1,width:80 
                	,renderer: function(value){
  							return value==1?"已归档":"未归档";
  						}
  					 },
                { header: '创建时间', dataIndex: 'crtTime',width:110 
                	,renderer: function(value){
  						if (value) {
  							if (Ext.isNumber(value)) {
  								value = new Date(value);
  								return Ext.util.Format.date(value, 'Y-m-d ');
  							}
  							return value;
  						}
  					} },
                { header: '最后修改时间', dataIndex: 'lastUpdTime',flex:1
                	,renderer: function(value){
  						if (value) {
  							if (Ext.isNumber(value)) {
  								value = new Date(value);
  								return Ext.util.Format.date(value, 'Y-m-d ');
  							}
  							return value;
  						}
  					} },
                
        ],
        viewConfig : {
        	getRowClass : function(record,rowIndex,rowParams,store){
	        	if("1"==record.get('arcF')){ 
	        	return 'row_f'; 
	        	} else{
	        	return '';
	        		
	        	}
        	}
    },
    }]
,
    setData: function(data) {
        	var grid = this.down('xapgrid');
        	var dataList = data.dataList;
        	if(grid){
        		if(dataList){
			    	var totalList = {"total":data.total,"dataList":dataList};
			    	var pageSize = data.pageSize;
			    	if(pageSize == undefined || typeof(data.pageSize) == 'object'){
			    		grid.setPageData(totalList);	//初始化赋值
			    	}else{
			    		grid.setData(dataList);	//翻页时赋值
			    	}
	        	}else{
	        		var totalList = {"total":data.total,"dataList":data.dataList};
	        		grid.setPageData(totalList);
	        	}
        	}
    	}             
});


/** 
 *
 * 一个用于简化列定义的子类，用来在单元格里渲染一个或多个图标。 每个图标均可自定义点击处理事件。
 * @extends Ext.grid.column.Action
 * 
 * @author ：chenyajie<chen_yajie@founder.com>
 **/

Ext.define('Xap.ej.element.grid.column.ActionColumn', {
	extend :  Ext.grid.column.Action ,
	alias : ['widget.xapactioncolumn'],
	defaultRenderer: function(v, meta, record, rowIdx, colIdx, store, view){
        var me = this,
            prefix = Ext.baseCSSPrefix,
            scope = me.origScope || me,
            items = me.items,
            len = items.length,
            i = 0,
            item, ret, disabled, tooltip;
 
        // Allow a configured renderer to create initial value (And set the other values in the "metadata" argument!)
        // Assign a new variable here, since if we modify "v" it will also modify the arguments collection, meaning
        // we will pass an incorrect value to getClass/getTip
        ret = Ext.isFunction(me.origRenderer) ? me.origRenderer.apply(scope, arguments) || '' : '';

        meta.tdCls += ' ' + Ext.baseCSSPrefix + 'action-col-cell';
        for (; i < len; i++) {
            item = items[i];

            disabled = item.disabled || (item.isDisabled ? item.isDisabled.call(item.scope || scope, view, rowIdx, colIdx, item, record) : false);
            tooltip = disabled ? null : (item.tooltip || (item.getTip ? item.getTip.apply(item.scope || scope, arguments) : null));

            // Only process the item action setup once.
            if (!item.hasActionConfiguration) {

                // Apply our documented default to all items
                item.stopSelection = me.stopSelection;
                item.disable = Ext.Function.bind(me.disableAction, me, [i], 0);
                item.enable = Ext.Function.bind(me.enableAction, me, [i], 0);
                item.hasActionConfiguration = true;
            }

			
			
			var buttonV ;
			if(item.icon){
				buttonV = '<img alt="' + (item.altText || me.altText) + '" src="' + (item.icon || Ext.BLANK_IMAGE_URL) + '" class="' + Ext.baseCSSPrefix + 'action-col-icon ' + Ext.baseCSSPrefix + 'action-col-' + String(i) + ' ' + (item.disabled ? Ext.baseCSSPrefix + 'item-disabled' : ' ') + (item.iconCls || '') + ' ' + (Ext.isFunction(item.getClass) ? item.getClass.apply(item.scope || me.scope || me, arguments) : (me.iconCls || '')) + '"' + ((item.tooltip) ? ' data-qtip="' + item.tooltip + '"' : '') + ' />';
			}else{
				buttonV = item.text || me.text;
			}	
				
			ret += '<button' + ' class="' + Ext.baseCSSPrefix + 'action-col-' + String(i) + ' ' + (disabled ? Ext.baseCSSPrefix + 'item-disabled' : ' ') 
			+ (item.cls || '') + ' ' + (Ext.isFunction(item.getClass) ? item.getClass.apply(item.scope || scope || me, arguments) : (me.iconCls || '')) 
			+ '"' + ((tooltip) ? ' data-qtip="' + tooltip + '"' : '') 
			+ '>' + buttonV + '</button>';

			
		
		}
        return ret;    
    }
});

Ext.define('iih.mr.archive.patient_mediclRecord_archive.view.MediclRecordView',{
	extend :  Xap.ej.template.BaseTemplate ,

	alias:'widget.mediclrecordview',
	
	id:'mediclrecordviewid',
	
	          
	   	                                  
	                                    
	                                   
		                           
		                                  
		                                                                          
		                                                                              
		                                          
		                                                                                  
	  

	layout: {
        type : 'vbox',
        align : 'stretch'
    },
	
	xapConfig: {
		blocks: {
			'condition':{
				xclass: 'iih.mr.archive.patient_mediclRecord_archive.block.MediclRecordListBlock',
				height:56
			},
			
			'content':{
				xclass: 'iih.mr.archive.patient_mediclRecord_archive.block.MediclRecordListGridBlock',
				flex:1
			}
		},
		actions: {
			'search': {
				xclass: 'iih.mr.archive.patient_mediclRecord_archive.action.MediclRecordSearchAction',
				url:'mr/search/mrs',
				blocks: {
					content: 'content'
				}
			},
			'mediclRecordarchivefile':{
				xclass:'iih.mr.archive.patient_mediclRecord_archive.action.MediclRecordArchiveFileAction',
				url:'mr/archive/mrArchive',
				blocks: {
					content: 'content'
				}
			},
			'mediclRecordArchiveBtnSta':{
				xclass:'iih.mr.archive.patient_mediclRecord_archive.action.MediclRecordArchiveBtnStaAction',
				blocks: {
					content: 'content'
				}
			},
			'mrconfirmArchive':{
				xclass:'iih.mr.archive.patient_mediclRecord_archive.action.MrConfirmArchiveAction',
				blocks: {
					content: 'content'
				}
			}
		},

		chains: {
			'search': ['search'],
			'mediclRecordarchivefile':['mediclRecordarchivefile'],
			'mediclRecordArchiveBtnSta':['mediclRecordArchiveBtnSta'],
			'mrconfirmArchive':['mrconfirmArchive']
		},

		connections: {
			'content': [
			{//翻页操作
				selector: 'xapgrid',
				event: 'turnpage',
				chain: 'search'
			},{
				selector : 'xapgrid[name=mediclGrid]',
				event : 'selectionchange',
				chain : 'mediclRecordArchiveBtnSta'
			}]
		}
	},
	initComponent : function() {
			this.callParent();
			this.addEvents("pageRefresh");//为视图添加刷新事件
			this.addListener('pageRefresh', function(){//添加监听事件
				 var properties = this.getLayer(Xap.ej.block.Layer.PROPERTIES);
		        var chain = this.getActionChain('search');
		        var block = this.getBlock('content');
//		        var pageSize = block.pageSize;
		        if(properties.data == undefined){
		        	 if(chain) {
		            chain.execute({});
		        	}
		        }else{
		        	var pageSize = properties.data.pageSize;
			        var pageNum = properties.data.pageNum;
			        if(chain) {
			            chain.execute({
			            	pageSize:pageSize,
			            	pageNum:pageNum
			            });
			        }
		        }
			});
		}
})
Ext.define('iih.mr.archive.patient_mediclRecord_archive.action.PatientShowMediclRecordAction', {
	extend:  Xap.ej.action.PopAction ,

	                                                                                
	

	execute: function(context) {
		this.getOwner().pk=context.event.arguments[1].data.pk;
	        var config = {
                modal: true,           
                width: 950,
                height:640,
                title :'病历列表',
                contentConfig: {
                    xtype: 'mediclrecordview',
                    initChain: {
                        name: 'search'
                    }
                }
            };
	    
    	
    	this.callParent([config]);
    }
});

/** 
 *
 * 一个仅仅用来显示(display-only)的文本表单项，它不会被校验和提交。
 * @extends Ext.form.field.Text
 * @author：chenyajie<chen_yajie@founder.com>
 * 
 *
 */
Ext.define('Xap.ej.element.field.DisplayField', {
	extend:  Ext.form.field.Display ,
	alias: 'widget.xapdisplayfield'
});
/** 
 *
 * 单文本编辑框
 * @extends Ext.form.field.Text
 * @author：chenyajie<chen_yajie@founder.com>
 * 
 *
 */
Ext.define('Xap.ej.element.field.TextField', {
	extend:  Ext.form.field.Text ,
	alias: 'widget.xaptextfield',
	//默认居右
	labelStyle : 'text-align:right;'
});
Ext.define('iih.mr.archive.patient_mediclRecord_archive.block.PatientListBlock', {
	extend :  Xap.ej.block.FormBlock ,

	requires : [],

	alias : 'widget.patientlistblock',

	border : 0,

		layout : {
			type : 'table',
			columns : 5,
			// width: 1024,
			tableAttrs : {
				border : 0,
				cellpadding : 0,
				cellspacing : 1,
				width : '100%',
				height : 56
			},
			tdAttrs : {
				valign : 'left'
			}
		},
		items : [ {
			xtype : 'comboxgrid',
			name : 'curDeptNm',
			method : 'curDeptNm',
			url : 'organization/keyword',// 科室查询的url
			fieldLabel : '科室',
			margin:'10 50 10 60',
			labelAlign : 'right',
			labelWidth : 50,
			listWidth : 230, // gird的宽度
			width : 205, // combo的宽度
			valueField : 'code',// 科室编码的字段名
			displayField : 'name',// 科室名称的字段名
			columns : [ { // grid的column配置
				text : '科室编码',
				dataIndex : 'code',
				width : 80
			}, {
				text : '科室',
				flex : 1,
				dataIndex : 'name'
			} ],
			callback : function(newValue, oldValue, record) { // 在grid选择记录后的回调函数
				var view = this.up('deptqapatientlistview');
				// var initChain = view.getActionChain('search');
				// initChain.execute({
				// curDeptNm:newValue
				// });
				/*
				 * console.log(newValue); //本次选择的科室编码 console.log(oldValue); //上次选择的科室编码 console.log(record); //本次选择的科室完整记录
				 */}
		}, {
			xtype : 'xapdatefield',
			name : 'crtTimeStart',
			fieldLabel : '入院日期',
			labelWidth : 60,
			margin:'10 15 10 50',
			labelAlign : 'right',
			editable : false,
			value:'',
			margin : '10 0 10 0'
		}, {
			xtype : 'xapdisplayfield',
			// name:'intervalSymbol',
			margin : '10 10 10 10',
			value : '~'
		}, {
			xtype : 'xapdatefield',
			name : 'crtTimeEnd',
			margin:'10 15 10 15',
			editable : false,
			value:'',
			labelAlign : 'right'
		}, {
			xtype : 'xaptextfield',
			// width:140,
			name : 'amrNo',
			labelWidth : 50,
			labelAlign : 'right',
			margin:'10 50 10 50',
			fieldLabel : '住院号',
			listeners : {
				specialkey : function(field, e) {
					if (e.getKey() == Ext.EventObject.ENTER) {
						var view = this.up('patientview');
						var initChain = view.getActionChain('search');
						initChain.execute({});
					}
				}
			}
		}, {
			xtype : 'xaptextfield',
			name : 'patientName',
			labelWidth : 60,
			labelAlign : 'right',
			margin : '10 50 10 50',
			fieldLabel : '患者姓名',
			listeners : {
				specialkey : function(field, e) {
					if (e.getKey() == Ext.EventObject.ENTER) {
						var view = this.up('patientview');
						var initChain = view.getActionChain('search');
						initChain.execute({});
					}
				}
			}
		} ,{
	        xtype:'xapcombobox',
	        name:'gsCd',
	        colspan:3,
	        labelWidth : 60,
	        margin : '10 50 10 0',
			labelAlign : 'right',
	        editable:false,
	        allOptions: false,
	        fieldLabel:'病案状态',
	        dictionary:'MRM22'
	    },{
			xtype : 'button',
			text : '选中归档',
			name : 'uploadFileBtn',
			height : 35,
			iconCls: 'icon-archive',
			width : 80,
			margin : '10 50 10 105',
			align : 'right',
			disabled:true,
			hidden:true,
			handler: function() {
				var view=this.up('patientview');
				var patientListArchive = view.getActionChain("patientListArchive");
				patientListArchive.execute();
			}	
		}]
//	} ]
});
Ext.define('iih.mr.archive.patient_mediclRecord_archive.block.PatientListGridBlock',{
	extend :  Xap.ej.block.Block ,
	
	requires: [],

	alias:'widget.patientlistgridblock',
	
	layout: 'fit',
	
	border: 0,

    items:  [{
        xtype: 'xapgrid',
        ifSelect : true,
        selectBy: 'pk',
		title: '就诊患者一览',
//		tools:[{
//			xtype: 'xapcheckbox',
//			boxLabel : '未归档',
//			checked:true,
//			disabled: true,
//			padding:'0 20 0 0'
//		},
//		{
//			xtype: 'xapcheckbox',
//			boxLabel: '已归档',
//			padding:'0 920 0 0',
//			disabled: true
//		}
//	],
		name:'patientGrid',
		autoScroll:true,
		pageSize : 25,
		//checkboxShow:true,
		mode:'simple',//simple,
		//showHeaderCheckbox : true,
		pageShow : true,
  		CM_JR_Record: [   
  		        { header: '患者编号', dataIndex: 'pk',field: 'textfield',type: 'string',width:90,hidden:true},
  				{ header: '住院号', dataIndex: 'amrNo',field: 'textfield',type: 'string',width:90},
  				{ header: '患者姓名', dataIndex: 'patientName',field: 'textfield',type: 'string',width:90},
                { header: '性别', dataIndex: 'sexName',field: 'textfield',type: 'string',width:60 },
                { header: '年龄', dataIndex: 'age',field: 'textfield',type: 'string',width:60 },
                { header: '入院时间', dataIndex: 'receiveTime',xtype: 'xapdatecolumn',flex:1,width:110},
                { header: '出院时间', dataIndex: 'finishTime',xtype: 'xapdatecolumn',flex:1,width:110 },
                { header: '经治医师', dataIndex: 'currentManageDoctorName',field: 'textfield',type: 'string',width:110 },
                { header: '主诊断', dataIndex: 'currentMainDiagnosisName',field: 'textfield',type: 'string',flex:1 },
                { header: '病案状态编号', dataIndex: 'statusCode',field: 'textfield',type: 'string',width:80,hidden:true},
                { header: '病案状态', dataIndex: 'statusName',field: 'textfield',type: 'string',width:80},
                {xtype:'xapactioncolumn',text:'操作',width : 90,
    				items: [{text:'病历归档',
    							handler: function(view,rowIndex,colIndex,e,item ,record) {
    								var owner = this.up('patientview');
    								var finishDeptChain = owner.getActionChain("amrConfirmArchive");
    								finishDeptChain.execute({
    									record:record
    								});
    							}	
    						}
    					]
    				}
        ]
    }]
,
    setData: function(data) {
        	var grid = this.down('xapgrid');
        	var dataList = data.dataList;
        	if(grid){
        		if(dataList){
			    	var totalList = {"total":data.total,"dataList":dataList};
			    	var pageSize = data.pageSize;
			    	if(pageSize == undefined || typeof(data.pageSize) == 'object'){
			    		grid.setPageData(totalList);	//初始化赋值
			    	}else{
			    		grid.setData(dataList);	//翻页时赋值
			    	}
	        	}else{
	        		var totalList = {"total":data.total,"dataList":data.dataList};
	        		grid.setPageData(totalList);
	        	}
        	}
    	}
});


/** 
 *
 * @extends Ext.grid.plugin.CellEditing
 * 
 * @author chenyajie<chen_yajie@founder.com>
 **/

Ext.define('Xap.ej.element.grid.plugin.CellEditing', {
	extend :  Ext.grid.plugin.CellEditing ,
	alias : ['widget.xapcellediting'],
	clicksToEdit: 1,
	listeners: {
		/*edit:function(editor, e){ 
			if(e.grid.isEditKeepSelect){
				e.grid.getSelectionModel().select(e.grid.records,true,true);
			};
		},*/
		beforeedit:function(editor, e){ 
			e.grid.records = e.grid.getSelectionModel( ).getSelection();
			e.grid.isEditSelect = true;
		}
	}
});


/** 
 *
 * 一个用于简化列定义的子类，适用于布尔类型的渲染。
 * @extends Ext.grid.column.CheckColumn
 * 
 * @author ：chenyajie<chen_yajie@founder.com>
 */

Ext.define('Xap.ej.element.grid.column.CheckColumn', {
	extend :  Ext.grid.column.CheckColumn ,
	alias : ['widget.xapcheckcolumn']
});

Ext.define('Xap.ej.block.ToolbarBlock', {
	extend:  Ext.toolbar.Toolbar ,
	
	requires: [],

	mixins: [ Xap.ej.block.Block ],

	alias: 'widget.xaptoolbarblock',
	
	height: 30,
	
	layout: {
		type: 'hbox',
		pack: 'end'
	}
});
Ext.define('iih.mr.archive.patient_mediclRecord_archive.view.PatientView', {
	extend :  Xap.ej.template.BaseTemplate ,

	alias : 'widget.patientview',
	id : 'patientandmediclrecordview',
	             
	                                            
	                                                      
	                                                      
	                                             
	                                               
	                                              
	                                                                                      
	                                                                                  
	                                                       
	                                                                                         

	layout : {
		type : 'vbox',
		align : 'stretch'
	},

	xapConfig : {
		blocks : {
			'condition' : {
				xclass : 'iih.mr.archive.patient_mediclRecord_archive.block.PatientListBlock',
				height : 100
			},
			'toolbar' : {
				xclass : 'Xap.ej.block.ToolbarBlock',
				items : [ {
					xtype : 'button',
					iconCls : 'icon-reset',
					text : '重置',
					action : 'init'
				}, {
					xtype : 'button',
					iconCls : 'icon-Search',
					text : '查询',
					action : 'search'
				} ]
			},
			'content' : {
				xclass : 'iih.mr.archive.patient_mediclRecord_archive.block.PatientListGridBlock',
				flex : 1
			}
		},
		actions : {
			'search' : {
				xclass : 'iih.mr.archive.patient_mediclRecord_archive.action.PatientListSearchAction',
				url : 'mr/search/amrs',
				blocks : {
					condition : 'condition',
					result : 'content'
				}
			},
			'init' : {
				xclass : 'iih.mr.archive.patient_mediclRecord_archive.action.PatientInitAction',
				blocks : {
					content : 'condition'
				}
			},
			'showMedicl' : {
				xclass : 'iih.mr.archive.patient_mediclRecord_archive.action.PatientShowMediclRecordAction',
				blocks : {
					content : 'content'
				}
			},
			'patientArchive' : {
				xclass : 'iih.mr.archive.patient_mediclRecord_archive.action.PatientArchiveAction',
				url:'mr/archive/amrArchive',
				blocks : {
					content : 'content'
				}
			},
			'patientListArchive' : {
				xclass : 'iih.mr.archive.patient_mediclRecord_archive.action.PatientListArchiveAction',
				blocks : {
					content : 'content'
				}
			},
			'patientArchiveBtnSta' : {
				xclass : 'iih.mr.archive.patient_mediclRecord_archive.action.PatientArchiveBtnStaAction',
				blocks : {
					content : 'content'
				}
			},
			'amrConfirmArchive':{
				xclass:'iih.mr.archive.patient_mediclRecord_archive.action.AmrConfirmArchiveAction',
				blocks : {
					content : 'content'
				}
			}

		},

		chains : {
			'init' : [ 'init' ],
			'search' : [ 'search' ],
			'showMedicl' : [ 'showMedicl' ],
			'patientArchive' : [ 'patientArchive' ],
			'patientArchiveBtnSta' : [ 'patientArchiveBtnSta' ],
			'patientListArchive' : [ 'patientListArchive' ],
			'amrConfirmArchive':['amrConfirmArchive']
		},

		connections : {
			'content' : [ {
				event : 'afterrender',
				chain : 'init'
			}, {
				selector : 'xapgrid',
				event : 'itemdblclick',
				chain : 'showMedicl'
			}, {// 翻页操作
				selector : 'xapgrid',
				event : 'turnpage',
				chain : 'search'
			}, {
				selector : 'xapgrid[name=patientGrid]',
				event : 'selectionchange',
				chain : 'patientArchiveBtnSta'
			} ],
			'toolbar' : [ {
				selector : 'button[action=search]',
				event : 'click',
				chain : 'search'
			}, {
				selector : 'button[action=init]',
				event : 'click',
				chain : 'init'
			} ]
		}
	},

	initComponent : function() {
		this.callParent();
		this.addEvents("pageRefresh");// 为视图添加刷新事件
		this.addListener('pageRefresh', function() {// 添加监听事件
			var properties = this.getLayer(Xap.ej.block.Layer.PROPERTIES);
			var chain = this.getActionChain('search');
			var block = this.getBlock('content');
			// var pageSize = block.pageSize;
			if (properties.data == undefined) {
				if (chain) {
					chain.execute({});
				}
			} else {
				var pageSize = properties.data.pageSize;
				var pageNum = properties.data.pageNum;
				if (chain) {
					chain.execute({
						pageSize : pageSize,
						pageNum : pageNum
					});
				}
			}
		});

	}
})
Ext.define('iih.mr.block.editor.MrDocEditBlock',{
    extend :  Xap.ej.block.Block ,

                                                       

    alias:'widget.mrdoceditblock',

    //layout: 'fit',
    items: [{
        xtype: "button",
        name: 'editorEvent',
        hidden : true,
        method : 'editorEvent'
    }]
})
Ext.define('iih.mr.di.action.InDiagnosisCancelAction', {
	extend:  Xap.ej.action.Action ,

	requires: [],

    execute: function(context) {
    	var block = this.getBlock('content');
    	var form =block.down('xapform');
    	form.setTitle('诊断新增');
//    	block.getForm().reset(); //清空form
    	 var formData = {
         		addDescr: undefined,
         			diCd: undefined,
         			diEmpNm: undefined,
         			diNm: undefined,
         			diSn: undefined,
         			diTime: undefined,
         			diTypeCd: undefined,
         			diTypeNm: undefined,
         			icdCd: undefined,
         			mainF: "0",
         			memo: undefined,
         			parDiSn: undefined
         	}; 
         var diCd = block.down('comboxgrid[name=diCd]');
 	    diCd.setRecordData({value:'',text:''}); 
 	    var showInfo = block.down('xapdisplayfield[name=showInfo]');
 	    showInfo.setValue('');
         form.getForm().setValues(formData);
         var dirty = form.isDirty();
 	    this.getOwner().dirty = dirty;
    }
});

Ext.define('iih.mr.di.action.InDiagnosisDelAction', {
	extend:  Xap.ej.action.ServiceInvocation ,

	requires: [],

    doExecute: function(context) {
    	var block = this.getBlock('content');
		var diInGrid = block.down('xapgrid');
		var selModel = diInGrid.getSelectionModel();
		var record = selModel.getSelection()[0];
	    if(record != undefined){
	    	var data = record.data;
	    }
        var operations = context.operations;
        if(!operations) {
     		return;
	    }
	     	this.prepareOperations(operations,data);
    },

    prepareOperations: function(operations,data) {
//    	var enSn = IMER_GLOBAL.encounterSn; //就诊序号
    	var diSn = data.diSn;
        var url = this.url+ '/' + diSn;;
        var mclass = null;
        var METHODS = this.getInvocationMethods();
    	var operation = {
                url: url ,
        		mclass: null,
        		method: METHODS.METHOD_DELETE,
        		condition: null,
        		scope: this,
        		success: this.onSuccess
        	};
    	operations.length = 0;
    	operations.push(operation);
},
   
    onSuccess: function(operation){
    	var view = this.getOwner();
    	var chain = view.getActionChain('init');
    	chain.execute({
    		flag:'1'
    	});
    	var canvas = Xap.getCanvas();
    	var patient = {
    		'pk':IMER_GLOBAL.encounterSn
    	};
    	canvas.fireEvent("updatePatient",{
    		'patient':patient
    	});
    }
});

Ext.define('iih.mr.di.action.InDiagnosisEditFormAction', {
	extend:  Xap.ej.action.Action ,

	requires: [],

    execute: function(context) {
    	var owner = this.getOwner();
		var block = this.getBlock('content');
		var diInGrid = block.down('xapgrid');
		var selModel = diInGrid.getSelectionModel();
		var record = selModel.getSelection()[0];
		var data;
	    if(record != undefined){
	    	data = record.data
	    }
	    var form =block.down('xapform');
	    form.setTitle('诊断编辑');
	    var diCd = block.down('comboxgrid[name=diCd]');
	    diCd.setRecordData({value:data.diCd,text:data.diNm});
	    form.getForm().setValues(data);
	    var value = form.getForm().getValues();
	   /* var diSn = block.down('xaptextfield[name=diSn]');
	    var parDiSn = block.down('xaptextfield[name=parDiSn]');
	    var diTypeCd = block.down('xapcombobox[name=diTypeCd]');
	    var diTime = block.down('datetimefield[name=diTime]');
	    var icdCd = block.down('xaptextfield[name=icdCd]');
	    var memo = block.down('xaptextfield[name=memo]');
	    var addDescr = block.down('xaptextfield[name=addDescr]');
	    var mainF = block.down('xapradiogroup[name=mainFgroup]');
	    //block.setData(data);
	    var diCd = block.down('comboxgrid[name=diCd]');
	    diCd.setRecordData({value:data.diCd,text:data.diNm}); //设置适应病种
	    diSn.setValue(data.diSn);
	    parDiSn.setValue(data.parDiSn);
	    diTypeCd.setValue(data.diTypeCd);
	    diTime.setValue(data.diTime);
	    icdCd.setValue(data.icdCd);
	    memo.setValue(data.memo);
	    addDescr.setValue(data.addDescr);
	    var mainG = mainF.items.items;
	    for(var i=0;i<mainG.length;i++){
	    	if(data.mainF ==mainG[i].inputValue){
	    		mainG[i].setValue(true);
		    }
	    }*/
    }
});

Ext.define('iih.mr.di.action.InDiagnosisInitAction', {
	extend:  Xap.ej.action.ServiceInvocation ,

	requires: [],

    doExecute: function(context) {
    	this.showLoading();
    	var block = this.getBlock('content');
    	var flag = context.flag;
    	if(flag=='1'){
    		block.flag ='1';
    	}
    	var curEnPk = IMER_GLOBAL.encounterSn;
		var enPk = context.enPk;
        if(enPk==undefined){
        	enPk = IMER_GLOBAL.encounterSn;
        }
        var form = block.down('xapform[name=diForm]');
        var value = form.getValues();
        var diInGrid = block.down('xapgrid');
		//子诊断按钮
		var sonDi = diInGrid.down('button[method=sonDi]');
		//编辑按钮
		var editDi = diInGrid.down('button[method=editDi]');
		//删除按钮
		var delDi = diInGrid.down('button[method=delDi]');
        if(curEnPk != enPk){
        	form.setVisible(false);
        	sonDi.setDisabled(true);
			editDi.setDisabled(true);
			delDi.setDisabled(true);
        }else{
        	form.setVisible(true);
        }
        block.enPk = enPk;
        var operations = context.operations;
        if(!operations) {
     		return;
	    }
	     	this.prepareOperations(operations,enPk);
    },

    prepareOperations: function(operations,enPk) {
//    	var enSn = IMER_GLOBAL.encounterSn; //就诊序号
//    	var enSn = '863581';
        var url = this.url+ '/' + enPk;;
        var mclass = null;
        var METHODS = this.getInvocationMethods();
    	var operation = {
                url: url ,
        		mclass: null,
        		method: 'get',
        		condition: null,
        		scope: this,
        		success: this.onSuccess
        	};
    	operations.length = 0;
    	operations.push(operation);
},
   
    onSuccess: function(operation){
        var block = this.getBlock('content');
        var form = block.down('xapform');
        if(block.flag =='1'){
            var formData = {
            		addDescr: undefined,
            			diCd: undefined,
            			diEmpNm: undefined,
            			diNm: undefined,
            			diSn: undefined,
            			diTime: undefined,
            			diTypeCd: undefined,
            			diTypeNm: undefined,
            			icdCd: undefined,
            			mainF: "0",
            			memo: undefined,
            			parDiSn: undefined
            	}; 
            var diCd = block.down('comboxgrid[name=diCd]');
    	    diCd.setRecordData({value:'',text:''}); 
    	    var showInfo = block.down('xapdisplayfield[name=showInfo]');
    	    showInfo.setValue('');
    	    form.setTitle('诊断新增');
            form.getForm().setValues(formData);
        }
        var grid = block.down('xapgrid[name=diListGrid]');
        var m = operation.result;
        for(var i=0;i<m.length;i++){
        	var diTypeCd = m[i].diTypeCd;
        	var parDiSn = m[i].parDiSn;
        	if(diTypeCd =='01' && parDiSn != null){
        			m[i].diTypeNm = '&nbsp &nbsp 入院诊断';
            }else if(diTypeCd =='02' && parDiSn != null){
            		m[i].diTypeNm = '&nbsp &nbsp 出院诊断';
            }else if(diTypeCd =='03' && parDiSn != null){
            		m[i].diTypeNm = '&nbsp &nbsp 补充诊断';
            }
        }
        // TODO 数据格式就这样了？
        if(m instanceof Ext.data.Model) {
            block.setData({
                mclass: operation.mclass,
                data: m.getData(true)
            });
        }
        else {
        	grid.setData(m);
        	console.log(m);
        }
    }
});

Ext.define('iih.mr.di.action.InDiagnosisJudgeBtnAction', {
	extend:  Xap.ej.action.Action ,

	requires: [],

    execute: function(context) {
    	var owner = this.getOwner();
		var block = this.getBlock('content');
		var curEnPK = block.enPk;
		var enPk = IMER_GLOBAL.encounterSn;
		var diInGrid = block.down('xapgrid');
		//子诊断按钮
		var sonDi = diInGrid.down('button[method=sonDi]');
		//编辑按钮
		var editDi = diInGrid.down('button[method=editDi]');
		//删除按钮
		var delDi = diInGrid.down('button[method=delDi]');
		var selModel = diInGrid.getSelectionModel();
		var record = selModel.getSelection()[0];
	    if(record != undefined){
	    	if(curEnPK == enPk){
	    		if(record.data.parDiSn !=''){
	    			sonDi.setDisabled(true);
	    		}else{
	    			sonDi.setDisabled(false);
	    		}
				editDi.setDisabled(false);
				delDi.setDisabled(false);
	    	}else{
	    		
				editDi.setDisabled(true);
				delDi.setDisabled(true);
	    	}
	    }
    }
});

Ext.define('iih.mr.di.action.InDiagnosisSaveAction', {
	extend:  Xap.ej.action.ServiceInvocation ,

	requires: [],

    doExecute: function(context) {
    	var owner = this.getOwner();
		var block = this.getBlock('content');
		var form= block.getForm();
		var showInfo = block.down('xapdisplayfield[name=showInfo]');
		var diCdCom = block.down('comboxgrid[name=diCd]');
		var diCd = diCdCom.getValue();  //诊断字典编码
		var diNm = diCdCom.rawValue;  //诊断字典名称
		var diTypeCdCom = block.down('xapcombobox[name=diTypeCd]');
		var diTypeNm = diTypeCdCom.rawValue; //诊断类别名称
        var enSn = IMER_GLOBAL.encounterSn; //就诊序号
        var diEmpId = IMER_GLOBAL.user.code; //登录者
        var diDeptCd = IMER_GLOBAL.department.code //登录科室
        var data = form.getValues();
        data.enSn = enSn;
        data.diEmpId = diEmpId;
        data.diDeptCd = diDeptCd;
        data.diCd = diCd;
        data.diNm = diNm;
        data.diTypeNm = diTypeNm;
        if(data.diTypeCd == ""){
    		showInfo.setValue('<font color=red>诊断类别为空</font>');
			return null;
    	}else if(data.diCd == ""){
    		showInfo.setValue('<font color=red>诊断名称为空</font>');
			return null;
    	}else if(data.diTime ==""){
    		showInfo.setValue('<font color=red>诊断日期为空</font>');
			return null;
    	}else{
    		var operations = context.operations;
            if(!operations) {
         		return;
    	    }
    	     	this.prepareOperations(operations,data);
    	}
    },

    prepareOperations: function(operations,data) {
        var url = this.url;
        var mclass = null;
        var METHODS = this.getInvocationMethods();
    	var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_CREATE,
            condition: null,	
            data:data,
    		scope: this,
    		success: this.onSuccess,
            fail: this.onFail
    	};
    	operations.length = 0;
    	operations.push(operation);
},
   
    onSuccess: function(operation){
    	var block = this.getBlock('content');
//    	block.getForm().reset(); //清空form
    	var view = this.getOwner();
    	var chain = view.getActionChain('init');
    	chain.execute({
    		flag:'1',
    	});
    	XapMessageBox.info('保存成功!');
    	var canvas = Xap.getCanvas();
    	var patient = {
    		'pk':IMER_GLOBAL.encounterSn
    	};
    	canvas.fireEvent("updatePatient",{
    		'patient':patient
    	});
    },
    
    onFail: function(operation) {
    	XapMessageBox.info('保存失败!');
    }
});

Ext.define('iih.mr.di.action.InDiagnosisShowIcdAction', {
	extend:  Xap.ej.action.Action ,

	requires: [],

    execute: function(context) {
    	var record = context.record;
    	var block = this.getBlock('content');
        var diCd = record.value;
		var icdCd = block.down('xaptextfield[name=icdCd]');
		icdCd.setValue(diCd);
    }
});

Ext.define('iih.mr.di.action.InDiagnosisSonDiAction', {
	extend:  Xap.ej.action.Action ,

	requires: [],

    execute: function(context) {
    	var owner = this.getOwner();
		var block = this.getBlock('content');
		var diInGrid = block.down('xapgrid');
		var selModel = diInGrid.getSelectionModel();
		var record = selModel.getSelection()[0];
	    if(record != undefined){
	    	var data = record.data
	    }
	    var form =block.down('xapform');
	    form.setTitle('子诊断新增');
	    var formData = {
         		addDescr: undefined,
         			diCd: undefined,
         			diEmpNm: undefined,
         			diNm: undefined,
         			diSn: undefined,
         			diTime: undefined,
         			diTypeCd: undefined,
         			diTypeNm: undefined,
         			icdCd: undefined,
         			mainF: "0",
         			memo: undefined,
         			parDiSn: undefined
         	}; 
         var diCd = block.down('comboxgrid[name=diCd]');
 	    diCd.setRecordData({value:'',text:''}); 
 	    var showInfo = block.down('xapdisplayfield[name=showInfo]');
 	    showInfo.setValue('');
        form.getForm().setValues(formData);
	    parDiSn = block.down('xaptextfield[name=parDiSn]');
	    parDiSn.setValue(data.diSn);
    }
});

Ext.define('iih.mr.di.action.InDiagnosisViewreadyAction',{
	extend:  Xap.ej.action.Action ,
	
	requires:[],
	      
	execute: function(context){
		var me = this;
		
	    var owner = this.getOwner();

	    //获取诊断一览的 block
		var contentBlock = this.getBlock('content');	
		var grid = contentBlock.down('xapgrid');
		
		//子诊断按钮
		var sonDi = grid.down('button[method=sonDi]');
		sonDi.on('click',function(btn){
			context.event.name='click';
			var sonDiChain = me.getOwner().getActionChain("sonDi");
			sonDiChain.execute(context);
		});
		
		//编辑按钮
		var editDi = grid.down('button[method=editDi]');
		editDi.on('click',function(btn){
			context.event.name='click';
			var editDiChain = me.getOwner().getActionChain("editDi");
			editDiChain.execute(context);
		});
		
		//删除按钮
		var delDi = grid.down('button[method=delDi]');
		delDi.on('click',function(btn){
			context.event.name='click';
			var delDiChain = me.getOwner().getActionChain("delDi");
			delDiChain.execute(context);
		});
		
	}
	
})
Ext.define('iih.mr.di.action.Util',{
	singleton: true,
    cascadeTransfer : function(treeDatas, nodeHandler, inChildNodeName, scope){
		console.log('typeof treeDatas=',typeof treeDatas);
		var me = this, 
			inChildNodeName = inChildNodeName || 'children',
	        scope = scope || this;
	   
		var _traverse = function(inNode) {
			if (nodeHandler.apply(scope, [inNode]) != false) {
				var items = inNode[inChildNodeName] || [], len = items.length;
				if (len == 0) return;

		        for (var i=0; i<len; i++) {
		          
		          _traverse.apply(scope, [items[i]]);
		        }
		      }
		 };
		 if(this.isArray(treeDatas)){
			 var i=0,len=treeDatas.length;
			 for(;i<len;i++){
				 _traverse.apply(scope, [treeDatas[i]]);
			 }
		 }else{
			 _traverse.apply(scope, [treeDatas]);
		 }
		
		
			
		return treeDatas;
	 },
	 cascadeTransferToNew: function(inJsonTree, nodeHandler,scope, inChildNodeName, outChildNodeName){
	    console.log(typeof inJsonTree);
		var me = this, inChildNodeName = inChildNodeName || 'children',
	      outChildNodeName = outChildNodeName || 'children',
	      scope = scope || me,
	      outData;
	      
			
		var _traverse = function(inNode, outNode) {
			//outNode=outNode||{};
			if (nodeHandler.apply(scope, [inNode, outNode]) != false) {
				var items = inNode[inChildNodeName] || [], 
					len = items.length;
				if (len == 0) return outNode;

				outNode[outChildNodeName] = [];
		        for (var i=0; i<len; i++) {
		          outNode[outChildNodeName][i] = {};
		          _traverse.apply(scope, [items[i], outNode[outChildNodeName][i]]);
		        }
		        return outNode;
		      }
			  
		    };
		    
		if(this.isArray(inJsonTree)){
			 var i=0,len=inJsonTree.length;
			 outData=[];
			 for(;i<len;i++){
				 outData[outData.length]= _traverse.apply(scope, [ inJsonTree[i] , {} ] );
			 }
		 }else{
			 outData = {};
			 _traverse.apply(scope, [inJsonTree, outData]);
		 }	
		return outData;
	 },
	 isArray:function (obj) {   
	   return Object.prototype.toString.call(obj) === '[object Array]';    
	 },
	
	 get: function(field) {
        return this[field];
     },
     
     /*
      * datas: 原数据，
      * nodes： 新数据，
      * */
     filterArry:function(datas,nodes){
     	
   	  for(var i=0;i<datas.length;i++){
   		  
   		  for(var j=0;j<nodes.length;j++){
			  
			      if(datas[i].data){
				      
			    	  if((datas[i].data.diCd == nodes[j].diCd)&&(datas[i].data.stopUseF == 0)){
   				  
   				              Ext.Array.remove(nodes,nodes[j]);
   			             }
						
						if(datas[i].childNodes.length>0){
   				  
   				          for(var m=0;m<datas[i].childNodes.length;m++){
   					  
   				        	 if(nodes.length>0){
   				        		 if((nodes[j].diCd == datas[i].childNodes[m].data.diCd) && (datas[i].childNodes[m].data.stopUseF==0)){
   	   						         Ext.Array.remove(nodes,nodes[j]);
   	   					          }
   				        	 }
   				        }
   			      }
					  
				  }else{
				  
					  if((datas[i].diCd == nodes[j].diCd) && (datas[i].stopUseF ==0)){
   				  
   				       Ext.Array.remove(nodes,nodes[j]);
   			       }
					   
					   if(datas[i].children){
					       if(datas[i].children.length>0){
   				  
   				             for(var m=0;m<datas[i].children.length;m++){
   					  
   				            	if(nodes.length>0){
   				            		   
   				            		if((nodes[j].diCd == datas[i].children[m].diCd) && (datas[i].children[m].stopUseF==0)){
     						              Ext.Array.remove(nodes,nodes[j]);
     					               }
   				            	}
   				            	
   				             }
   			            }
					  }
				  }  
   		  }
   	  }
   	  
   	  return nodes;
    },
    
    commitFilterArry:function(datas,nodes){
    	
    	
    	for(var i=0;i<datas.length;i++){
    		 
   	     Xap.debug(i+"   ----ppppppppp");
   	    
   	    if(datas[i].data){
   		  
   		   if((i+1)<datas.length){
   		   
   		         if((datas[i].data.diCd == datas[i+1].data.diCd)&&(datas[i].data.stopUseF == 0)){
    				  
   				          if(datas[i].data.diSn==''){
   						     Ext.Array.remove(datas,datas[i]);
   						  }else{
   						    Ext.Array.remove(datas,datas[i+1]);
   						  }
    				              
   							  
    			    }

   		
   			    		  
   	  			          if(datas[i].childNodes.length>0){
   	  	     				  
   	   				          for(var m=0;m<datas[i].childNodes.length;m++){
   	   					  
   	   				        	if((datas[i+1].data.diCd == datas[i].childNodes[m].data.diCd) && (datas[i].childNodes[m].data.stopUseF==0)){
   								   
   								      if(datas[i+1].data.diSn==''){
   									      Ext.Array.remove(datas,datas[i+1]);
   									  }else{
   									      Ext.Array.remove(datas,datas[i]);
   									  }
   	   						           
   							
   	   					         }
   	   				         }
   	   			          }else if(datas[i+1].childNodes.length>0){
   						  
   						       for(var m=0;m<datas[i+1].childNodes.length;m++){
   	   					  
   	   				        	if((datas[i].data.diCd == datas[i+1].childNodes[m].data.diCd) && (datas[i+1].childNodes[m].data.stopUseF==0)){
   								   
   								      if(datas[i+1].data.diSn==''){
   									      Ext.Array.remove(datas,datas[i+1]);
   									  }else{
   									      Ext.Array.remove(datas,datas[i]);
   									  }
   	   						           
   							
   	   					         }
   	   				         }
   						  }
   			    	  
   		   }
   		
   		  
   		}else{
   		
   		     Xap.debug("-------------------");
   		 }
   	 }
    	
    	  return datas;
  	  /*for(var i=0;i<datas.length;i++){
 		  
 		  for(var j=0;j<nodes.length;j++){
			  
			      if(datas[i].data){
				      
			    	  if((datas[i].data.diCd == nodes[j].data.diCd)&&(datas[i].data.stopUseF == 0) && (datas[i].data.diSn=='')){
 				  
 				              Ext.Array.remove(datas,datas[j]);
 			             }
						
			    	  if(datas[i].childNodes){
			    		  
	  			          if(datas[i].childNodes.length>0){
	  	     				  
	   				          for(var m=0;m<datas[i].childNodes.length;m++){
	   					  
	   				        	if((nodes[j].data.diCd == datas[i].childNodes[m].data.diCd) && (datas[i].childNodes[m].data.stopUseF==0) && (datas[i].data.diSn=='')){
	   						           Ext.Array.remove(datas,datas[j]);
	   					         }
	   				         }
	   			          }
			    	  }
						
					  
				  }else{
				  
					  if((datas[i].diCd == nodes[j].diCd) && (datas[i].stopUseF ==0) &&(datas[i].diSn=='')){
 				  
 				             Ext.Array.remove(datas,datas[j]);
 			           }
					   
					   if(datas[i].children){
					       if(datas[i].children.length>0){
 				  
 				             for(var m=0;m<datas[i].children.length;m++){
 					  
 				            	if((nodes[j].diCd == datas[i].children[m].diCd) && (datas[i].children[m].stopUseF==0) && (datas[i].children[m].diSn=='')){
 						              Ext.Array.remove(datas,datas[j]);
 					               }
 				              }
 			              }
					   }
						
						
				  
				  }  
 		  }
 	  }*/
 	  
 	
    }
});
 
Ext.define('iih.mr.di.action.OutDiagnosisDelAction',{
	extend :  Xap.ej.action.ServiceInvocation ,
	                                   
	
	doExecute: function(context) {
		   //this. showLoading();
           this.prepareOperations(context.operations,context);
        },
	 prepareOperations: function(operations,context) {
        	
        	 var me = this;
             var owner=me.getOwner();	
             var tree = owner.ownerCt.down('diagnosisfiltertree');
             var selModel=tree.getSelectionModel();
             var selRecord = selModel.getSelection()[0];
             var diSn = selRecord.get('diSn');
            // var data = selRecord.data;
             var data = {enSn:IMER_GLOBAL.encounterSn,diCd:selRecord.data.diCd};
	        var url = this.url+'/'+diSn;
	        var METHODS = this.getInvocationMethods();
	    	var operation = {
	            url: url,
	            data:data,
	    		mclass: null,
	    		method: METHODS.METHOD_DELETE,
	    		condition: null,
	    		scope: this,
	    		success: this.onSuccess,
	    	    fail: this.onFailure
	    	};
	    	operations.push(operation);
	    },
	
	onSuccess : function(operation) {
	    	 var me = this;
		     var owner=me.getOwner();	
		     var tree = owner.ownerCt.down('treepanel');
		     
		     var diagnosischain = owner.getActionChain("outDiagnosisInitAction");
	         var diagnosisAction = diagnosischain.getActionByClass('iih.mr.di.action.OutDiagnosisInitAction');
	         diagnosisAction.url = '/di/'+IMER_GLOBAL.encounterSn+'/dis?orgCode='+IMER_GLOBAL.hospitalArea.code;
	         diagnosischain.execute();
	         
	         iih.po.com.iemrTohisEvent.fireEvent('diagnosisComit');
	         
	         var outmrwriteview = Ext.getCmp('outmrwriteview');
			 var diagnosis = outmrwriteview.getBlock('right').getActionChain('emrRefreshDiagnosis');
			 diagnosis.execute();
	    },
    onFailure: function(operation) {
	    	XapMessageBox.info('删除失败!');
	    },  
});

Ext.define('iih.mr.di.model.OutDiagnosisModel', {
    extend:  Ext.data.Model ,
    fields: [
        {name: 'diSn',     type: 'string'},//诊断序号
        {name: 'diCd',     type: 'string'},//诊断编码
        {name: 'diNm', type: 'string'},//诊断名称
 		{name:'lvl',type:'int'},//层级
 		{name:'suspected',type:'bool'}, //疑似标志
 		{name:'tochek',type:'bool'}, //待查标志
 		{name:'addDescr',type:'string'} ,//补充说明
 		{name:'icdCd',type:'string'},//ICD编码
 		{name:'diEmpCd',type:'string'},//诊断医师编码
 		{name:'diEmpNm',type:'string'},//诊断医师
 		{name:'diTime',type:'long',defaultValue:new Date().getTime()},//诊断时间
 		{name:'stopUseF',type:'int',defaultValue:0},//确认结果
 		{name:'updCount',type:'int',defaultValue:0},
 		{name:'setOwnerTypeCd',type:'string',defaultValue:''},
 		{name:'setOwnerCd',type:'string',defaultValue:''},
 		{name:'mainF',type:'int',defaultValue:0}
 		        
    ]
//     validations: [                 
//          {type: 'length',   name: 'addDescr', min: 5},               
//     ]
   /* proxy:{
        type: 'memory',
        id: 'DiagnosisEntry-List'
    }*/ 
});
Ext.define('iih.mr.di.action.OutDiagnosisInitAction',{
	extend :  Xap.ej.action.ServiceInvocation ,
	                                                                       
	
	doExecute: function(context) {
/*	     var owner = this.getOwner();
	     var diagnosisSavechain = owner.getActionChain("outDiagnosisSaveAction");
	     diagnosisSavechain.execute();*/

		   //this. showLoading();
           this.prepareOperations(context.operations,context);
        },
	 prepareOperations: function(operations,context) {
	       
        	/*var condition = {
        	         userId: IMER_GLOBAL.user.code,
        	         orgCd: IMER_GLOBAL.department.code
        	          
        	        };
        	        
        	var qs = Ext.Object.toQueryString(condition);
        	var url = this.url;
        	url += '?' + qs;*/
        	
	        var url = this.url;
	        var METHODS = this.getInvocationMethods();
	    	var operation = {
	            url: url,
	    		mclass: null,
	    		method: METHODS.METHOD_GET,
	    		condition: null,
	    		scope: this,
	    		success: this.onSuccess,
	    	    fail: this.onFailure
	    	};
	    	operations.push(operation);
	    },
	
	onSuccess : function(operation) {
	         var me = this;
		     var owner=me.getOwner();	
		     var tree = owner.ownerCt.down('diagnosisfiltertree');
		 	 var selModel=tree.getSelectionModel();
		 	 var rootNode=tree.getRootNode();
		     
		     var res = operation.result;
		    
		     
		     var datas = iih.mr.di.action.Util.cascadeTransfer(res, function(node){
					node['expanded'] = true;
					if (node['children']) {
						node['leaf'] = false;
					} else {
						node['leaf'] = true;
					}
					
					if(node['icdCd'] == 'NULL'){
					    node['icdCd'] = '';
					}
				});
		     
		      tree.setData(datas);
		      if(owner.data!=null){
		    	  owner.csaInsertDiagnosis(owner.data);
		    	  owner.data = null;
		      }
		     
		      
		      var index = rootNode.childNodes.length;
		      var node = {
		      		      'diNm':'',
			       	      'diEmpNm':IMER_GLOBAL.user.name,
			       	      'diEmpCd':IMER_GLOBAL.user.code,
			       	      'diTime':'',
			       	      'diCd':'',
						  'diSn':'',
						  'icdCd':'',
						  'setOwnerTypeCd':'',
		          	      'setOwnerCd':'',
			        	   leaf:true	 
		         };
		  	   rootNode.insertChild(index,node);
		  	   selModel.select(node);  
	    	
	    },
	 onFailure: function(operation) {
	    	XapMessageBox.info('查询失败!');
	    },  
});

 Ext.define('iih.mr.di.action.OutDiagnosisItemClickAction', {
	extend:  Xap.ej.action.Action ,
	                                           
	/*
	* @Override
	*/
	execute: function(context) {
		
		this.callParent();
    	var event = context.event;
        var me=this;
    	var outDiagnosisBlock=this.getBlock('content');
			
    	if(event) {
	    	var node = args = event.arguments[1];
	    	if(context.event.arguments[4].target.name){
	    		
	    		var dataIndex = context.event.arguments[4].target.name;
	    		if(dataIndex=="tocheck"){
	    			
	    			node.data.tocheck = context.event.arguments[4].target.checked;
	    			
	    		}else if(dataIndex=="suspected"){
	    			
	    			node.data.suspected = context.event.arguments[4].target.checked;
	    		}	    		
	    	}
    	}    	     	
	}
	
 });
 Ext.define('iih.mr.di.action.OutDiagnosisMoveAction', {
	extend:  Xap.ej.action.Action ,
	                                               
	/*
	* @Override
	*/
	execute: function(context) {
	 
         var me = this;
	     var owner=me.getOwner();	
	     var tree = owner.ownerCt.down('diagnosisfiltertree');
	     var rootNode = tree.getRootNode();
	     var selModel=tree.getSelectionModel();
	     var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
	     if(properties.data.action=='moveup'){
	    	 
	    	 me.moveUpOrDownFun(selModel,1);
	    	
	    	 
	     }else if(properties.data.action=='movedown'){
	    	 
	    	 me.moveUpOrDownFun(selModel,2);
	    	
	    	 
	     }else if(properties.data.action=='insertBtn'){
	    	 
	    	 me.insertDiagnosisFun(rootNode,tree);
	    	 
	     }else if(properties.data.action=='newRowOnButtom'){
	    	 
	    	 me.newRowOnButtom(rootNode,tree);
	    	 
	     }else if(properties.data.action=='commitBtn'){
	    	 
	    
	     }else if(properties.data.action=='deleteBtn'){
	    	 
	    	 me.delDiagnosisFun(selModel,me);
	     }
	     
	     
    },
    
    //上下移动
    moveUpOrDownFun:function(selModel,flag){
    	
	     var selRecord = selModel.getSelection()[0];
	   	 if(selRecord){
	   		     var parentNode=selRecord.parentNode;
	        	 var previousSibling =selRecord.previousSibling;
	        	 var index;
	        	 if(flag == 1){
	        		  
	        		 if(!previousSibling ){
			             //第一个子节点不能上移
			        	 return;
			          }else{
			        	  var indexRecord=parentNode.indexOf(previousSibling);
					      index = indexRecord;
			          }
	        	 }else{
	        		 
	        		   var indexRecord=parentNode.indexOf(selRecord);
	        	       if( parentNode.childNodes.length===index+1){
	        	    	   //最后一条不能移动
	        	    	   return;
	        	       }else{
	        	    	   index = indexRecord+1;
	        	    	  
	        	       }
	        	 }
	        	  selRecord.remove();
				  parentNode.insertChild(index,selRecord);
				  selModel.select(selRecord);    
	   	    }
    },
    //在当前行上面插入一行
    insertDiagnosisFun:function(rootNode,tree){
    	
    	 var index = rootNode.childNodes.length;
    	 var selModel=tree.getSelectionModel();
 	     var selRecord=selModel.getSelection()[0];
 	     var selectIndex = rootNode.indexOf(selRecord);
 	     if(index != selectIndex){
 	    //  if(rootNode.lastChild===selRecord){
 	    	if(selRecord.data.diNm!=''){
 	    		
 	    		var node = {
 	          		      'diNm':'',
 	    	       	      'diEmpNm':IMER_GLOBAL.user.name,
 	    	       	      'diEmpCd':IMER_GLOBAL.user.code,
 	    	       	      'diTime':'',
 	    	       	      'diCd':'',
 	    				  'diSn':'',
 	    				  'icdCd':'',
 	    				  'setOwnerTypeCd':'',
 	              	      'setOwnerCd':'',
 	    	        	   leaf:true	 
 	             };
 	      	   rootNode.insertChild(selectIndex,node);
 	    	}
 	    }
         
       //  tree.setData(node);
    },
    //最下面新增一行
    newRowOnButtom:function(rootNode,tree){
    	
    	 var index = rootNode.childNodes.length;
    	 var selModel=tree.getSelectionModel();
 	     var selRecord=selModel.getSelection()[0];
 	    if(rootNode.lastChild===selRecord){
 	    	if(selRecord.data.diNm!=''){
 	    		
 	    		var node = {
 	          		      'diNm':'',
 	    	       	      'diEmpNm':IMER_GLOBAL.user.name,
 	    	       	      'diEmpCd':IMER_GLOBAL.user.code,
 	    	       	      'diTime':'',
 	    	       	      'diCd':'',
 	    				  'diSn':'',
 	    				  'icdCd':'',
 	    				  'setOwnerTypeCd':'',
 	              	      'setOwnerCd':'',
 	    	        	   leaf:true	 
 	             };
 	      	   rootNode.insertChild(index,node);
 	    	}
 	    }
         
       //  tree.setData(node);
    },
    
    //删除
    delDiagnosisFun:function(selModel,me){
    	
    	 var selRecord = selModel.getSelection()[0];
    	 var outDiagnosisAction = me.getOwner().getActionChain('outDiagnosisDelAction');
    	 if(selRecord){
    		 XapMessageBox.confirm2(
 					'确认删除该记录？',
 					function(btn){
 						if(btn == 'yes'){
 							
 							if(selRecord.get('diSn')==''){
 				    			 selRecord.parentNode.removeChild(selRecord);
 				    		 }else{
 				    			outDiagnosisAction.execute();
 				    		 }
 						}
 				});
    	 }else{
    		 XapMessageBox.info('请选择一条记录!');
    	 }
    }
});
Ext.define('iih.mr.di.action.OutDiagnosisPageCloseAction', {
    extend:  Xap.ej.action.ServiceInvocation ,

    
    /*
    * @Override
    */
    doExecute: function(context) {
    	console.log('iih.mr.di.action.OutDiagnosisPageCloseAction') ;
    	var operations = context.operations;
        if(!operations) {
            return;
        }
    	var gui = require('nw.gui');
		var win = gui.Window.get();
		var page = this.getOwner();
		//console.log('page') ;
		//console.log(page) ;
		win.on('close', function() {
			var a = this ;
			var close=function(){
				a.close(true);
			};
			if(!page.hasEdit()){
			  return;
			}
			//var box = new Ext.window.MessageBox();
			XapMessageBox.confirm('是否保存对诊断录入的修改？',
		            function(btn, text){
		                if (btn == 'yes') {
		                	var saveActionChain= page.getActionChain('outDiagnosisSaveAction');
		                	saveActionChain.execute({callback:close});
		                } else if (btn == 'no') {
		                	close();
		                } else if (btn == 'cancel') {
		                }
		            },page
		        );
	
		});

    }
});

Ext.define('iih.mr.di.action.OutDiagnosisParamAction',{
	extend :  Xap.ej.action.ServiceInvocation ,
	                                   
	
	doExecute: function(context) {
		   //this. showLoading();
           this.prepareOperations(context.operations,context);
        },
	 prepareOperations: function(operations,context) {
  
	        var url = this.url+'/SYSM01.3';
	        var METHODS = this.getInvocationMethods();
	    	var operation = {
	            url: url,
	           
	    		mclass: null,
	    		method: METHODS.METHOD_GET,
	    		condition: null,
	    		scope: this,
	    		success: this.onSuccess,
	    	    fail: this.onFailure
	    	};
	    	operations.push(operation);
	    },
	
	onSuccess : function(operation) {
	    	 var me = this;
	    	 var res = operation.result.dataList;
	    	 var b = true;
	    	 if(res && res.length>0){
	    		 //IMER_GLOBAL.department.code
	    		 for(var i=0;i<res.length;i++){
	    			 if(res[i].value == IMER_GLOBAL.department.code){
	    				 b = true;
	    				 break;
	    			 }
	    		 }
	    		 
	    		 if(b){
	    			     var owner = me.getOwner();
	    			     var diagnosisSavechain = owner.getActionChain("outDiagnosisSaveAction");
	    			     diagnosisSavechain.execute();
	    			     owner.data=null;
	    		 }
	    	 }
		    
	    },
    onFailure: function(operation) {
	    	XapMessageBox.info('参数加载失败!');
	    },  
});

Ext.define('iih.po.com.iemrTohisEvent', {
	extend:  Ext.util.Observable ,
	singleton: true,
    constructor: function (value) {
    	this.callParent();
        this.addEvents(
            'diagnosisComit'
        );
    }
});
Ext.define('iih.mr.di.action.OutDiagnosisSaveAction', {
	extend:  Xap.ej.action.ServiceInvocation ,

	           
                                
                                   
    
      

    doExecute: function(context) {
        if(context.callback){
        	this.getOwner().callback=context.callback;
        }
	    this.prepareOperations(context);
    },

    prepareOperations: function(context) {
    	
        var me = this;
    	var owner=me.getOwner();	
	    var tree = owner.ownerCt.down('diagnosisfiltertree');
	    var nodes = tree.getStore().getRootNode().childNodes;
	    var diagnosisDatas = [];
	    
	    for(var i=0;i<nodes.length;i++){
	    	
	    	var diagnosisRecord = {};
	    	if(nodes[i].get('diNm')!=''){
	    		
	    		diagnosisRecord['diSn']=nodes[i].get('diSn');
	    	   	if(/.*[\u4e00-\u9fa5]+.*$/.test(nodes[i].get('diSn'))){
				    diagnosisRecord['diSn'] = '';
				}else{
				    diagnosisRecord['diSn']=nodes[i].get('diSn');
				}
	    	   	if(!nodes[i].get('diCd')){
	    	   		continue;
	    	   	}
		       	diagnosisRecord['diCd']=nodes[i].get('diCd');
		       	diagnosisRecord['diNm']=nodes[i].get('diNm');
		       	diagnosisRecord['suspected']=nodes[i].get('suspected');
		       	diagnosisRecord['tocheck']=nodes[i].get('tocheck');
		       	diagnosisRecord['addDescr']=nodes[i].get('addDescr');
		       	diagnosisRecord['icdCd']=nodes[i].get('icdCd');
		       	diagnosisRecord['diEmpCd']=nodes[i].get('diEmpCd');
		       	diagnosisRecord['diEmpNm']=nodes[i].get('diEmpNm');
		       	diagnosisRecord['diTime']=nodes[i].get('diTime');        	
		       	diagnosisRecord['updCount']=nodes[i].get('updCount');
		    	diagnosisRecord['setOwnerTypeCd']=nodes[i].get('setOwnerTypeCd');
		    	diagnosisRecord['setOwnerCd']=nodes[i].get('setOwnerCd');
		    	
		    	diagnosisDatas.push(diagnosisRecord);
	    	}
	    	
	    }
	    
	    var data = {enSn:IMER_GLOBAL.encounterSn,list:diagnosisDatas};
	    context.operations = [];
        var METHODS = this.getInvocationMethods();
        var url = this.url;
        var operation = {
                url: url,
                mclass: null,
                method: METHODS.METHOD_CREATE,
                condition: null,
                data:data,
                scope: this,
                success: this.onSuccess,
                fail: this.onFail
            };
        context.operations.push(operation);
        
       // return true;
    },
   
    
    onSuccess: function(operation){
    	 var me = this;
	     var owner=me.getOwner();	
	     this.callback();
	     var tree = owner.ownerCt.down('diagnosisfiltertree');
	     
	     var diagnosischain = owner.getActionChain("outDiagnosisInitAction");
         var diagnosisAction = diagnosischain.getActionByClass('iih.mr.di.action.OutDiagnosisInitAction');
         diagnosisAction.url = '/di/'+IMER_GLOBAL.encounterSn+'/dis?orgCode='+IMER_GLOBAL.hospitalArea.code;
         diagnosischain.execute();
         
         iih.po.com.iemrTohisEvent.fireEvent('diagnosisComit');
         
         var outmrwriteview = Ext.getCmp('outmrwriteview');
		 var diagnosis = outmrwriteview.getBlock('right').getActionChain('emrRefreshDiagnosis');
		 diagnosis.execute();
    },
    
    onFail: function(operation) {
    	XapMessageBox.info('查询失败!');
    }
	,
    callback: function() {
    	if(this.getOwner().callback){
        	var callback=this.getOwner().callback;
        	callback();
        }
   }
});

/**
 * @author wujunhui<wu.junhui@founder.com>
 * @docauthor wujunhui<wu.junhui@founder.com>
 * 模板中的预留块,请使用实际业务中需要的块替换它。
 */
Ext.define('Xap.ej.stl.view.PlaceHolderBlock', {
	extend :  Xap.ej.block.FormBlock ,

	            
		                        
	  

	alias : 'widget.xapplaceholderblock',

	border : 1,
	
	height : 50,
	
	items : [
	{html:'替换此区域为业务BLOCK'}
	]
});

/**
 * @author wujunhui<wu.junhui@founder.com>
 * @docauthor wujunhui<wu.junhui@founder.com>
 * 该模板是左右布局的容器模板。定义该模板主要是为了将来对左右布局的画面进行统一修改。
 */
Ext.define('Xap.ej.stl.view.LeftRightContainerTemplate', {
	extend :  Xap.ej.template.BaseTemplate ,

	            
		                                  
	  

	alias : 'widget.xapleftrightcontainertemplate',

	border : 0,

	layout : {
		type: 'hbox',
		align : 'stretch'
	},
	
	defaultXapConfig: {
		blocks: {
			'left': {
				xclass: 'Xap.ej.stl.view.PlaceHolderBlock',
				width:100
			},
			'right': {
				xclass: 'Xap.ej.stl.view.PlaceHolderBlock',
				flex:1
			}
		}
	},

	initBlock : function() {
		this.callParent();
	},

	doCheckXapConfig: function() {
		// TODO 必须包括的Action等等...
	},

	getLeftBlock : function() {
		return this.getBlock('left');
	},
	
	getRightBlock : function() {
		return this.getBlock('right');
	}
});

/** 
 *
 * 单选框列表
 * @extends Ext.form.field.Radio
 * @author：chenyajie<chen_yajie@founder.com>
 * 
 *
 */
Ext.define('Xap.ej.element.field.Radio', {
	extend:  Ext.form.field.Radio ,
	alias: 'widget.xapradio'
});
Ext.define('Xap.ej.block.LayeredBlock', {
	extend:  Xap.ej.block.Block ,

	            
		                    
	  

	initBlock: function() {
		this.callParent();
		this.refreshLayers();
	},

	refreshLayers: function() {
		var dict = this.getLayer(Xap.ej.block.Layer.DICTIONARY);
		dict.render();
	}
});
/** 
 *
 * @extends Ext.tree.Panel
 * @author ：chenyajie<chen_yajie@founder.com>
 * 该面板为Ext.tree.Panel派生而来，因此可以传入所有符合Ext.grid.Panel的配置选项和方法
 * 异步加载时请求url携带节点id参数为node
 *## example xaptree
 *
 *     @example
 *	    	Ext.create('Ext.panel.Panel', {					
 *	    		bodyPadding: 5,  // Don't want content to crunch against the borders				
 *	    		height: 400,				
 *	    		width: 900 ,				
 *	    		title: 'Panel',				
 *	    		items: [{				
 *	    			xtype: 'xaptree',			
 *	    			//为该tree指定数据源			
 *	    			treeData:[			
 *	    				{ text: "北京", leaf: true },		
 *	    				{ text: "上海", expanded: true, children: [		
 *	    					{ text: "虹口", leaf: true },	
 *	    					{ text: "高桥", leaf: true}	
 *	    				] },		
 *	    				{ text: "河北", leaf: true }		
 *	    			]			
 *	    		}],				
 *	    		renderTo: Ext.getBody()				
 *	    	});					
 *
 *
 */

Ext.define('Xap.ej.element.tree.Tree', {
    extend:  Ext.tree.Panel ,
	            
		                           
	  

	//mixins : ['Xap.ej.block.LayeredBlock'],
	
    alias: 'widget.xaptree',

	/**
	 * @cfg {object} treeData
	 * 为该tree指定数据源
	 */
	treeData : null,
	

	/**
	 * @cfg {boolean} 
	 * false 不显示根节点
	 */
	rootVisible: false,
	
	/**
	 * @cfg {object} 
	 *  记录节点id
	 */
	nodeId: null,
	
	/**
	 * @cfg {string} 
	 *  根据节点id选中节点
	 */
	selectBy: 'id',
	/**
	 * @cfg {boolean} 
	 *  是否setData后选中节点
	 */
	ifSelect: true,
	/**
	 * @cfg {string} 
	 *  根节点id
	 */
	rootId: '0',
	/**
	 * @cfg {string} 
	 *  请求数据的url
	 */
	url: '',
	/**
	 * @cfg {Array} 
	 *  通过此参数添加节点属性
	 */
	treeFields: [ ],
	/**
	 * @cfg {Array} 
	 *  默认节点属性
	 */
	defaultFields : [ {
			name : 'id',
			type : 'string'
		}, {
			name : 'text',
			type : 'string'
		}, {
			name : 'leaf',
			type : 'boolean'
	}],
	/**
	 * @cfg {object} contextmenu
	 *
	 * 为该tree 配置右键菜单项
	 * contextmenu: [
	 *      {text:'节点按钮',method:'method1'},
	 *		{text:'非叶子节点按钮',leaf:false,method:'method2'},
	 *		{text:'叶子节点按钮',leaf:true,method:'method3'}
	 *	]
	 *
	 * text 方法名称    leaf：为空（节点都显示）、false（非叶子节点显示）、true（叶子节点显示）  method触发的方法
	 */
	contextmenu : null,
	
	
	initComponent: function() {
		var me = this;
		//初始化treeStore
		me.init_store();
		//初始化右键菜单
		if (this.contextmenu) {
			this.addListener('itemcontextmenu',this.bandContextMenu); 
		}
        this.callParent(arguments);
		//行点击事件
		this.addListener('itemclick',this.item_click);
		//展开事件监听
		this.addListener('beforeitemexpand',this.beforeitemexpand_click);
		
        //this.initBlock();
		
    },
	/**     
	* 初始化treeStore
	*/
	beforeitemexpand_click:function(node){
		if(!node.hasChildNodes( )){
			this.fireEvent('treeitemexpand',node);
		}
		
	},
	/**     
	* 初始化treeStore
	*/
	init_store:function(){
		var me = this;
		//初始化treeStore
		if (this.treeData) {
			this.store = Ext.create('Ext.data.TreeStore', {
				root: {
					expanded: true,
					children: this.treeData
				}
			});
		}/*else{
			var fields = Ext.Array.merge(defaultFields,treeFields);
			var treeModel = Ext.create('Ext.data.Model', {
				fields : fields
			});
			this.store = Ext.create('Ext.data.TreeStore', {
				model: treeModel,
				proxy: {
					type: 'ajax',
					url: me.url
				},
				reader: {
					type: 'json'
				},
				folderSort: true,
				sorters: [{
					property: 'text',
					direction: 'ASC'
				}],
				root: {
					id: me.rootId,
					text: '根节点',
					expanded: false
				}
			});
		};*/
    },
	/**     
	* 节点点击事件
	*/
	item_click:function(view, record,item,index,e,eOpts){
		//记录点击节点的id
		this.nodeId = record.data['id'];
    },
	/**     
	 *  
     * 得到该tree增加节点
	 * @param {object} 增加一个{} 多个[{},{}]
	 * @return Ext.data.NodeInterface
     * 
	 */
	addNodeData:function(node){
    	return this.getRootNode( ).appendChild(node);
    },
	
	/**     
	 *  
     * 得到该tree 赋值节点
	 * @param {object} 赋值一个{} 多个[{},{}]
	 * @return Ext.data.NodeInterface
     * 
	 */
	setData:function(node){
		if(node){
			this.getRootNode( ).removeAll();
			if(node instanceof Array){//是[]
				if(node.length > 0){
					this.addNodeData(node);
				}
			}else{//是{}
				this.addNodeData(node);
			}
			//如果赋值后选择上次已选节点
			if(this.ifSelect){
				this.selectById(this.nodeId);
			}
		}   	
    },
	/**     
     * 根据节点id选中节点
	 * @param {String} 
	 */
	selectById:function(nodeId){
		if(nodeId){
			var r = this.getStore().getNodeById(nodeId);
			this.getSelectionModel( ).select(r);
		}else{
			this.getSelectionModel( ).select(0);
		}
    	
    },
	
	/**     
	* 
	* 绑定右键菜单
	* 
	*/
	bandContextMenu:function(menutree,record,items,index,e){
    	var me = this;			
		e.preventDefault();  
		e.stopEvent();
		var leaf = record.data.leaf;
		//判断是否配置菜单项
		if(this.contextmenu){
			var menuLength = this.contextmenu.length;
			var items = [];
			for( var i =0;i<menuLength;i++){
				if(this.contextmenu[i].leaf == leaf ||this.contextmenu[i].leaf == null){
					//执行的方法
					var method = me.contextmenu[i].method;
					Ext.apply(this.contextmenu[i], {
						handler : function() { 
							console.log('fireEvent:contextmenuclick--method:'+method);
							//触发事件
							me.fireEvent('contextmenuclick',method,record);
						}
					});
					items.push(this.contextmenu[i]);
				}
			}
			var nodemenu = new Ext.menu.Menu({  
				floating:true,  
				items:items
			});	
			nodemenu.showAt(e.getXY()); 
		}
    }
	
        
});




/** 
 *
 * @extends Ext.tree.Panel
 * @author ：wangyanli
 * 
 */
Ext.define('Xap.ej.element.tree.FilterTree', {
    extend:  Xap.ej.element.tree.Tree ,
    alias: 'widget.filtertree',
	leafNodes : [] ,
    filterByText: function(text) {
        this.filterBy(text, 'text');
    },
    /**
     * Filter the tree on a string, hiding all nodes expect those which match and their parents.
     * @param The term to filter on.
     * @param The field to filter on (i.e. 'text').
     */
    filterBy: function(text, by) {
        this.clearFilter();
        var view = this.getView(),
            me = this,
            nodesAndParents = [];
			
        // Find the nodes which match the search term, expand them.
        // Then add them and their parents to nodesAndParents.
        if(null != text && text.toString() != ''){
        	this.getRootNode().cascadeBy(function(tree, view){
                var currNode = this;
                if(currNode && (null != currNode.data[by] && 'undefined' != currNode.data[by]) && currNode.data[by].toString().toLowerCase().indexOf(text.toString().toLowerCase()) > -1) {
                    //me.expandPath(currNode.getPath());
                    while(currNode.parentNode) {
    					currNode.expand();
    					if(currNode.data.leaf){
    						me.leafNodes.push(currNode);
    				    };
                        nodesAndParents.push(currNode.id);
                        currNode = currNode.parentNode;
                    }
                }
            }, null, [me, view]);
            // Hide all of the nodes which aren't in nodesAndParents
            this.getRootNode().cascadeBy(function(tree, view){
                var uiNode = view.getNodeByRecord(this);
                if(uiNode && !Ext.Array.contains(nodesAndParents, this.id)) {
                    Ext.get(uiNode).setDisplayed('none');
                }
            }, null, [me, view]);
        }
        
    },
    clearFilter: function() {
		this.leafNodes.length=0;
        var view = this.getView();
        this.getRootNode().cascadeBy(function(tree, view){
            var uiNode = view.getNodeByRecord(this);
            if(uiNode) {
                Ext.get(uiNode).setDisplayed('table-row');
            }
        }, null, [this, view]);
    }
});
/** 
 *基本Panel 
 * @extends Ext.panel.Panel
 * @author ：chenyajie<chen_yajie@founder.com>
 * 
 *
 */
Ext.define('Xap.ej.element.panel.Panel', {
	extend:  Ext.panel.Panel ,
	alias: 'widget.xappanel'
});
Ext.define('iih.mr.kr.csa.block.CSATreeBlock',{
	extend :  Xap.ej.block.FormBlock ,
	           
	                                      
	                                        
	                                          
	                                           
	             
	alias:'widget.csatreeblock',
	border: 0,
    items:  [{
    	xtype:'xappanel',
    	border:0,
    	padding:'10 0 5 0',
    	layout: {
			type: 'table',
			columns: 2,
			tableAttrs: {
	            border: 0,
	            cellspacing: 1,
	            width: '100%'
	        },
	        tdAttrs: {
	            valign: 'left'
	        }
	    },
	    items:[{
	    	 xtype:'xapradio',
	    	 boxLabel: '科室', 
	    	 action: 'ownerTypeDept', 
	    	 inputValue: 'MDM08.02',
	    	 name:'ownerType',
	    	 checked:true
	        
	    },/*{
	    	xtype: "xapcombobox",
			action:'dept',
			disabled:false
	    },*/{
	    	 xtype:'xapradio',
	    	 boxLabel: '个人', 
	    	 action: 'ownerTypePerson', 
	    	 inputValue: 'MDM08.03',
	    	 name:'ownerType',
	    	 
	    }]
    },/*{
    	xtype:'xappanel',
    	padding:'10 0 0 0',
    	border:0,
    	layout: {
			type: 'table',
			columns: 2,
			tableAttrs: {
	            border: 0,
	            cellspacing: 1,
	            width: '100%'
	        },
	        tdAttrs: {
	            valign: 'left'
	        }
	    },
	   items:[{
	    	xtype: "xapcombobox",
			fieldLabel: '组套分类',
			labelWidth:55,
			action:'krtype',
			emptyText:'分类1',
			value:'001',
			width:197,
			disabled:false
	    },{
	    	xtype: 'xapbutton',
			text: '查询',
			action: 'searchBtn',
	    }]
    },*/{
    	// xtype:'xaptree',
    	 xtype:'filtertree',
         action:'csatree',
         border:0,
         flex: 1,
         rootVisible: false,
         collapsible: false,//是否可以折叠
		 split: true,
		 autoScroll: true,  //滚动条
		 height:380,
		 tbar:[{
		            xtype: 'trigger',
			        onTriggerClick: function () {
			            this.setValue('');
			            this.ownerCt.ownerCt.ownderCt.down("filtertree").clearFilter();
			        },
			        width:'100%',
			        //fieldLabel: '组套分类',
			        emptyText:'组套分类中文快速检索功能',
			        enableKeyEvents: true,
			        listeners: {
			            keyup: {
			                fn: function (field, e) {
			                    if (Ext.EventObject.ESC == e.getKey()) {
			                        field.onTriggerClick();
			                    } else {
			                        var filtercontent = Ext.util.Format.trim(this.getRawValue());
			                    	var reg = new RegExp("[\\u4E00-\\u9FFF]+","g");
							    	if(reg.test(filtercontent)){
							    		this.ownerCt.ownerCt.filterBy(filtercontent, 'text');
							    	}else {
							    		this.ownerCt.ownerCt.filterBy(filtercontent, 'code');
							    	}
			                    }
			                }
			            }
			        }
		    }]
    }],
    setData : function(data) {
    	var cstree = this.down('xaptree[action=csatree]');
    	if(!data[0]){
    		cstree.getRootNode( ).removeAll();
    		return;    	
    	}
        var csaModels = [];
        for(var i in data){
        	var csamodel = Ext.create('iih.mr.kr.csa.model.CSAModel',[])
        	var singleData = data[i];
        	if(singleData.children){
        		var child = singleData.children;
        		
        		for(j=0;j<child.length;j++){
        			//child[j]['text']=child[j].text;
        			child[j]['expand']='true';
        			child[j]['leaf']='true';
        			var testchildmodel = Ext.create('iih.mr.kr.csa.model.CSAModel',child[j]);
        			child[j] = testchildmodel;       		   
        		}   
        		
        		//singleData['text']=singleData.name;
        		singleData['expand']='true';
        		singleData['leaf']='false';
        		var testmodel = Ext.create('iih.mr.kr.csa.model.CSAModel',singleData);
        		csaModels.push(testmodel);
        		
        	}else{
        		
        		var testmodel = Ext.create('iih.mr.kr.csa.model.CSAModel',singleData);
				csaModels.push(testmodel);
        	}
        	
        }
        cstree.setData(csaModels);
    },
    
    removeData:function(){
    	var cstree = this.down('xaptree[action=csatree]');
    	
        cstree.getRootNode( ).removeAll();
    	
    }
  
})

Ext.define('iih.mr.kr.csa.block.CSADiAndMrTemplateBlock',{
	extend :  Xap.ej.block.FormBlock ,
	                                       
	alias:'widget.csadiandmrtemplateblock',
	id:'csaDiAndMrTemplateBlock',
	//layout: 'fit',
	border: 0,
    items:  [{
    	
	      xtype: 'xapgrid',
	      action:'digrid',
	      height:227,
	      title:'诊断',
		  autoScroll:true,
		  checkboxShow:true,
		  mode:'multi',
		  showHeaderCheckbox:true,
		  CM_JR_Record:[
	             {header: '诊断编码', dataIndex: 'diCode',hidden:true},
	             {header: '诊断主键', dataIndex: 'diSuiteDiCode',hidden:true},
	             {header: '所属类型', dataIndex: 'ownerType',hidden:true},
	             {header: '所属编码', dataIndex: 'ownerCode',hidden:true},
	             {header: '诊断(模板)', dataIndex: 'diName',width:250},
	             {header: 'ICD编码', dataIndex: 'icdCode',width:100}
		    ]
    },{

          xtype: 'xapgrid',
          action:'mrgrid',
          title:'模板',
          height:200,
          mode:'multi',
	  	  autoScroll:true,
	  	  CM_JR_Record:[
				{header: '模板ID', dataIndex: 'mrTemplateCode',hidden:true},
				{header: '病历模板', dataIndex: 'mrTemplateName',width:250},
				{header: '病历类型编码', dataIndex: 'mrTypeCode',hidden:true},
				{header: '文件编码', dataIndex: 'filePk',hidden:true},
				{header: '所属编码', dataIndex: 'ownerCode',width:100,hidden:true},
				{header: '所属类型', dataIndex: 'ownerType',width:100,hidden:true},
				{header: '所属分类', dataIndex: 'ownerTypeName',width:100,hidden:false},
	            {header: '所属', dataIndex: 'ownerName',width:100,hidden:false},
	  	    ]
    
    }]
  
})

Ext.define('iih.mr.kr.csa.action.CSASearchAction',{
	extend :  Xap.ej.action.ServiceInvocation ,
	requires:[],
	
	//组套树查询
	doExecute: function(context) {
		   //this. showLoading();
           this.prepareOperations(context.operations,context);
        },
	 prepareOperations: function(operations,context) {
        	
        	var me = this;
        	
        	var radios = me.getBlock('leftblock').query('xapradio');
        	var ownerTypeVal ;
        	var ownerCode;
        	for(var i=0;i<radios.length;i++){
        		
        		 if(radios[i].checked){
        			 ownerTypeVal= radios[i].inputValue;
        			 radios[i].checked = false;
        		 }else{
        			 radios[i].setValue(false);
        			 radios[i].checked = false;
        		 }
        	}
        	
        	if(ownerTypeVal=='MDM08.02'){
        		ownerCode = IMER_GLOBAL.department.code;
        	}else{
        		ownerCode = IMER_GLOBAL.user.code;
        	}
        	
        	var url = this.url;
        	var condition = {
        		 enTypeCode: 'ENM01.01',
        		 ownerType:ownerTypeVal,
        		 ownerCode:ownerCode
        	 };
        	
        	var qs = Ext.Object.toQueryString(condition);
        	url += '?' + qs;
	        var METHODS = this.getInvocationMethods();
	    	var operation = {
	            url: url,
	    		mclass: null,
	    		method: METHODS.METHOD_GET,
	    		condition: null,
	    		scope: this,
	    		success: this.onSuccess,
	    	    fail: this.onFailure
	    	};
	    	operations.push(operation);
	    },
	
	onSuccess : function(operation) {
	    	var me = this;
	    	//var tree = me.getBlock('leftblock').down('xaptree[action=csatree]');
	    	var block = me.getBlock('leftblock');
    		var result = [];
	 		 var model = {
	                 		'text':'通用',
	                 		'expand':true,
	                 		'leaf':true,
	                        'diSuiteCode':null,
	                        'diCode':'*'
	                 	};
	 					
	 	    result.push(model);
	    	var res = operation.result.dataList;
	    	if(res!=null){
		 	    for(var i=0;i< res.length; i++){
		 	    	 result.push(res[i]);
		 	    }
	    	}else{
	    		/*block.removeData();
	    		var diGrid = me.getBlock('rightblock').down('xapgrid[action=digrid]');
	 	    	var distore = diGrid.getStore();
	 	    	distore.removeAll();
	 	    	
		 	   	var mrGrid = me.getBlock('rightblock').down('xapgrid[action=mrgrid]');
	 	    	var mrstore = mrGrid.getStore();
	 	    	mrstore.removeAll();*/
	    	}
	    	var obj = new Object();
        	var test = Ext.Object.merge(obj, result);
        	block.setData(test);
	    	
	    },
	 onFailure: function(operation) {
	    	XapMessageBox.info('查询失败!');
	    },  
});

Ext.define('iih.mr.kr.csa.action.CSARadioChangeAction', {
	extend:  Xap.ej.action.Action ,
	//requires:['iih.di.de.model.DiagnosisEntryModel'],
	execute: function(context){
	
	    var me = this;
	    var owner=me.getOwner();
	    var block = me.getBlock('leftblock');
	    
        var radio = context.event.arguments[0];
        var radioDept = block.down('xapradio[action=ownerTypeDept]');
        var radioPer = block.down('xapradio[action=ownerTypePerson]');
        
        
        var csaSearchchain = me.getOwner().getActionChain("csasearchAction");
 	    csaSearchchain.execute();
    }
	
});

Ext.define('iih.mr.kr.csa.action.CSAMrTemplateSearchAction',{
	extend :  Xap.ej.action.ServiceInvocation ,
	requires:[],
	
	doExecute: function(context) {
		   //this. showLoading();
           this.prepareOperations(context.operations,context);
        },
	 prepareOperations: function(operations,context) {
        	
        	var me = this;
        	var owner=me.getOwner();
        	var url = me.url;
        	
        	//var dept = me.getBlock('leftblock').down('xapcombobox[action=dept]');
        	//var val = dept.value;
        	var radios = me.getBlock('leftblock').query('xapradio');
        	var ownerTypeVal ;
        	for(var i=0;i<radios.length;i++){
        		
        		 if(radios[i].value){
        			 ownerTypeVal= radios[i].inputValue;
        		 }
        	}
        	
        	if(ownerTypeVal=='MDM08.02'){
        		
        		
        	  val = IMER_GLOBAL.department.code;
      
        	}else{
        		val = IMER_GLOBAL.user.code;
        	}
        	
        	var condition;
        	var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
        	var diSuiteCode = properties.data.diSuiteCode;
        	var diCode = properties.data.diCode;
        	if(diCode=='*'){
        		
        		 condition = {
             			diSuiteCode: diSuiteCode,
             			diCode:diCode,
             			ownerType:ownerTypeVal,
             			ownerCode:val,
             			enTypeCode: 'ENM01.01'
             			
                	 };
        		
        	}else{
        		
        	   condition = {
            			diSuiteCode: diSuiteCode,
            			ownerType:ownerTypeVal
               	 };
               	
        	}
        	
           	var qs = Ext.Object.toQueryString(condition);
           	url += '?' + qs;
            var METHODS = this.getInvocationMethods();
	    	var operation = {
	            url: url,
	    		mclass: null,
	    		method: METHODS.METHOD_GET,
	    		condition: null,
	    		scope: this,
	    		success: this.onSuccess,
	    	    fail: this.onFailure
	    	};
	    	operations.push(operation);
	    },
	
	onSuccess : function(operation) {
	    	var me = this;
	    	var owner = me.getOwner();
	    	var mrGrid = me.getBlock('rightblock').down('xapgrid[action=mrgrid]');
	    	var res = operation.result.dataList;
	    	mrGrid.setData(res);
	    	if(res && res.length>0){
	    		var store = mrGrid.getStore();
	    		mrGrid.getSelectionModel().select(0);
	    		
	    		var mrProperty = owner.getActionChain('initMrProperty');
	    		mrProperty.execute();
	    	}
	    	
	    },
	 onFailure: function(operation) {
	    	XapMessageBox.info('查询失败!');
	    },  
});

Ext.define('iih.mr.kr.csa.action.CSADiagnosisSearchAction',{
	extend :  Xap.ej.action.ServiceInvocation ,
	requires:[],
	
	doExecute: function(context) {
		   //this. showLoading();
           this.prepareOperations(context.operations,context);
        },
	 prepareOperations: function(operations,context) {
        	
        	var me = this;
        	var owner=me.getOwner();
        	var url = me.url;
        	var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
        	var diSuiteCode = properties.data.diSuiteCode;
        	var condition = {
        			diSuiteCode: diSuiteCode
           	 };
           	
           	var qs = Ext.Object.toQueryString(condition);
           	url += '?' + qs;
	      
	        var METHODS = this.getInvocationMethods();
	    	var operation = {
	            url: url,
	    		mclass: null,
	    		method: METHODS.METHOD_GET,
	    		condition: null,
	    		scope: this,
	    		success: this.onSuccess,
	    	    fail: this.onFailure
	    	};
	    	operations.push(operation);
	    },
	
	onSuccess : function(operation) {
	    	var me = this;
	    	var diGrid = me.getBlock('rightblock').down('xapgrid[action=digrid]');
	    	var res = operation.result.dataList;
	    	diGrid.setData(res);
	    	if(res && res.length>0){
	    		diGrid.getSelectionModel().selectAll();
	    	}
	    	
	    	
	    },
	 onFailure: function(operation) {
	    	XapMessageBox.info('查询失败!');
	    },  
});

Ext.define('iih.mr.kr.csa.action.CSAAdminDeptListAction',{
	extend :  Xap.ej.action.ServiceInvocation ,
	requires:[],
	
	//组套树查询
	doExecute: function(context) {
		   //this. showLoading();
           this.prepareOperations(context.operations,context);
        },
	 prepareOperations: function(operations,context) {
        	
        	var me = this;
        	var url = this.url;
        	var condition = {
        		 enTypeCode: 'ENM01.01'
        	 };
        	var qs = Ext.Object.toQueryString(condition);
        	url += '?' + qs;
	       
	        var METHODS = this.getInvocationMethods();
	    	var operation = {
	            url: url,
	    		mclass: null,
	    		method: METHODS.METHOD_GET,
	    		condition: null,
	    		scope: this,
	    		success: this.onSuccess,
	    	    fail: this.onFailure
	    	};
	    	operations.push(operation);
	    },
	
	onSuccess : function(operation) {
	    	var me = this;
	    	var combox = me.getBlock('leftblock').down('xapcombobox[action=dept]');
	    	var res = operation.result.dataList;
	    	var comdata = [];
	    	for(var i=0;i<res.length;i++){
	 	        	
	 	       var model = {
	                 'text':res[i].deptName,
	                 'value':res[i].deptCode,
	               };
	 	        comdata.push(model);
	 	      }
	    	
	    	combox.setData(comdata);
	    	combox.setRawValue(IMER_GLOBAL.department.name);
	    
	    },
	 onFailure: function(operation) {
	    	XapMessageBox.info('查询失败!');
	    },  
});

 Ext.define('iih.mr.kr.csa.action.CSAViewreadyAction', {
	extend:  Xap.ej.action.Action ,
	          
	                                          
	                                    
	            
	/*
	* @Override
	*/
	execute: function(context) {
	   
	   var me = this;
	   var owner=me.getOwner();	
	   var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
	   
	  /* var deptListchain = me.getOwner().getActionChain("csaAdminDeptListAction");
	   deptListchain.execute();*/
	   
	   var csaSearchchain = me.getOwner().getActionChain("csasearchAction");
	   csaSearchchain.execute();
	   
	   //var csaSysdatechain = me.getOwner().getActionChain("csaSysdateAction");
	   //csaSysdatechain.execute();
	   
	  
    }
  
});
Ext.define('iih.mr.kr.csa.action.CSASysdateAction',{
	extend :  Xap.ej.action.ServiceInvocation ,
	requires:[],
	
	
	doExecute: function(context) {
		   //this. showLoading();
           this.prepareOperations(context.operations,context);
        },
	 prepareOperations: function(operations,context) {
        	
        	var me = this;
        	var url = this.url;
	        var METHODS = this.getInvocationMethods();
	    	var operation = {
	            url: url,
	    		mclass: null,
	    		method: METHODS.METHOD_GET,
	    		condition: null,
	    		scope: this,
	    		success: this.onSuccess,
	    	    fail: this.onFailure
	    	};
	    	operations.push(operation);
	    },
	
	onSuccess : function(operation) {
	    	var me = this;
	    	var tree = me.getBlock('leftblock').down('xaptree[action=csatree]');
	        var mrTime =  operation.result.sysdateStr;
	        var mrTimeField = me.getOwner().ownerCt.down('datetimefield[action=ywDate]');
	        mrTimeField.setRawValue(mrTime);
	    	
	    },
	 onFailure: function(operation) {
	    	XapMessageBox.info('查询失败!');
	    },  
});

Ext.define('iih.mr.kr.csa.action.CSATreeItemClickAction', {
	extend:  Xap.ej.action.Action ,
	execute: function(context){
	
	    var me = this;
        var owner=me.getOwner();
        
        if(context.event.arguments[1].childNodes.length>0){
         	return;
        }
        var diNode = context.event.arguments[1] ;
         var diSuiteCode = diNode.data.diSuiteCode;
         var diCode = diNode.data.diCode;
         var owner=me.getOwner();	
 	     var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
 	     properties.setData({
 	    	diSuiteCode:diSuiteCode,
 	    	diCode:diCode
 	     });
       
 	     if(diCode!="*"){
 	    	 
 	    	var diagnosisChain = owner.getActionChain('csaDiagnosisSearchAction');
 	        diagnosisChain.execute();
 	     }else{
 	    	var diGrid = me.getBlock('rightblock').down('xapgrid[action=digrid]');
 	    	var store = diGrid.getStore();
 	    	store.removeAll();
 	     }
       
        var mrChain = owner.getActionChain('csaMrSearchAction');
        mrChain.execute();
    }
	
});

Ext.define('iih.mr.kr.csa.action.CSAForAdminSearchAction',{
	extend :  Xap.ej.action.ServiceInvocation ,
	requires:[],
	
	//组套树查询
	doExecute: function(context) {
		   //this. showLoading();
           this.prepareOperations(context.operations,context);
        },
	 prepareOperations: function(operations,context) {
        	
        	var me = this;
        	var dept = me.getBlock('leftblock').down('xapcombobox[action=dept]');
        	var radios = me.getBlock('leftblock').query('xapradio');
        	var ownerTypeVal ;
        	for(var i=0;i<radios.length;i++){
        		
        		 if(radios[i].checked){
        			 ownerTypeVal= radios[i].inputValue;
        		 }
        	}
        	
        	
        	var url = this.url;
        	var condition = {
        		 enTypeCode: 'ENM01.01',
        		 ownerType:ownerTypeVal,
        		 ownerCode:dept.value
        	 };
        	
        	var qs = Ext.Object.toQueryString(condition);
        	url += '?' + qs;
	        var METHODS = this.getInvocationMethods();
	    	var operation = {
	            url: url,
	    		mclass: null,
	    		method: METHODS.METHOD_GET,
	    		condition: null,
	    		scope: this,
	    		success: this.onSuccess,
	    	    fail: this.onFailure
	    	};
	    	operations.push(operation);
	    },
	
	onSuccess : function(operation) {
	    	var me = this;
	    	//var tree = me.getBlock('leftblock').down('xaptree[action=csatree]');
	    	var block = me.getBlock('leftblock');
	    	var res = operation.result.dataList;
	    	if(res!=null){
	    		var obj = new Object();
	        	var test = Ext.Object.merge(obj, res);
	        	block.setData(test);
	    	}else{
	    		block.removeData();
	    		var diGrid = me.getBlock('rightblock').down('xapgrid[action=digrid]');
     	    	var distore = diGrid.getStore();
     	    	distore.removeAll();
     	    	
    	 	   	var mrGrid = me.getBlock('rightblock').down('xapgrid[action=mrgrid]');
     	    	var mrstore = mrGrid.getStore();
     	    	mrstore.removeAll();
	    	}
	    	
	    	
	    },
	 onFailure: function(operation) {
	    	XapMessageBox.info('查询失败!');
	    },  
});

Ext.define('iih.mr.kr.csa.action.InitMrPropertyAction', {
	extend:  Xap.ej.action.Action ,
	
	execute: function(context) {
		var omrdocpropertyblock=Ext.getCmp('omrdocpropertyblock');
		var mrNm=omrdocpropertyblock.down('xaptextfield[name=mrNm]');
		var logicSmtDate=omrdocpropertyblock.down('datetimefield[name=logicSmtDate]');
		var csaDiAndMrTemplateBlock=this.getBlock('rightblock')
	    var mrGrid = csaDiAndMrTemplateBlock.down('xapgrid[action=mrgrid]');
	    var mrSelModel=mrGrid.getSelectionModel();
	    var mrSelection = mrSelModel.getSelection();
	    var mrTemplateName=mrSelection[0].data.mrTemplateName;
	    mrNm.setValue(mrTemplateName);
	    logicSmtDate.setValue(new Date());
    }
});

 Ext.define('iih.mr.kr.csa.action.CSAForAdminChangeAction', {
	extend:  Xap.ej.action.Action ,
	          
	                                          
	                                    
	            
	/*
	* @Override
	*/
	execute: function(context) {
	   
	   var me = this;
	   var owner=me.getOwner();	
	   var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
	   
	   var csaForAdminSearchchain = me.getOwner().getActionChain("csaForAdminsearchAction");
	   csaForAdminSearchchain.execute();
	   
	 
    }
  
});
Ext.define('iih.mr.kr.csa.action.mrDbClickAction', {
	extend:  Xap.ej.action.Action ,
	
	execute: function(context) {
		var omrdocpropertyblock=Ext.getCmp('omrdocpropertyblock');
		var mrNm=omrdocpropertyblock.down('xaptextfield[name=mrNm]');
		var logicSmtDate=omrdocpropertyblock.down('datetimefield[name=logicSmtDate]');
		var csaDiAndMrTemplateBlock=this.getBlock('rightblock')
	    var mrGrid = csaDiAndMrTemplateBlock.down('xapgrid[action=mrgrid]');
	    var mrSelModel=mrGrid.getSelectionModel();
	    var mrSelection = mrSelModel.getSelection();
	    var mrTemplateName=mrSelection[0].data.mrTemplateName;
	    mrNm.setValue(mrTemplateName);
	    logicSmtDate.setValue(new Date());
	    var confirmChain = omrdocpropertyblock.ownerCt.ownerCt.ownerCt.getActionChain('confim');
	    confirmChain.execute();
    }
});
Ext.define('iih.mr.kr.csa.view.CSAKRView', {              
    extend:  Xap.ej.stl.view.LeftRightContainerTemplate ,
    alias: 'widget.csakrview',
    id:'csakrview',
	          
	                                             
	                                                        
	                                                 
	                                                      
	                                                           
	                                                          
	                                                        
	                                                    
	                                                  
	                                                        
	                                                         
	                                                      
	                                                        
	                                                 
	            
    xapConfig:{
	 
	     blocks: {
			   'left':{ 
					xclass:'iih.mr.kr.csa.block.CSATreeBlock',
					width:230	
		       },
		       'right':{ 
					xclass:'iih.mr.kr.csa.block.CSADiAndMrTemplateBlock'
		       },
           },
         actions:{
        	   'csasearchAction': {
					xclass: 'iih.mr.kr.csa.action.CSASearchAction',
					url:'/kr/disuite',
					blocks: {
	        	        leftblock: 'left',
						rightblock:'right'
					 }
		       },
		       'csaForAdminsearchAction': {
					xclass: 'iih.mr.kr.csa.action.CSAForAdminSearchAction',
					url:'/kr/disuite/admin',
					blocks: {
	        	        leftblock: 'left',
						rightblock:'right'
					 }
		       },
		       'csaradioChangeAction': {
					xclass: 'iih.mr.kr.csa.action.CSARadioChangeAction',
					blocks: {
	        	        leftblock: 'left',
						rightblock:'right'
					 }
		       },
		       'csaDiagnosisSearchAction': {
					xclass: 'iih.mr.kr.csa.action.CSADiagnosisSearchAction',
					url:'/kr/disuite/diagnosis/list',
					blocks: {
	        	        leftblock: 'left',
						rightblock:'right'
					 }
		       },
		       'csaMrSearchAction': {
					xclass: 'iih.mr.kr.csa.action.CSAMrTemplateSearchAction',
					url:'/kr/disuite/mrtemplate/list',
					blocks: {
	        	        leftblock: 'left',
						rightblock:'right'
					 }
		       },
		       'csaAdminDeptListAction':{
		    	   xclass:'iih.mr.kr.csa.action.CSAAdminDeptListAction',
		    	   url:'kr/disuite/admin/deptlist',
		    	   blocks: {
	        	        leftblock: 'left',
						rightblock:'right'
					 }
		       },
		       'csaViewReadyAction':{
		    	   xclass:'iih.mr.kr.csa.action.CSAViewreadyAction',
		    	   blocks: {
	        	        leftblock: 'left',
						rightblock:'right'
					 }
		       },
		       'csaSysdateAction':{
		    	   xclass:'iih.mr.kr.csa.action.CSASysdateAction',
		    	   url:'/kr/csa/sysdate',
		    	   blocks: {
	        	        leftblock: 'left',
						rightblock:'right'
					 }
		       },
		       'csaTreeItemClickAction': {
					xclass: 'iih.mr.kr.csa.action.CSATreeItemClickAction',
					blocks: {
			    	    leftblock: 'left',
						rightblock:'right'
					}
			   },
			   'csaForAdminChangeAction': {
					xclass: 'iih.mr.kr.csa.action.CSAForAdminChangeAction',
					blocks: {
			    	    leftblock: 'left',
						rightblock:'right'
					}
			   },
			   'initMrProperty': {
					xclass: 'iih.mr.kr.csa.action.InitMrPropertyAction',
					blocks: {
			    	    leftblock: 'left',
						rightblock:'right'
					}
			   }
			   ,'mrDbClickAction':{
				   xclass: 'iih.mr.kr.csa.action.mrDbClickAction',
					blocks: {
			    	    leftblock: 'left',
						rightblock:'right'
					}
			   }
           },
           chains:{
        	   'csasearchAction':['csasearchAction'],
        	   'csaradioChangeAction':['csaradioChangeAction'],
        	   'initMrProperty':['initMrProperty'],
        	   'csaDiagnosisSearchAction':['csaDiagnosisSearchAction'],
        	   'csaMrSearchAction':['csaMrSearchAction'],
        	   'csaAdminDeptListAction':['csaAdminDeptListAction'],
        	   'csaViewReadyAction':['csaViewReadyAction'],
        	   'csaSysdateAction':['csaSysdateAction'],
        	   'csaTreeItemClickAction':['csaTreeItemClickAction'],
        	   'csaForAdminsearchAction':['csaForAdminsearchAction'],
        	   'csaForAdminChangeAction':['csaForAdminChangeAction']
        	   ,'mrDbClickAction':['mrDbClickAction']
           },
           connections:{
        	   'left':[/*{
        		          selector:'xapbutton[action=searchBtn]',
   				          event: 'click',
   				          chain: 'csasearchAction'
	        	   },{
	        		   
	        		      selector:'radio[action=ownerTypeDept]',
				          event: 'change',
				          chain: 'csaradioChangeAction'
	        	   },{
	        		      selector:'radio[action=ownerTypePerson]',
				          event: 'change',
				          chain: 'csaradioChangeAction'
	        	   },*/{
	        		   selector:'xapradio[name=ownerType]',
	        		   event: 'change',
				       chain: 'csaradioChangeAction'
	        	   },{
	  				 selector: 'treepanel',
					 event: 'viewready',
					 chain: 'csaViewReadyAction'
				 },{
					    selector:'treepanel',
	    				event: 'itemclick',
	    				chain: 'csaTreeItemClickAction'
				 }/*,{
					    selector:'xapcombobox[action=dept]',
	    				event: 'change',
	    				chain: 'csaForAdminChangeAction'
				 }*/],
				 'right':[{
		        		   selector:'xapgrid[action=mrgrid]',
		        		   event: 'itemclick',
					       chain: 'initMrProperty'
		        	   },
		        	   {
		        		   selector:'xapgrid[action=mrgrid]',
		        		   event: 'itemdblclick',
					       chain: 'mrDbClickAction'
		        	   }
		        	   ]
           }
	
      }
})   
Ext.define('iih.mr.kr.csm.block.CSMTreeBlock',{
	extend :  Xap.ej.block.FormBlock ,
	           
	                                      
	                                        
	                                          
	                                           
	             
	alias:'widget.csmtreeblock',
	border: 0,
    items:  [{
    	xtype:'xappanel',
    	border:0,
    	padding:'10 0 5 0',
    	layout: {
			type: 'table',
			columns: 3,
			tableAttrs: {
	            border: 0,
	            cellspacing: 1,
	            width: '100%'
	        },
	        tdAttrs: {
	            valign: 'left'
	        }
	    },
	    items:[{
	    	 xtype:'xapradio',
	    	 boxLabel: '科室', 
	    	 action: 'ownerTypeDept', 
	    	 inputValue: 'MDM08.02',
	    	 name:'ownerType',
	    	 checked:true
	        
	    },{
	    	xtype: "xapcombobox",
			action:'dept',
			disabled:false
	    },{
	    	 xtype:'xapradio',
	    	 boxLabel: '个人', 
	    	 action: 'ownerTypePerson', 
	    	 inputValue: 'MDM08.03',
	    	 name:'ownerType',
	    	 
	    }]
    },/*{
    	xtype:'xappanel',
    	padding:'10 0 0 0',
    	border:0,
    	layout: {
			type: 'table',
			columns: 2,
			tableAttrs: {
	            border: 0,
	            cellspacing: 1,
	            width: '100%'
	        },
	        tdAttrs: {
	            valign: 'left'
	        }
	    },
	   items:[{
	    	xtype: "xapcombobox",
			fieldLabel: '组套分类',
			labelWidth:55,
			action:'krtype',
			emptyText:'分类1',
			value:'001',
			width:197,
			disabled:false
	    },{
	    	xtype: 'xapbutton',
			text: '查询',
			action: 'searchBtn',
	    }]
    },*/{
    	// xtype:'xaptree',
    	 xtype:'filtertree',
         action:'csmtree',
         border:0,
         flex: 1,
         rootVisible: false,
         collapsible: false,//是否可以折叠
		 split: true,
		 autoScroll: true,  //滚动条
		 height:510,
		 tbar:[{
		            xtype: 'trigger',
			        onTriggerClick: function () {
			            this.setValue('');
			            this.ownerCt.ownerCt.ownderCt.down("filtertree").clearFilter();
			        },
			        width:'100%',
			        //fieldLabel: '组套分类',
			        emptyText:'组套分类中文快速检索功能',
			        enableKeyEvents: true,
			        listeners: {
			            keyup: {
			                fn: function (field, e) {
			                    if (Ext.EventObject.ESC == e.getKey()) {
			                        field.onTriggerClick();
			                    } else {
			                        var filtercontent = Ext.util.Format.trim(this.getRawValue());
			                    	var reg = new RegExp("[\\u4E00-\\u9FFF]+","g");
							    	if(reg.test(filtercontent)){
							    		this.ownerCt.ownerCt.filterBy(filtercontent, 'text');
							    	}else {
							    		this.ownerCt.ownerCt.filterBy(filtercontent, 'code');
							    	}
			                    }
			                }
			            }
			        }
		    }]
    }],
    setData : function(data) {
    	var cstree = this.down('xaptree[action=csmtree]');
    	if(!data[0]){
    		cstree.getRootNode( ).removeAll();
    		return;    	
    	}
        var csmModels = [];
        for(var i in data){
        	var csmmodel = Ext.create('iih.mr.kr.csm.model.CSMModel',[])
        	var singleData = data[i];
        	if(singleData.children){
        		var child = singleData.children;
        		
        		for(j=0;j<child.length;j++){
        			//child[j]['text']=child[j].text;
        			child[j]['expand']='true';
        			child[j]['leaf']='true';
        			var testchildmodel = Ext.create('iih.mr.kr.csm.model.CSMModel',child[j]);
        			child[j] = testchildmodel;       		   
        		}   
        		
        		//singleData['text']=singleData.name;
        		singleData['expand']='true';
        		singleData['leaf']='false';
        		var testmodel = Ext.create('iih.mr.kr.csm.model.CSMModel',singleData);
        		csmModels.push(testmodel);
        		
        	}else{
        		
        		var testmodel = Ext.create('iih.mr.kr.csm.model.CSMModel',singleData);
				csmModels.push(testmodel);
        	}
        	
        }
        cstree.setData(csmModels);
    },
    
    removeData:function(){
    	var cstree = this.down('xaptree[action=csmtree]');
    	
        cstree.getRootNode( ).removeAll();
    	
    }
  
})

Ext.define('iih.mr.kr.csm.block.CSMDiAndMrTemplateBlock',{
	extend :  Xap.ej.block.FormBlock ,
	                                       
	alias:'widget.csmdiandmrtemplateblock',
	//layout: 'fit',
	border: 0,
    items:  [{
    	  
    	  xtype:'xaptoolbarblock',
    	  layout: {
    			type: 'hbox',
    			pack: 'left'
    		},
    	  items:[{
    		    xtype: 'xapbutton',
				text: '新建组套',
				action: 'insertBtn',
				iconCls: 'icon-Create',
    	  },{
    		    xtype: 'xapbutton',
				text: '修改',
				action: 'modefiyBtn',
				iconCls: 'icon-Open'
    	  },{
    		    xtype: 'xapbutton',
				text: '删除',
				action: 'delBtn',
				iconCls: 'icon-Delete',
				
    	  },{
    		     xtype: 'xapbutton',
				text: '共享',
				action: 'shareBtn',
				iconCls: 'icon-Property',
    	  }]
    },{
    	
	      xtype: 'xapgrid',
	      action:'digrid',
	      height:260,
	      title:'诊断',
		  autoScroll:true,
		  //checkboxShow:true,
		  mode:'multi',
		  showHeaderCheckbox:true,
		  CM_JR_Record:[
	             {header: '诊断编码', dataIndex: 'diCode',hidden:true},
	             {header: '诊断主键', dataIndex: 'diSuiteDiCode',hidden:true},
	             {header: '所属类型', dataIndex: 'ownerType',hidden:true},
	             {header: '所属编码', dataIndex: 'ownerCode',hidden:true},
	             {header: '诊断(模板)', dataIndex: 'diName',width:200},
	             {header: 'ICD编码', dataIndex: 'icdCode',width:100}
		    ]
    },{

          xtype: 'xapgrid',
          action:'mrgrid',
          title:'模板',
          height:300,
	  	  autoScroll:true,
	  	  CM_JR_Record:[
	               {header: '模板ID', dataIndex: 'mrTemplateCode',hidden:true},
	               {header: '病历模板', dataIndex: 'mrTemplateName',width:200},
	               {header: '所属编码', dataIndex: 'ownerCode',width:100,hidden:true},
	               {header: '所属类型', dataIndex: 'ownerType',width:100,hidden:true},
	               {header: '所属分类', dataIndex: 'ownerTypeName',width:100,hidden:false},
	               {header: '所属', dataIndex: 'ownerName',width:100,hidden:false},
	  	    ]
    
    }]
  
})

Ext.define('iih.mr.kr.csm.action.CSMSearchAction',{
	extend :  Xap.ej.action.ServiceInvocation ,
	requires:[],
	
	//组套树查询
	doExecute: function(context) {
		   //this. showLoading();
           this.prepareOperations(context.operations,context);
        },
	 prepareOperations: function(operations,context) {
        	
        	var me = this;
        	var owner = me.getOwner();
        	var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
        
        	var url = this.url;
        	
        	var qs = Ext.Object.toQueryString(properties.data);
        	url += '?' + qs;
	        var METHODS = this.getInvocationMethods();
	    	var operation = {
	            url: url,
	    		mclass: null,
	    		method: METHODS.METHOD_GET,
	    		condition: null,
	    		scope: this,
	    		success: this.onSuccess,
	    	    fail: this.onFailure
	    	};
	    	operations.push(operation);
	    },
	
	onSuccess : function(operation) {
	    	var me = this;
	    	//var tree = me.getBlock('leftblock').down('xaptree[action=csmtree]');
	    	var block = me.getBlock('leftblock');
	    	var res = operation.result.dataList;
	    	if(res!=null){
	    		var result = [];
		 	    for(var i=0;i< res.length; i++){
		 	    	 result.push(res[i]);
		 	    }
		    	var obj = new Object();
	        	var test = Ext.Object.merge(obj, result);
	        	block.setData(test);
	    	}else{
	    		block.removeData();
	    		var diGrid = me.getBlock('rightblock').down('xapgrid[action=digrid]');
	 	    	var distore = diGrid.getStore();
	 	    	distore.removeAll();
	 	    	
		 	   	var mrGrid = me.getBlock('rightblock').down('xapgrid[action=mrgrid]');
	 	    	var mrstore = mrGrid.getStore();
	 	    	mrstore.removeAll();
	 	    	
	    	}
	    	
	    	
	    },
	 onFailure: function(operation) {
	    	XapMessageBox.info('查询失败!');
	    },  
});

Ext.define('iih.mr.kr.csm.action.CSMMrTemplateSearchAction',{
	extend :  Xap.ej.action.ServiceInvocation ,
	requires:[],
	
	doExecute: function(context) {
		   //this. showLoading();
           this.prepareOperations(context.operations,context);
        },
	 prepareOperations: function(operations,context) {
        	
        	var me = this;
        	var owner=me.getOwner();
        	var url = me.url;
        	
        	var dept = me.getBlock('leftblock').down('xapcombobox[action=dept]');
        	var val = dept.value;
        	var radios = me.getBlock('leftblock').query('xapradio');
        	var ownerTypeVal ;
        	for(var i=0;i<radios.length;i++){
        		
        		 if(radios[i].checked){
        			 ownerTypeVal= radios[i].inputValue;
        		 }
        	}
        	
        	if(ownerTypeVal=='MDM08.02'){
        		
        		if(val=="" || val==null){
        			val = IMER_GLOBAL.department.code;
        		}
        	}else{
        		val = IMER_GLOBAL.user.code;
        	}
        	
        	var condition;
        	var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
        	var diSuiteCode = properties.data.diSuiteCode;
        	var diCode = properties.data.diCode;
        	if(diCode=='*'){
        		
        		 condition = {
             			diSuiteCode: diSuiteCode,
             			diCode:diCode,
             			ownerType:ownerTypeVal,
             			ownerCode:val,
             			enTypeCode: 'ENM01.01'
             			
                	 };
        		
        	}else{
        		
        	   condition = {
            			diSuiteCode: diSuiteCode,
            			ownerType:ownerTypeVal
               	 };
               	
        	}
        	
           	var qs = Ext.Object.toQueryString(condition);
           	url += '?' + qs;
            var METHODS = this.getInvocationMethods();
	    	var operation = {
	            url: url,
	    		mclass: null,
	    		method: METHODS.METHOD_GET,
	    		condition: null,
	    		scope: this,
	    		success: this.onSuccess,
	    	    fail: this.onFailure
	    	};
	    	operations.push(operation);
	    },
	
	onSuccess : function(operation) {
	    	var me = this;
	    	var mrGrid = me.getBlock('rightblock').down('xapgrid[action=mrgrid]');
	    	var res = operation.result.dataList;
	    	mrGrid.setData(res);
	    	//mrGrid.getSelectionModel().selectAll();
	    	
	    },
	 onFailure: function(operation) {
	    	XapMessageBox.info('查询失败!');
	    },  
});

Ext.define('iih.mr.kr.csm.action.CSMDiagnosisSearchAction',{
	extend :  Xap.ej.action.ServiceInvocation ,
	requires:[],
	
	doExecute: function(context) {
		   //this. showLoading();
           this.prepareOperations(context.operations,context);
        },
	 prepareOperations: function(operations,context) {
        	
        	var me = this;
        	var owner=me.getOwner();
        	var url = me.url;
        	var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
        	var diSuiteCode = properties.data.diSuiteCode;
        	var condition = {
        			diSuiteCode: diSuiteCode
           	 };
           	
           	var qs = Ext.Object.toQueryString(condition);
           	url += '?' + qs;
	      
	        var METHODS = this.getInvocationMethods();
	    	var operation = {
	            url: url,
	    		mclass: null,
	    		method: METHODS.METHOD_GET,
	    		condition: null,
	    		scope: this,
	    		success: this.onSuccess,
	    	    fail: this.onFailure
	    	};
	    	operations.push(operation);
	    },
	
	onSuccess : function(operation) {
	    	var me = this;
	    	var diGrid = me.getBlock('rightblock').down('xapgrid[action=digrid]');
	    	var res = operation.result.dataList;
	    	diGrid.setData(res);
	    	//diGrid.getSelectionModel().selectAll();
	    	
	    },
	 onFailure: function(operation) {
	    	XapMessageBox.info('查询失败!');
	    },  
});

Ext.define('iih.mr.kr.csm.action.Util',{
	singleton: true,
    deptArr:[],
});
 
Ext.define('iih.mr.kr.csm.action.CSMAdminDeptListAction',{
	extend :  Xap.ej.action.ServiceInvocation ,
	                                       
	
	//组套树查询
	doExecute: function(context) {
		   //this. showLoading();
           this.prepareOperations(context.operations,context);
        },
	 prepareOperations: function(operations,context) {
        	
        	var me = this;
        	var url = this.url;
        	var condition = {
        		 enTypeCode: 'ENM01.01'
        	 };
        	var qs = Ext.Object.toQueryString(condition);
        	url += '?' + qs;
	       
	        var METHODS = this.getInvocationMethods();
	    	var operation = {
	            url: url,
	    		mclass: null,
	    		method: METHODS.METHOD_GET,
	    		condition: null,
	    		scope: this,
	    		success: this.onSuccess,
	    	    fail: this.onFailure
	    	};
	    	operations.push(operation);
	    },
	
	onSuccess : function(operation) {
	    	var me = this;
	    	var combox = me.getBlock('leftblock').down('xapcombobox[action=dept]');
	    	var res = operation.result.dataList;
	    	var comdata = [];
	    	for(var i=0;i<res.length;i++){
	 	        	
	 	       var model = {
	                 'text':res[i].deptName,
	                 'value':res[i].deptCode,
	               };
	 	        comdata.push(model);
	 	      }
	    	iih.mr.kr.csm.action.Util.deptArr = comdata;
	    	combox.setData(comdata);
	    	combox.setRawValue(IMER_GLOBAL.department.name);
	    
	    },
	 onFailure: function(operation) {
	    	XapMessageBox.info('查询失败!');
	    },  
});

Ext.define('iih.mr.kr.csm.action.CSMTreeItemClickAction', {
	extend:  Xap.ej.action.Action ,
	execute: function(context){
	
	    var me = this;
        var owner=me.getOwner();
        
        if(context.event.arguments[1].childNodes.length>0){
         	return;
        }
        var diNode = context.event.arguments[1] ;
         var diSuiteCode = diNode.data.diSuiteCode;
         var diCode = diNode.data.diCode;
         var diNm = diNode.data.text;
         var diSuiteTypeCode = diNode.data.diSuiteTypeCode;
         var owner=me.getOwner();	
 	     var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
 	     properties.setData({
 	    	diSuiteCode:diSuiteCode,
 	    	diCode:diCode,
 	    	diNm:diNm,
 	    	diSuiteTypeCode:diSuiteTypeCode
 	     });
       
 	     if(diCode && diCode!="*"){
 	    	 
 	    	var diagnosisChain = owner.getActionChain('csmDiagnosisSearchAction');
 	        diagnosisChain.execute();
 	        
 	     }else{
 	    	var diGrid = me.getBlock('rightblock').down('xapgrid[action=digrid]');
 	    	diGrid.removeAll();
 	     }
       
        var mrChain = owner.getActionChain('csmMrSearchAction');
        mrChain.execute();
    }
	
});

Ext.define('iih.mr.kr.csm.action.CSMForAdminSearchAction',{
	extend :  Xap.ej.action.ServiceInvocation ,
	requires:[],
	
	//组套树查询
	doExecute: function(context) {
		   //this. showLoading();
           this.prepareOperations(context.operations,context);
        },
	 prepareOperations: function(operations,context) {
        	
        	var me = this;
        	var owner = me.getOwner();
        	var dept = me.getBlock('leftblock').down('xapcombobox[action=dept]');
        	var ownerCode = dept.value;
        	var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
        	if(ownerCode!=null){
        		properties.data.ownerCode = ownerCode;
        	}
        	
        	var url = this.url;
        	var qs = Ext.Object.toQueryString(properties.data);
        	url += '?' + qs;
	        var METHODS = this.getInvocationMethods();
	    	var operation = {
	            url: url,
	    		mclass: null,
	    		method: METHODS.METHOD_GET,
	    		condition: null,
	    		scope: this,
	    		success: this.onSuccess,
	    	    fail: this.onFailure
	    	};
	    	operations.push(operation);
	    },
	
	onSuccess : function(operation) {
	    	var me = this;
	    	//var tree = me.getBlock('leftblock').down('xaptree[action=csatree]');
	    	var block = me.getBlock('leftblock');
	    	var res = operation.result.dataList;
	    	if(res!=null){
	    		var obj = new Object();
	        	var test = Ext.Object.merge(obj, res);
	        	block.setData(test);
	    	}else{
	    		block.removeData();
	    		var diGrid = me.getBlock('rightblock').down('xapgrid[action=digrid]');
     	    	var distore = diGrid.getStore();
     	    	distore.removeAll();
     	    	
    	 	   	var mrGrid = me.getBlock('rightblock').down('xapgrid[action=mrgrid]');
     	    	var mrstore = mrGrid.getStore();
     	    	mrstore.removeAll();
	    	}
	    
	    },
	 onFailure: function(operation) {
	    	XapMessageBox.info('查询失败!');
	    },  
});

Ext.define('iih.mr.kr.csm.action.CSMEventAction', {
	extend:  Xap.ej.action.Action ,
	execute: function(context){
	    var me = this;
	    var owner=me.getOwner();	
	   
	    var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
	    var ownerCode;
	    var ownerType;
	    var ownerTypeDeptVal = 'MDM08.02';
	    var ownerTypePerVal = 'MDM08.03';
	    var enTypeCode = 'ENM01.01';
	    var dept = me.getBlock('leftblock').down('xapcombobox[action=dept]');
	    
	    if(context.event.name="change" && context.event.from.xtype!='filtertree'){
	    	//ownerType = context.event.arguments[0].inputValue;
	    	if(context.event.arguments[1]){
	    		ownerType = ownerTypeDeptVal;
	    		dept.setDisabled(false);
		    	if(dept.value==null){
		    		ownerCode = IMER_GLOBAL.department.code;
		    	}else{
		    		ownerCode = dept.value;
		    	}
	    	}else{
	    		ownerType = ownerTypePerVal;
	    		ownerCode = IMER_GLOBAL.user.code;
	    		dept.setDisabled(true);
	    	}
	    	
	    }else{
	    	ownerType= ownerTypeDeptVal;
	    	ownerCode = IMER_GLOBAL.department.code;
	    }
	    
	    properties.setData({
	    	ownerCode:ownerCode,
	    	ownerType:ownerType,
	    	enTypeCode:enTypeCode
 	     });
	    
	    if(ownerType==ownerTypeDeptVal && ownerCode!=IMER_GLOBAL.department.code ){
	    	
	    	var csmForAdminSearch = owner.getActionChain("csmForAdminsearchAction");
	    	csmForAdminSearch.execute(context);
	    	
	    }else{
	    	var csmSearch = owner.getActionChain("csmsearchAction");
	 	    csmSearch.execute(context);
	    }
	   
	   
	    
   }
	
});

/**
 * @author wujunhui<wu.junhui@founder.com>
 * @docauthor wujunhui<wu.junhui@founder.com>
 * 该模板是上下布局的容器模板。定义该模板主要是为了将来对上下布局的画面进行统一修改。
 */
Ext.define('Xap.ej.stl.view.TopBottomContainerTemplate', {
	extend :  Xap.ej.template.BaseTemplate ,

	            
		                                  
	  

	alias : 'widget.xaptopbottomcontainertemplate',

	border : 0,

	layout : {
		type: 'vbox',
		align : 'stretch'
	},
	
	defaultXapConfig: {
		blocks: {
			'top': {
				xclass: 'Xap.ej.stl.view.PlaceHolderBlock',
				height:100
			},
			'bottom': {
				xclass: 'Xap.ej.stl.view.PlaceHolderBlock',
				flex:1
			}
		}
	},

	initBlock : function() {
		this.callParent();
	},

	doCheckXapConfig: function() {
		// TODO 必须包括的Action等等...
	},

	getTopBlock : function() {
		return this.getBlock('top');
	},
	
	getBottomBlock : function() {
		return this.getBlock('bottom');
	}
});

Ext.define('iih.mr.kr.csm.action.CSMDisuiteViewreadyAction', {
	extend:  Xap.ej.action.Action ,
	requires:[],
	
	execute: function(context) {
	
	   
	
	   var me = this;
	   var owner = me.getOwner();
	   var block = me.getBlock('topblock');
       var ownerTypeCombox = block.down('xapcombobox[action=ownerType]');
       var ownerCombox = block.down('xapcombobox[action=owner]');
       var categoryCombox = block.down('xapcombobox[action=category]');
       
       var diGrid = block.down('xapgrid[action=digrid]');
       var diStore = diGrid.getStore();
       
       var mrGrid = block.down('xapgrid[action=mrgrid]');
       
       
       var par = owner.viewConfig;
       
      
       
       //新增和删除按钮
      // var insertDiBtn = diGrid.down('button[action=insertDiBtn]');
       var delDiBtn = diGrid.down('button[action=delDiBtn]');
       
       
       /*insertDiBtn.on('click',function(btn){
    	   var disuiteOpAction = me.getOwner().getActionChain("disuiteOpAction");
    	   disuiteOpAction.execute({type:'1'});
       });*/
       
       delDiBtn.on('click',function(btn){
    	   var disuiteOpAction = me.getOwner().getActionChain("disuiteOpAction");
    	   disuiteOpAction.execute({type:'2'});
       });
       
       mrGrid.on('afterrender',function(){
    	   
    	 //模板新增和删除按钮
           var insertMrBtn =  mrGrid.down('button[action=insertMrBtn]');
           var delMrBtn =  mrGrid.down('button[action=delMrBtn]');
           
    	   insertMrBtn.on('click',function(btn){
        	   var disuiteOpAction = me.getOwner().getActionChain("disuiteOpAction");
        	   disuiteOpAction.execute({type:'3'});
           });
           
           delMrBtn.on('click',function(btn){
        	   var disuiteOpAction = me.getOwner().getActionChain("disuiteOpAction");
        	   disuiteOpAction.execute({type:'4'});
           });
       });
       
           var ownerCode;
	       var ownerType;
	       var enTypeCode = 'ENM01.01';
	       var diSuiteTypeCode=''; //组套分类编码
     
	   //判断是编辑还是新建
       if(par.typeFlag == 2){
    	   
    	   if(par.data.ownerType=='MDM08.02'){
    		   
    		   var index = 0;
    		   ownerTypeCombox.selectAt(0);
    		   var arr = iih.mr.kr.csm.action.Util.deptArr;
    		   for(var i=0;i<arr.length;i++){
    			    if(par.data.ownerCode==arr[i].value){
    			    	index = i;
    			    	break;
    			    }
    		   }
    		   ownerCombox.setData(iih.mr.kr.csm.action.Util.deptArr);
    		   ownerCombox.selectAt(index);
    	   }else{
    		   ownerTypeCombox.selectAt(1);
    		   me.setownercombox(ownerCombox);
    	   }
    	   
    	   var comboxgrid = block.down('comboxgrid[action=disute]');
    	   comboxgrid.setRawValue(par.data.diNm);
    	   //comboxgrid.setValue(par.data.diCode);
    	   ownerCode = par.data.ownerCode;
    	   ownerType = par.data.ownerType;
    	   diSuiteTypeCode = par.data.diSuiteTypeCode;
    	   
    	   me.initEditDiMr(me);
    	   
       }else{
    	   
             var disuiteOpAction = me.getOwner().getActionChain("disuiteOpAction");
	    	 disuiteOpAction.execute({type:'1'});
           
   	       /*ownerTypeCombox.selectAt(0);//默认选择科室
           ownerCombox.setData(iih.mr.kr.csm.action.Util.deptArr);
           ownerCombox.selectAt(0);//默认选择第一个科室*/
	    	 
	    	 diSuiteTypeCode = par.data.diSuiteTypeCode;
             
             //默认选择当前所选择的科室
		     if(par.data.ownerType=='MDM08.02'){
		    		   
		    		   var index = 0;
		    		   ownerTypeCombox.selectAt(0);
		    		   var arr = iih.mr.kr.csm.action.Util.deptArr;
		    		   for(var i=0;i<arr.length;i++){
		    			    if(par.data.ownerCode==arr[i].value){
		    			    	index = i;
		    			    	break;
		    			    }
		    		   }
		    		   ownerCombox.setData(iih.mr.kr.csm.action.Util.deptArr);
		    		   ownerCombox.selectAt(index);
		    		   
		    		   ownerCode = ownerCombox.value;
		    	       ownerType='MDM08.02';
		    		   
		    	   }else{
		    		   ownerTypeCombox.selectAt(1);
		    		   me.setownercombox(ownerCombox);
		    		   
		    		   ownerCode = ownerCombox.value;
		    	       ownerType='MDM08.03';
		    	   }  
       }
       
          
       
       
	   var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
     
       
        properties.setData({
	    	ownerCode:ownerCode,
	    	ownerType:ownerType,
	    	enTypeCode:enTypeCode,
	    	diSuiteTypeCode:diSuiteTypeCode
	     });
    	
        me.initCategory(me);
      
        //所属分类监听
        ownerTypeCombox.on('change',function(com){
        	  
        	   if(com.value == 'MDM08.02'){
        		   
        		   ownerCombox.setData(iih.mr.kr.csm.action.Util.deptArr);
        	       ownerCombox.selectAt(0);//默认选择第一个科室
        		   
        	   }else{
        		
        		   me.setownercombox(ownerCombox);
        	   }
        	   
        	   properties.setData({
	       	    	ownerCode:ownerCombox.value,
	       	    	ownerType:com.value,
	       	    	enTypeCode:enTypeCode
       	        });
        	   
        	   me.initCategory(me);
        });
        
        ownerCombox.on('select',function(com){
        	
        	if(ownerTypeCombox.value=='MDM08.02'){
        		
        		 properties.setData({
 	       	    	ownerCode:com.value,
 	       	    	ownerType:ownerTypeCombox.value,
 	       	    	enTypeCode:enTypeCode
        	       });
         	   
         	   me.initCategory(me);
        	}
        });
       
        var bottomblock = me.getBlock('bottomblock');
        var confirmBtn = bottomblock.down('xapbutton[action=confirm]');
        var closeBtn = bottomblock.down('xapbutton[action=close]');
        
        confirmBtn.on('click',function(){
        	 var disuiteOpAction = me.getOwner().getActionChain("disuiteOpAction");
       	     disuiteOpAction.execute({type:'5'});
        });
        
        closeBtn.on('click',function(){
       	     var disuiteOpAction = me.getOwner().getActionChain("disuiteOpAction");
      	     disuiteOpAction.execute({type:'6'});
       });
       
    },
    

   initCategory:function(me){
    	
    	 var categoryAction = me.getOwner().getActionChain("categoryAction");
         categoryAction.execute();
    },
    
    setownercombox:function(ownerCombox){
    	
    	   var comdata = [];
		   var model = {
                 'text':IMER_GLOBAL.user.name,
                 'value':IMER_GLOBAL.user.code,
               };
		   comdata.push(model);
		   ownerCombox.setData(comdata);
	       ownerCombox.selectAt(0);
    },
    
    initEditDiMr:function(me){
    	 var diSearchAction = me.getOwner().getActionChain("disuiteDiSearchAction");
    	 diSearchAction.execute();
    	 
    	 var mrSearchAction = me.getOwner().getActionChain("disuiteMrSearchAction");
    	 mrSearchAction.execute();
    	 
    	 
    }
   
});

Ext.define('iih.mr.kr.csm.action.CSMCategorySearchAction',{
	extend :  Xap.ej.action.ServiceInvocation ,
	requires:[],
	
	
	doExecute: function(context) {
		   //this. showLoading();
           this.prepareOperations(context.operations,context);
        },
	 prepareOperations: function(operations,context) {
        	
        
        	var me = this;
        	var owner=me.getOwner();	
        	var url = me.url;
        	var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
        	
        	var qs = Ext.Object.toQueryString(properties.data);
        	url += '?' + qs;
	       
	        var METHODS = this.getInvocationMethods();
	    	var operation = {
	            url: url,
	    		mclass: null,
	    		method: METHODS.METHOD_GET,
	    		condition: null,
	    		scope: this,
	    		success: this.onSuccess,
	    	    fail: this.onFailure
	    	};
	    	operations.push(operation);
	    },
	
	 onSuccess : function(operation) {
	    	var me = this;
	    	var grid = me.getBlock('content').down('xapgrid[action=categorygrid]');
	    	var res = operation.result.dataList;
	    	if(res!=null){
	    		grid.setData(res);
	    	}else{
	    		grid.getStore().removeAll();
	    	}
	    	
	    },
	 onFailure: function(operation) {
	    	XapMessageBox.info('查询失败!');
	    },  
});

Ext.define('iih.mr.kr.csm.action.CSMDisuiteCategoryAction', {
	extend:  iih.mr.kr.csm.action.CSMCategorySearchAction ,
	                                                          
	
	 onSuccess : function(operation) {
		var me = this;
		var owner = me.getOwner();
		var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
		var diSuiteTypeCode = properties.data.diSuiteTypeCode;
		var block = me.getBlock('topblock');
		var categoryCombox = block.down('xapcombobox[action=category]');
		var res = operation.result.dataList;
	    var comdata = [];
	    var index = 0;
	    if(res!=null){
	    	
	    	for(var i=0;i<res.length;i++){
	    		
	    	    var model = {
		                 'text':res[i].diSuiteTpNm,
		                 'value':res[i].diSuiteTpCd,
		               };
		 	     comdata.push(model);
		 	     
		 	     if(diSuiteTypeCode!=''){
		 	    	 
		 	    	 if(diSuiteTypeCode == res[i].diSuiteTpCd){
		 	    		 index = i;
		 	    	 }
		 	     }
		    }
	    	
	    	categoryCombox.setData(comdata);
	    	categoryCombox.selectAt(index);
	    	
	    }else{
	    	var categoryStore = categoryCombox.getStore();
	    	categoryStore.removeAll();
	    	categoryCombox.setRawValue('');
	    	XapMessageBox.info('无组套分类,请先维护组套分类!');
	    }
	    
	    
    }
    
   
});

Ext.define('iih.mr.kr.csm.action.CSMDisuiteEffectAction',{
	extend :  Xap.ej.action.ServiceInvocation ,
	requires:[],
	
	doExecute: function(context) {
		   //this. showLoading();
           this.prepareOperations(context.operations,context);
        },
	 prepareOperations: function(operations,context) {
        	
        	var me = this;
        	var owner=me.getOwner();
        	var url = me.url;
        	var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
        	
           	var qs = Ext.Object.toQueryString(properties.data);
           	url += '?' + qs;
	      
	        var METHODS = this.getInvocationMethods();
	    	var operation = {
	            url: url,
	    		mclass: null,
	    		method: METHODS.METHOD_GET,
	    		condition: null,
	    		scope: this,
	    		success: this.onSuccess,
	    	    fail: this.onFailure
	    	};
	    	operations.push(operation);
	    },
	
	onSuccess : function(operation) {
	    	 var me = this;
	    	 var bottomblock = me.getBlock('bottomblock');
	    	 var confirmBtn = bottomblock.down('xapbutton[action=confirm]');
	    	 var closeBtn = bottomblock.down('xapbutton[action=close]');
	    	 var res = operation.result.data;
	    	 if(res){
	    		 confirmBtn.setDisabled(false);
	    	 }else{
	    		 confirmBtn.setDisabled(true);
	    		 XapMessageBox.info('该分类下,组套名称不可用!')
	    	 }
	    },
	 onFailure: function(operation) {
	    	XapMessageBox.info('查询失败!');
	    },  
});

Ext.define('iih.mr.kr.csm.block.CSMDisuiteMrTemplateBlock',{
	extend :  Xap.ej.block.FormBlock ,
	                                       
	alias:'widget.csmdisuitemrtemplateblock',
	//layout: 'fit',
	border: 0,
    items:  [{

          xtype: 'xapgrid',
          action:'mrgrid',
          title:'模板',
          height:350,
	  	  autoScroll:true,
	  	  mode:'multi',
		  checkboxShow:true,
	  	  CM_JR_Record:[
	               {header: '模板ID', dataIndex: 'mrTemplateCode',hidden:true},
	               {header: '病历模板', dataIndex: 'mrTemplateName',width:200},
	               {header: '所属编码', dataIndex: 'ownerCode',width:100,hidden:true},
	               {header: '所属类型', dataIndex: 'ownerType',width:100,hidden:true},
	               {header: '所属分类', dataIndex: 'ownerTypeName',width:100,hidden:false},
	               {header: '所属', dataIndex: 'ownerName',width:100,hidden:false},
	  	    ]
    
    }]
  
})

Ext.define('iih.mr.kr.csm.action.CSMDisuiteMrTemplateOpAction', {
	extend:  Xap.ej.action.Action ,
	requires:[],
	
	execute: function(context) {
	 
	    var me = this;
	    var owner = me.getOwner();
	    var block = me.getBlock('topblock');
	    var mrgrid = block.down('xapgrid[action=mrgrid]');
	    var selModel=mrgrid.getSelectionModel();
        var selection = selModel.getSelection();
	    
        if(selection.length==0){
        	  XapMessageBox.info('请选择病例模板!');
        	return;
        }
	    
	     if(context.event.arguments[0].action='confirm'){
	    	 
	    	 var view = Ext.getCmp('csmdisuiteview');
	    	 var parentMrGrid = view.down('xapgrid[action=mrgrid]');
	    	 var mrStore = parentMrGrid.getStore();
	    	 if(mrStore.getData().length>0){
	    		 //过滤重复数据
	    		 for(var i=0;i<selection.length;i++){
	    			 
	    			 for(var j=0;j<mrStore.getData().length;j++){
	    				 
	    				 if(selection[i].data.mrTemplateCode == mrStore.getData()[j].mrTemplateCode){
	    					 Ext.Array.remove(selection,selection[i])
	    				 }
	    			 }
	    		 }
	    		 
	    		 var index = mrStore.getData().length;
	    		 mrStore.insert(index,selection);
	    		 
	    		 parentMrGrid.getSelectionModel().selectAll();
	    		 
	    	 }else{
	    		 parentMrGrid.setData(selection);
	    	 }
	    	 parentMrGrid.getSelectionModel().selectAll();
	    	 me.owner.ownerCt.close();
	     }else{
	    	 me.owner.ownerCt.close();
	     }
	    
    }
});

Ext.define('iih.mr.kr.csm.action.CSMDisuiteMrTemplateSearchAction',{
	extend :  Xap.ej.action.ServiceInvocation ,
	requires:[],
	
	doExecute: function(context) {
		   //this. showLoading();
           this.prepareOperations(context.operations,context);
        },
	 prepareOperations: function(operations,context) {
        	
        	var me = this;
        	var owner=me.getOwner();
        	var url = me.url;
        	
        	var condition = owner.viewConfig;
        	
           	var qs = Ext.Object.toQueryString(condition);
           	url += '?' + qs;
            var METHODS = this.getInvocationMethods();
	    	var operation = {
	            url: url,
	    		mclass: null,
	    		method: METHODS.METHOD_GET,
	    		condition: null,
	    		scope: this,
	    		success: this.onSuccess,
	    	    fail: this.onFailure
	    	};
	    	operations.push(operation);
	    },
	
	onSuccess : function(operation) {
	    	var me = this;
	    	var mrGrid = me.getBlock('topblock').down('xapgrid[action=mrgrid]');
	    	var res = operation.result.dataList;
	    	
	        if(res==null){
	        	XapMessageBox.info('该科室无模板数据!');
	        }else{
	        	mrGrid.setData(res);
	        	
	        }
	    	
	    },
	 onFailure: function(operation) {
	    	XapMessageBox.info('查询失败!');
	    },  
});

Ext.define('iih.mr.kr.csm.view.CSMDisuiteMrTemplateView', {              
    extend:  Xap.ej.stl.view.TopBottomContainerTemplate ,
    alias: 'widget.csmdisuitemrtemplateview',
    id:'csmdisuitemrtemplateView',
	          
	        
                                                                 
                                                                     
                                                                         
                
                 
	    
	            
    xapConfig:{
	 
	     blocks: {
				   'top':{ 
						xclass:'iih.mr.kr.csm.block.CSMDisuiteMrTemplateBlock',
						flex:12
					},
					'bottom':{
	    				xclass: 'Xap.ej.block.ToolbarBlock',
	    				items: [{
	    					xtype: 'xapbutton',
	    					text: '确认',
	    					iconCls: 'icon-OK',
	    					action: 'confirm',
	    					
	    				}, 
	    				{
	    					xtype: 'xapbutton',
	    					text: '取消',
	    					action: 'close',
	    					iconCls: 'icon-cancel' ,
	    					
	    				}]
	    			}
           },
           actions:{
        	   'mropAction': {
					xclass: 'iih.mr.kr.csm.action.CSMDisuiteMrTemplateOpAction',
					blocks: {
	      	            topblock: 'top',
	      	            bottomblock:'bottom'
					 }
	           },
	           'mrsearchAction': {
					xclass: 'iih.mr.kr.csm.action.CSMDisuiteMrTemplateSearchAction',
					url:'/kr/csa/mrtemplate/list',
					blocks: {
	      	            topblock: 'top',
	      	            bottomblock:'bottom'
					 }
	           }
           },
           chains:{
        	   'mropAction':['mropAction'],
        	   'mrsearchAction':['mrsearchAction'],
        	   'disuiteSaveAction':['disuiteSaveAction'],
           },
           connections:{
        	   'bottom':[{
        		   selector:'xapbutton[action=confirm]',
   				   event: 'click',
   				   chain: 'mropAction'
        	   },{
        		   selector:'xapbutton[action=close]',
   				   event: 'click',
   				   chain: 'mropAction'
        	   }],
        	   'top':[{
        		   selector:'xapgrid[action=mrgrid]',
   				   event: 'afterrender',
   				   chain: 'mrsearchAction'
        	   }]
        	
           }
	
      }
})   
Ext.define('iih.mr.kr.csm.action.CSMDisuiteOpAction', {
	extend:  Xap.ej.action.Action ,
	                                                         
	
	execute: function(context) {
    
	
	   var me = this;
	   var owner = me.getOwner();
	   var block = me.getBlock('topblock');
	
	   var diGrid = block.down('xapgrid[action=digrid]');
       var diStore = diGrid.getStore();
	   
       var mrGrid = block.down('xapgrid[action=mrgrid]');
       var mrStore = mrGrid.getStore();
       
       //type 1 诊断新增,2诊断删除,3模板新增,4模板删除 5确认 ,6取消
       
	   if(context.type=='1'){
		   var insertModel = Ext.create('iih.mr.kr.csm.model.DIModel',{
			   icdCode:'',
			   diName:'',
			   diCode:''
		   });
		   var index = diStore.data.length;
		   diStore.insert(index,[insertModel]);
		   
	   }else if(context.type=='2'){
           var selModel=diGrid.getSelectionModel();
           var selection = selModel.getSelection();
           if(selection.length>0){
        	   XapMessageBox.confirm2(
    					'确认删除该记录？',
    					function(btn){
    						if(btn == 'yes'){
    							
    						    for(var i=0;i<selection.length;i++){
    						    	var record = selection[i];
    						    	diStore.remove(record);
    						    }
    						}
    				});
           }else{
        	   XapMessageBox.info('请选择要删除的诊断!');
           }
		   
	   }else if(context.type=='3'){
		   
		   var ownerTypeCombox = block.down('xapcombobox[action=ownerType]');
	       var ownerCombox = block.down('xapcombobox[action=owner]');
	       var ownerdisute = block.down('xapcombobox[action=disute]');
		   var diSuiteCode = '';
		   if(owner.viewConfig.typeFlag==2){
			   diSuiteCode = owner.viewConfig.data.diSuiteCode;
		   }
		   var action = Xap.create({
   			  xclass: 'Xap.ej.action.PopAction'
   		   });
       	   var config = {
       			width: 760,
	    		height:400,
	    		title:'选择组套病历模板',
           		contentConfig: {
           			xtype: 'csmdisuitemrtemplateview',
           		    viewConfig:{
       		           ownerType: ownerTypeCombox.value,
       		           ownerCode:ownerCombox.value,
       		           enTypeCode:'ENM01.01',
       		           diSuiteCode:diSuiteCode
                    }
           		}
           	};
   		action.execute(config);
		   
	   }else if(context.type=='4'){
		   

           var selModel=mrGrid.getSelectionModel();
           var selection = selModel.getSelection();
           if(selection.length>0){
        	   XapMessageBox.confirm2(
    					'确认删除该记录？',
    					function(btn){
    						if(btn == 'yes'){
    							
    						    for(var i=0;i<selection.length;i++){
    						    	var record = selection[i];
    						    	mrStore.remove(record);
    						    }
    						}
    				});
           }else{
        	   XapMessageBox.info('请选择要删除的病历模板!');
           }
	   }else if(context.type=='5'){
		     
		    //保存组套
		     var disuiteOpAction = me.getOwner().getActionChain("disuiteSaveAction");
    	     disuiteOpAction.execute();
		   
	   }else if(context.type=='6'){
		   
		   owner.ownerCt.close();
	   }
    }
});

Ext.define('iih.mr.kr.csm.action.CSMDisuiteSaveAction',{
	extend :  Xap.ej.action.ServiceInvocation ,
	requires:[],
	
	doExecute: function(context) {
		   //this. showLoading();
           this.prepareOperations(context.operations,context);
        },
	 prepareOperations: function(operations,context) {
        	
        	var me = this;
        	var owner=me.getOwner();
        	var url = me.url;
        	
        	var block = me.getBlock('topblock');
            var ownerTypeCombox = block.down('xapcombobox[action=ownerType]');
            var ownerCombox = block.down('xapcombobox[action=owner]');
            var categoryCombox = block.down('xapcombobox[action=category]');
            var diCodeCombox = block.down('comboxgrid[action=disute]');
            
            var diGrid = block.down('xapgrid[action=digrid]');
            var mrGrid = block.down('xapgrid[action=mrgrid]');
            
            var selModeldi=diGrid.getSelectionModel();
            var selectiondi = selModeldi.getSelection();
            
            var selModelmr=mrGrid.getSelectionModel();
            var selectionmr = selModelmr.getSelection();
            
            var ownerType = ownerTypeCombox.value;
            var ownerCode = ownerCombox.value;
            var diSuiteTypeCode = categoryCombox.value;
            var diCode = diCodeCombox.getValue();
            
            if(owner.viewConfig.typeFlag==2){
            	
            	 if(diCode==null){
            		 diCode = owner.viewConfig.data.diCode;
            	 }
            }
            
            var relDiList=[];
            var relMrList=[];
            
            if(diCode==null){
            	XapMessageBox.info('请录入组套名称!');
            	return;
            }
            
            if(selectiondi.length==0){
            	
            	XapMessageBox.info('请选择诊断!');
            	return;
            }else{
            	
            	for(var i=0;i<selectiondi.length;i++){
			    	var record = selectiondi[i];
			    	var disuitediCode = record.get('diCode');
			    	if(disuitediCode!=null && disuitediCode!=''){
			    		relDiList.push(disuitediCode);
			    	}
			    	
			    }
            }
            
           if(selectionmr.length==0){
            	
            	XapMessageBox.info('请选择病历模板!');
            	return;
            }else{
            	
            	for(var i=0;i<selectionmr.length;i++){
			    	var record = selectionmr[i];
			    	var mrTemplateCode = record.get('mrTemplateCode');
			    	if(mrTemplateCode!=null && mrTemplateCode!=''){
			    		relMrList.push(mrTemplateCode);
			    	}
			    	
			    }
            }
           
           if(owner.viewConfig.typeFlag==2){
        	   var data={enTypeCode:'ENM01.01',ownerType:ownerType,ownerCode:ownerCode,diSuiteTypeCode:diSuiteTypeCode,diCode:diCode,relDiList:relDiList,relMrList:relMrList,diSuiteCode:owner.viewConfig.data.diSuiteCode};
           }else{
        	   var data={enTypeCode:'ENM01.01',ownerType:ownerType,ownerCode:ownerCode,diSuiteTypeCode:diSuiteTypeCode,diCode:diCode,relDiList:relDiList,relMrList:relMrList};
           }
           
            
            var METHODS = this.getInvocationMethods();
	    	var operation = {
	            url: url,
	    		mclass: null,
	    		method: METHODS.METHOD_CREATE,
	    		data:data,
	    		condition: null,
	    		scope: this,
	    		success: this.onSuccess,
	    	    fail: this.onFailure
	    	};
	    	operations.push(operation);
	    },
	
	onSuccess : function(operation) {
	    	var me = this;
	    	var view = Ext.getCmp('csmkrcontentview');
	    	if(operation.result.data){
	    		//自动关闭
	    		var owner=me.getOwner();
	    		owner.ownerCt.close();
	    		var csmForAdminSearch = view.getActionChain('csmForAdminsearchAction');
	    		csmForAdminSearch.execute();
	    		
	    		var diGrid = view.getBlock('right').down('xapgrid[action=digrid]');
	    		var diStore = diGrid.getStore();
	    		
	    		var mrGrid = view.getBlock('right').down('xapgrid[action=mrgrid]');
	    		var mrStore = mrGrid.getStore();
		
	    		diStore.removeAll();
	    		mrStore.removeAll();
	    	 
	    		
	    	}else{
	    		XapMessageBox.info('保存失败!');
	    	}
	    	
	    },
	 onFailure: function(operation) {
	    	XapMessageBox.info('查询失败!');
	    },  
});

Ext.define('iih.mr.kr.csm.action.CSMDisuiteMrSearchAction',{
	extend :  Xap.ej.action.ServiceInvocation ,
	requires:[],
	
	doExecute: function(context) {
		   //this. showLoading();
           this.prepareOperations(context.operations,context);
        },
	 prepareOperations: function(operations,context) {
        	
        	var me = this;
        	var owner=me.getOwner();
        	var url = me.url;
        	var diSuiteCode = owner.viewConfig.data.diSuiteCode;
        	var ownerType = owner.viewConfig.data.ownerType;
        	
        	   condition = {
            			diSuiteCode: diSuiteCode,
            			ownerType:ownerType
               	 };
               	
        	
        	
           	var qs = Ext.Object.toQueryString(condition);
           	url += '?' + qs;
            var METHODS = this.getInvocationMethods();
	    	var operation = {
	            url: url,
	    		mclass: null,
	    		method: METHODS.METHOD_GET,
	    		condition: null,
	    		scope: this,
	    		success: this.onSuccess,
	    	    fail: this.onFailure
	    	};
	    	operations.push(operation);
	    },
	
	onSuccess : function(operation) {
	    	var me = this;
	    	var block = me.getBlock('topblock');
	    	var mrGrid = block.down('xapgrid[action=mrgrid]');
	    	var res = operation.result.dataList;
	    	mrGrid.setData(res);
	    	mrGrid.getSelectionModel().selectAll();
	    	
	    },
	 onFailure: function(operation) {
	    	XapMessageBox.info('查询失败!');
	    },  
});

Ext.define('iih.mr.kr.csm.action.CSMDisuiteDiSearchAction',{
	extend :  Xap.ej.action.ServiceInvocation ,
	requires:[],
	
	doExecute: function(context) {
		   //this. showLoading();
           this.prepareOperations(context.operations,context);
        },
	 prepareOperations: function(operations,context) {
        	
        	var me = this;
        	var owner=me.getOwner();
        	var url = me.url;
        	
        	var diSuiteCode = owner.viewConfig.data.diSuiteCode;
        	var condition = {
        			diSuiteCode: diSuiteCode
           	 };
           	
           	var qs = Ext.Object.toQueryString(condition);
           	url += '?' + qs;
	      
	        var METHODS = this.getInvocationMethods();
	    	var operation = {
	            url: url,
	    		mclass: null,
	    		method: METHODS.METHOD_GET,
	    		condition: null,
	    		scope: this,
	    		success: this.onSuccess,
	    	    fail: this.onFailure
	    	};
	    	operations.push(operation);
	    },
	
	onSuccess : function(operation) {
	    	var me = this;
	    	var block = me.getBlock('topblock');
	    	var diGrid = block.down('xapgrid[action=digrid]');
	    	var res = operation.result.dataList;
	    	diGrid.setData(res);
	    	diGrid.getSelectionModel().selectAll();
	    	
	    	 var disuiteOpAction = me.getOwner().getActionChain("disuiteOpAction");
	    	 disuiteOpAction.execute({type:'1'});
	    	
	    },
	 onFailure: function(operation) {
	    	XapMessageBox.info('查询失败!');
	    },  
});

/** 
 * 基本tabPanel 
 * @extends Ext.tab.Panel
 * @author ：chenyajie<chen_yajie@founder.com>
 * 
 *
 */
Ext.define('Xap.ej.element.tab.Panel', {
	extend:  Ext.tab.Panel ,
	alias: 'widget.xaptabpanel'
});
Ext.define('iih.mr.kr.csm.block.CSMDisuiteBlock',{
	extend :  Xap.ej.block.FormBlock ,
	           
	                                      
	                                      
	                                          
	             
	alias:'widget.csmdisuiteblock',
	border: 0,
    items:  [{
		    	xtype:'xappanel',
		    	action:'disute',
		    	border:0,
		    	padding:'10 0 5 0',
		    	layout: {
					type: 'table',
					columns: 2,
					tableAttrs: {
			            border: 0,
			            cellspacing: 1,
			            width: '100%'
			        },
			        tdAttrs: {
			            valign: 'left'
			        }
			    },
			    items:[{
			    	   xtype: "xapcombobox",
					   action:'ownerType',
					   fieldLabel:'所属分类',
					   labelAlign:'right',
					   comboData:[			
					       {"value":'MDM08.02', "text":"科室"},		
					       {"value":"MDM08.03", "text":"个人"}		
					    ] 
			    },{
			    	   xtype: "xapcombobox",
					   action:'owner',
					   fieldLabel:'组套所属',
					   labelAlign:'right',
			    },{
			    	   xtype: "xapcombobox",
					   action:'category',
					   fieldLabel:'组套分类',
					   labelAlign:'right',
			    },{
			    	action:'disute',
					xtype:'comboxgrid',
       				url: 'di/asistantInput',
       				labelAlign : 'right',
       			    fieldLabel:'组套名称',
       				listWidth:230,    
       				width:255, 
       				valueField : 'value',
       				displayField:'label',
       	            columns: [{
       	                    text: '诊断编码',
       	                    dataIndex: 'value',
       	                    hidden:true
       	                },{
       	                    text: '诊断名称',
       	                    flex:1,
       	                    dataIndex: 'label'
       	                },
       	                {
       	                    text: 'ICD编码',
       	                    flex:1,
       	                    dataIndex: 'icd',
       	                    hidden:true
       	                }],
       	             callback : function(newValue,oldValue,record){  
			    	      var owner = Ext.getCmp('csmdisuiteview');
			    	      var categoryCombox = owner.down('xapcombobox[action=category]');
			    	      var  effect = owner.getActionChain('categoryEffectAction');
			    	      var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
			    	      properties.data.diCode = newValue;
			    	      properties.data.diSuiteTypeCode = categoryCombox.value;
			    	      effect.execute();
			    	      
			    	      if(owner.viewConfig.typeFlag == 1){
			    	    	  
			    	    	  var diGrid = owner.down('xapgrid[action=digrid]');
			    	    	  var diStore = diGrid.getStore();
			    	    	  var insertModel = Ext.create('iih.mr.kr.csm.model.DIModel',{
			    				   icdCode:record.icd,
			    				   diName:record.label,
			    				   diCode:record.value
			    			   });
			    			   var index = diStore.data.length;
			    			   diStore.insert(0,[insertModel]);
			    	      }
			         }
			    }]
            },{
    	        xtype:'xaptabpanel',
    	       
		    	items:[{
		    		 title:'诊断',
		    		 items:[{
					      xtype: 'xapgrid',
					      action:'digrid',
					      plugins: [
								   Ext.create('Ext.grid.plugin.CellEditing', {
										 clicksToEdit: 1
							       })
					         ],
					      height:260,
						  autoScroll:true,
						  checkboxShow:true,
						  mode:'multi',
						  showHeaderCheckbox:true,
						  tools:[{
							    action:'disuteD',
								xtype:'comboxgrid',
			       				url: 'di/asistantInput',
			       				labelAlign : 'right',
			       			    fieldLabel:'诊断',
			       				listWidth:230,    
			       				width:255, 
			       				valueField : 'value',
			       				displayField:'label',
			       	            columns: [{
			       	                    text: '诊断编码',
			       	                    dataIndex: 'value',
			       	                    hidden:true
			       	                },{
			       	                    text: '诊断名称',
			       	                    flex:1,
			       	                    dataIndex: 'label'
			       	                },
			       	                {
			       	                    text: 'ICD编码',
			       	                    flex:1,
			       	                    dataIndex: 'icd',
			       	                    hidden:true
			       	                }],
			       	             callback : function(newValue,oldValue,record){  
						    	      var owner = Ext.getCmp('csmdisuiteview');
						    	      var categoryCombox = owner.down('xapcombobox[action=category]');
						    	      var  effect = owner.getActionChain('categoryEffectAction');
						    	      var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
						    	      properties.data.diCode = newValue;
						    	      properties.data.diSuiteTypeCode = categoryCombox.value;
						    	      effect.execute();
						    	      
						    	      
				    	      
					    	      if(owner.viewConfig.typeFlag == 1){
					    	    	  
					    	    	  
					    	    	  var diGrid = owner.down('xapgrid[action=digrid]');
					    	    	  var diStore = diGrid.getStore();
		            	                var datas = diStore.getData();
		            	                var b =false;
		            	                for(var i=0;i<datas.length-1;i++){
		            	                	
		            	                	if(datas[i].diCode==record.value){
		            	                		b=true;
		            	                		break;
		            	                	}
		            	                }  
		            	                if(b){ 
		            	                
		            	                	XapMessageBox.info('重复录入!');
		            	                	
		            	                }else{
		            	                	  var insertModel = Ext.create('iih.mr.kr.csm.model.DIModel',{
							    				   icdCode:record.icd,
							    				   diName:record.label,
							    				   diCode:record.value
							    			   });
							    			   var index = diStore.data.length;
							    			   diStore.insert(0,[insertModel]);
		            	                }
					    	    	  
					    	    	
					    	    	  /*var insertModel = Ext.create('iih.mr.kr.csm.model.DIModel',{
					    				   icdCode:record.icd,
					    				   diName:record.label,
					    				   diCode:record.value
					    			   });
					    			   var index = diStore.data.length;
					    			   diStore.insert(0,[insertModel]);*/
					    	      }
				         }
						  },{
							  xtype: 'label',
					            width: 5
						  },/*{
							   xtype:'xapbutton',
							   text:'新增',
							   action:'insertDiBtn',
							   iconCls: 'icon-Create'
						  },*/{
							    xtype: 'label',
					            width: 5
						  },{
							   xtype:'xapbutton',
							   text:'删除', 
							   action:'delDiBtn',
							 iconCls: 'icon-Delete',
						  }],
						  CM_JR_Record:[
					            
					             {
					            	 header: '诊断(模板)', 
					            	 dataIndex: 'diName',
					            	 width:200,
					            	 /*editor:{
					          
				            	    	xtype:'comboxgrid',
				        				margin:'10 0 10 0',
				        				name:'diCds', 
				        	            method:'dept',
				        				url: 'di/asistantInput',
				        				
				        				labelAlign : 'right',
				        				labelWidth : 50,
				        				listWidth:230,    
				        				width:210, 
				        				valueField : 'label',
				        			
				        	            columns: [{
				        	                    text: '诊断编码',
				        	                    dataIndex: 'value',
				        	                    hidden:true
				        	                },{
				        	                    text: '诊断名称',
				        	                    flex:1,
				        	                    dataIndex: 'label'
				        	                },
				        	                {
				        	                    text: 'ICD编码',
				        	                    flex:1,
				        	                    dataIndex: 'icd'
				        	                }],
				        	                callback : function(newValue,oldValue,record){
					            	                var diGrid = this.ownerCt.grid;
					            	                var diStore = diGrid.getStore();
					            	                var datas = diStore.getData();
					            	                var b =false;
					            	                for(var i=0;i<datas.length-1;i++){
					            	                	
					            	                	if(datas[i].diCode==record.value){
					            	                		b=true;
					            	                		break;
					            	                	}
					            	                }  
					            	                if(b){ 
					            	                	this.op =true;
					            	                    this.setRawValue('');
					            	                    this.comboRecord.label = '';
			            	                	    	this.comboxHiddenValue = '';
					            	                	XapMessageBox.info('重复录入!');
					            	                	
					            	                }else{
					            	                	this.op =false;
					            	                    var selModel=diGrid.getSelectionModel();
						    	         			    var recordRow=selModel.getSelection()[0];
						    	         			   recordRow.set('icdCode',record.icd);
						    	         			   recordRow.set('diCode',record.value);
					            	                }
					            	                
			            	                },
			            	                listeners:{
			            	                	blur:function(com,the,opt){
			            	                	  var diGrid = this.ownerCt.grid;
			            	                	  var diStore = diGrid.getStore();
			            	                	  var index = diStore.data.length;
			            	                	  var selModel=diGrid.getSelectionModel();
					    	         			    var recordRow=selModel.getSelection()[0];
					    	         			    
			            	                	    if(recordRow.data.icdCode!=''){
			            	                	    	  var owner = this.ownerCt.grid.ownerCt.ownerCt.ownerCt.ownerCt;
				            	                	      var disuiteOpAction = owner.getActionChain("disuiteOpAction");
				            	                   	      disuiteOpAction.execute({type:'1'});
			            	                	    }else{
			            	                	    	
			            	                	    	
			            	                	    	this.comboRecord.label = '';
			            	                	    	this.comboxHiddenValue = '';
			            	                	    }
			            	                	
			            	                    }
			            	                }
					                  }*/
					             },
					             {
					            	 header: 'ICD编码', 
					            	 dataIndex: 'icdCode',
					            	 width:100
					             },{
					            	 header: '编码编码', 
					            	 dataIndex: 'diCode',
					            	 hidden:true,
					            	 width:100
					             }
						    ],
						 
			       
		    		 }]
		    	},{
		    		title:'模板',
		    		items:[{
				          xtype: 'xapgrid',
				          action:'mrgrid',
				          height:300,
					  	  autoScroll:true,
					      mode:'multi',
					      checkboxShow:true,
					      tools:[{
							   xtype:'xapbutton',
							   text:'新增',
							   action:'insertMrBtn',
							   iconCls: 'icon-Create'
						  },{
							    xtype: 'label',
					            width: 5
						  },{
							   xtype:'xapbutton',
							   text:'删除',
							   action:'delMrBtn',
							   iconCls: 'icon-Delete',
						  }],
					  	  CM_JR_Record:[
					               {header: '模板ID', dataIndex: 'mrTemplateCode',hidden:true},
					               {header: '病历模板', dataIndex: 'mrTemplateName',width:200},
					               {header: '所属编码', dataIndex: 'ownerCode',width:100,hidden:true},
					               {header: '所属类型', dataIndex: 'ownerType',width:100,hidden:true},
					               {header: '所属分类', dataIndex: 'ownerTypeName',width:100,hidden:false},
					               {header: '所属', dataIndex: 'ownerName',width:100,hidden:false},
					  	    ]
			    
			         
		    		}]
		    	}]
    
    }]
  
})

Ext.define('iih.mr.kr.csm.view.CSMDisuiteView', {              
    extend:  Xap.ej.stl.view.TopBottomContainerTemplate ,
    alias: 'widget.csmdisuiteview',
    id:'csmdisuiteview',
	          
	        
	                                        
	                                                          
	                                                         
	                                                       
	                                                   
	                                                     
	                                                         
	                                                         
	    
	            
    xapConfig:{
	 
	     blocks: {
				   'top':{ 
						xclass:'iih.mr.kr.csm.block.CSMDisuiteBlock',
						flex:12
					},
					'bottom':{
	    				xclass: 'Xap.ej.block.ToolbarBlock',
	    				items: [{
	    					xtype: 'xapbutton',
	    					text: '确认',
	    					action: 'confirm',
	    					iconCls: 'icon-OK',
	    					
	    				}, 
	    				{
	    					xtype: 'xapbutton',
	    					text: '取消',
	    					action: 'close',
	    					iconCls: 'icon-cancel' ,
	    					
	    				}]
	    			}
           },
           actions:{
        	   'viewreadyAction': {
					xclass: 'iih.mr.kr.csm.action.CSMDisuiteViewreadyAction',
					blocks: {
	       	            topblock: 'top',
	       	            bottomblock:'bottom'
					 }
		       },
		       'categoryAction': {
					xclass: 'iih.mr.kr.csm.action.CSMDisuiteCategoryAction',
					url:'/kr/disuite/category/list',
					blocks: {
	       	            topblock: 'top',
	       	            bottomblock:'bottom'
					 }
		       },
		       'categoryEffectAction': {
					xclass: 'iih.mr.kr.csm.action.CSMDisuiteEffectAction',
					url:'/kr/disuite/can/create',
					blocks: {
	       	            topblock: 'top',
	       	            bottomblock:'bottom'
					 }
		       },
		       'disuiteOpAction': {
					xclass: 'iih.mr.kr.csm.action.CSMDisuiteOpAction',
					blocks: {
	       	            topblock: 'top',
	       	            bottomblock:'bottom'
					 }
		       },
		       'disuiteSaveAction': {
					xclass: 'iih.mr.kr.csm.action.CSMDisuiteSaveAction',
					url:'kr/disuite/save',
					blocks: {
	      	            topblock: 'top',
	      	            bottomblock:'bottom'
					 }
	           },
	           'disuiteMrSearchAction': {
					xclass: 'iih.mr.kr.csm.action.CSMDisuiteMrSearchAction',
					url:'/kr/disuite/mrtemplate/list',
					blocks: {
	      	            topblock: 'top',
	      	            bottomblock:'bottom'
					 }
	           },
	           'disuiteDiSearchAction': {
					xclass: 'iih.mr.kr.csm.action.CSMDisuiteDiSearchAction',
					url:'/kr/disuite/diagnosis/list',
					blocks: {
	      	            topblock: 'top',
	      	            bottomblock:'bottom'
					 }
	           }
           },
           chains:{
        	   'viewreadyAction':['viewreadyAction'],
        	   'categoryAction':['categoryAction'],
        	   'categoryEffectAction':['categoryEffectAction'],
        	   'disuiteOpAction':['disuiteOpAction'],
        	   'disuiteSaveAction':['disuiteSaveAction'],
        	   'disuiteDiSearchAction':['disuiteDiSearchAction'],
        	   'disuiteMrSearchAction':['disuiteMrSearchAction'],
           },
           connections:{
        	   'top':[{
        		   selector:'xappanel[action=disute]',
        		   event: 'afterrender',
			       chain: 'viewreadyAction'
        	   }]
        	   
           }
	
      }
})   
Ext.define('iih.mr.kr.csm.block.CSMShareBlock',{
	extend :  Xap.ej.block.FormBlock ,
	requires: [],
	alias:'widget.csmshareBlock',
	border: 0,
    items:  [{
    	    xtype: "xapcombobox",
		    action:'dept',
		    fieldLabel:'待共享科室',
		    labelAlign:'right',
		    disabled:false,
		    padding:'10 0 5 0',
    },{
    	 xtype: 'xapgrid',
         action:'deptgrid',
         checkboxShow:true,
         title:'共享科室',
         height:330,
         mode:'multi',
         selectBy:'checked',
	  	 autoScroll:true,
	  	 CM_JR_Record:[
	               {header: '共享科室', dataIndex: 'checked',hidden:true},
	               {header: '科室编码', dataIndex: 'deptCode',hidden:true},
	               {header: '科室名称', dataIndex: 'deptName',width:200}
	  	    ]
    }]
  
})

Ext.define('iih.mr.kr.csm.action.CSMShareViewreadyAction', {
	extend:  Xap.ej.action.Action ,
	requires:[],
	
	execute: function(context) {
	
           var me = this;
           var owner = me.getOwner();
           var block = me.getBlock('topblock');
           var deptcombox = block.down('xapcombobox[action=dept]');
           deptcombox.setData(iih.mr.kr.csm.action.Util.deptArr);
           deptcombox.selectAt(0);
           
           me.searchSharDept(me);
           
           deptcombox.on('select',function(com){
        	   me.searchSharDept(me);
           });
           
           var bottomBlock = me.getBlock('bottomblock');
           var confirmBtn = bottomBlock.down('xapbutton[action=confirm]');
           var closeBtn = bottomBlock.down('xapbutton[action=close]');
           
           confirmBtn.on('click',function(btn){
        	   
        	   var deptGrid = me.getBlock('topblock').down('xapgrid[action=deptgrid]');
               var selModel=deptGrid.getSelectionModel();
               var selection = selModel.getSelection();
           	
               if(selection.length>0){
            	   var shareSaveAction = me.getOwner().getActionChain("shareSaveAction");
            	   shareSaveAction.execute();
               }else{
            	   XapMessageBox.info('请选择共享的科室!');
               }
        	  
           });
           
           closeBtn.on('click',function(btn){
        	   owner.ownerCt.close();
           });
           
    },
    
    searchSharDept:function(me){
    	
    	 var shareDeptAction = me.getOwner().getActionChain("shareDeptAction");
    	 shareDeptAction.execute();
    },
});

Ext.define('iih.mr.kr.csm.action.CSMShareDeptAction',{
	extend :  Xap.ej.action.ServiceInvocation ,
	requires:[],
	
	doExecute: function(context) {
		   //this. showLoading();
           this.prepareOperations(context.operations,context);
        },
	 prepareOperations: function(operations,context) {
        	
        	var me = this;
        	var owner = me.getOwner();
        	var dept = me.getBlock('topblock').down('xapcombobox[action=dept]');
        	var ownerCode = dept.value;
        	var condition = {
        			enTypeCode:'ENM01.01',
        			ownerType:'MDM08.02',
        			ownerCode:ownerCode
        	};
        	var url = this.url;
        	var qs = Ext.Object.toQueryString(condition);
        	url += '?' + qs;
	        var METHODS = this.getInvocationMethods();
	    	var operation = {
	            url: url,
	    		mclass: null,
	    		method: METHODS.METHOD_GET,
	    		condition: null,
	    		scope: this,
	    		success: this.onSuccess,
	    	    fail: this.onFailure
	    	};
	    	operations.push(operation);
	    },
	
	onSuccess : function(operation) {
	    	var me = this;
	    	var block = me.getBlock('topblock');
	    	var res = operation.result.dataList;
	    	var records = new Array();
	    	
            var deptgrid = block.down('xapgrid[action=deptgrid]');
            deptgrid.setData(res);
            var store = deptgrid.getStore();
            var datas = store.getData();
            deptgrid.getSelectionModel().selectAll();
          
            for(var i=0;i<datas.length;i++){
	    		
	    		if(!datas[i].checked){
	    			deptgrid.getSelectionModel().deselect(i);
	    		}
	    	}
           
	    },
	 onFailure: function(operation) {
	    	XapMessageBox.info('查询失败!');
	    }

});

Ext.define('iih.mr.kr.csm.action.CSMShareSaveAction',{
	extend :  Xap.ej.action.ServiceInvocation ,
	requires:[],
	
	doExecute: function(context) {
		   //this. showLoading();
           this.prepareOperations(context.operations,context);
        },
	 prepareOperations: function(operations,context) {
        	
        	var me = this;
        	var owner = me.getOwner();
        	var dept = me.getBlock('topblock').down('xapcombobox[action=dept]');
        	var deptCodeSrc = dept.value;
        	var deptNameSrc = dept.rawValue;
           
            
        	 var url = this.url;
        	
        	 var deptGrid = me.getBlock('topblock').down('xapgrid[action=deptgrid]');
             var selModel=deptGrid.getSelectionModel();
             var selection = selModel.getSelection();
        	
             var deptDstArr = [];
             for(var i=0;i<selection.length;i++){
            	 deptDstArr.push(selection[i].data);
             }
             
        	var data = {deptCodeSrc:deptCodeSrc,deptNameSrc:deptNameSrc,deptDstArr:deptDstArr};
        	
	        var METHODS = this.getInvocationMethods();
	    	var operation = {
	            url: url,
	    		mclass: null,
	    		method: METHODS.METHOD_CREATE,
	    		condition: null,
	    		scope: this,
	    		data:data,
	    		success: this.onSuccess,
	    	    fail: this.onFailure
	    	};
	    	operations.push(operation);
	    },
	
	onSuccess : function(operation) {
	    	var me = this;
	    	
	    	if(operation.result.data){
	    		
	    		 var shareDeptAction = me.getOwner().getActionChain("shareDeptAction");
	        	 shareDeptAction.execute();
	    		
	    	}else{
	    		XapMessageBox.info('共享失败!');
	    	}
           
	    },
	 onFailure: function(operation) {
	    	XapMessageBox.info('查询失败!');
	    },  
});

Ext.define('iih.mr.kr.csm.view.CSMShareView', {              
    extend:  Xap.ej.stl.view.TopBottomContainerTemplate ,
    alias: 'widget.csmshareView',
    id:'csmshareView',
	          
	                                              
	                                                         
	                                                    
	                                                   
	            
    xapConfig:{
	 
	     blocks: {
				   'top':{ 
						xclass:'iih.mr.kr.csm.block.CSMShareBlock',
						flex:12
					},
					'bottom':{
	    				xclass: 'Xap.ej.block.ToolbarBlock',
	    				items: [{
	    					xtype: 'xapbutton',
	    					text: '确认',
	    					action: 'confirm',
	    					iconCls: 'icon-cancel' ,
	    					
	    				}, 
	    				{
	    					xtype: 'xapbutton',
	    					text: '取消',
	    					action: 'close',
	    					iconCls: 'icon-cancel' ,
	    					
	    				}]
	    			}
           },
           actions:{
        	   'shareviewreadyAction': {
				    xclass: 'iih.mr.kr.csm.action.CSMShareViewreadyAction',
					blocks: {
	        	          topblock: 'top',
	  	                  bottomblock:'bottom'
					 }
	          },
	          'shareDeptAction': {
				    xclass: 'iih.mr.kr.csm.action.CSMShareDeptAction',
				    url:'/kr/disuite/share/view',
					blocks: {
	        	          topblock: 'top',
	  	                  bottomblock:'bottom'
					 }
	          },
	          'shareSaveAction': {
				    xclass: 'iih.mr.kr.csm.action.CSMShareSaveAction',
				    url:'/kr/disuite/share/save',
					blocks: {
	        	          topblock: 'top',
	  	                  bottomblock:'bottom'
					 }
	          }
           },
           chains:{
        	   'shareviewreadyAction':['shareviewreadyAction'],
        	   'shareDeptAction':['shareDeptAction'],
        	   'shareSaveAction':['shareSaveAction'],
           },
           connections:{
        	   'top':[{
        		   selector:'xapcombobox[action=dept]',
        		   event: 'afterrender',
			       chain: 'shareviewreadyAction'
        	   }]
           }
	
      }
})   
Ext.define('iih.mr.kr.csm.action.CSMBtnOpAction', {
	extend:  Xap.ej.action.Action ,
	                                                                                 
	
	execute: function(context) {
    
	     var me = this;
	     var owner = me.getOwner();
	     var block = me.getBlock('leftblock');
	     var csmtree = block.down('filtertree[action=csmtree]');
	     var  treeData= csmtree.getSelectionModel().getSelection();
	     var b =false;
	     if(treeData.length>0){
	    	 
	    	 if(treeData[0].childNodes.length>0){
	    		 b = true;
	    	 }
	     }
	     var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
	    if(context.event.arguments[0].action=="insertBtn"){
	    	
	    	//新建组套默认现在当前所选择的科室
	    	this.createPopDisuite('新建组套',1,properties.data);
	    	
	    }else if(context.event.arguments[0].action=="modefiyBtn"){
	    	
	    	if(b){
	    		XapMessageBox.info('请选择组套!');
	    		return;
	    	}
	    	
	    	this.createPopDisuite('编辑组套',2,properties.data);
	    	
	    }else if(context.event.arguments[0].action=="delBtn"){
	    	
	    	if(b){
	    		XapMessageBox.info('请选择组套!');
	    		return;
	    	}
	    	 //删除组套
	    	 var disuiteDelAction = owner.getActionChain("csmdisuiteDelAction");
	    	 disuiteDelAction.execute();
	    	
	    }else if(context.event.arguments[0].action=="shareBtn"){
	    	
	    	 var action = Xap.create({
	 			  xclass: 'Xap.ej.action.PopAction'
	 		   });
	     	   var config = {
	     			width: 360,
		    		height:450,
		    		title:'组套共享',
	         		contentConfig: {
	         		   xtype: 'csmshareView'
	         		}
	         	};

	 		action.execute(config);
	    	
	    }
    	
    },
    
    createPopDisuite:function(title,type,data){
    	
    	 var action = Xap.create({
 			  xclass: 'Xap.ej.action.PopAction'
 		   });
     	   var config = {
     			width: 760,
	    		height:410,
	    		title:title,
         		contentConfig: {
         		   xtype: 'csmdisuiteview',
         		   viewConfig:{
                      typeFlag: type,
                      data:data
                  }
         		}
         	};

 		action.execute(config);
    }
});

Ext.define('iih.mr.kr.csm.action.CSMDisuiteDelAction',{
	extend :  Xap.ej.action.ServiceInvocation ,
	requires:[],
	
	doExecute: function(context) {
		   //this. showLoading();
           this.prepareOperations(context.operations,context);
        },
	 prepareOperations: function(operations,context) {
        	
        	var me = this;
        	var owner=me.getOwner();
        	var url = me.url;
        	var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
        	var diSuiteCode = properties.data.diSuiteCode;
        	var condition = {
        			diSuiteCode: diSuiteCode
           	 };
           	
           	var qs = Ext.Object.toQueryString(condition);
           	url += '?' + qs;
	      
	        var METHODS = this.getInvocationMethods();
	    	var operation = {
	            url: url,
	    		mclass: null,
	    		method: METHODS.METHOD_GET,
	    		condition: null,
	    		scope: this,
	    		success: this.onSuccess,
	    	    fail: this.onFailure
	    	};
	    	operations.push(operation);
	    },
	
	onSuccess : function(operation) {
	    	var me = this;
	    	var owner = me.getOwner();
	    	var csmSearch = owner.getActionChain("csmsearchAction");
	 	    csmSearch.execute();
	 	    
	 	    var diGrid = owner.down('xapgrid[action=digrid]');
	 	    var distore = diGrid.getStore();
	    	distore.removeAll();
	    	
	    	
	    	var mrGrid = owner.down('xapgrid[action=mrgrid]');
		 	var mrstore = mrGrid.getStore();
		    mrstore.removeAll();
	    	
	    },
	 onFailure: function(operation) {
	    	XapMessageBox.info('查询失败!');
	    },  
});

Ext.define('iih.mr.kr.csm.view.CSMKRContentView', {              
    extend:  Xap.ej.stl.view.LeftRightContainerTemplate ,
    alias: 'widget.csmkrcontentview',
    id:'csmkrcontentview',
	          
	                                             
	                                                        
	                                                 
	                                                           
	                                                          
	                                                        
	                                                        
	                                                         
	                                                
	                                                
	                                                    
	            
    xapConfig:{
	 
	     blocks: {
			   'left':{ 
					xclass:'iih.mr.kr.csm.block.CSMTreeBlock',
					width:260,	
		       },
		       'right':{ 
					xclass:'iih.mr.kr.csm.block.CSMDiAndMrTemplateBlock'
		       },
           },
         actions:{
        	   'csmsearchAction': {
					xclass: 'iih.mr.kr.csm.action.CSMSearchAction',
					url:'/kr/disuite',
					blocks: {
	        	        leftblock: 'left',
						rightblock:'right'
					 }
		       },
		       'csmForAdminsearchAction': {
					xclass: 'iih.mr.kr.csm.action.CSMForAdminSearchAction',
					//url:'/kr/disuite/admin', //加载分类
					url:'/kr/disuite',
					blocks: {
	        	        leftblock: 'left',
						rightblock:'right'
					 }
		       },
		  
		       'csmDiagnosisSearchAction': {
					xclass: 'iih.mr.kr.csm.action.CSMDiagnosisSearchAction',
					url:'/kr/disuite/diagnosis/list',
					blocks: {
	        	        leftblock: 'left',
						rightblock:'right'
					 }
		       },
		       'csmMrSearchAction': {
					xclass: 'iih.mr.kr.csm.action.CSMMrTemplateSearchAction',
					url:'/kr/disuite/mrtemplate/list',
					blocks: {
	        	        leftblock: 'left',
						rightblock:'right'
					 }
		       },
		       'csmAdminDeptListAction':{
		    	   xclass:'iih.mr.kr.csm.action.CSMAdminDeptListAction',
		    	   url:'kr/disuite/admin/deptlist',
		    	   blocks: {
	        	        leftblock: 'left',
						rightblock:'right'
					 }
		       },
		     

		       'csmTreeItemClickAction': {
					xclass: 'iih.mr.kr.csm.action.CSMTreeItemClickAction',
					blocks: {
			    	    leftblock: 'left',
						rightblock:'right'
					}
			   },
			   'csmEventAction': {
					 xclass: 'iih.mr.kr.csm.action.CSMEventAction',
					 blocks: {
				    	    leftblock: 'left',
							rightblock:'right'
						}
				},
				'csmBtnOpAction': {
					 xclass: 'iih.mr.kr.csm.action.CSMBtnOpAction',
					 blocks: {
				    	    leftblock: 'left',
							rightblock:'right'
						}
				} ,
				'csmdisuiteDelAction': {
					 xclass: 'iih.mr.kr.csm.action.CSMDisuiteDelAction',
					 url:'/kr/disuite/delete',
					 blocks: {
				    	    leftblock: 'left',
							rightblock:'right'
						}
				} 
           },
           chains:{
        	   'csmsearchAction':['csmsearchAction'],
        	   'csmDiagnosisSearchAction':['csmDiagnosisSearchAction'],
        	   'csmMrSearchAction':['csmMrSearchAction'],
        	   'csmAdminDeptListAction':['csmAdminDeptListAction'],
        	   'csmTreeItemClickAction':['csmTreeItemClickAction'],
        	   'csmForAdminsearchAction':['csmForAdminsearchAction'],
        	   'csmEventAction':['csmEventAction'],
        	   'csmBtnOpAction':['csmBtnOpAction'],
        	   'csmdisuiteDelAction':['csmdisuiteDelAction'],
           },
           connections:{
        	   'left':[{
		        		   selector:'xapradio[name=ownerType]',
		        		   event: 'change',
					       chain: 'csmEventAction'
	        	     },{
			  				 selector: 'treepanel',
							 event: 'viewready',
							 chain: 'csmEventAction'
					 },{
						    selector:'treepanel',
		    				event: 'itemclick',
		    				chain: 'csmTreeItemClickAction'
					 },{
						    selector:'xapcombobox[action=dept]',
		    				event: 'change',
		    				chain: 'csmForAdminsearchAction'
					 },{
							  selector:'xapcombobox[action=dept]',
			  				  event : 'afterrender',
			  				  chain: 'csmAdminDeptListAction'
					 }],
			  	'right':[{
			  		  selector:'xapbutton[action=insertBtn]',
	  				  event : 'click',
	  				  chain: 'csmBtnOpAction'
			  	},{
			  		 selector:'xapbutton[action=modefiyBtn]',
	  				  event : 'click',
	  				  chain: 'csmBtnOpAction'
			  	},{
			  		 selector:'xapbutton[action=delBtn]',
	  				  event : 'click',
	  				  chain: 'csmBtnOpAction'
			  	},{
			  		 selector:'xapbutton[action=shareBtn]',
	  				  event : 'click',
	  				  chain: 'csmBtnOpAction'
			  	}]	 
           }
	
      }
})   
Ext.define('iih.mr.kr.csm.view.CSMKRView', {              
    extend:  Xap.ej.template.BaseTemplate ,
    alias: 'widget.csmkrview',
    id:'csmkrview',
	          
	                                              
	            
    xapConfig:{
	 
	     blocks: {
	
		       'content':{
		                 xclass:'iih.mr.kr.csm.view.CSMKRContentView',
	               }
           }
      }
})   
Ext.define('iih.mr.kr.csm.block.CSMCategoryBlock',{
	extend :  Xap.ej.block.FormBlock ,
	           
	                                      
	                                        
	                                          
	                                           
	             
	alias:'widget.csmcategoryblock',
	border: 0,
    items:  [{

    	xtype:'xappanel',
    	border:0,
    	padding:'5 0 5 0',
    	layout : {
    		type: 'hbox',
    		 align : 'stretch',
    		 pack: 'center'
    		
    	},
	    items:[{
	    	 xtype:'xapradio',
	    	 boxLabel: '科室', 
	    	 action: 'ownerTypeDept', 
	    	 inputValue: 'MDM08.02',
	    	 name:'ownerType',
	    	 checked:true,
	    	 padding:'0 20 0 0',
	    	 val:true,
	    	
	        
	    },{
	    	xtype: "xapcombobox",
			action:'dept',
			disabled:false
	    },{
	    	 xtype:'xapradio',
	    	 boxLabel: '个人', 
	    	 action: 'ownerTypePerson', 
	    	 inputValue: 'MDM08.03',
	    	 name:'ownerType',
	    	 padding:'0 0 0 20',
	    	 val:false,
	    },{
	    	 xtype:'xaptextfield',
	    	 fieldLabel: '组套分类', 
	    	 action: 'categoryNm', 
	    	 padding:'0 0 0 20',
	    },{
	    	 xtype: 'label',
             width: 20
	    },{
	    	xtype: 'xapbutton',
			text: '新增',
			action: 'insertBtn',
			iconCls: 'icon-Create',
			
	    },{
	    	  xtype: 'label',
              width: 10
	    },{
	    	xtype: 'xapbutton',
			text: '删除',
			action: 'delBtn',
			iconCls: 'icon-Delete',
			
	    }]
    
    },{
    	 xtype: 'xapgrid',
         action:'categorygrid',
         checkboxShow:true,
         title:'模板',
         height:300,
         mode:'multi',
	  	  autoScroll:true,
	  	  CM_JR_Record:[
	               {header: '自定义分类编码', dataIndex: 'diSuiteTpCd',hidden:true},
	               {header: '组套分类名称', dataIndex: 'diSuiteTpNm',width:200},
	               {header: '所属分类', dataIndex: 'ownerTypeName',width:100,hidden:false},
	               {header: '所属', dataIndex: 'ownerName',width:100,hidden:false},
	            
	  	    ]
    }]
  
})

Ext.define('iih.mr.kr.csm.action.CSMCategoryAdminDeptListAction',{
	extend :  iih.mr.kr.csm.action.CSMAdminDeptListAction ,
	requires:[],
	onSuccess : function(operation) {
	    	var me = this;
	    	var combox = me.getBlock('content').down('xapcombobox[action=dept]');
	    	var res = operation.result.dataList;
	    	var comdata = [];
	    	for(var i=0;i<res.length;i++){
	 	        	
	 	       var model = {
	                 'text':res[i].deptName,
	                 'value':res[i].deptCode,
	               };
	 	        comdata.push(model);
	 	      }
	    	
	    	combox.setData(comdata);
	    	combox.setRawValue(IMER_GLOBAL.department.name);
	    
	    }
 
});

Ext.define('iih.mr.kr.csm.action.CSMCategoryInsertAction',{
	extend :  Xap.ej.action.ServiceInvocation ,
	requires:[],
	
	//组套树查询
	doExecute: function(context) {
		   //this. showLoading();
           this.prepareOperations(context.operations,context);
        },
	 prepareOperations: function(operations,context) {
        	
        	var me = this;
        	var url = me.url;
        	var owner = me.getOwner();
        
        	var diSuiteTypeName = me.getBlock('content').down('xaptextfield[action=categoryNm]').getValue();

        	var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
        	var condition = {
           		 enTypeCode: properties.data.enTypeCode,
           		 ownerType: properties.data.ownerType,
           		 ownerCode: properties.data.ownerCode,
           		 diSuiteTypeName:diSuiteTypeName
           	 };
        	var qs = Ext.Object.toQueryString(condition);
        	url += '?' + qs;
	        var METHODS = this.getInvocationMethods();
	    	var operation = {
	            url: url,
	    		mclass: null,
	    		method: METHODS.METHOD_GET,
	    		condition: null,
	    		scope: this,
	    		success: this.onSuccess,
	    	    fail: this.onFailure
	    	};
	    	operations.push(operation);
	    },
	
	 onSuccess : function(operation) {
	       var me = this;
	       var category = me.getOwner().getActionChain("categorySearchAction");
	       category.execute();
	    },
	 onFailure: function(operation) {
	    	XapMessageBox.info('查询失败!');
	    },  
});

Ext.define('iih.mr.kr.csm.action.CSMCategoryDelAction',{
	extend :  Xap.ej.action.ServiceInvocation ,
	requires:[],
	
	//组套树查询
	doExecute: function(context) {
		   //this. showLoading();
           this.prepareOperations(context.operations,context);
        },
	 prepareOperations: function(operations,context) {
        	
        	var me = this;
        	var url = me.url;
        	
        	var grid = me.getBlock('content').down('xapgrid[action=categorygrid]');
        	var selModel=grid.getSelectionModel();
        	var sel = selModel.getSelection();
        	var diSuiteTpCds = [];
        	for(var i=0;i<sel.length;i++){
        		diSuiteTpCds.push(sel[i].data.diSuiteTpCd);
        	}
            var  diSuiteTpCdVals= diSuiteTpCds.join(",");
            var condition = {
            		diSuiteTypeCode: diSuiteTpCds
              	 };
           	var qs = Ext.Object.toQueryString(condition);
           	url += '?' + qs;
	        var METHODS = this.getInvocationMethods();
	    	var operation = {
	            url: url,
	    		mclass: null,
	    		method: METHODS.METHOD_GET,
	    		condition: null,
	    		scope: this,
	    		success: this.onSuccess,
	    	    fail: this.onFailure
	    	};
	    	operations.push(operation);
	    },
	
	 onSuccess : function(operation) {
	       var me = this;
	       var category = me.getOwner().getActionChain("categorySearchAction");
	       category.execute();
	    },
	 onFailure: function(operation) {
	    	XapMessageBox.info('删除失败!');
	    },  
});

Ext.define('iih.mr.kr.csm.action.CSMCategoryForAdminSearchAction',{
	extend :  Xap.ej.action.ServiceInvocation ,
	requires:[],
	
	
	doExecute: function(context) {
		   //this. showLoading();
           this.prepareOperations(context.operations,context);
        },
	 prepareOperations: function(operations,context) {
        	
        
        	var me = this;
        	var owner = me.getOwner();
        	var url = me.url;
        	var dept = me.getBlock('content').down('xapcombobox[action=dept]');
        	var radios = me.getBlock('content').query('xapradio');
        
        	var ownerCode = dept.value;
        	var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
        	properties.data.ownerCode = ownerCode;
        
        	var qs = Ext.Object.toQueryString(properties.data);
        	url += '?' + qs;
	       
	        var METHODS = this.getInvocationMethods();
	    	var operation = {
	            url: url,
	    		mclass: null,
	    		method: METHODS.METHOD_GET,
	    		condition: null,
	    		scope: this,
	    		success: this.onSuccess,
	    	    fail: this.onFailure
	    	};
	    	operations.push(operation);
	    },
	
	 onSuccess : function(operation) {
	    	var me = this;
	    	var grid = me.getBlock('content').down('xapgrid[action=categorygrid]');
	    	var res = operation.result.dataList;
	    	if(res!=null){
	    		grid.setData(res);
	    	}else{
	    		grid.getStore().removeAll();
	    	}
	    	
	    },
	 onFailure: function(operation) {
	    	XapMessageBox.info('查询失败!');
	    },  
});

Ext.define('iih.mr.kr.csm.action.CSMCategoryEventAction', {
	extend:  Xap.ej.action.Action ,
	execute: function(context){
	    var me = this;
	    var owner=me.getOwner();	
	   
	    var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
	    var ownerCode;
	    var ownerType;
	    var ownerTypeDeptVal = 'MDM08.02';
	    var ownerTypePerVal = 'MDM08.03';
	    var enTypeCode = 'ENM01.01';
	    var dept = me.getBlock('content').down('xapcombobox[action=dept]');
	    
	    if(context.event.name="change" && context.event.from.xtype!='xapgrid'){
	    	//ownerType = context.event.arguments[0].inputValue;
	    	if(context.event.arguments[1]){
	    		ownerType = ownerTypeDeptVal;
	    		dept.setDisabled(false);
		    	if(dept.value==null){
		    		ownerCode = IMER_GLOBAL.department.code;
		    	}else{
		    		ownerCode = dept.value;
		    	}
	    	}else{
	    		ownerType = ownerTypePerVal;
	    		ownerCode = IMER_GLOBAL.user.code;
	    		dept.setDisabled(true);
	    	}
	    	
	    }else{
	    	ownerType= ownerTypeDeptVal;
	    	ownerCode = IMER_GLOBAL.department.code;
	    }
	    
	    properties.setData({
	    	ownerCode:ownerCode,
	    	ownerType:ownerType,
	    	enTypeCode:enTypeCode
 	     });
	    
	    var categorySearch = owner.getActionChain("categorySearchAction");
	    categorySearch.execute(context);
	   
	    
   }
	
});

Ext.define('iih.mr.kr.csm.view.CSMCategoryView',{
    extend :  Xap.ej.template.BaseTemplate ,
	alias:'widget.csmcategoryView',
	id:'csmcategoryView',
	          
	                                                 
	                                                                
	                                                         
	                                                         
	                                                      
	                                                                 
	                                                       
	     
	
	xapConfig:{
	
		blocks: {
			   'content':{
				   xclass: 'iih.mr.kr.csm.block.CSMCategoryBlock'
			   }
		  },
		actions:{
			  'categoryAdminDeptListAction': {
				xclass: 'iih.mr.kr.csm.action.CSMCategoryAdminDeptListAction',
				url:'/kr/disuite/admin/deptlist',
				blocks: {
			         content:'content'
				 }
	          },
	          'categorySearchAction': {
					xclass: 'iih.mr.kr.csm.action.CSMCategorySearchAction',
					url:'/kr/disuite/category/list',
					blocks: {
				         content:'content'
					 }
		        },
		       'categoryInsertAction': {
					xclass: 'iih.mr.kr.csm.action.CSMCategoryInsertAction',
					url:'/kr/disuite/category/create',
					blocks: {
				         content:'content'
					 }
		         },
		         'categoryDelAction': {
						xclass: 'iih.mr.kr.csm.action.CSMCategoryDelAction',
						url:'/kr/disuite/category/delete',
						blocks: {
					         content:'content'
						 }
			         },
			    'categoryForAdminsSearchction': {
					    xclass: 'iih.mr.kr.csm.action.CSMCategoryForAdminSearchAction',
					    url:'/kr/disuite/category/list',
						blocks: {
						         content:'content'
							 }
				        },
				  'categoryEventAction': {
						 xclass: 'iih.mr.kr.csm.action.CSMCategoryEventAction',
					     blocks: {
							         content:'content'
								 }
					        }       
		  },
		 chains:{
			  'categoryAdminDeptListAction':['categoryAdminDeptListAction'],
			  'categorySearchAction':['categorySearchAction'],
			  'categoryInsertAction':['categoryInsertAction'],
			  'categoryDelAction':['categoryDelAction'],
			  'categoryForAdminsSearchction':['categoryForAdminsSearchction'],
			  'categoryEventAction':['categoryEventAction'],
		  },
		 connections:{
			  'content':[{
				  selector:'xapcombobox[action=dept]',
  				  event: 'afterrender',
  				  chain: 'categoryAdminDeptListAction'
			  },{
				  selector:'xapgrid[action=categorygrid]',
  				  event: 'afterrender',
  				  chain: 'categoryEventAction'
			  },{
				  selector:'xapbutton[action=insertBtn]',
  				  event: 'click',
  				  chain: 'categoryInsertAction'
			  },{
				  selector:'xapbutton[action=delBtn]',
  				  event: 'click',
  				  chain: 'categoryDelAction'
			  },{
				  selector:'xapradio[name=ownerType]',
  				  event: 'change',
  				  //chain: 'categorySearchAction'
  				  chain:'categoryEventAction'
			  },{
				  selector:'xapcombobox[action=dept]',
  				  event: 'change',
  				  chain: 'categoryForAdminsSearchction'
			  }]
		  }
    }
})
 Ext.define('iih.mr.di.action.OutDiagnosisViewreadyAction', {
	extend:  Xap.ej.action.Action ,
	          
	                                          
	                                    
	                                         
	                                         
	                                              
	            
	/*
	* @Override
	*/
	execute: function(context) {
	   
	   var me = this;
	   var owner=me.getOwner();	
	   var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
       
	   var block = me.getBlock('content');
	   var up = block.down('button[action=moveup]');
	   var down = block.down('button[action=movedown]');
	   var insertBtn = block.down('button[action=insertBtn]');
	   var commitBtn = block.down('button[action=commitBtn]');
	   var delBtn = block.down('button[action=deleteBtn]');
	   
	   
	   up.on('click',function(btn){
		   me.diagnosisFun(me,btn);
		   
		   /*var action = Xap.create({
   			  xclass: 'Xap.ej.action.PopAction'
   		   });
       	   var config = {
       			width: 760,
	    		height:600,
	    		title:'FL',
           		contentConfig: {
           			xtype: 'csakrview',
           			//xtype: 'csmcategoryView',
           		   viewConfig:{
                        typeFlag: 3
                    }
           		}
           	};

   		action.execute(config);*/
	   });
	   
	   down.on('click',function(btn){
		   me.diagnosisFun(me,btn);
	   });
	   
	   insertBtn.on('click',function(btn){
		   me.diagnosisFun(me,btn);
	   });
	   
	   commitBtn.on('click',function(btn){
		  
		   var diagnosisSavechain = me.getOwner().getActionChain("outDiagnosisSaveAction");
		   diagnosisSavechain.execute(context);
	   });
	   
	   delBtn.on('click',function(btn){
		   me.diagnosisFun(me,btn);
	   });
	   
	   me.initDiagnosisFun(me);
    },
    
    diagnosisFun:function(me,btn){
    	
    	 var owner=me.getOwner();	
  	     var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
  	     properties.setData({
  	    	 action:btn.action
  	     });
    	
    	 var outDiagnosisMoveChain = me.getOwner().getActionChain("outDiagnosisMoveAction");
    	 outDiagnosisMoveChain.execute();
    },
    
    initDiagnosisFun:function(me){
    	
    	 var diagnosischain = me.getOwner().getActionChain("outDiagnosisInitAction");
         var diagnosisAction = diagnosischain.getActionByClass('iih.mr.di.action.OutDiagnosisInitAction');
         diagnosisAction.url = '/di/'+IMER_GLOBAL.encounterSn+'/dis?orgCode='+IMER_GLOBAL.hospitalArea.code;
        // diagnosisAction.url = '/di/123456/dis?orgCode=SZLH';
         diagnosischain.execute();
    },
});
Ext.define("iih.mr.di.block.DiagnosisFilterTree", {
	extend:  Xap.ej.element.tree.FilterTree ,
	          
                                       
                                          
                                      
                                       
                                     
	  
    alias: 'widget.diagnosisfiltertree',
    rootVisible: false,
    autoScroll : true,
	border : false,
	margins : '0 0 -1 1',
	lines:false,
	height:'100%',
	width:'100%',
	fields:['diEmpCd','diSn','diNm','diCd','icdCd',{name:'tocheck',type:'bool'},{name:'suspected',type:'bool'},'addDescr','diEmpNm','diTime','setOwnerTypeCd','setOwnerCd'],
	columns:{
		 defaults: {
		   sortable: false
	      },
	     items:[{
	    	 xtype: 'treecolumn',
         	 text: '诊断名称',
             width: 250,                
             dataIndex:'diNm',
             anchor: "90%",
              renderer:function(value,metaData,record ){
      		    return record.get('diNm');	//diSn
           	 },
             getEditor:function(record,defaultField ){
			    	 if(record.get('diSn'))
		        		 return null;
		        	 else{
		        		 var editor =  new Ext.grid.CellEditor({
		                     floating: true,
		                     editorId: this.getItemId(),
		                     field: {
			        			    xtype:'comboxgrid',
			        				margin:'10 0 10 0',
			        				name:'diCds', 
			        	            method:'dept',
			        				url: 'di/asistantInput',
			        				labelAlign : 'right',
			        				labelWidth : 50,
			        				listWidth:230,    
			        				width:210, 
			        				valueField : 'label',
			        				displayField: 'label',
			        				setValue:function(){
			        				},
			        	           // searchParam :{'id':'diagnosisCdLoad'},
			        	            columns: [{
			        	                    text: '诊断编码',
			        	                    dataIndex: 'value',
			        	                    hidden:true
			        	                },{
			        	                    text: '诊断名称',
			        	                    flex:1,
			        	                    dataIndex: 'label'
			        	                },
			        	                {
			        	                    text: 'ICD编码',
			        	                    flex:1,
			        	                    dataIndex: 'icd'
			        	                }],
		    					
		    					 callback : function(newValue,oldValue,record){
			        			      var tree = this.ownerCt.grid;
			        			      var datas =  tree.getRootNode().childNodes;
			        			     
			        			      var b = false;
			        			      for(var i=0;i<datas.length;i++){
			        			    	   
			        			    	  if((datas[i].data.diCd == record.value)){    					
		    						        	 b = true;
		    						        	 break;
		    						         }
			        			      }
			        			      
			        			      if(b){
			        			    	  var selModel=tree.getSelectionModel();
			    	         			    var recordRow=selModel.getSelection()[0];
											if(!recordRow.get('diSn')){
									            recordRow.set('diSn','');
												recordRow.set('diCd','');
												recordRow.set('icdCd','');
												recordRow.set('diNm','');
									         }
			    	         			  editor.field.setRecordData({});
			        			    	  XapMessageBox.info('重复录入!');
			        			    	    
			        			    	  
			        			      }else{
			        			    	    var selModel=tree.getSelectionModel();
			    	         			    var recordRow=selModel.getSelection()[0]
			        			    	    recordRow.set('diNm',record.label);
			    						    recordRow.set('diCd',record.value);
			    						    recordRow.set('diSn','');
			    						    if(record.icd=='NULL'){
												   recordRow.set('icdCd','');
												}else{
												recordRow.set('icdCd',record.icd);
											}
			        			      }
			        		     },
			        		     listeners:{
			        		    	 blur:function(com,the,opt){
			        		    	    var tree = this.ownerCt.grid;
			        		    	    var selModel=tree.getSelectionModel();
		    	         				var recordRow=selModel.getSelection()[0];
		    	         				console.log(recordRow.get('diNm'));
										if(!recordRow.get('diSn')){
										    recordRow.set('diSn','');
										}
										if(com.rawValue){
//										  recordRow.set('icdCd','');
//										  recordRow.set('diCd','');    
//										  recordRow.set('diNm','');
//										  com.rawValue='';
//										  com.value='';
//										  com.comboxHiddenValue='';
//										}else{
											var owner = tree.ownerCt.ownerCt;
											var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
											properties.setData({
									  	    	// action:'insertBtn'
												 action:'newRowOnButtom'
									  	     });
											 var outDiagnosisMoveChain = owner.getActionChain("outDiagnosisMoveAction");
											 outDiagnosisMoveChain.execute();
										}
			        		         }
			        		     }
			        		 }
			        	 });
		        		 var startEditTemp = editor.startEdit;
		        		 editor.startEdit = function(el, value,context) {
		        			 startEditTemp.apply(this,arguments);
		        			 var record = context.record;
		        			 var field = this.field;
		        			 var rec = {
     		        			"label":record.get("diNm"),
     		        			"value":record.get("diCd"),
     		        			"icd":record.get("icdCd"),
     		        		 }
		        			 field.setRecordData(rec);
		        		 }
		        		 editor.on("complete",function(ed){
		        		 },editor);
		        		 return editor;
		        	 }
	         }
	     },{
        	 header: '诊断编码',
             dataIndex: 'diCd',
             width: "9%",
             sortable: false,
             stopSelection: false
         },
         {
             header:'ICD编码',
             dataIndex: 'icdCd',
             width: "9%",
             sortable: false           
         },{
        	  header: '待查',
	          dataIndex: 'tocheck',
	          width: "5%",
	          sortable: false,
	          stopSelection: false,
	          renderer:function(value,metaData,record ){
        	 
	        		var check = record.get('tocheck')
	            	var b = false;
	            	var diSN = record.get('diSn');
	            	if(/.*[\u4e00-\u9fa5]+.*$/.test(diSN)){
	            		diSN = '';
	            	}else{
	            		diSN = record.get('diSn');
	            	}
	            	
	            	if(diSN!=''){
	        	    	if(check){
	        	    		return "<input type='checkbox' name='tocheck' disabled='disabled' checked />"
	        	    	}else{
	        	    		return "<input type='checkbox' name='tocheck' disabled='disabled'/>";
	        	    	}
	        	    	
	        	    }else if((diSN=='') && check){
	        	    	return "<input type='checkbox' name='tocheck' checked />";
						
	        	    }else{
						return "<input type='checkbox' name='tocheck' />";
					}
              }
         },{
        	  header: '疑似',
	          dataIndex: 'suspected',
	          width: "5%",
	          stopSelection: false,
	          renderer:function(value,metaData,record ){
        	 
		     	    var check = record.get('suspected')
		         	var b = false;
		         	var diSN = record.get('diSn');
		         	if(/.*[\u4e00-\u9fa5]+.*$/.test(diSN)){
		         		diSN = '';
		         	}else{
		         		diSN = record.get('diSn');
		         	}
		         	
		         	if(diSN!=''){
		     	    	if(check){
		     	    		return "<input type='checkbox' name='suspected' disabled='disabled' checked />"
		     	    	}else{
		     	    		return "<input type='checkbox' name='suspected' disabled='disabled'/>";
		     	    	}
		     	    	
		     	    }else if((diSN=='') && check){
		     	    	return "<input type='checkbox' name='suspected' checked />";
							
		     	    }else{
							return "<input type='checkbox' name='suspected' />";
						}
		      		
		       }
         },{
        	 header:'补充说明',
             dataIndex:'addDescr',
             width:"8%",
             sortable: false,
             getEditor:function(record,defaultField ) {
            	 
            	 var diSN = record.get('diSn');
            	 if(/.*[\u4e00-\u9fa5]+.*$/.test(diSN)){
	            		diSN = '';
	            	}else{
	            		diSN = record.get('diSn');
	            	}
            	 
            	 if(diSN!='')
            		 return null;
            	 else{
            		 return Ext.create('Xap.ej.element.field.TextField');
            	 }
             }
         },{
        	 header:'诊断医生',
             dataIndex: 'diEmpNm',
             width:"8%",
             sortable: false
         },{
        	 text: '诊断日期',     
	         dataIndex: 'diTime',   
	         sortable: false,
	         renderer:function(value,metaData,record ){
	         	
	        	 if(value!=''){
						return Ext.Date.format(new Date(value),'Y/m/d');
					 }else{
						return '';
					}		
	          }
         },{
        	 header:'类别',
             dataIndex: 'setOwnerTypeCd',
             width:0,
             hidden:true,
             sortable: false 
         }]
	
    },
    plugins: [
	    {
	      ptype: 'cellediting',
	   	  clicksToEdit:1
	    }
    ],
    tools : [
		{
	 	   xtype:'xapbutton',
		   text:'↓',
		   action:'movedown'
	   },
	   {
	       xtype: 'tbspacer',        
	       width: 10
	   },
	   {
		   xtype:'xapbutton',
		   text:'↑',
		   action:'moveup' 
	   },
	   {
	       xtype: 'tbspacer',        
	       width: 10
	   },
	   /*{
		   xtype:'xapbutton',
		   text:'→',
		   action:'tochild'
	   },
	   {
	       xtype: 'tbspacer',        
	       width: 10
	   },
	   {
		   xtype:'xapbutton',
		   text:'←',
		   action:'toparent'
	   },*/
       {
	       xtype: 'tbspacer',        
	       width: 40
	   },
	   {
	 	   xtype:'xapbutton',
		   text:'插入',
		   action:'insertBtn',
		   iconCls: 'icon-Create',
		  
	   },
	   {
	       xtype: 'tbspacer',        
	       width: 10
	   },
	   {
		   xtype:'xapbutton',
		   text:'提交',
		   disabled:false,
		   action:'commitBtn',
		   iconCls: 'icon-OK',
	   },
	   {
	       xtype: 'tbspacer',        
	       width: 10
	   },
	   {
		   xtype:'xapbutton',
		   text:'删除',
		   disabled:false,
		   action:'deleteBtn',
		   id:'deleteBtn',
		   iconCls: 'icon-Delete',
	   }
     ]
});
/** 
 *时间编辑框
 * @extends Ext.form.field.Base
 * @author ：chenyajie<chen_yajie@founder.com>
 * 
 *
 */
Ext.define('Xap.ej.element.timepicker.TimePickerField', {
	extend:  Ext.form.field.Base ,
	alias: 'widget.timepickerfield',
	
	
      alternateClassName: 'Ext.form.field.TimePickerField',
                                          
      // 隐藏BaseField的输入框 , hidden basefield's input
      inputType: 'hidden',
      style: 'padding:4px 0 0 0;margin-bottom:0px',
      /**
       * @cfg {String} value
       * initValue, format: 'H:i:s'
       */
      value: null,
      /**
      * @cfg {Object} spinnerCfg
      * 数字输入框参数, number input config
      */
      spinnerCfg: {
          width: 40
      },
      /** Override. */
      initComponent: function() {
          var me = this;
          me.value = me.value || Ext.Date.format(new Date(), 'H:i:s');
          me.callParent();// called setValue
          me.spinners = [];
          var cfg = Ext.apply({}, me.spinnerCfg, {
                readOnly: me.readOnly,
                disabled: me.disabled,
                style: 'float: left',
                listeners: {
                    change: {
                        fn: me.onSpinnerChange,
                        scope: me
                    }
                }
            });
          me.hoursSpinner = Ext.create('Ext.form.field.Number', Ext.apply({}, cfg, {
                  minValue: 0,
                  maxValue: 23
              }));
          me.minutesSpinner = Ext.create('Ext.form.field.Number', Ext.apply({}, cfg, {
                  minValue: 0,
                  maxValue: 59
              }));
          // TODO 使用timeformat 判断是否创建秒输入框, maybe second field is not always need.
          me.secondsSpinner = Ext.create('Ext.form.field.Number', Ext.apply({}, cfg, {
                  minValue: 0,
                  maxValue: 59
              }));
          me.spinners.push(me.hoursSpinner, me.minutesSpinner, me.secondsSpinner);
      },
      /**
          * @private
          * Override.
          */
      onRender: function() {
          var me = this, spinnerWrapDom, spinnerWrap;
          me.callParent(arguments);
          // render to original BaseField input td
          // spinnerWrap = Ext.get(Ext.DomQuery.selectNode('div', this.el.dom)); // 4.0.2
          spinnerWrapDom = Ext.dom.Query.select('td', this.getEl().dom)[1]; // 4.0 ->4.1 div->td
          spinnerWrap = Ext.get(spinnerWrapDom);
          me.callSpinnersFunction('render', spinnerWrap);
          Ext.core.DomHelper.append(spinnerWrap, {
                tag: 'div',
                cls: 'x-form-clear-left'
            });
          this.setRawValue(this.value);
      },
      _valueSplit: function(v) {
          if(Ext.isDate(v)) {
              v = Ext.Date.format(v, 'H:i:s');
          }
          var split = v.split(':');
          return {
              h: split.length > 0 ? split[0] : 0,
              m: split.length > 1 ? split[1] : 0,
              s: split.length > 2 ? split[2] : 0
          };
      },
      onSpinnerChange: function() {
          if(!this.rendered) {
              return;
          }
          this.fireEvent('change', this, this.getValue(), this.getRawValue());
      },
      // 依次调用各输入框函数, call each spinner's function
      callSpinnersFunction: function(funName, args) {
          for(var i = 0; i < this.spinners.length; i++) {
              this.spinners[i][funName](args);
          }
      },
      // @private get time as object,
      getRawValue: function() {
          if(!this.rendered) {
              var date = this.value || new Date();
              return this._valueSplit(date);
          } else {
              return {
                  h: this.hoursSpinner.getValue(),
                  m: this.minutesSpinner.getValue(),
                  s: this.secondsSpinner.getValue()
              };
          }
      },
      // private
      setRawValue: function(value) {
          value = this._valueSplit(value);
          if(this.hoursSpinner) {
              this.hoursSpinner.setValue(value.h);
              this.minutesSpinner.setValue(value.m);
              this.secondsSpinner.setValue(value.s);
          }
      },
      // overwrite
      getValue: function() {
          var v = this.getRawValue();
          return Ext.String.leftPad(v.h, 2, '0') + ':' + Ext.String.leftPad(v.m, 2, '0') + ':'
            + Ext.String.leftPad(v.s, 2, '0');
      },
      // overwrite
      setValue: function(value) {
          this.value = Ext.isDate(value) ? Ext.Date.format(value, 'H:i:s') : value;
          if(!this.rendered) {
              return;
          }
          this.setRawValue(this.value);
          this.validate();
      },
      // overwrite
      disable: function() {
          this.callParent(arguments);
          this.callSpinnersFunction('disable', arguments);
      },
      // overwrite
      enable: function() {
          this.callParent(arguments);
          this.callSpinnersFunction('enable', arguments);
      },
      // overwrite
      setReadOnly: function() {
          this.callParent(arguments);
          this.callSpinnersFunction('setReadOnly', arguments);
      },
      // overwrite
      clearInvalid: function() {
          this.callParent(arguments);
          this.callSpinnersFunction('clearInvalid', arguments);
      },
      // overwrite
      isValid: function(preventMark) {
          return this.hoursSpinner.isValid(preventMark) && this.minutesSpinner.isValid(preventMark)
            && this.secondsSpinner.isValid(preventMark);
      },
      // overwrite
      validate: function() {
          return this.hoursSpinner.validate() && this.minutesSpinner.validate() && this.secondsSpinner.validate();
      }
	  
});

/** 
 * 
 * @extend: 'Ext.picker.Date',
 * 日期时间编辑框
 * @author ：chenyajie
 */  
Ext.define('Xap.ej.element.datetimepicker.DateTimePicker', {
	extend:  Ext.picker.Date ,
	alias: 'widget.datetimepicker',
	todayText: '现在',
	timeLabel: '时间',
	                                                        
	initComponent: function() {
	  // keep time part for value
	  var value = this.value || new Date();
	  this.callParent();
	  this.value = value;
	},
	onRender: function(container, position) {
	  if(!this.timefield) {
		  this.timefield = Ext.create('Xap.ej.element.timepicker.TimePickerField', {
				fieldLabel: this.timeLabel,
				labelWidth: 40,
				value: Ext.Date.format(this.value, 'H:i:s')
			});
	  }
	  this.timefield.ownerCt = this;
	  this.timefield.on('change', this.timeChange, this);
	  this.callParent(arguments);
	  var table = Ext.get(Ext.DomQuery.selectNode('table', this.el.dom));
	  var tfEl = Ext.core.DomHelper.insertAfter(table, {
			tag: 'div',
			style: 'border:0px;',
			children: [{
				  tag: 'div',
				  cls: 'x-datepicker-footer ux-timefield'
			  }]
		}, true);
	  this.timefield.render(this.el.child('div div.ux-timefield'));
	  var p = this.getEl().parent('div.x-layer');
	  if(p) {
		  p.setStyle("height", p.getHeight() + 31);
	  }
	},
	// listener 时间域修改, timefield change
	timeChange: function(tf, time, rawtime) {
	  // if(!this.todayKeyListener) { // before render
	  this.value = this.fillDateTime(this.value);
	  // } else {
	  // this.setValue(this.value);
	  // }
	},
	// @private
	fillDateTime: function(value) {
	  if(this.timefield) {
		  var rawtime = this.timefield.getRawValue();
		  value.setHours(rawtime.h);
		  value.setMinutes(rawtime.m);
		  value.setSeconds(rawtime.s);
	  }
	  return value;
	},
	// @private
	changeTimeFiledValue: function(value) {
	  this.timefield.un('change', this.timeChange, this);
	  this.timefield.setValue(this.value);
	  this.timefield.on('change', this.timeChange, this);
	},
	/* TODO 时间值与输入框绑定, 考虑: 创建this.timeValue 将日期和时间分开保存. */
	// overwrite
	setValue: function(value) {
	  this.value = value;
	  this.changeTimeFiledValue(value);
	  return this.update(this.value);
	},
	// overwrite
	getValue: function() {
	  return this.fillDateTime(this.value);
	},
	// overwrite : fill time before setValue
	handleDateClick: function(e, t) {
	  var me = this,
		  handler = me.handler;
	  e.stopEvent();
	  if(!me.disabled && t.dateValue && !Ext.fly(t.parentNode).hasCls(me.disabledCellCls)) {
		  me.doCancelFocus = me.focusOnSelect === false;
		  me.setValue(this.fillDateTime(new Date(t.dateValue))); // overwrite: fill time before setValue
		  delete me.doCancelFocus;
		  me.fireEvent('select', me, me.value);
		  if(handler) {
			  handler.call(me.scope || me, me, me.value);
		  }
		  me.onSelect();
	  }
	},
	// overwrite : fill time before setValue
	selectToday: function() {
	  var me = this,
		  btn = me.todayBtn,
		  handler = me.handler;
	  if(btn && !btn.disabled) {
		  // me.setValue(Ext.Date.clearTime(new Date())); //src
		  me.setValue(new Date());// overwrite: fill time before setValue
		  me.fireEvent('select', me, me.value);
		  if(handler) {
			  handler.call(me.scope || me, me, me.value);
		  }
		  me.onSelect();
	  }
	  return me;
	}
});

/** 
 * 
 * @extend: 'Ext.form.field.Date',
 * 日期时间编辑框
 * @author ：chenyajie
 */  
Ext.define('Xap.ej.element.datetimefield.DateTimeField', {

	extend:  Xap.ej.element.field.DateField ,
	alias: 'widget.datetimefield',
	                                                           
	//默认格式化格式
	format: 'Y-m-d H:i:s',
	initComponent: function() {
	  this.format = this.format;
	  this.callParent();
	},
	// overwrite
	createPicker: function() {
	  var me = this,
		  format = Ext.String.format;
	  return Ext.create('Xap.ej.element.datetimepicker.DateTimePicker', {
			ownerCt: me.ownerCt,
			renderTo: document.body,
			floating: true,
			hidden: true,
			focusOnShow: true,
			minDate: me.minValue,
			maxDate: me.maxValue,
			disabledDatesRE: me.disabledDatesRE,
			disabledDatesText: me.disabledDatesText,
			disabledDays: me.disabledDays,
			disabledDaysText: me.disabledDaysText,
			format: me.format,
			showToday: me.showToday,
			startDay: me.startDay,
			minText: format(me.minText, me.formatDate(me.minValue)),
			maxText: format(me.maxText, me.formatDate(me.maxValue)),
			listeners: {
				scope: me,
				select: me.onSelect
			},
			keyNavConfig: {
				esc: function() {
					me.collapse();
				}
			}
		});
  }
});
/** 
 *单选框列表
 * @extends Ext.form.RadioGroup
 * @author ：chenyajie<chen_yajie@founder.com>
 * 
 *
 */
Ext.define('Xap.ej.element.radiogroup.RadioGroup', {
	extend:  Ext.form.RadioGroup ,
	alias: 'widget.xapradiogroup',
	/** 
     * @cfg {Boolean} 是否根据选择的单选框查询表格数据。
     */
	isGridQuery:false,

	initComponent: function() {
		if(this.isGridQuery){
			this.on("change",this.radioclick,this);
		}
        this.callParent(arguments);
    },
    /** 
     * 触发表格查询事件
     */ 
    radioclick:function(){
    	this.up('xapform').fireEvent("gridquery");
    }
});
Ext.define('iih.mr.di.block.InDiagnosisBlock',{
	extend :  Xap.ej.block.FormBlock ,

	requires: [],

    alias:'widget.indiagnosisblock',
    
    border:0,
   
    items: [{
        title: '诊断列表',
        xtype: 'xapgrid',       
        height:350,
        name:'diListGrid',
        ifSelect : true,
        selectBy: 'diSn',

        tools:[{
           xtype:'button',
           text:'子诊断',
           method: 'sonDi',
           margin:'0 0 0 10',
           disabled:true
       	},{
           xtype:'button',
           text:'编辑',
           method: 'editDi',
           margin:'0 0 0 10',
           disabled:true
       	},{
           xtype:'button',
           text:'删除',
           method: 'delDi',
           margin:'0 0 0 10',
           disabled:true
       	}],
//        height:550,
        CM_JR_Record: [
        	 {header: '诊断主键',dataIndex: 'diSn',field: 'textfield' ,type: 'string',hidden:true},
        	 {header: '父诊断主键',dataIndex: 'parDiSn',field: 'textfield' ,type: 'string',hidden:true},
        	 {header: '主诊断',dataIndex: 'mainF',field: 'textfield' ,type: 'string',hidden:true},
        	 {header: '诊断类别编码',dataIndex: 'diTypeCd',field: 'textfield' ,type: 'string',width:150,hidden:true},
        	 {header: '诊断编码',dataIndex: 'diCd',field: 'textfield' ,type: 'string',flex:1,hidden:true},
             {header: '诊断类别',dataIndex: 'diTypeNm',field: 'textfield' ,type: 'string',width:150},
             {header: '诊断名称',dataIndex: 'diNm',field: 'textfield' ,type: 'string',flex:1},
             {header: 'ICD编码',dataIndex: 'icdCd',field: 'textfield' ,type: 'string',width:150},
             {header: '诊断内容',dataIndex: 'addDescr',field: 'textfield' ,type: 'string',flex:1},
             {header: '诊断描述',dataIndex: 'memo',field: 'textfield' ,type: 'string',flex:1},
             {header: '诊断医师',dataIndex: 'diEmpNm',field: 'textfield' ,type: 'string',width:150},
             {header: '诊断时间',dataIndex: 'diTime',xtype: 'xapdatecolumn',width:150}
        ]
    },{
    	xtype:'xapform',   
    	trackResetOnLoad:true,
    	height:200,
    	title: '诊断新增',
    	name:'diForm',
    	layout: {
		type: 'table',
		columns: 2,
		//width: 1024,
		tableAttrs: {
            border: 0,
            cellpadding: 0,
            cellspacing: 1,
            width: '100%'
//            height:76
        },
        tdAttrs: {
            valign: 'left'
        }
	},
    
	    buttons:[{
	            xtype: "button",
	            name: 'saveDi',
	            action:'saveDi',
	            text: '保存',
	            iconCls: 'icon-OK'
	        },{
	            xtype: "button",
	            name: 'cancel',
	            action:'cancel',
	            text: '取消',
	            iconCls: 'icon-cancel'
	        }],
	    
	    items:[{
	    	xtype:'xaptextfield',
	        name:'diSn',
	        width:260,
	        labelAlign : 'right',
			fieldLabel:'诊断主键',
			margin:'10 0 0 0',
			hidden:true
	    },{
	    	xtype:'xaptextfield',
	        name:'parDiSn',
	        width:260,
	        labelAlign : 'right',
			fieldLabel:'父诊断编码',
			margin:'10 0 0 0',
			hidden:true
	    },{
	        xtype:'xapcombobox',
	        labelAlign : 'right',
	        name:'diTypeCd',
			fieldLabel:'诊断类别',
			editable:false,
//			allowBlank:false,
			margin:'10 0 0 0',
			comboData : [
			 			{"value":"01", "text":"入院诊断"},
			 			{"value":"02", "text":"出院诊断"},
			 			{"value":"03", "text":"补充诊断"}
			 		]
	    },{
	    	xtype:'comboxgrid',
			margin:'10 0 0 0',
			name:'diCd', 
            method:'diCd',
//			url: 'di/asistantInput',
			labelAlign : 'right',
//			labelWidth : 50,
			listWidth:230,    //gird的宽度
			width:260,        //combo的宽度
            fieldLabel:'诊断名称',
			valueField : 'value',
            searchParam :['keyword'],
            columns: [{
                text: '科室编码',
                dataIndex: 'value',
                hidden:true
            },{
                text: '诊断名称',
                flex:1,
                dataIndex: 'text'
            }],
            displayField: 'text',
            dictionary:'diagnosisCdLoad',
            parentXtype:'indiagnosisblock',
            setValue:function(v){
            	this.value = v;
            },
            callback:function(newValue,oldValue,record){  //在grid选择记录后的回调函数
				var view = this.up('indiagnosisview');
				var showIcdChain = view.getActionChain('showIcd');
				showIcdChain.execute({
					record:record
				});
			}
	},{
  		xtype: 'datetimefield',
  		width:260,
  		name:'diTime',
  		fieldLabel:'诊断日期',
  		labelAlign : 'right',
  		margin:'10 0 0 0'
	},{
    	xtype:'xaptextfield',
        name:'icdCd',
        width:260,
        labelAlign : 'right',
		fieldLabel:'ICD编码',
		margin:'10 0 0 0',
		readOnly:true
    },{
    	xtype:'xaptextfield',
        name:'addDescr',
        width:260,
        labelAlign : 'right',
		fieldLabel:'诊断内容',
		margin:'10 0 0 0'
    },{
    	xtype:'xaptextfield',
        name:'memo',
        width:260,
        labelAlign : 'right',
		fieldLabel:'诊断描述',
		margin:'10 0 0 0'
    },{
			xtype: 'xapradiogroup',
			name:'mainFgroup',
			fieldLabel:'主诊断标志',
			margin:'10 0 10 30',
			items: [
				{boxLabel: '是', name: 'mainF',width:85, inputValue: '1'},
				{boxLabel: '否', name: 'mainF', width:85,inputValue: '0',checked: true}
			]
		},{
			xtype: 'xapdisplayfield',
			fieldLabel: '',
			vertical: true,
			name:'showInfo',
			value: '',
			margin:'10 0 10 50'
		}]

    }],
    
    setData : function(data) {
        var grid = this.down('xapgrid');
        if(grid){
        	if(data){
        		grid.setData(data);
	        }else{
	        	grid.setData({});
	        }
        }
    }
	
});
Ext.define('iih.mr.di.block.OutDiagnosisBlock',{
	//extend : 'Xap.ej.block.Block',
	extend :  Xap.ej.block.FormBlock ,
	
	                                                                                     
	border:false,
	id:'outdiagnosisblock',
	alias:'widget.outdiagnosisblock',
	items:[{
		 xtype: 'diagnosisfiltertree'
		 //title:'诊断录入',
	}]
	
});
/** 
 * 
 * @extends Ext.form.CheckboxGroup
 * 按钮 
 * @author ：chenyajie<chen_yajie@founder.com>
 */ 
Ext.define('Xap.ej.element.checkboxgroup.CheckboxGroup', {
	extend:  Ext.form.CheckboxGroup ,
	alias: 'widget.xapcheckboxgroup',
	/** 
     * @cfg {Boolean} 是否根据选择的单选框查询表格数据。
     */
	isGridQuery:false,

	initComponent: function() {
		if(this.isGridQuery){
			this.on("change",this.checkBoxClick,this);
		}
        this.callParent(arguments);
    },
    /** 
     * 触发表格查询事件
     */ 
    checkBoxClick:function(){
    	this.up('xapform').fireEvent("gridquery");
    }
});
/** 
 *标签
 * @extends Ext.form.Label
 * @author ：chenyajie<chen_yajie@founder.com>
 * 
 *
 */
Ext.define('Xap.ej.element.label.Label', {
	extend:  Ext.form.Label ,
	alias: 'widget.xaplabel'
});
Ext.define('iih.mr.di.view.InDiagnosisView',{
    extend :  Xap.ej.template.BaseTemplate ,
	alias:'widget.indiagnosisview',
	id:'indiagnosisview',
	          
		                                        
				                                
				                                       
				                                             
				                           
				                           
				                             
				                                             
				                                  
				                                         
		                                           
				                                            
				                                         
				                                         
				                                          
				                                             
				                                       
	            
	
	xapConfig:{
	
		blocks: {
			   'content':{
				   xclass: 'iih.mr.di.block.InDiagnosisBlock'
			   }
		  },
		actions:{
			'inDiagnosisViewreadyAction':{
				xclass: 'iih.mr.di.action.InDiagnosisViewreadyAction',
				blocks: {
					content: 'content'
				}
			},
			'init':{
				xclass: 'iih.mr.di.action.InDiagnosisInitAction',
				url:'di/in/initGrid',
				blocks: {
					content: 'content'
				}
			},
			'saveDi':{
				xclass: 'iih.mr.di.action.InDiagnosisSaveAction',
				url:'di/in/save',
				blocks: {
					content: 'content'
				}
			},
			'cancel':{
				xclass: 'iih.mr.di.action.InDiagnosisCancelAction',
				blocks: {
					content: 'content'
				}
			},
			'showIcd':{
				xclass: 'iih.mr.di.action.InDiagnosisShowIcdAction',
				blocks: {
					content: 'content'
				}
			},
			'editDi':{
				xclass: 'iih.mr.di.action.InDiagnosisEditFormAction',
				blocks: {
					content: 'content'
				}
			},
			'sonDi':{
				xclass: 'iih.mr.di.action.InDiagnosisSonDiAction',
				url:'di/in/son',
				blocks: {
					content: 'content'
				}
			},
			'delDi':{
				xclass: 'iih.mr.di.action.InDiagnosisDelAction',
				url:'di/in/del',
				blocks: {
					content: 'content'
				}
			},
			'judgeBtn':{
				xclass: 'iih.mr.di.action.InDiagnosisJudgeBtnAction',
				blocks: {
					content: 'content'
				}
			}
		},
		 chains:{
			 'inDiagnosisViewreadyAction':['inDiagnosisViewreadyAction'],
			 'doSave':['saveDi'],
			 'saveDi':['saveDi'],
			 'cancel':['cancel'],
			 'init':['init'],
			 'showIcd':['showIcd'],
			 'sonDi':['sonDi'],
			 'editDi':['editDi'],
			 'delDi':['delDi'],
			 'judgeBtn':['judgeBtn']
			},
		 connections:{
			 'content':[/*{
				 event: 'afterrender',
				 chain: 'init'
			 },*/{
				 selector: 'xapgrid',
				 event: 'viewready',
				 chain: 'inDiagnosisViewreadyAction'
			 },{
	                selector: 'button[action=saveDi]',
	                event: 'click',
	                chain: 'saveDi'
			 },{
	                selector: 'button[action=cancel]',
	                event: 'click',
	                chain: 'cancel'
			 },{
	                selector: 'xapgrid',
	                event: 'itemdblclick',
	                chain: 'editDi'
			 },{
	                selector: 'xapgrid',
	                event: 'itemclick',
	                chain: 'judgeBtn'
			 }]
		 }
    },
    initComponent : function() {
		this.callParent();
		var me = this;
		 this.addEvents("changeEncounter");//为视图添加刷新事件
         this.addListener('changeEncounter', function(enPk){//添加监听事件
             //查询action
        	 var chain = me.getActionChain('init');
        	 chain.execute({
        	     'enPk':enPk
        	 });
         });

	},
	
	 hasEdit: function() {
		 var me =this;
		 var block = this.down('indiagnosisblock');
		 var form = block.down('xapform');
		 var value =form.getForm().getValues();
		 var dirty = form.isDirty();
//		 var dirty = this.dirty;
       if (dirty) {
           return true;
       } else {
           return false;
       }
   }
})
Ext.define('iih.mr.di.view.OutDiagnosisView',{
    extend :  Xap.ej.template.BaseTemplate ,
	alias:'widget.outdiagnosisview',
	id:'outdiagnosisview',
	          
	                                              
	                                                         
	                                                    
	                                                    
	                                                    
	                                                   
	                                                         
	                                                    
	                                                         
	        
	            
	
	xapConfig:{
	
		blocks: {
			   'content':{
				   xclass: 'iih.mr.di.block.OutDiagnosisBlock'
			   }
		  },
		actions:{
            'outDiagnosisPageCloseAction': {
                xclass: 'iih.mr.di.action.OutDiagnosisPageCloseAction',
                url:'param',
                blocks: {
                    content: 'content'
                }
            },
            
			'outDiagnosisViewreadyAction': {
				xclass: 'iih.mr.di.action.OutDiagnosisViewreadyAction',
				blocks: {
					content: 'content'
				}
			},
			'outDiagnosisMoveAction':{
				xclass: 'iih.mr.di.action.OutDiagnosisMoveAction',
				blocks: {
					content: 'content'
				}
			},
			'outDiagnosisInitAction':{
				xclass: 'iih.mr.di.action.OutDiagnosisInitAction',
				//url:'xxx',
				blocks: {
					content: 'content'
				}
			},
			'outDiagnosisSaveAction':{
				xclass: 'iih.mr.di.action.OutDiagnosisSaveAction',
				url:'/di/ens',
				blocks: {
					content: 'content'
				}
			},
			'outDiagnosisDelAction':{
				xclass: 'iih.mr.di.action.OutDiagnosisDelAction',
				url:'/di/ens/del',
				blocks: {
					content: 'content'
				}
			},
			'outDiagnosisItemClickAction':{
				xclass: 'iih.mr.di.action.OutDiagnosisItemClickAction',
				blocks: {
					content: 'content'
				}
			},
			'outDiagnosisParamAction':{
				xclass: 'iih.mr.di.action.OutDiagnosisParamAction',
				url:'/param',
				blocks: {
					content: 'content'
				}
			}
		
			
		 },
		 chains:{
			 'outDiagnosisViewreadyAction': ['outDiagnosisViewreadyAction'],
			 'outDiagnosisMoveAction': ['outDiagnosisMoveAction'],
			 'outDiagnosisInitAction': ['outDiagnosisInitAction'],
			 'outDiagnosisSaveAction': ['outDiagnosisSaveAction'],
			 'doSave': ['outDiagnosisSaveAction'],
			 'outDiagnosisDelAction': ['outDiagnosisDelAction'],
			 'outDiagnosisItemClickAction': ['outDiagnosisItemClickAction'],
			 'outDiagnosisParamAction': ['outDiagnosisParamAction']
			, 'outDiagnosisPageCloseAction':[ 'outDiagnosisPageCloseAction']
			
		 },
		 connections:{
			 'content':[{
				 selector: 'treepanel',
				 event: 'viewready',
				 chain: 'outDiagnosisViewreadyAction'
			 },{
				 selector: 'treepanel',
				 event: 'itemclick',
				 chain: 'outDiagnosisItemClickAction'
			 }]
		 }
    },
 /*   hasEdit: function() {
          /*var treepanel = this.down('diagnosisfiltertree');
          var insertLen = treepanel.getStore().getNewRecords().length;
          var editLen = treepanel.getStore().getModifiedRecords().length;
          if((insertLen>0) || (editLen>0)){
        	  return true;
          }
          return false;
        var treepanel = this.down('diagnosisfiltertree');
        var flag = false;
        var modifiedRecords = treepanel.getStore().getModifiedRecords();
        Ext.each(modifiedRecords,function(rec){
              if(rec.isModified('diNm')){
                  flag = rec.isModified('diNm');
              }
        });
        return flag;
    },*/
    //datas为数组
    csaInsertDiagnosis:function(datas){
    	 var tree = this.down('diagnosisfiltertree');
    	 var rootNode = tree.getRootNode();
  	     var selModel=tree.getSelectionModel();
  	     var index = rootNode.childNodes.length - 1;
	  	 for(var i=0;i<datas.length;i++){
			   rootNode.insertChild(index,datas[i]);
			   index++;
			}
	  	 
	  	var diagnosisParamchain = this.getActionChain("outDiagnosisParamAction");
	  	diagnosisParamchain.execute(); 

	  	this.data = datas;
    },
    initComponent:function(){
    	 this.callParent();
         var me = this;
         this.addEvents('outDiagnosisEvent');//添加切换TAB页切换保存的事件
         this.addListener('outDiagnosisEvent',function(){
        	 var diagnosisSavechain = this.getActionChain("outDiagnosisSaveAction");
  		     diagnosisSavechain.execute();
         });
         
         /*var canvas = Xap.getCanvas();
         this.relayEvents(canvas, ['updatePatient']);
         this.addListener('updatePatient', function(config) {
        	 var diagnosischain = this.getActionChain('outDiagnosisInitAction');
  	         if(diagnosischain) {
  	        	 var diagnosisAction = diagnosischain.getActionByClass('iih.mr.di.action.OutDiagnosisInitAction');
  	             diagnosisAction.url = '/di/'+IMER_GLOBAL.encounterSn+'/dis?orgCode='+IMER_GLOBAL.hospitalArea.code;
  	             diagnosischain.execute();
  	         }
         });*/
         
         this.addEvents("pageRefresh");//为视图添加刷新事件
         this.addListener('pageRefresh', function(){
        	 //添加监听事件
        	 console.log('OutDiagnosisView.pageRefresh is empty method');
        
        });
         this.addEvents("selectEncounter");//为视图添加刷新事件
         this.addListener('selectEncounter', function(){
        	 //添加监听事件
        	 console.log('OutDiagnosisView.selectEncounter is running');
         	var diagnosischain = this.getActionChain('outDiagnosisInitAction');
 	        if(diagnosischain) {
 	        	 var diagnosisAction = diagnosischain.getActionByClass('iih.mr.di.action.OutDiagnosisInitAction');
 	             diagnosisAction.url = '/di/'+IMER_GLOBAL.encounterSn+'/dis?orgCode='+IMER_GLOBAL.hospitalArea.code;
 	             diagnosischain.execute();
 	        }
        
        	 });
    }
	,
	 hasEdit: function() {
		 var me =this;
		 var block = this.getBlock('content');
		 var dirty = block.isDirty();
		 console.log('block.isDirty()') ;
		 console.log(dirty);
	   if (dirty) {
           return true;
       } else {
           return false;
       }
   }
})
Ext.define('iih.mr.kr.csa.action.CSACloseAction', {
	extend:  Xap.ej.action.Action ,
	
	execute: function(context) {
    	this.callParent();
       // var block = this.getBlock('result');
        var win = Ext.getCmp('csakrview').ownerCt;
        win.close();
    }
});

Ext.define('iih.mr.kr.csa.action.CSAConfirmAction', {
	extend:  Xap.ej.action.Action ,
	//requires:['iih.di.de.model.DiagnosisEntryModel'],
	execute: function(context){
	
	    var me = this;
        var owner=me.getOwner();
        var topblock =  me.getBlock('topblock');
        var diGrid = topblock.down('xapgrid[action=digrid]');
        var mrGrid = topblock.down('xapgrid[action=mrgrid]');
        
        var diSelModel=diGrid.getSelectionModel(); 
        var mrSelModel=mrGrid.getSelectionModel();
        
        var diSelection = diSelModel.getSelection();
        var mrSelection = mrSelModel.getSelection();
        
        var diagnosisModels = [];
        
        var ywtime = owner.down('datetimefield[action=ywDate]');
        
        var ywValue = ywtime.rawValue;
        
        
        if(ywValue.trim()==''){
        	XapMessageBox.info('请填写业务时间!');
         	return;
        }
        
        if(diSelection.length==0){
        	XapMessageBox.info('请选择诊断记录!');
        	return;
        }else{
        	//diagnosisModels
        	for(var i=0;i<diSelection.length;i++){
        		//返回的诊断结果应该包含ownerType,ownerCd.
        		var node = {
	          		      'diNm':diSelection[i].data.diName,
	    	       	      'diEmpNm':IMER_GLOBAL.user.name,
	    	       	      'diEmpCd':IMER_GLOBAL.user.code,
	    	       	      'diTime':'',
	    	       	      'diCd':diSelection[i].data.diCode,
	    				  'diSn':'',
	    				  'icdCd':diSelection[i].data.icdCode,
	    				  'setOwnerTypeCd':diSelection[i].data.ownerType,
	              	      'setOwnerCd':diSelection[i].data.ownerCode,
	    	        	   leaf:true	 
	             };
        		
        		diagnosisModels.push(node);
        	}
        	
        	var outDiagnosisView = Ext.getCmp('outdiagnosisview');
        	outDiagnosisView.csaInsertDiagnosis(diagnosisModels);
        }
        
        if(mrSelection.length==0){
        	XapMessageBox.info('请选择病例模板记录!');
        	return;
        }
    }
	
});

Ext.define('iih.mr.kr.csa.model.CSAModel',{
extend:  Ext.data.TreeModel ,
	//idProperty:'tempSn',
	fields:[
	    {name: 'id',  type: 'string'},
		{name: 'name',  type: 'string'},
		{name: 'expand',  type: 'string'},
		{name: 'leaf',   type: 'boolean'},
		{name:'diCode',type:'string'},
		{name:'diName',type:'string'},
		{name:'diSuiteCode',type:'string'},
		{name:'diSuiteTypeCode',type:'string'},
		{name:'diSuiteTypeName',type:'string'},
		{name:'orgCode',type:'string'},
		{name:'ownerCode',type:'string'},
		{name:'ownerType',type:'string'},
		{name:'ownerCode',type:'string'},
		{name:'text',type:'string'},
		'children'

	]
	//fields:['tempSn',  'text','leaf', 'id', 'children']
})
Ext.define('iih.mr.kr.csm.action.CSMCloseAction', {
	extend:  Xap.ej.action.Action ,
	
	execute: function(context) {
    	this.callParent();
       // var block = this.getBlock('result');
        var win = Ext.getCmp('csakrview').ownerCt;
        win.close();
    }
});

Ext.define('iih.mr.kr.csm.action.CSMConfirmAction', {
	extend:  Xap.ej.action.Action ,
	//requires:['iih.di.de.model.DiagnosisEntryModel'],
	execute: function(context){
	
	    var me = this;
        var owner=me.getOwner();
        var topblock =  me.getBlock('topblock');
        var diGrid = topblock.down('xapgrid[action=digrid]');
        var mrGrid = topblock.down('xapgrid[action=mrgrid]');
        
        var diSelModel=diGrid.getSelectionModel(); 
        var mrSelModel=mrGrid.getSelectionModel();
        
        var diSelection = diSelModel.getSelection();
        var mrSelection = mrSelModel.getSelection();
        
        var diagnosisModels = [];
        
        var ywtime = owner.down('datetimefield[action=ywDate]');
        
        var ywValue = ywtime.rawValue;
        
        
        if(ywValue.trim()==''){
        	XapMessageBox.info('请填写业务时间!');
         	return;
        }
        
        if(diSelection.length==0){
        	XapMessageBox.info('请选择诊断记录!');
        	return;
        }else{
        	//diagnosisModels
        	for(var i=0;i<diSelection.length;i++){
        		//返回的诊断结果应该包含ownerType,ownerCd.
        		var node = {
	          		      'diNm':diSelection[i].data.diName,
	    	       	      'diEmpNm':IMER_GLOBAL.user.name,
	    	       	      'diEmpCd':IMER_GLOBAL.user.code,
	    	       	      'diTime':'',
	    	       	      'diCd':diSelection[i].data.diCode,
	    				  'diSn':'',
	    				  'icdCd':diSelection[i].data.icdCode,
	    				  'setOwnerTypeCd':diSelection[i].data.ownerType,
	              	      'setOwnerCd':diSelection[i].data.ownerCode,
	    	        	   leaf:true	 
	             };
        		
        		diagnosisModels.push(node);
        	}
        	
        	var outDiagnosisView = Ext.getCmp('outdiagnosisview');
        	outDiagnosisView.csaInsertDiagnosis(diagnosisModels);
        }
        
        if(mrSelection.length==0){
        	XapMessageBox.info('请选择病例模板记录!');
        	return;
        }
    }
	
});

Ext.define('iih.mr.kr.csm.model.CSMModel',{
extend:  Ext.data.TreeModel ,
	//idProperty:'tempSn',
	fields:[
	    {name: 'id',  type: 'string'},
		{name: 'name',  type: 'string'},
		{name: 'expand',  type: 'string'},
		{name: 'leaf',   type: 'boolean'},
		{name:'diCode',type:'string'},
		{name:'diName',type:'string'},
		{name:'diSuiteCode',type:'string'},
		{name:'diSuiteTypeCode',type:'string'},
		{name:'diSuiteTypeName',type:'string'},
		{name:'orgCode',type:'string'},
		{name:'ownerCode',type:'string'},
		{name:'ownerType',type:'string'},
		{name:'ownerCode',type:'string'},
		{name:'text',type:'string'},
		'children'

	]
	//fields:['tempSn',  'text','leaf', 'id', 'children']
})
Ext.define('iih.mr.kr.csm.model.DIModel',{
extend:  Ext.data.Model ,
	fields:[
	    {name: 'diName',  type: 'string'},
		{name: 'icdCode',  type: 'string'},
		{name: 'diCode',  type: 'string'},
	]
})
Ext.define("iih.mr.model.BasicTemplate",{
	extend:  Ext.data.Model ,
	fields:[
		{name:"mrDocTypeCd",type:"string"},
		{name:"baseTemplateCd",type:"string"},
		{name:"mrTemplateNm",type:"string"},
        {name:"ownerTypeCd",type:"string"},
        {name:"diagnosisCd",type:"string"},
        {name:"ownerCd",type:"string"},
        {name:"mrReviewLvlCd",type:"string"},
		'processTask'
	]
});

Ext.define("iih.mr.model.BasicTemplate",{
	extend:  Ext.data.Model ,
	fields:[
		{name:"baseTemplateStatusCd",type:"string"},
		{name:"baseTemplateNm",type:"string"},
		{name:"pageTypeCd",type:"string"},
        {name:"ownerMedicalInstituteCd",type:"string"},
        {name:"createBy",type:"string"},
        {name:"createTime",type:"string"},
        {name:"applyFlag",type:"string"},
		'processTask'
	]
});

Ext.define("iih.mr.model.Defect",{
	extend:  Ext.data.Model ,
	fields:[
		{name:"bugCd",type:"string"},
	//	{name:"defectNotice",type:"string"},
	//	{name:"qaItem",type:"string"},
		{name:"bugNm",type:"int"},
		{name:"mrNo",type:"string"},
	//	{name:"mrDoc",type:"string"},
		{name:"bugDesc",type:"string"},
		{name:"bugStateNm",type:"string"},
		{name:"bugState",type:"string"},
		{name:"qaLevel",type:"string"},
		{name:"qaType",type:"string"},
		{name:"senderCd",type:"string"},
		{name:"sendedDeptCd",type:"string"},
		{name:"sendedTime",type:"date"},
		{name:"deadline",type:"date"},
		{name:"defectFlag",type:"string"},
		{name:"defectRequire",type:"string"},
		{name:"defecterCd",type:"s  tring"},
		{name:"defectStartTime",type:"date"},
		{name:"defectFinishTime",type:"date"},
		{name:"defectState",type:"string"},
		{name:"defectDeclare",type:"string"},
		{name:"checkerCd",type:"string"},
		{name:"checkTime",type:"date"},
		{name:"pointsFlag",type:"string"},
		{name:"checkState",type:"string"},
		{name:"pointsDeclare",type:"string"},
		'processTask'
	]
	/*,
	hasMany:[
		 {model:"DefectNotice",name:"defectNotice"},   //整改通知对象
		 {model:"QAItem",name:"qaItem"},				//质控项对象
		 {model:"mrDoc",name:"mrDoc"}				//病历文书对象---无
	]
	*/
});

Ext.define("iih.mr.model.DefectInputModel",{
	extend:  Ext.data.Model ,
	fields:[
		{name:"defectDescription",type:"string"},
		{name:"deductionStandard",type:"string"},
		{name:"needDefect",type:"string"},
		{name:"rectificatRequire",type:"string"},
		{name:"paragraph",type:"string"}
	]
});
Ext.define("iih.mr.model.DefectModel",{
	extend:  Ext.data.Model ,
	fields:[
		{name:"sign",type:"string"},
		{name:"needDefect",type:"int"},
		{name:"defectDescription",type:"string"},
		{name:"deductionStandard",type:"string"},
		{name:"defectMark",type:"string"},
		{name:"givenThat",type:"string"},
		{name:"mrDoc",type:"string"},
		{name:"defectState",type:"string"},
		{name:"rectificationInstruction",type:"string"},
		{name:"cutOffTime",type:"string"},
		{name:"businessActivities",type:"string"},
		{name:"forwardDepartment",type:"string"},
		{name:"forwardPeople",type:"string"},
		{name:"forwardTime",type:"string"},
		'processTask'
	]
});

Ext.define("iih.mr.model.DefectNotice",{
	extend:  Ext.data.Model ,
	fields:[
		{name:"defectNoticeCd",type:"string"},
		{name:"defectSignCd",type:"string"},
		{name:"receiveDept",type:"string"},
		{name:"recipient",type:"string"},
		{name:"defectPoints",type:"string"},
		{name:"defectDeadLine",type:"string"},
		{name:"defectTimes",type:"date"},
		{name:"totalPoints",type:"string"},
		{name:"defectSender",type:"string"},
		{name:"defectSendTime",type:"date"},
		{name:"defectRecipient",type:"string"},
		{name:"defectReceiptTime",type:"date"},
		'defects'
	]
	/*,
	belongsTo:"Defect"
	*/
});

Ext.define("iih.mr.model.DefectNoticeForm",{
	extend:  Ext.data.Model ,
	fields:[
		{name:"identNumber",type:"string"},
		{name:"patientNm",type:"string"},
		{name:"patientAge",type:"string"},
		{name:"noticeTime",type:"string"},
		{name:"qualityControl",type:"string"},
		{name:"businessAct",type:"string"},
		{name:"qualityControlDeptCd",type:"string"},
		{name:"receiveDeptCd",type:"string"},
		{name:"rectificatDeduction",type:"string"},
		{name:"rectificatTime",type:"string"},
		{name:"rectificatRequire",type:"string"}
	]
});
Ext.define("iih.mr.model.DefectNoticeGrid",{
	extend:  Ext.data.Model ,
	fields:[
		{name:"docName",type:"string"},
		{name:"defectName",type:"string"},
		{name:"rectificatExplain",type:"string"},
		{name:"defectNum",type:"string"},
		{name:"tatalDeduct",type:"string"},
		
		/*{name:"identNumber",type:"string"},
		{name:"patientNm",type:"string"},
		{name:"patientAge",type:"string"},
		{name:"noticeTime",type:"string"},
		{name:"qualityControl",type:"string"},
		{name:"businessAct",type:"string"},
		{name:"qualityControlDeptCd",type:"string"},
		{name:"receiveDeptCd",type:"string"},
		{name:"rectificatDeduction",type:"string"},
		{name:"rectificatTime",type:"string"},
		{name:"rectificatRequire",type:"string"}*/
	]
});
Ext.define("iih.mr.model.DefectNoticeModel",{
	extend:  Ext.data.Model ,
	fields:[
	    {name:"noticeTime",type:"string"},
		{name:"sender",type:"string"},
		{name:"waitVerifyCount",type:"string"},
		'defects'
	]
	/*,
	belongsTo:"Defect"
	*/
});

Ext.define('iih.mr.model.InProcessQAPatientListModel',{
	extend:  Ext.data.Model ,
	fields: [
	         {name:'rbauto',type:"string"},
	         {name:'rbaut',type:"string"},
	         {name:'serious',type:"string"},
	         {name:'operationNm',type:"string"},
	         {name:'qcFlag',type:"string"},
	         'inpatient'
	         ]
});

Ext.define("iih.mr.model.MrDocList",{
	extend:  Ext.data.Model ,
	fields:[
		{name:"docstatus",type:"string"},
		{name:"docname",type:"string"},
		{name:"draftsman",type:"string"},
		{name:"businesstime",type:"date"},
		{name:"lastupdatedpeople",type:"string"},
		{name:"lastupdatedtime",type:"string"}
	]
	/*,
	belongsTo:"Defect"
	*/
});

Ext.define('iih.mr.model.QADefectModel',{
	extend:  Ext.data.Model ,
	idProperty:'pk',
	fields: [
	         {name:'pk',type:"string"},
			 {name:'qaItemPk',type:"string"},
			 {name:'qaSystemItemCode',type:"string"},
			 {name:'qaPk',type:"string"},
			 {name:'targetObjectCode',type:"string"},
			 {name:'targetObjectPk',type:"string"},
			 {name:'targetObjectPk',type:"string"},
	         {name:'sourceObjectCode',type:"string"},
	         {name:'sourceObjectPk',type:"string"},
	         {name:'statusCode',type:"string"},
	         {name:'segmentTypeCode',type:"string"},
	         {name:'reformRequirement',type:"string"},
	         {name:'dropDescription',type:"string"},
	         {name:'canEdit',type:"string"},
	         {name:'canReform',type:"string"},
	         {name:'faultConfirmResult',type:"string"},
	         {name:'targetObjectName',type:"string"},
	         {name:'statusCode',type:"string"},
	         {name:'segmentTypeCode',type:"string"},
	         {name:'faultConfirmResult',type:"string"},
	         {name:'mrName',type:"string"},
	         {name:'qaSystemItemName',type:"string"},
	         {name:'statusName',type:"string"},
	         {name:'defectsDepict',type:"string"},
	         {name:'reformedDescription',type:"string"},
	         {name:'reformedTime',type:"number"},
	         {name:'reformedUserName',type:"string"},
	         {name:'reformedDeptName',type:"string"},
	         {name:'deadline',type:"number"},
	         {name:'defectsDepict',type:"string"},
	         {name:'submittedTime',type:"number"},
	         {name:'submittedUserName',type:"string"},
	         {name:'submittedDeptName',type:"string"},
	         {name:'saveFlag',type:"boolean",defaultValue:false}
	         ]
	 
});

Ext.define('iih.mr.model.QAPatientEncounterModel',{
	extend:  Ext.data.Model ,
	fields: [
			 {name:'enPk',type:"string"},
			 {name:'canEdit',type:"string"},
			 {name:'statusCode',type:"string"},
			 {name:'qcFlag',type:"string"},
			 {name:'amrNo',type:"string"},
			 {name:'curBedCd',type:"string"},
			 {name:'paNm',type:"string"},
			 {name:'sexNm',type:"string"},
			 {name:'age',type:"string"},
	         {name:'curDeptNm',type:"string"},
	         {name:'rcvTime',type:"string"},
	         {name:'enCnt',type:"string"},
	         {name:'curMainDiNm',type:"string"},
	         {name:'fnshTime',type:"string"},
	         {name:'illStaF',type:"string"},
	         {name:'suF',type:"string"},
	         {name:'faultTotal',type:"string"},
	         {name:'faultTodoReform',type:"string"},
	         {name:'faultTodoReview',type:"string"},
	         {name:'executeEndTime',type:"string"},
	         {name:'executeDeptName',type:"string"},
	         {name:'excuteUserName',type:"string"},
	         'qapatient'
	         ]
});

Ext.define("iih.mr.model.Score",{
	extend:  Ext.data.Model ,
	fields:[
	/*	{name:"bugCd",type:"string"},
	//	{name:"defectNotice",type:"string"},
	//	{name:"qaItem",type:"string"},
		{name:"bugNm",type:"int"},
		{name:"mrNo",type:"string"},
	//	{name:"mrDoc",type:"string"},
		{name:"bugDesc",type:"string"},
		{name:"bugState",type:"string"},
		{name:"qaLevel",type:"string"},
		{name:"qaType",type:"string"},
		{name:"senderCd",type:"string"},
		{name:"sendedDeptCd",type:"string"},
		{name:"sendedTime",type:"date"},
		{name:"deadline",type:"date"},
		{name:"defectFlag",type:"string"},
		{name:"defectRequire",type:"string"},
		{name:"defecterCd",type:"s  tring"},
		{name:"defectStartTime",type:"date"},
		{name:"defectFinishTime",type:"date"},
		{name:"defectState",type:"string"},
		{name:"defectDeclare",type:"string"},
		{name:"checkerCd",type:"string"},
		{name:"checkTime",type:"date"},
		{name:"pointsFlag",type:"string"},
		{name:"checkState",type:"string"},
		{name:"pointsDeclare",type:"string"},*/
	{name:'defectSn',type:"string"},
	{ name: 'mrDoc',type:"string"},
    { name: 'qcItemName',type:"string" },
    { name: 'deductionCriterion',type:"string" },
    { name: 'deductionSign',type:"string"},
    { name: 'toCorrection',type:"string"},
    { name: 'qcPerson',type:"string"},
    { name: 'qcTime',type:"string"},
    { name: 'defectionStatus',type:"string"},
    {name:'defectionStatusNm',type:"string"},
    { name: 'correctionPerson',type:"string"},
    { name: 'correctionOverTime',type:"string"},
    { name: 'DoctorCorrectionInstruction',type:"string"},
    { name: 'deductionInstruction',type:"string"},
    { name: 'qaItmDescr',type:"string"},
    
		//'processTask'
         'defects'
	],
     items:[{name:'sympVitalSigns',type:"string"}]
	/*,
	hasMany:[
		 {model:"DefectNotice",name:"defectNotice"},   //整改通知对象
		 {model:"QAItem",name:"qaItem"},				//质控项对象
		 {model:"mrDoc",name:"mrDoc"}				//病历文书对象---无
	]
	*/
});

Ext.define("iih.mr.model.Task",{
	extend:  Ext.data.Model ,
	fields:[
		{name:"worktype",type:"string"},
		{name:"workdescription",type:"string"},
		{name:"cutofftime",type:"date"},
		{name:"remainingtime",type:"string"},
		{name:"sourcedepartment",type:"string"}
	]
	/*,
	belongsTo:"Defect"
	*/
});

Ext.define('iih.mr.model.TerminalQAPatientListGridModel',{
	extend:  Ext.data.Model ,
	fields: [
			 {name:'enTypeCd',type:"string"},
			 {name:'mrFstPgStateCd',type:"string"},
	         {name:'qcFlag',type:"string"},
	         {name:'rate',type:"string"},
	         {name:'grade',type:"string"},
	         {name:'defectNum',type:"string"},
	         {name:'abarbeitungNum',type:"string"},
	         {name:'verifyNum',type:"string"},
	         {name:'medicalNum',type:"string"},
	         {name:'patientNm',type:"string"},
	         {name:'sexNm',type:"string"},
	         {name:'age',type:"string"},
	         {name:'wardAreaNm',type:"string"},
	         {name:'deptNm',type:"string"},
	         {name:'inpTimes',type:"Short"},
	         {name:'inpTime',type:"Date"},
	         {name:'inDiagnose',type:"string"},
//	         {name:'fee',type:"string"},
	         {name:'doctor',type:"string"},
//	         {name:'serious',type:"string"},
//	         {name:'operationNm',type:"string"},
	         'terqapatient'
	         ]
});

Ext.define("iih.mr.model.mrTemplate",{
	extend:  Ext.data.Model ,
	fields:[
		{name:"mrTplVerKc",type:"string"},
		{name:"baseTplVerKc",type:"string"},
		{name:"orgCd",type:"string"},
        {name:"mrTplKc",type:"string"},
        {name:"verNo",type:"string"},
        {name:"mrTplStatCd",type:"string"},
        {name:"mrTplNm",type:"string"},
        {name:"mrTypeCd",type:"string"},
        {name:"pageTypeCd",type:"string"},
        {name:"ownerTypeCd",type:"string"},
        {name:"ownerCd",type:"string"},
        {name:"revwEmpId",type:"string"},
        {name:"revwDeptCd",type:"string"},
        {name:"revwTime",type:"string"},
        {name:"pubEmpId",type:"string"},
        {name:"pubDeptCd",type:"string"},
        {name:"pubTime",type:"string"},
        {name:"sortNo",type:"string"},
        {name:"descr",type:"string"},
        {name:"updCount",type:"string"},
        {name:"crtId",type:"string"},
        {name:"crtTime",type:"string"},
        {name:"lastUpdId",type:"string"},
        {name:"lastUpdTime",type:"string"},
        {name:"delF",type:"string"},
		'processTask'
	]
});

/** 
 * QA领域公共函数调用
 * @author ：wu_guocheng
 */
Ext.define('iih.mr.qa.QaFunction', {
	
	singleton: true,
    
	taskTimes:0.05,   //时间数
	
    //创建病历
    qaCreateMrdoc:function(mrdocBlock,mrSn){
    	
    	var config = {
				xclass: 'iih.mr.wr.mr.view.MrDocEditView',
                viewConfig:{
                    mrSn:mrSn,
                    opType:'readonly'
                    //opType:'open'
                }
            };   
		
		 var mrdocEditView =  Ext.create(config.xclass,config.viewConfig);
		 mrdocBlock.removeAll();
		 mrdocBlock.add(mrdocEditView);
		 
		 return mrdocEditView;
    },
    
    //设置缺陷按钮
    setButDisabled:function(grid,owner,b){
    	
    	if(b){
    		
    		grid.down('xapbutton[action=defectsin]').setDisabled(false);
    		
    	}else{
    		
    		 var medicalRecord  = owner.down('mrdoceditview').medicalRecord;
    		 
	   		 //不是 整改要求已发送 和整改要求已接收 才可编辑
	   		 if(null!=medicalRecord.qaStatusCode && medicalRecord.qaStatusCode!='QAM04.02' && medicalRecord.qaStatusCode!='QAM04.03'){
	   			 
	   			 grid.down('xapbutton[action=defectsin]').setDisabled(false);
	   		 }
    	}
    },
    
    //设置病历TITLE
    setBlockTitle:function(mrdocBlock,properties,treeRecord){
    	
    	 var text = '';
    	 
    	 if(treeRecord.text!=undefined){
    		 
    		 text = treeRecord.text;
    		 
    	 }else{
    		 
    		 //text = treeRecord.mrName;
    	 }
    	
    	 if(properties.data.typeFlag == iih.mr.qa.QaStatusGlobal.workScreenWorkProcess || properties.data.typeFlag == iih.mr.qa.QaStatusGlobal.workScreenTrackProcess){
			 //环节质控
			 mrdocBlock.setTitle(text+'&nbsp &nbsp &nbsp('+properties.data.patientRecord.patientName+' &nbsp &nbsp &nbsp '+properties.data.patientRecord.currentDeptName+')');
			 
		 }else if(properties.data.typeFlag == iih.mr.qa.QaStatusGlobal.workScreenTrackTerminal || properties.data.typeFlag == iih.mr.qa.QaStatusGlobal.workScreenWorkTerminal || properties.data.typeFlag == iih.mr.qa.QaStatusGlobal.workScreenScore){
			 //终末质控
			 mrdocBlock.setTitle(text+'&nbsp &nbsp &nbsp('+properties.data.patientRecord.patientName+' &nbsp &nbsp &nbsp '+properties.data.patientRecord.currentDeptName+')');
		 }
    },
    
    //判断质控类型返回Boolean
    getQaTypeBoolean:function(properties){
    	
    	var b = false;
    	
    	if(properties.data.typeFlag == iih.mr.qa.QaStatusGlobal.workScreenTrackTerminal || properties.data.typeFlag == iih.mr.qa.QaStatusGlobal.workScreenWorkTerminal || properties.data.typeFlag == iih.mr.qa.QaStatusGlobal.workScreenScore){
    		
    		b = true;
    	}
    	
    	return b;
    },
    
    //获取Task
    getTask:function(fun){
    	return new Ext.util.DelayedTask(function(){fun}); 
    }
})
Ext.define('iih.mr.qa.QaStatusGlobal', {
	
    singleton: true,
    
    faultConfirmStatus:'QAM07.01', //未确认
    
    faultRectificationStatus:'QAM07.02', //整改
    
    faultDropStatus:'QAM07.03', //扣分
    
    faultNoDropStatus:'QAM07.04', //不扣分
    	
    workScreenWorkProcess: '1', //环节质控-工作画面
    
    workScreenTrackProcess: '2', //环节质控-追踪画面
    
    workScreenReformProcess: '3', //环节质控-医生整改
    
    workScreenWorkTerminal: '4', //终末质控-工作画面
    
    workScreenTrackTerminal: '5', //终末质控-追踪画面
    
    workScreenReformTerminal: '6', //终末质控-医生整改
    
    workScreenScore: '7', //终末质控评分画面

    workScreenWorkDept: '8', //科室质控-工作画面
    
    workScreenTrackDept: '9', //科室质控-追踪画面
    
    workScreenReformDept: '10', //科室质控-医生整改
    
    workScreenScoreDept: '11', //科室质控评分画面
    
    workScreenScoreAuto: '12', //自动质控评分(环节质控质量自评)画面
    
    writeStarted: 'MRM22.01',//病案状态  书写已开始
    
    writeCompleted: 'MRM22.02',//病案状态  书写已完成
    
    qaDept:'MRM22.03',// 病案状态 已科室质控
    
    qaDeptScored:'MRM22.04',// 病案状态 已科室评分
    
    qaStarted:'MRM22.05',// 病案状态 已签收
    
    qaCompleted:'MRM22.06',// 病案状态 已完成终末质控
    
    archived:'MRM22.07',// 病案状态 已归档
    	
    defectCreate:'QAM01.01',// 新建
    
    defectSubmitted:'QAM01.02',// 已提出
    
    defectReformed:'QAM01.03',// 已整改
    
    defectVerified:'QAM01.04',// 已审核
    
    workScreenReform:'1', 	// 环节整改通知
    workScreenTrack:'2', 	// 环节质控追踪
    
    //缺陷状态
    faultToReform:'QAM12.01', //待整改
    faultReformed:'QAM12.02', //已整改
    faultVerified:'QAM12.03', //审核通过
    faultDeductioned:'QAM12.04', //扣分
    
    //整改通知单状态
    revisionNoticeToReform:'QAM11.01', //待整改
    revisionNoticeReforming:'QAM11.02', //整改中
    revisionNoticeReformed:'QAM11.03', //已整改
    revisionNoticeVerified:'QAM11.04', //已审核
    
    //质控类型编码
    qaTypeCodeProcess: 'QAM13.01', //环节质控
    qaTypeCodeDept: 'QAM13.02', //科室质控
    qaTypeCodeTerminal: 'QAM13.03', //终末质控
    qaTypeCodeAuto: 'QAM13.04', //自动质控-待删除
    
  //  qaAutoTypeCodeProcess: 'QAM13.04', //环节自动质控 --待启用
    qaAutoTypeCodeDept: 'QAM13.05', //科室自动质控
    qaAutoTypeCodeTerminal: 'QAM13.06', //终末自动质控
    
    verifiedDeadline:'7', //已审核（7天内）
    
    qaDrpScrTpCdOnce: "QAM02.01", //扣分类型 仅一次扣分
    qaDrpScrTpCdMto: "QAM02.02", //可多次扣分
    qaDrpScrTpCdB: "QAM02.03", //单否乙
    qaDrpScrTpCdC: "QAM02.04", //单否丙
    
    //患者
    patient:{
        patientId:'',
        name:''
    }
})
Ext.define('iih.mr.qa.dept_qa_auto_search.action.QaAutoInitAction', {
	extend:  Xap.ej.action.Action ,
	
	/*
	* @Override
	*/
	execute: function(context) {
		var block = this.getBlock('content');
	    var curDeptNm = block.down('comboxgrid[name=curDeptNm]');
		curDeptNm.select(IMER_GLOBAL.department.code,true,true) ;
		curDeptNm.comboxHiddenValue = IMER_GLOBAL.department.code;
	}
});

Ext.define('iih.mr.qa.dept_qa_auto_search.action.QaAutoSearchAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override
	*/
	execute: function(context) {
		if(context.event != undefined && context.event.name=='combochange' && context.event.from.rawValue != ""){
			return;
		}
		var owner = this.getOwner();
		var typeFlag = owner.typeFlag;
		var view = this.getBlock('condition');
        var block = view.getBlock('content');
    	var condition = block.getData();
    	
		this.showLoading();
		var block = this.getBlock('result');
		var curDeptNm = context.curDeptNm;
		var currentManageDoctorName = context.currentManageDoctorName;
		var pageNum,pageSize;
		if(context.event == undefined){
			pageNum = context.pageNum; 
			pageSize = context.pageSize; 
		}else{
			pageNum = context.event.arguments[0]; 
			pageSize = context.event.arguments[1]; 
		}
		block.pageSize = pageSize;
		var data = {
			pageNum : pageNum,
			pageSize : pageSize,
            curDeptNm:curDeptNm,
            currentManageDoctorName:currentManageDoctorName,
            typeFlag:typeFlag
		}
    	var owner = this.getOwner();
        var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
        properties.setData({
            parentWindow: context.parentWindow,
            sourceView: context.sourceView,
            pageSize:pageSize,
            pageNum:pageNum,
            curDeptNm:curDeptNm
        });
    	var operations = context.operations;
    	if(!operations) {
    		return;
    	}
    	this.prepareOperations(operations,data);
    },
    
    prepareOperations: function(operations,data) {
        var view = this.getBlock('condition');
        var block = view.getBlock('content');
    	var condition = block.getData();
    	if(data.curDeptNm != undefined){
    		condition.curDeptNm = data.curDeptNm;
    	}

    	if(data.currentManageDoctorName != undefined){
    		condition.currentManageDoctorName = data.currentManageDoctorName;
    	}
    	if(data.typeFlag == '1'){
    		condition.amrState = iih.mr.qa.QaStatusGlobal.qaDept; //已科室质控
    	}else if(data.typeFlag == '2'){
    		condition.amrState = iih.mr.qa.QaStatusGlobal.qaCompleted;//已终末质控
    	}
        var url = this.url;
        var pageNum = data.pageNum; 
		var pageSize = data.pageSize; 
        if(condition) {
            var qs = Ext.Object.toQueryString(condition);
//            alert(qs);
            
            	if(data.pageSize == undefined || typeof(data.pageSize)=='object'){
            		if(qs) {
            			url += '?' + qs ;
            		}else{
            			url += '?';
            		}
            	}else{
            		if(qs) {
                		url += '?' + qs ;
            		}else{
            			url +='?';
            		}
            	}
            console.log(url);
        }
        var mclass = null;
        if(block.getModelClass) {
            mclass = block.getModelClass();
        }
    	var operation = {
            url: url,
    		mclass: mclass,
    		method: 'get',
    		condition: condition,
    		scope: this,
    		success: this.onSuccess
    	};
    	operations.length = 0;
    	operations.push(operation);
    },

    onSuccess: function(operation) {
        var block = this.getBlock('result');
        if(block){
	        var pageSize = block.pageSize;
	        var m = operation.result;
	        m.pageSize = pageSize;
	        // TODO 数据格式就这样了？
	        if(m instanceof Ext.data.Model) {
	            block.setData({
	                mclass: operation.mclass,
	                data: m.getData(true)
	            });
	        }
	        else {
	        	block.setData(m);
	        	console.log(m);
	        }
	        
	        //判断按钮状态
	        var grid = block.down('xapgrid');
	        if(grid){
	        	var rs = grid.getSelectionModel().getSelection();
			    //查看按钮
				var look = grid.down('button[method=look]');
				if(rs.length > 0){
					look.setDisabled(false);
				}else{
					look.setDisabled(true);
				} 
	        }
        }
    }
});

Ext.define('Xap.ej.block.GridBlock', {
	extend:  Xap.ej.element.grid.Grid ,

	            
		                           
	  

	alias : 'widget.xapgridblock',

	mixins : [ Xap.ej.block.LayeredBlock ],

	initComponent: function() {
		this.callParent();
		this.initBlock();
	}
});
/** 
 *
 * 多文本编辑框
 * @extends Ext.form.field.TextArea
 * @author：chenyajie<chen_yajie@founder.com>
 * 
 *
 */
Ext.define('Xap.ej.element.field.TextArea', {
	extend:  Ext.form.field.TextArea ,
	alias: 'widget.xaptextarea'
});
Ext.define('iih.mr.qa.score.block.ScoreFormBlock',{
	extend :  Xap.ej.block.FormBlock ,

	           
		                                 
		                                
                                         
                                        
                                           
	  

	alias:'widget.scoreformblock',

	layout:{
        type: 'table',
        columns: 8,
        tableAttrs: {
            border: 0,
            cellpadding: 0,
            cellspacing: 0,
            height:60,
            width: '100%'
        },
        tdAttrs: {
            valign: 'middle',
            align:'right'
            
        }},
        items: [
                { 
                   xtype:'xapdisplayfield',
  	               name:'score',
  	               columnWidth:1,
  	               labelAlign : 'right',
  	               fieldLabel:'病案得分'
  	               
                },{
	               xtype:'xapdisplayfield',
	               name:'lvl',
	               columnWidth:4,
	               labelAlign : 'right',
	               fieldLabel:'等级'
	           },{
	               xtype:'xapdisplayfield',
	               name:'qaDivideLevelCd',
	               width:100,
	               fieldLabel:'',
	               value:'',
	               hidden:true
	           },{
                   xtype:'tbspacer',
                   width:800
	           }],

	setData: function(data) {
        this.callParent(arguments);
    },
    getData: function() {
        this.callParent(arguments);
    }
})
Ext.define('iih.mr.qa.dept_qa_auto_search.block.QaAutoDefectListBlock',{
	extend :  Xap.ej.block.Block ,


	alias:'widget.qaautodefectlistblock',

	layout: 'fit',
	
	items: [{
		xtype: 'xapgridblock',
		title: '扣分项目',
		autoScroll:true,
		plugins : [Ext.create('Xap.ej.element.grid.plugin.CellEditing', {
			clicksToEdit : 1
		})],
		CM_JR_Record: [
					{
						header : '扣分项目表主键',
						name: 'qaDivideCd',
						dataIndex : 'qaDivideCd',
						hidden:true
					},
					{
						header : '质控项目主键',
						name: 'qaItmPk',
						dataIndex : 'qaItmPk',
						hidden:true
					},
		 
                   { header: '就诊序号', dataIndex: 'enSn', hidden: true},
                   { header: '质控类别', dataIndex: 'itemFirstNM', width:160},
                   { header: '评分项目', dataIndex: 'req', width:400,flex:1},
                   { header: '评分标准', dataIndex: 'deductDes', width:150},
                   { header: '扣分次数', dataIndex: 'deductScrTimes', width:150}
		]
	}],

	setData: function(data) {
		
		var grid = this.down('xapgridblock');
		if(data.dataList){
			grid.setData(data.dataList);
		}else{
			grid.setData([]);
		}
	}
})
/** 
 * 查询：质控评分画面---扣分项目列表
 * @author ：wang_yanli
 */

Ext.define('iih.mr.qa.score.action.ScoreItemListSearchAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	doExecute: function(context) {
		this.prepareOperations(context);
	 },
	 prepareOperations: function(context) {
	 	var owner = this.getOwner(); 
	    var patientRecord = owner.patientRecord;
	    var workScreen = owner.workScreen;
		var operations = context.operations;
        var url = this.url;
        
        
        // 获取选中患者的就诊序号
        var enPk;
    	enPk = patientRecord.pk;
        url += '?' + 'encounterPk=' + enPk + '&workScreen='+ workScreen;
    	var operation = {
            url: url,
    		mclass: null,
    		method: 'get',
    		condition: null,
    		scope: this,
    		success: this.onSuccess
    	};
    	operations.length = 0;
    	operations.push(operation);
    },

   onSuccess: function(operation) {
	    var owner = this.getOwner(); 
	    var workScreen = owner.workScreen;
	    var block = this.getBlock('bottom');
        var m = operation.result;
        var dataList = m.dataList;
        var qaTyCd ,qaAutoTyCd;//人工质控编码，自动质控编码
        if(workScreen == '7'){//终末
			qaTyCd = iih.mr.qa.QaStatusGlobal.qaTypeCodeTerminal; 
			qaAutoTyCd = iih.mr.qa.QaStatusGlobal.qaAutoTypeCodeTerminal;
		}else if(workScreen == '11'){
			qaTyCd = iih.mr.qa.QaStatusGlobal.qaTypeCodeDept; 
			qaAutoTyCd = iih.mr.qa.QaStatusGlobal.qaAutoTypeCodeDept;
		}else if(workScreen == '12'){
			qaTyCd = iih.mr.qa.QaStatusGlobal.qaTypeCodeAuto; 
		}
        if(dataList != null){
	        //质控医师赋值
	        for(var i=0;i<dataList.length;i++){
	        	var qaTypeCd = dataList[i].qaTyCd;
	        	var sbmtUserNm = dataList[i].sbmtUserNm;
		        	if(qaTypeCd == qaAutoTyCd && sbmtUserNm == null){
		        		dataList[i].sbmtUserNm = '自动';
		        	}
	        	}
        }
        block.setData(m);
        var owner = this.getOwner(); //scoreWorkView
        var patientRecord = owner.patientRecord;
        var enPk = patientRecord.pk;
        var scoreWorkProperites = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
       
        scoreWorkProperites.setData({
	        	enPk:enPk,  //就诊PK
	        	qaTypeCode:qaTyCd,    //质控类型编码
				workScreen:workScreen
	    });
        
	    if(workScreen == '12'){
	    	var chain = owner.getActionChain('qaScoreSearch');
	        if(chain) {
	            chain.execute();
	        }
	    }else{
	    	//刷新按钮
			//获取缺陷一览的GRID
			var ScoreItemGrid = block.down('xapgrid');
			/*//设置删除按钮不可编辑
			ScoreItemGrid.down('xapbutton[action=qaScoreItemDelete]').setDisabled(true);*/
	        
	        var chain = owner.getActionChain('qaScoreSearch');
	        
	        if(chain) {
	            chain.execute();
	        }
	    }
    }
});

/** 
 * 打开病历文书
 * @author ：cheng_feng
 */
Ext.define('iih.mr.qa.process_qa_track.action.QaMrSignOpenAction', {
    extend:  Xap.ej.action.ServiceInvocation ,

    doExecute: function(context) {
    	
    	var me = this;
    	
		var resultBlock = this.getBlock('result');
	        
	    var enGrid = resultBlock.down('xapgrid');
	     
	    var selModel = enGrid.getSelectionModel();
	        
	    var record = selModel.getSelection()[0];
	     
	    var mrPk = record.data.mrPk;
	    
        var page = this.getOwner();
        
        var operations = context.operations;
        
        if(undefined!=mrPk && mrPk != ""){
        	var config = {
                xclass: 'iih.mr.wr.mr.view.MrDocEditView',
                viewConfig:{
                    mrSn:mrPk,
                    opType:'readonly'
                },
                assistantConfig:{
                	 tgtObCd: 'MRB02',
                     tgtObPk: mrPk
                }
            };   
        	var workContent = page.getBlock('top');
            workContent.removeAll();
            var workView =  Ext.create(config.xclass,config.viewConfig);
            workContent.add(workView);
        }
    }
});

/** 
 * 查询：质控评分画面---查询质控评分
 * @author ：wang_yanli
 */
Ext.define('iih.mr.qa.score.action.QaScoreSearchAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	doExecute: function(context) {
	        this.prepareOperations(context.operations,context);
	 },
	 prepareOperations: function(operations,context) {
	        
	        var url = this.url;
	        var owner = this.getOwner();
	        var scoreWorkProperites = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
	        
	        var enPk  = scoreWorkProperites.data.enPk; //获取患者就诊序号
	        var qaTypeCode = scoreWorkProperites.data.qaTypeCode;
	    	var operation = {
	            url: url+'?enPk=' + enPk + '&qaTypeCode=' + qaTypeCode,
	    		mclass: null,
	    		method: 'get',
	    		condition: null,
	    		scope: this,
	    		success: this.onSuccess
	    	};
	    	
	    	operations.length = 0;
	    	operations.push(operation);
	    
	 },

    onSuccess: function(operation) {
    	
        var scoreFormBlock = this.getBlock('result');
        
        var m = operation.result;
        m.data.score = '<div style=\'color:red;font-weight:800;font-size:24px;\'>'+ m.data.score+'分</div>';
        m.data.lvl = '<div style=\'color:red;font-weight:800;font-size:24px;\'>'+ m.data.lvl +'级</div>';
        scoreFormBlock.setData(m.data);
        
    }
});


/** 
 * 自动缺陷列表
 * @author ：yao_lijie
 */
 
Ext.define('iih.mr.qa.dept_qa_auto_search.view.QaAutoDefectView',{
	extend:  Xap.ej.template.BaseTemplate ,
	           
	                                       
	                                           
	                                           
	                                          
	                                        
	                                             
	                                      
	                                    
	                                                  
	                                                                       
			                                                      
			                                                         
	  

	alias:'widget.qaautodefectview',
	
	layout: {
        type : 'vbox',
        align : 'stretch'
    },
    
	xapConfig: {
		blocks: {
		    'top': {
                xclass: 'iih.mr.qa.score.block.ScoreFormBlock',
                height: 60
            },
			'bottom': {
				xclass: 'iih.mr.qa.dept_qa_auto_search.block.QaAutoDefectListBlock'
			}
		},
		
		actions: {
			'init': {
				xclass: 'iih.mr.qa.score.action.ScoreItemListSearchAction',
				url: 'qacustom/dropScoreItems',
				blocks: {
					top: 'top',
					bottom: 'bottom'
				}
			},
			'qaScoreSearch': {
				xclass: 'iih.mr.qa.score.action.QaScoreSearchAction',
				url: 'qacustom/amrScore',
				blocks: {
					condition: 'properties',
					result: 'top'
				}
			}
		},

		chains: {
			'init':['init'],
			'qaScoreSearch':['qaScoreSearch']
		},

		connections: {
			'bottom':[{
				event: 'afterrender',
				chain: 'init'
			}]
		}
	}
})
/** 
 * 通知书缺陷列表
 * @author ：yao_lijie
 */
Ext.define('iih.mr.qa.dept_qa_auto_search.action.ToQaAutoDefectAction', {
extend:  Xap.ej.action.Action ,
	
	                                                                  
	
	execute: function(context) {
		
		var me = this;
		
		var owner = this.getOwner();   
		
		var topBlock = this.getBlock('result');
	        
	    var enGrid = topBlock.down('xapgrid');
	     
	    var selModel = enGrid.getSelectionModel();
	        
	    var record = selModel.getSelection()[0];
	    
	    var pk = record.data.pk;
	    
	    var workScreen = iih.mr.qa.QaStatusGlobal.workScreenScoreAuto;
	    
	    var sourceView=this.getOwner();	
		
	    var event = context.event;
	    var pageCode = 'qaAutoDefectView';
	    var pageTitle = '扣分项列表';

	    var viewConfig = {
	    	patientRecord:record.data,
	    	pk: pk,
	    	workScreen:workScreen
	    }
        if(event) {
            var config = {
            	pageCode: pageCode,
            	pageTitle: pageTitle,
                viewConfig:  viewConfig
            };
            var canvas = Xap.getCanvas();
            canvas.fireEvent("updatePatient",{patient:record.data});  // top患者信息刷新
            canvas.fireEvent("addWorkPage",config);
        };
    }
});
Ext.define('iih.mr.qa.dept_qa_auto_search.block.QaAutoSearchBlock',{
	extend :  Xap.ej.block.FormBlock ,
	
	requires: [],

	alias:'widget.qaautosearchblock',
	
	border: 0,

	items: [{
//		title: '自动质控工作查询',
		xtype: 'xapform',
	layout: {
		type: 'table',
		columns: 4,
		tableAttrs: {
            border: 0,
            cellpadding: 0,
            cellspacing: 1,
            width: '100%',
            height:86
        },
        tdAttrs: {
            valign: 'left'
        }
	},
	items:[{
			xtype:'comboxgrid',
//			margin:'10 0 10 0',
			name:'curDeptNm',
			method:'curDeptNm',
			url: 'organization/keyword',//科室查询的url
			fieldLabel:'科室',
			labelAlign : 'right',
			labelWidth : 50,
			listWidth:230,    //gird的宽度
			width:210,        //combo的宽度
			valueField : 'code',//科室编码的字段名
			displayField: 'name',//科室名称的字段名
			columns: [{              //grid的column配置
			   text: '科室编码',
			   dataIndex: 'code',
			   width:80
			},{
			   text: '科室',
			   flex:1,
			   dataIndex: 'name'
			}],
			callback:function(newValue,oldValue,record){  //在grid选择记录后的回调函数
				var view = this.up('qaautosearchview');
				var initChain = view.getActionChain('search');
				initChain.execute({
					curDeptNm:newValue
				});
			}
		},{
			xtype:'xaptextfield',
	        name:'amrNo',
//	        labelWidth:50,
	        labelAlign:'right',
	        fieldLabel:'住院号',
	        listeners:{
	        	specialkey : function(field, e) {  
	                if (e.getKey() == Ext.EventObject.ENTER) {  
	                    var view = this.up('qaautosearchview');
						var initChain = view.getActionChain('search');
						initChain.execute({}); 
	                }  
	            }
	        }
		},{
			xtype:'xaptextfield',
	        name:'patientName',
//	        labelWidth:60,
	        labelAlign:'right',
	        fieldLabel:'患者姓名',
//	        margin:'0 0 0 10',
	        listeners:{
	        	specialkey : function(field, e) {  
	                if (e.getKey() == Ext.EventObject.ENTER) {  
	                    var view = this.up('qaautosearchview');
						var initChain = view.getActionChain('search');
						initChain.execute({}); 
	                }  
	            }
	        }
		},{
	        xtype:'comboxgrid',
	        name:'currentManageDoctorName',
//	        margin:'0 100 10 150',
	        fieldLabel:'主管医师',
	        url: 'employee',
	        labelAlign : 'right',
			labelWidth : 60,
			listWidth:230,    //gird的宽度
			width:210, 
	        valueField : 'id',
	        displayField: 'name',
	        searchParam: {'deptCd': IMER_GLOBAL.department.code},
	        columns: [{
	           text: '人员id',
	           dataIndex: 'id',
	           width:70
	        },{
	           text: '医师姓名',
	           flex:1,
	           dataIndex: 'name'
	        }],
			callback:function(newValue,oldValue,record){  //在grid选择记录后的回调函数
				var view = this.up('qaautosearchview');
				var initChain = view.getActionChain('search');
				initChain.execute({
					currentManageDoctorName:newValue
				});
			  }
	    }]
	}]
})
Ext.define('iih.mr.qa.dept_qa_auto_search.block.QaAutoSearchGridBlock',{
	extend :  Xap.ej.block.Block ,
	
	requires: [],

	alias:'widget.qaautosearchgridblock',
	
	layout: 'fit',
	border: 0,

    items:  [{
        xtype: 'xapgrid',
        ifSelect : true,
        selectBy: 'qaPk',
		tools:[{
           xtype:'button',
           text:'查看',
           method: 'look',
           disabled : true
       	}],
		autoScroll:true,
		pageSize : 25,
		pageShow : true,
             
  CM_JR_Record: [      
  				{  dataIndex: 'qaPk',field: 'textfield',type: 'string',flex:1 ,hidden:true},
  				//为了显示top信息
  				{  dataIndex: 'pk',field: 'textfield',type: 'string',flex:1 ,hidden:true},
  				{  dataIndex: 'patientId',field: 'textfield',type: 'string',flex:1 ,hidden:true},
  				{ header: '住院号', dataIndex: 'amrNo',field: 'textfield',type: 'string',width:90 ,hidden:true},
  				{ header: '床号', dataIndex: 'currentBedCode',field: 'textfield',type: 'string',width:70 ,hidden:true},
  				{ header: '患者姓名', dataIndex: 'patientName',field: 'textfield',type: 'string',width:100 ,hidden:true},
                { header: '性别', dataIndex: 'sexName',field: 'textfield',type: 'string',width:60 ,hidden:true},
                { header: '年龄', dataIndex: 'age',field: 'textfield',type: 'string',width:60 ,hidden:true},
                { header: '入院时间', dataIndex: 'receiveTime',xtype: 'xapdatecolumn',width:130 ,hidden:true},
//  				{ header: '质控日期', dataIndex: 'crtTime',xtype: 'xapdatecolumn',width:130},
  				{ header: '住院号', dataIndex: 'amrNo',field: 'textfield',type: 'string',width:150},
  				{ header: '患者姓名', dataIndex: 'patientName',field: 'textfield',type: 'string',width:120},
  				{ header: '主诊断', dataIndex: 'currentMainDiagnosisName',field: 'textfield',type: 'string',flex:1 },
                { header: '缺陷数', dataIndex: 'defectCount',field: 'textfield',type: 'int',width:80 },
                { header: '主管医师', dataIndex: 'currentManageDoctorName',field: 'textfield',type: 'string',width:120 },
                { header: '就诊科室', dataIndex: 'crtDeptNm' ,field: 'textfield',type: 'string',width:120}
                
        ]
    }],
    setData: function(data) {
        	var grid = this.down('xapgrid');
        	var dataList = data.dataList;
        	if(grid){
        		if(dataList){
			    	var totalList = {"total":data.total,"dataList":dataList};
			    	var pageSize = data.pageSize;
			    	if(pageSize == undefined || typeof(data.pageSize) == 'object'){
			    		grid.setPageData(totalList);	//初始化赋值
			    	}else{
			    		grid.setData(dataList);	//翻页时赋值
			    	}
	        	}else{
	        		var totalList = {"total":data.total,"dataList":data.dataList};
	        		grid.setPageData(totalList);
	        	}
        	}
    	}  
})

Ext.define('iih.mr.qa.dept_qa_auto_search.view.QaAutoInitView',{
	extend :  Xap.ej.template.BaseTemplate ,

	alias:'widget.qaautoinitview',

	          
		                                
   		                                
		                                       
		                                             
		                           
		                           
   		                             
   		                                  
   		                                  
   		                                         
   		                                                        
   		                                                       
	  

	layout: {
        type : 'fit'
    },
	
	xapConfig: {
		blocks: {
			'content':{
				xclass: 'iih.mr.qa.dept_qa_auto_search.block.QaAutoSearchBlock'
			}
		},
		actions: {
			'init': {
				xclass: 'iih.mr.qa.dept_qa_auto_search.action.QaAutoInitAction',
				blocks: {
					content: 'content'
				}
			}
		},

		chains: {
			'init': ['init']
		},

		connections: {
			'content':[{
				event: 'afterrender',
				chain: 'init'
			}]
		}
	}
})
/** 
 * 点击记录，判断按钮状态
 * @author ：yao_lijie
 */
Ext.define('iih.mr.qa.process_qa_search.action.JudgeBtnAction', {
	extend:  Xap.ej.action.Action ,
	
	execute: function(context) {
		var block = this.getBlock('result');
		var grid = block.down('xapgrid');
		//查看按钮
		var look = grid.down('button[method=look]');
		look.setDisabled(false);
	}
});

/** 
 * 环节质控工作查询页面加载完成后查找到tools上的相关按钮进行事件的监听
 * @extends Xap.ej.action.Action
 * @author ：yao_lijie
 */

Ext.define('iih.mr.qa.process_qa_search.action.InProcessWorkViewreadyAction', {
	extend:  Xap.ej.action.Action ,
	
	requires:[],
	      
	execute: function(context){
		var me = this;
		
	    var owner = this.getOwner();
	    
	    //获取工作查询的 block
		var resultBlock = this.getBlock('result');	
		var searchGrid = resultBlock.down('xapgrid');

		//查看按钮
		var look = searchGrid.down('button[method=look]');
		look.on('click',function(btn){
			context.event.name='click';
			var lookChain = me.getOwner().getActionChain("look");
			lookChain.execute(context);
		});
	}
	
})
Ext.define('iih.mr.qa.dept_qa_auto_search.view.QaAutoSearchView',{
	extend :  Xap.ej.template.BaseTemplate ,

	alias:'widget.qaautosearchview',

	          
		                                
   		                                
		                                       
		                                             
		                           
		                           
   		                             
   		                                  
   		                                  
   		                                         
   		                                                    
   		                                                            
   		                                                          
   		                                                    
   		                                                            
   		                                                                 
	  

	layout: {
        type : 'vbox',
        align : 'stretch'
    },
	
	xapConfig: {
		blocks: {
			'condition':{
				xclass: 'iih.mr.qa.dept_qa_auto_search.view.QaAutoInitView',
				height:86
			},
			'toolbar': {
				xclass: 'Xap.ej.block.ToolbarBlock',
				items: [{
					xtype: 'button',
					iconCls: 'icon-Search',
					text: '查询',
					action: 'search'
				}]
			},
			'result':{
				xclass: 'iih.mr.qa.dept_qa_auto_search.block.QaAutoSearchGridBlock',
				flex:1
			}
		},
		actions: {
			'search': {
				xclass: 'iih.mr.qa.dept_qa_auto_search.action.QaAutoSearchAction',
				url:'qa/autowork',
				blocks: {
					condition: 'condition',
					result: 'result'
				}
			},
			'judgeBtn':{
				xclass: 'iih.mr.qa.process_qa_search.action.JudgeBtnAction',
				blocks: {
				    result: 'result'
				}
			},
			'look': {
				xclass: 'iih.mr.qa.dept_qa_auto_search.action.ToQaAutoDefectAction',
				blocks: {
					condition: 'condition',
					result: 'result'
				}
			},
			'inProcessWorkViewready': {
				xclass: 'iih.mr.qa.process_qa_search.action.InProcessWorkViewreadyAction',
				blocks: {
					condition: 'condition',
					result: 'result'
				}
			}
		},

		chains: {
			'search': ['search'],
			'judgeBtn':['judgeBtn'],
			'look':['look'],
			'inProcessWorkViewready':['inProcessWorkViewready']
		},

		connections: {
			'condition':[{
                selector: 'comboxgrid[method=curDeptNm]',
                event: 'combochange',
                chain: 'search'
			},{
                selector: 'comboxgrid[name=currentManageDoctorName]',
                event: 'combochange',
                chain: 'search'
			}],
			'result': [{
				selector: 'xapgrid',
				event : 'viewready',
				chain: 'inProcessWorkViewready'
			},{
				selector: 'xapgrid',
				event : 'itemclick',
				chain: 'judgeBtn'
			},{
				selector: 'xapgrid',
				event: 'itemdblclick',
				chain: 'look'
			},{//翻页操作
				selector: 'xapgrid',
				event: 'turnpage',
				chain: 'search'
			}],
			'toolbar': [{
				selector: 'button[action=search]',
				event: 'click',
				chain: 'search'
			}]
		}
	},
		
	initComponent : function() {
			this.callParent();
			this.addEvents("pageRefresh");//为视图添加刷新事件
			this.addListener('pageRefresh', function(){//添加监听事件
				 var properties = this.getLayer(Xap.ej.block.Layer.PROPERTIES);
		        var chain = this.getActionChain('search');
		        var block = this.getBlock('result');
//		        var pageSize = block.pageSize;
		        if(properties.data == undefined){
		        	 if(chain) {
		            chain.execute({});
		        	}
		        }else{
		        	var pageSize = properties.data.pageSize;
			        var pageNum = properties.data.pageNum;
			        if(chain) {
			            chain.execute({
			            	pageSize:pageSize,
			            	pageNum:pageNum
			            });
			        }
		        }
			});
		}
})
Ext.define('iih.mr.qa.dept_qa_patient.action.DeptQAPatientListSearchAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override
	*/
	execute: function(context) {
		if(context.event != undefined && context.event.name=='combochange' && context.event.from.rawValue != ""){
			return;
		}
		this.showLoading();
		var block = this.getBlock('result');
		var pageNum,pageSize;
		if(context.event == undefined){
			pageNum = context.pageNum; 
			pageSize = context.pageSize; 
		}else{
			pageNum = context.event.arguments[0]; 
			pageSize = context.event.arguments[1]; 
		}
		block.pageSize = pageSize;
		var data = {
			pageNum : pageNum,
			pageSize : pageSize,
			curDeptNm : context.curDeptNm
		}
    	var owner = this.getOwner();
        var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
        properties.setData({
            parentWindow: context.parentWindow,
            sourceView: context.sourceView,
            pageSize:pageSize,
            pageNum:pageNum
        });
    	var operations = context.operations;
    	if(!operations) {
    		return;
    	}
    	this.prepareOperations(operations,data);
    },
    
    prepareOperations: function(operations,data) {
        var block = this.getBlock('condition');
    	var condition = block.getData();
    	if(data.curDeptNm != undefined){
    		condition.curDeptNm = data.curDeptNm;
    	}
        var url = this.url;
        var pageNum = data.pageNum; 
		var pageSize = data.pageSize; 
		var amrStatus = iih.mr.qa.QaStatusGlobal.writeCompleted; //病案状态为书写已完成
		var qaTypeCode = iih.mr.qa.QaStatusGlobal.qaTypeCodeDept; //质控类型为科室质控
        if(condition) {
            var qs = Ext.Object.toQueryString(condition);
//            alert(qs);
            	if(data.pageSize == undefined || typeof(data.pageSize)=='object'){
            		if(qs) {
            			url += '?' + qs +"&amrStatus=" + amrStatus +"&qaTypeCode=" +qaTypeCode;
            		}else{
            			url += '?' +"amrStatus=" + amrStatus+"&qaTypeCode=" +qaTypeCode;
            		}
            	}else{
            		if(qs) {
                		url += '?' + qs +"&amrStatus=" + amrStatus +"&qaTypeCode=" +qaTypeCode +"&pageNum="+ pageNum +"&pageSize="+ pageSize;
            		}else{
            			url +='?' + "amrStatus=" + amrStatus +"&qaTypeCode=" +qaTypeCode + "&pageNum="+ pageNum +"&pageSize="+ pageSize;
            		}
            	}
            console.log(url);
        }
        var mclass = null;
        if(block.getModelClass) {
            mclass = block.getModelClass();
        }
    	var operation = {
            url: url,
    		mclass: mclass,
    		method: 'get',
    		condition: condition,
    		scope: this,
    		success: this.onSuccess
    	};
    	operations.length = 0;
    	operations.push(operation);
    },

    onSuccess: function(operation) {
        var block = this.getBlock('result');
        var pageSize = block.pageSize;
        var m = operation.result;
        m.pageSize = pageSize;
        // TODO 数据格式就这样了？
        if(m instanceof Ext.data.Model) {
            block.setData({
                mclass: operation.mclass,
                data: m.getData(true)
            });
        }
        else {
        	block.setData(m);
        	console.log(m);
        }
        
         //判断按钮状态
        var grid = block.down('xapgrid');
        if(grid){
		    var rs = grid.getSelectionModel().getSelection();
		    var inBtn = grid.down('button[name=inDept]');
//			var finishBtn = grid.down('button[name=finishDept]');
			var back = grid.down('button[name=back]');
			if(rs.length > 0){
				inBtn.setDisabled(false);
//				finishBtn.setDisabled(false);
				back.setDisabled(false);
			}else{
				inBtn.setDisabled(true);
//				finishBtn.setDisabled(true);
				back.setDisabled(true);
			} 
        }
    }
});

/** 
 * 科室质控页面加载完成后查找到tools上的相关按钮进行事件的监听
 * @extends Xap.ej.action.Action
 * @author ：yao_lijie
 */

Ext.define('iih.mr.qa.dept_qa_patient.action.DeptViewreadyAction', {
	extend:  Xap.ej.action.Action ,
	
	requires:[],
	      
	execute: function(context){
		var me = this;
		
	    var owner = this.getOwner();
	    
	    //获取就诊一览的 block
		var resultBlock = this.getBlock('result');	
		var deptGrid = resultBlock.down('xapgrid');
		
		//打回按钮
		var back = deptGrid.down('button[method=back]');
		back.on('click',function(btn){
			XapMessageBox.confirm2 (
			'确认打回？',
			function(btn){
				if(btn == 'yes'){
					context.event.name='deptclick';
					var backChain = me.getOwner().getActionChain("back");
					backChain.execute(context);
				}
			});
		});
		
		//进入科室质控按钮
		var inDept = deptGrid.down('button[method=inDept]');
		inDept.on('click',function(btn){
			context.event.name='click';
			var inDeptChain = me.getOwner().getActionChain("inDept");
			inDeptChain.execute(context);
		});

		/*//完成科室质控按钮
		var finishDept = deptGrid.down('button[name=finishDept]');
		finishDept.on('click',function(btn){
			context.event.name='finishDeptClick';
			var finishDeptChain = me.getOwner().getActionChain("finishDept");
			finishDeptChain.execute(context);
		});*/
	}
})
/** 
 * 点击记录，判断按钮状态
 * @author ：yao_lijie
 */
Ext.define('iih.mr.qa.dept_qa_patient.action.JudgeBtnAction', {
	extend:  Xap.ej.action.Action ,
	
	execute: function(context) {
		var block = this.getBlock('result');
		var grid = block.down('xapgrid');
		//科室质控进入科室质控按钮
		var inDept = grid.down('button[method=inDept]');
		inDept.setDisabled(false);
		var back = grid.down('button[name=back]');
		back.setDisabled(false);
	}
});

Ext.define('iih.mr.qa.dept_qa_patient.block.DeptQAPatientListBlock',{
	extend :  Xap.ej.block.FormBlock ,
	
	requires: [],

	alias:'widget.deptqapatientlistblock',
	
	border: 0,

	items: [{
//		title: '环节质控患者查询',
		xtype: 'xapform',
	layout: {
		type: 'table',
		columns: 3,
		//width: 1024,
		tableAttrs: {
            border: 0,
            cellpadding: 0,
            cellspacing: 1,
            width: '100%',
            height:56
        },
        tdAttrs: {
            valign: 'left'
        }
	},
	items:[
	    {
			xtype:'comboxgrid',
			margin:'10 0 10 0',
			name:'curDeptNm',
			method:'curDeptNm',
			url: 'organization/keyword',//科室查询的url
			fieldLabel:'科室',
			labelAlign : 'right',
			labelWidth : 50,
			listWidth:230,    //gird的宽度
			width:210,        //combo的宽度
			valueField : 'code',//科室编码的字段名
			displayField: 'name',//科室名称的字段名
			columns: [{              //grid的column配置
			   text: '科室编码',
			   dataIndex: 'code',
			   width:80
			},{
			   text: '科室',
			   flex:1,
			   dataIndex: 'name'
			}],
			callback:function(newValue,oldValue,record){  //在grid选择记录后的回调函数
				var view = this.up('deptqapatientlistview');
				var initChain = view.getActionChain('search');
				initChain.execute({
					curDeptNm:newValue
				});
			    /*console.log(newValue);     //本次选择的科室编码
			    console.log(oldValue);     //上次选择的科室编码
			    console.log(record);       //本次选择的科室完整记录
*/			}
	},{
		xtype:'xaptextfield',
//		width:140,
        name:'amrNo',
        labelWidth:50,
        labelAlign:'right',
        fieldLabel:'住院号',
        listeners:{
        	specialkey : function(field, e) {  
                if (e.getKey() == Ext.EventObject.ENTER) {  
                    var view = this.up('deptqapatientlistview');
					var initChain = view.getActionChain('search');
					initChain.execute({}); 
                }  
            }
        }
	},{
		xtype:'xaptextfield',
//		width:140,
        name:'patientName',
        labelWidth:60,
        labelAlign:'right',
        fieldLabel:'患者姓名',
        listeners:{
        	specialkey : function(field, e) {  
                if (e.getKey() == Ext.EventObject.ENTER) {  
                    var view = this.up('deptqapatientlistview');
					var initChain = view.getActionChain('search');
					initChain.execute({}); 
                }  
            }
        }
	}]
	}]
})
var widthRate = 1
Ext.define('iih.mr.qa.dept_qa_patient.block.DeptQAPatientListGridBlock',{
	extend :  Xap.ej.block.Block ,
	
	requires: [],

	alias:'widget.deptqapatientlistgridblock',
	
	layout: 'fit',
	border: 0,

    items:  [{
        xtype: 'xapgrid',
        ifSelect : true,
        selectBy: 'pk',
		title: '就诊患者一览',
		tools:[{
		           xtype:'button',
		           name:'back',
		           text:'打回',
		           method:'back',
           		   disabled : true
       			},{
				   xtype: 'label',		              
			       width:10
			   },{
			       xtype:'button',
			       name:'inDept',
			       iconCls: 'icon-inTerminal',
			       text:'进入科室质控',
			       method:'inDept',
           		   disabled : true
			   }/*,{
				   xtype: 'label',		              
			       width:10
			   },{
			       xtype:'button',
			       name:'finishDept',
			       iconCls: 'icon-Open',
			       text:'完成科室质控',
			       method:'finishDept',
           		   disabled : true
       		}*/],
		autoScroll:true,
//		height:520,
		pageSize : 25,
		pageShow : true,
  		CM_JR_Record: [   
  				{xtype:'xapactioncolumn',text:'操作',width : 60,
				items: [
					/*{text:'打回',
						handler: function(view,rowIndex,colIndex,e,item ,record) {
							var owner = this.up('deptqapatientlistview');
							XapMessageBox.confirm2 (
							'确认打回？',
							function(btn){
								if(btn == 'yes'){
									var backChain = owner.getActionChain("back");
									backChain.execute({
										record:record,
										eventNm:'deptclick'
									});
								}
							});
						}	
					},*/
					{text:'完成',
						isDisabled : function(view,rowIndex,colIndex,item ,record) {
							var btnFlag = record.data.btnFlag;
							if(btnFlag == '1'){
								return true;
							}else{
								return false
							}
						},
						handler: function(view,rowIndex,colIndex,e,item ,record) {
							var owner = this.up('deptqapatientlistview');
							var finishDeptChain = owner.getActionChain("finishDept");
							finishDeptChain.execute({
								record:record,
								eventNm:'finishDeptClick'
							});
						}	
					}
				]
			},
				{ header : '按钮状态',dataIndex : 'btnFlag', field: 'textfield',type: 'string',hidden:true },
  				{  dataIndex: 'pk',field: 'textfield',type: 'string',flex:1 ,hidden:true},
  				{  dataIndex: 'patientId',field: 'textfield',type: 'string',flex:1 ,hidden:true},
  				{ header: '床位号', dataIndex: 'currentBedCode',field: 'textfield',type: 'string',flex:1,hidden:true},
  				{  dataIndex: 'curMainDiNm',field: 'textfield',type: 'string',flex:1 ,hidden:true},
  				{  dataIndex: 'currentDeptIntoTime',field: 'textfield',type: 'string',flex:1 ,hidden:true},
  				{  header: '当前科室编码', dataIndex: 'currentDeptCode',field: 'textfield',type: 'string',flex:1 ,hidden:true},
  				{  header: '当前科室名称', dataIndex: 'currentDeptName',field: 'textfield',type: 'string',flex:1 ,hidden:true},
  				{  header: '主管医生编码', dataIndex: 'currentManageDoctorId',field: 'textfield',type: 'string',flex:1 ,hidden:true},
  				{  header: '主管医生名称', dataIndex: 'currentManageDoctorName',field: 'textfield',type: 'string',flex:1 ,hidden:true},
  				{  header: '标记', dataIndex: 'qaFlag',name: 'qaFlag',width:50,
  				renderer:function(value,metaData,record){
			        if(value == 1){
			        	return "<label>★</label>";
			        }else{
			        	return null;
			        	}
					}
  				},//质控标记
  				{ header: '住院号', dataIndex: 'amrNo',field: 'textfield',type: 'string',width:90},
  				{ header: '患者姓名', dataIndex: 'patientName',field: 'textfield',type: 'string',width:80},
                { header: '性别', dataIndex: 'sexName',field: 'textfield',type: 'string',width:60 },
                { header: '年龄', dataIndex: 'age',field: 'textfield',type: 'string',width:60 },
                { header: '住院科室', dataIndex: 'currentDeptName',field: 'textfield',type: 'string',width:110 },
                { header: '入院时间', dataIndex: 'receiveTime',xtype: 'xapdatecolumn',flex:1},
                { header: '出院时间', dataIndex: 'finishTime',xtype: 'xapdatecolumn',flex:1 },
                { header: '主诊断', dataIndex: 'currentMainDiagnosisName',field: 'textfield',type: 'string',flex:1 },
                { header: '手术标识', dataIndex: 'surgeryFlag',name: 'surgeryFlag',
					renderer:function(value,metaData,record){
			        if(value == 1){
			        	return "<div style='text-align:center'><label style='align:center'>√</label></div>";
			        }else{
			        	return null;
			        	}
					}
				},
				
                { header: '缺陷数', dataIndex: 'faultTotal',field: 'textfield',type: 'int',width:60 }
        ]
    }],
    setData: function(data) {
        	var grid = this.down('xapgrid');
        	var dataList = data.dataList;
        	if(grid){
        		if(dataList){
			    	var totalList = {"total":data.total,"dataList":dataList};
			    	var pageSize = data.pageSize;
			    	if(pageSize == undefined || typeof(data.pageSize) == 'object'){
			    		grid.setPageData(totalList);	//初始化赋值
			    	}else{
			    		grid.setData(dataList);	//翻页时赋值
			    	}
	        	}else{
	        		var totalList = {"total":data.total,"dataList":data.dataList};
	        		grid.setPageData(totalList);
	        	}
        	}
    	}             
})

Ext.define('iih.mr.qa.terminal_qa_patient.action.TerminalBackAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override
	*/
	execute: function(context) {
		var data = context.data;
		var rb = this.getBlock('result');
		if(context.event == undefined){
			var eventNm = context.name;
		}else{
			var eventNm = context.event.name;
		}
		
//		var eventNm = context.eventNm;
		var grid;
		if(eventNm == 'deptclick'){
			grid = rb.down('xapgrid');
		}else if(eventNm == 'terminalclick'){
			grid = rb.down('xapgrid[name=alreadySignGrid]');
		}
		rb.eventNm = eventNm;
		var rs = grid.getSelectionModel().getSelection()[0];
//		var rs = context.record;
		rb.rs = rs;
		if(rs.data){
			var enPk = rs.data.pk; //就诊外键
			var operations = context.operations;
			var url = this.url;
			url += '/'+enPk;
			var METHODS = this.getInvocationMethods();
		    var mclass = null;
			var operation = {
				url : url,
				method: 'put',
				scope : this,
				success : this.onSuccess
				// fail: this.onFail
			};
			operations.length = 0;
			operations.push(operation);
		}else{
			XapMessageBox.info("请选择患者！");
			return;
		}
	},
	onSuccess : function(operation) {
		var view = this.getOwner();
		var block = this.getBlock('result');
		var eventNm = block.eventNm;
		var grid;
		if(eventNm == 'deptclick'){		//判断是科室质控的打回还是终末质控的打回
			grid = block.down('xapgrid');
		}else if(eventNm == 'terminalclick'){
			grid = block.down('xapgrid[name=alreadySignGrid]');
		}
		var rs = block.rs;
		var pageSize = block.pageSize;
		var initChain = view.getActionChain('search');
		initChain.execute({
			rs:rs,
			pageSize:pageSize
		});
	}     
});


/** 
 *
 * 一个用于简化列定义的子类，适用于数值类型的渲染，仅需配置format属性。
 * @extends Ext.grid.column.Number
 * 
 * @author ：chenyajie<chen_yajie@founder.com>
 **/

Ext.define('Xap.ej.element.grid.column.RowNumberer', {
	extend :  Ext.grid.column.RowNumberer ,
	alias : ['widget.xaprownumberer']
});

/** 
 * 缺陷一览BLOCK
 * @extends Xap.ej.block.Block
 * @author ：wang_yanli
 */

Ext.define('iih.mr.qa.process_qa_work.block.DefectsInBlock',{
	extend :  Xap.ej.block.Block ,
	
	requires: [],

    alias:'widget.defectsinblock',
	layout: 'fit',
    items:[{
    	
    	xtype : 'xapgrid',
		name : 'defectingrid',
		rownumShow:false,
		//height : 170,
		title:'缺陷一览',
		plugins : [Ext.create('Xap.ej.element.grid.plugin.CellEditing', {
			clicksToEdit : 1
		})],
		tools:[{
				xtype: 'xapbutton',
				text: '提缺陷',
				action: 'defectsin'
				//disabled:true
			},{
				xtype: 'tbspacer',
				padding:'0 10 0 0'
			}/*,{
				xtype: 'xapbutton',
				text: '编辑',
				action: 'editDefect',
				disabled:true
			},{
				xtype: 'tbspacer',
				padding:'0 10 0 0'
			},{
				xtype: 'xapbutton',
				text: '删除',
				action: 'defectDelete',
				disabled:true
			},{
				xtype: 'tbspacer',
				padding:'0 10 0 0'
			}*/,{
				xtype: 'xapbutton',
				text: '完成本次质控',
				action: 'defectsfinish',
				margin:'0 10 0 0'
		    },{
               itemId: 'up',
               hidden: false,
               xtype: 'tool',
               type: 'up'
           }, {
               itemId: 'down',
               hidden: true,
               xtype: 'tool',
               type: 'down'
        }],  		
		CM_JR_Record:[{
			header : '缺陷主键',
			name: 'qaFltPk',
			dataIndex : 'qaFltPk',
			hidden:true
		},{
			header : '质控项目主键',
			name: 'qaItemPk',
			dataIndex : 'qaItemPk',
			hidden:true
		},{
			header : '病案主键',
			name: 'mrPk',
			dataIndex : 'mrPk',
			hidden:true
		},{
			header : '缺陷状态编码',
			name: 'statusCode',
			dataIndex : 'statusCode',
			hidden:true
		},{
			header : '扣分说明',
			name: 'dropDescription',
			dataIndex : 'dropDescription',
			hidden:true
		},{
			header : '需整改标志',
			name: 'canReform',
			dataIndex : 'canReform',
			hidden:true
		},{
			header : '缺陷确认结果',
			name: 'faultConfirmResult',
			dataIndex : 'faultConfirmResult',
			hidden:true
		},{
			header : '序号',
			name: 'defectsNo',
			xtype:'xaprownumberer',
		    width:30
		},{ xtype:'xapactioncolumn',
			text:'操作',
			width:90,
			defectStore: null,
			items: [
				{
					text : '编辑',
					id:'editDefect',
					handler : function(view, rowIndex, cellIndex, e,item, record) {
						var defectinAndmreditview = this.up('defectinAndmreditview');
						var editDefectChain = defectinAndmreditview.getActionChain("editDefectAction");
						editDefectChain.execute(record);
						
					}
				},{ 
					text : '删除',
					handler : function(view, rowIndex, cellIndex, e,item, record) {	
						var defectinAndmreditview = this.up('defectinAndmreditview');
						XapMessageBox.confirm2(
							'确认删除？',
			   				function(btn){
							if(btn=="yes"){
								var defectDeleteChain = defectinAndmreditview.getActionChain("deleteDefectsAction");
								defectDeleteChain.execute(record);
							}
						});}
				}
			]
		}
		,{
			header : '缺陷状态',
			name: 'fltStaNm',
			dataIndex : 'fltStaNm',
			width:70
		},{
			header : '病历文书',
			name: 'mrName',
			dataIndex : 'mrName',
			width:120,
			renderer:function(value){
				if(value){
					return "<a class='link' href='#'>"+value+"</a>";
				}
		    }
		},{
			header : '缺陷描述',
			name: 'req',
			dataIndex : 'req',
			flex:1
		},{
			header : '扣分标准',
			name: 'deductDes',
			dataIndex : 'deductDes',
			width: 60
		},{
			header : '缺陷次数',
			name: 'deductScrTimes',
			dataIndex : 'deductScrTimes',
			width:60
		},{
			header : '提出日期',
			xtype: 'xapdatecolumn',
			name: 'sbmtTime',
			dataIndex : 'sbmtTime',
			width:115/*,
			format:'Y-m-d'*/
		},{
			header : '提出人',
			name: 'crtUserNm',
			dataIndex : 'crtUserNm',
			width:60
		},{
			header : '整改说明',
			name: 'rfmDes',
			dataIndex : 'rfmDes'
			/*renderer:function(value,metaData,record){
				return record.data.reformRequirement +"/"+record.data.dropDescription;
			},
            getEditor:function(record,defaultField ) {
            	 
            	 if(record.data.canEdit == 0){
            		 return null;
            	 }else if(record.data.faultConfirmResult==iih.mr.qa.QaStatusGlobal.FaultConfirmStatus){
            		 return null;
            	 }else{
            		 return Ext.create('Xap.ej.element.field.TextField');
            	 }
	           	
            }*/
		},{
			header : '整改人',
			name: 'rfmUserNm',
			dataIndex : 'rfmUserNm',
			width:60
		}/*,{
			header : '提出科室',
			name: 'submittedDeptName',
			dataIndex : 'submittedDeptName',
		}*/]
    }]

})
/** 
 * 编辑器面板
 * @extends Xap.ej.block.Block
 * @author ：wang_yanli
 */

Ext.define('iih.mr.qa.process_qa_work.block.QaMrEditBlock',{
	//extend : 'Xap.ej.block.Block',
	extend :  Xap.ej.block.FormBlock ,
	
	                                            

    alias:'widget.qamreditblock', 
    
    layout: 'fit',
    
    bodyStyle: 'background:#F0F0F0;',//gray
       
    /*items: [{
    	xtype : 'xapcombobox',
		labelWidth : 60,
		labelAlign : 'right',
		name : 'userStatusCode',
		//dictionary : 'MRM010',
		dictionary:'QAM01',
		padding:'0 80 0 0',
		action:'defectsinstatus'
    }]*/
     hasEdit: function() {
        var plugin = document.getElementById('iemrEditor');
        if (plugin != undefined &&plugin.valid&&plugin.IsModified()) {
            return true;
        } else {
            return false;
        }
    }

})
/** 
 * 缺陷一览页面加载完成后查找到相关按钮进行事件的监听
 * @extends Xap.ej.action.Action
 * @author ：wu_guocheng
 */

Ext.define('iih.mr.qa.process_qa_work.action.DefectInViewreadyAction', {
	extend:  Xap.ej.action.Action ,
	
	requires:[],
	      
	execute: function(context){
		
		var me = this;
		
	    var owner = this.getOwner();
	    
	    //获取缺陷一览的 block
		var block = this.getBlock('bottomcontent');
		
		var defectsinGrid = block.down('xapgrid');
		
		
		var rs = [{ 
				'pk':'pk',
   				'qaItemPk':'qaItemPk',
   				'qaSystemItemCode':'qaSystemItemCode',
   				'reformRequirement': 'Lisa',
   				'reformFlag':1,
   				'statusCode':'QAM01.04',
   				'dropFlag':1,
   				'reformRequirement':'xxxxx',
   				'dropDescription':'yyyy',
   				'canEdit':1,
   				'canReform':1,
   				'faultConfirmResult':'QAM07.01'
   			},
   			{ 
   				'pk':'pk',
   				'qaItemPk':'qaItemPk',
   				'qaSystemItemCode':'qaSystemItemCode',
   				'reformRequirement': 'Lisa111',
   				'reformFlag':1,
   				'statusCode':'QAM01.04',
   				'dropFlag':0,
   				'reformRequirement':'xxxxx',
   				'dropDescription':'yyyy',
   				'canEdit':1,
   				'canReform':1,
   				'faultConfirmResult':'QAM07.01'
   			}];
		
		//defectsinGrid.setData(rs);
		
		//提缺陷按钮
		var defectsin = block.down('button[action=defectsin]');
		
		
		//完成本次质控按钮
		var defectsfinish = block.down('button[action=defectsfinish]');
		
		//向上按钮
		var up = block.down('tool[itemId=up]');
		
		//向下按钮
		var down = block.down('tool[itemId=down]');
		
		/*//保存按钮
		var defectssave = block.down('button[action=defectssave]');*/
		
		/*//编辑缺陷按钮
		var editDefect = grid.down('xapactioncolumn[id=editDefect]');
		
		//删除缺陷按钮
		var defectDelete = block.down('button[action=defectDelete]');*/
		
		
		//提缺陷按钮监听
		defectsin.on('click',function(btn){
			var popupFaultInputViewChain = owner.getActionChain("popupFaultInputViewAction");
			popupFaultInputViewChain.execute();
		});
		
		//完成本次质控按钮监听
		defectsfinish.on('click',function(btn){
			var popupDefectNoticeInferViewChain = owner.getActionChain("popupDefectNoticeInferViewAction");
			popupDefectNoticeInferViewChain.execute();
		});
		
		/*//保存按钮 监听
		defectssave.on('click',function(btn){
			var defectssaveChain = owner.getActionChain("saveDefectsAction");
			defectssaveChain.execute();
		});
		
		editDefect.on('click',function(btn){
			var editDefectChain = owner.getActionChain("editDefectAction");
			editDefectChain.execute();
		});
		
		
		//删除按钮 监听
		defectDelete.on('click',function(btn){
			XapMessageBox.confirm2(
				'确认删除？',
   				function(btn){
				if(btn=="yes"){
					var defectDeleteChain = owner.getActionChain("deleteDefectsAction");
					defectDeleteChain.execute();
				}
			});
			
		});*/
		
        down.addListener('click', function() {
            me.minimize(block);
            up.show();
            down.hide();
        });
        up.addListener('click', function() {
            me.maximize(300,block);
            up.hide();
            down.show();
        });
        
        //表头
		var tbar = defectsinGrid.down('header');
        tbar.addListener('dblclick', function() {
            if(down.hidden==false){
               me.minimize(block);
               up.show();
               down.hide();
            }else{
               me.maximize(300,block);
               up.hide();
               down.show();
            }
        });

	},
    
    maximize: function(h,block) {
        block.setHeight(h);
    },
    
    minimize: function(block) {
        block.setHeight(170);
    }
	
})

/** 
 *
 * 一个用于简化列定义的子类，适用于数值类型的渲染，仅需配置format属性。
 * @extends Ext.grid.column.Number
 * 
 * @author ：chenyajie<chen_yajie@founder.com>
 **/

Ext.define('Xap.ej.element.grid.column.Number', {
	extend :  Ext.grid.column.Number ,
	alias : ['widget.xapnumbercolumn']
});

/** 
 *
 * 数值编辑框
 * @extends Ext.form.field.Number
 * @author：chenyajie<chen_yajie@founder.com>
 * 
 *
 */
Ext.define('Xap.ej.element.field.NumberField', {
	extend:  Ext.form.field.Number ,
	alias: 'widget.xapnumberfield'
});
/** 
 *
 * 数值范围编辑框
 * @extends Ext.form.field.Number
 * @author：chenyajie<chen_yajie@founder.com>
 * 
 *
 */
Ext.define('Xap.ej.element.field.RangeNumberField', {
	extend:  Ext.form.field.Number ,
	alias: 'widget.rangenumberfield',
	value: 99,
	maxValue: 100,
	minValue: 0
});
/** 
 * 缺陷录入BLOCK
 * @extends Xap.ej.block.Block
 * @author ：wu_guocheng
 */

Ext.define('iih.mr.qa.process_qa_work.block.FaultInputBlock',{
//	extend : 'Xap.ej.block.Block',
	extend :  Xap.ej.block.FormBlock ,
	
	requires: [],

    alias:'widget.faultinputblock',
    
    layout: {
		type: 'table',
		columns: 4,
		//width: 1024,
		tableAttrs: {
            border: 0,
            cellpadding: 0,
            cellspacing: 1,
            width: '100%'
//            height:76
        },
        tdAttrs: {
            valign: 'left'
        }
	},
    
    buttons:[{
            xtype: "button",
            name: 'save',
            action:'save',
            text: '确认',
            iconCls: 'icon-OK'
        },{
            xtype: "button",
            name: 'cancel',
            action:'cancel',
            text: '取消' ,
            iconCls: 'icon-cancel' 
    }],
    
    items:[{
		xtype: 'xapcheckbox',
		boxLabel : '',
		action: 'associateMr',
		name:'associateMr',
		disabled:false,
		padding:'10 0 8 10'
	},{
    	xtype:'xaptextfield',
		name:'mrTypeName',
		//labelAlign : 'left',
		fieldLabel:'当前文书',
		labelWidth:60,
		width:200,
		padding:'0 10 0 0'
    },{
        xtype:'xapcombobox',
        name:'qaItmFst',
        padding:'10 0 8 0',
        labelWidth:80,
        width:220,
        editable:false,
        allOptions: false,
        fieldLabel:'病案评分类别',
        queryMode: 'local',
        displayField: 'nm',
        valueField: 'fstCd'
    },{
        xtype:'xapcombobox',
        //name:'mrTypeCd',
        name:'qaItmSnd',
//        padding:'10 0 10 25',
        labelWidth:60,
        width:260,
        value:'ALL',
        editable:false,
        allOptions: true,
        fieldLabel:'二级分类',
        queryMode: 'local',
        displayField: 'nm',
        valueField: 'sndCd'
    },{
    	xtype:'xaptextfield',
		name:'mrCreateUserCode',
		//labelAlign : 'left',
		fieldLabel:'起草人',
		labelWidth:60,
		width:200,
		hidden:true,
		padding:'0 10 0 0'
    },{
    	xtype:'xaptextfield',
		name:'mrCreateDeptCode',
		//labelAlign : 'left',
		fieldLabel:'起草科室',
		labelWidth:60,
		width:200,
		hidden:true,
		padding:'0 10 0 0'
    },{     
    	
    	xtype : 'xapgridblock',
		name : 'faultinputgrid',
//		title:'[入院记录]质控项目',
		colspan : 4,
		height:320,
		rownumShow:true,
		plugins : [Ext.create('Xap.ej.element.grid.plugin.CellEditing', {
			clicksToEdit : 1
		})],
//	    gridData:[
//		   			{ 'cs':1,'faultSelect': false,'onceDropScore':'xx' },
//		   			{ 'cs':1,'faultSelect': false,'onceDropScore':'tt' }
//		   			
//		   		],
		 		
		CM_JR_Record:[{
			header : '新质控项目编码',
			name: 'qaItmCd',
			dataIndex : 'qaItmCd',
			hidden:true
		},{
			header : '单次扣分值',
			name: 'onceDropScore',
			dataIndex : 'onceDropScore',
			hidden:true
		},{
			header : '累计最大扣分值',
			name: 'maxDropScore',
			dataIndex : 'maxDropScore',
			hidden:true
		},{
			header : '默认整改标志',
			name: 'defaultReformFlag',
			dataIndex : 'defaultReformFlag',
			hidden:true
		},{
			header : '自动质控标志',
			name: 'autoQaFlag',
			dataIndex : 'autoQaFlag',
			hidden:true
		},{
			header : '质控扣分类型名称',
			name: 'qaDropScoreTypeName',
			dataIndex : 'qaDropScoreTypeName',
			hidden:true
		},{
			header : '质控项目类型编码',
			name: 'qaItemTypeCode',
			dataIndex : 'qaItemTypeCode',
			hidden:true
		},{
			header : '质控扣分类型编码',
			name: 'qaDrpScrTpCd',
			dataIndex : 'qaDrpScrTpCd',
			hidden:true
		},/*{
			text : '',
			xtype:'xapcheckcolumn',
			name: 'faultSelect',
			dataIndex : 'faultSelect',
			width:30
			
		},*/{
			header : '评分项目',
			name: 'req',
			dataIndex : 'req',
			width:400
		},{
			header : '扣分标准',
			width:130,
			dataIndex : 'deductDes',
			name: 'deductDes'
		},{
			header : '扣分次数',
			name: 'deductScrTimes',
			dataIndex : 'deductScrTimes',
			flex:1,
			//width:110,
			getEditor:function(record,defaultField ) {
				//质控扣分类型编码为每次的都可编辑,默认值就是1
			   if(record.get('qaDrpScrTpCd')=='QAM02.02'){
				   return {
					   xtype:'rangenumberfield',
					   value: 1,
					   maxValue: 10,
					   minValue: 1,
					   listeners:{
							 change:function(me,newVal,oldVal,eOpts ){
								  var val = me.getValue();
								  var faultGrid = me.up('xapgrid');
								  var selModel=faultGrid.getSelectionModel();
							 	  var record=selModel.getSelection()[0];
								  record.set('deductScrTimes',val);
								  record.set('faultSelect',true);
							 }
					   }
				 };
				  
			   }else{
				   return null;
			   }
	          
            }
		},{header: '自动质控标识',dataIndex: 'autoQaF',name:'autoQaF',width:100,
         	renderer:function(value,metaData,record){
		        if(value ==  "1"){
		        	return "<div style='text-align:center'><label style='align:center'>√</label></div>";
		        }else{
		        	return null;
		        }
			}
		}]
    },{
			xtype : 'xaptextarea',
			fieldLabel : '整改说明',
			colspan : 4,
			labelWidth:80,
			labelAlign : 'right',
			padding:'10 0 8 10',
			height:40,
			width: 740,
			name: 'rfmDes',
			dataIndex : 'rfmDes'
		}]

})
Ext.define('iih.mr.qa.process_qa_work.action.QaItmFstSearchAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override
	*/
	execute: function(context) {
		//获取质控项目block
		var block = this.getBlock('content');
		
		var data = {
        	encounterPk:context.encounterPk,
        	mrTypeCode:context.mrTypeCode,
        	mrTypeName:context.mrTypeName,
			mrCreateUserCode:context.mrCreateUserCode,
			mrCreateDeptCode:context.mrCreateDeptCode,
        	mrSegmemtTypeCode:context.mrSegmemtTypeCode,
        	firstCode:context.firstCode
        };
        block.data = data;
	    this.prepareOperations(context.operations);
    },
    prepareOperations: function(operations) {
        var url = this.url;
        var operation = {
                url: url,
                method: 'get',
                scope: this,
                success: this.onSuccess
            };
        operations.length = 0;
        operations.push(operation);
    },
    onSuccess: function(operation) {
        var block = this.getBlock('content');
        var mrTypeNameStatus = block.down('[name=mrTypeName]');
        var data = block.data;
        var qaItmFst=block.down('[name=qaItmFst]');
        var qaItmSnd=block.down('[name=qaItmSnd]');
        var mrTypeName = data.mrTypeName;
        var mrCreateUserCode = data.mrCreateUserCode;
        var mrCreateDeptCode = data.mrCreateDeptCode;
        var associateMr = true;
        if((mrTypeName == undefined || mrTypeName == '') && (mrTypeNameStatus != null)){
        	associateMr = false;
        	mrTypeNameStatus.setDisabled('true');
        }
        var setData = {'associateMr':associateMr,'mrTypeName':mrTypeName,'mrCreateUserCode':mrCreateUserCode,'mrCreateDeptCode':mrCreateDeptCode};
        
        if(block){
        	block.setData(setData);
        }else{
        	return;
        }
        
        if(operation.result.data){
            qaItmFst.setData(operation.result.data.qaItmFstCategory);
            qaItmSnd.setData(operation.result.data.qaItmSndCategory);
            if(data.firstCode == '' || data.firstCode == undefined){
            	qaItmFst.selectAt(0);
            }else{
            	qaItmFst.select(data.firstCode);
            }
        }
    }
});

Ext.define('iih.mr.qa.process_qa_work.action.QaItmSndSearchAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override
	*/
	execute: function(context) {
	    this.prepareOperations(context.operations);
    },
    prepareOperations: function(operations) {
        var block = this.getBlock('content');
        var qaItmFst=block.down('[name=qaItmFst]').getValue();
        var condition={"qaItmFst":qaItmFst};
        var url = this.url;
        if(condition) {
            var qs = Ext.Object.toQueryString(condition);
            if(qs) {
                url += '?'+qs;
            }
        }
        var operation = {
                url: url,
                method: 'get',
                condition: condition,
                scope: this,
                success: this.onSuccess
                // fail: this.onFail
            };
        operations.length = 0;
        operations.push(operation);
    },
    onSuccess: function(operation) {
    	var block = this.getBlock('content');
    	var data = block.data;
        var qaItmFst=block.down('[name=qaItmFst]');
        var qaItmSnd=block.down('[name=qaItmSnd]');
    	if(operation.result.dataList){
            qaItmSnd.setData(operation.result.dataList);
        }
        var qaItmFstValue = qaItmFst.getValue();
        qaItmSnd.select("ALL");
        var qaItmSndValue = qaItmSnd.getValue();
        if(qaItmSndValue == 'ALL'){
        	qaItmSndValue = "";
        }
        var view = this.getOwner();
        var initChain = view.getActionChain('init');
        initChain.execute({
        	qaItmFst: qaItmFstValue,
        	qaItmSnd : qaItmSndValue,
        	encounterPk:data.encounterPk,
    		mrTypeCode:data.mrTypeCode,
    		mrSegmemtTypeCode:data.mrSegmemtTypeCode
        });
    }
});

Ext.define('iih.mr.qa.process_qa_work.action.QaItmSearchAction', {
	extend:  Xap.ej.action.Action ,
	
	/*
	* @Override
	*/
	execute: function(context) {
	    var block = this.getBlock('content');
	    var data = block.data;
        var qaItmFstValue=block.down('[name=qaItmFst]').getValue();
        var qaItmSndValue=block.down('[name=qaItmSnd]').getValue();
        if(qaItmSndValue == 'ALL'){
            	qaItmSndValue = "";
            }
        var view = this.getOwner();
        var initChain = view.getActionChain('init');
        initChain.execute({
        	qaItmFst: qaItmFstValue,
        	qaItmSnd : qaItmSndValue,
        	encounterPk:data.encounterPk,
    		mrTypeCode:data.mrTypeCode,
    		mrSegmemtTypeCode:data.mrSegmemtTypeCode
        });
    }
});

/** 
 * 查询质控项目Action
 * @extends Xap.ej.action.ServiceInvocation
 * @author ：wang_yanli
 */

Ext.define('iih.mr.qa.process_qa_work.action.FaultInputSearchAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*   
	* @Override
	*/
	execute: function(context) {      
		
		/*var app = Xap.getApp();
		app.baseUrl = "http://172.18.73.65:8082/";
		app.chainExecutor.baseUrl= "http://172.18.73.65:8082/";*/
    
    	var owner = this.getOwner();
    	      
    	//获取质控项目block
		var block = this.getBlock('content');
		
		var defectinGrid = block.down('xapgrid');
    	
        var data = {
        	qaItmFst:context.qaItmFst,
        	qaItmSnd:context.qaItmSnd,
        	enPk:context.encounterPk,
        	mrTypeCode:context.mrTypeCode,
        	mrSegmemtTypeCode:context.mrSegmemtTypeCode
        };
        
        /*var data = {
        		enPk:'870719',
        		mrTypeCode:'MRM16.02',
        		mrSegmemtTypeCode:'MRM01.01'
        };*/
    	
    	var operations = context.operations;
    	if(!operations) {
    		return;
    	}
    	this.prepareOperations(operations,data);
    	
    	
    },
    prepareOperations: function(operations,data){
    	var qs = Ext.Object.toQueryString(data);
    	  var url = this.url+'?'+ qs;
        var mclass = null;
        var METHODS = this.getInvocationMethods();
    	var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_GET,
            condition: null,	
            data:data,
    		scope: this,
    		success: this.onSuccess
    	};
    	operations.push(operation);
    },
    onSuccess: function(operation) {
        
    	//获取质控项目block
		var block = this.getBlock('content');
		var defectinGrid = block.down('xapgrid');
	    var m = operation.result;
	    var listData = [];
	    if(null != m.dataList){
		      for(var i=0;i<m.dataList.length;i++){
		    	var obj = new Object();
		    	var rw = Ext.Object.merge(obj, m.dataList[i]);
	            rw.deductScrTimes = 1;
	            listData.push(rw);
		    }
	    }
	  
    	if(defectinGrid){
    	    defectinGrid.setData(listData);
    	}else{
    		return;
    	}

    }
});
/** 
 * 质控项目保存Action
 * @extends Xap.ej.action.ServiceInvocation
 * @author ：wu_guocheng
 */

Ext.define('iih.mr.qa.process_qa_work.action.FaultInputSaveAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	                                      
	
	/*   
	* @Override
	*/
	execute: function(context) {   
		
    	var owner = this.getOwner();
    	      
    	//获取质控项目block
		var block = this.getBlock('content');
	 	var isValid = block.getForm().isValid();
    	if(!isValid){
    		return;
    	}
		var rfmDes = block.getData().rfmDes;
		var qaItemGrid = block.down('xapgrid');
		
		var socuseOwner = owner.socuseOwner;
		var properties = socuseOwner.ownerCt.ownerCt.getLayer(Xap.ej.block.Layer.PROPERTIES);
    	
    	//参数处理
    	var selModel = qaItemGrid.getSelectionModel();
        var selRecord = selModel.getSelection()[0];
        if(selRecord == undefined){
        	XapMessageBox.info('请选择一条评分项目');
        }else{
        	 selRecord.data.rfmDes = rfmDes;
         	var listdata = this.getData(selRecord.data,properties,socuseOwner);
         	
         	var operations = context.operations;
         	if(!operations) {
         		return;
         	}
         	this.prepareOperations(operations,listdata);
        }
    	
    },
    prepareOperations: function(operations,data){
        var url = this.url;
        var mclass = null;
        var METHODS = this.getInvocationMethods();
    	var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_CREATE,
            condition: null,	
            data:data,
    		scope: this,
    		success: this.onSuccess
    	};
    	operations.push(operation);
    },
    onSuccess: function(operation) {
        
    	//获取质控项目block
		var block = this.getBlock('content');
		var defectinGrid = block.down('xapgrid');
	    var m = operation.result;
	    
	    //质控工作画面中的缺陷一览进行查询
	    var owner = this.getOwner();
	    
	    //关闭此画面
    	var closeChain = owner.getActionChain('closeFaultAction');
    	closeChain.execute();
	    
    	//刷新缺陷一览的记录
    	var socuseOwner = owner.socuseOwner;
    	var chain = socuseOwner.getActionChain('searchDefectsAction');
    	chain.execute();
    	
    	
    },
    getData:function(data,properties,socuseOwner){
    	//保存的参数集合
    	var datasArr = [];
    	var me = this;
    	var faultBlock = me.getBlock('content');
    	var associateMr = faultBlock.down('xapcheckbox');
    	var obj = new Object();
		obj.qaItmCd = data.qaItmCd;
		obj.deductScrTimes = data.deductScrTimes;//缺陷次数
		obj.qaPk = properties.data.currentQaPk; 
		obj.mrPk = data.mrPk;
		if(associateMr.checked){
			if(properties.data.medicalRecord){
				obj.mrPk = properties.data.medicalRecord.mrPk;
			}
		}
		
		//根据工作场景判断质控类型环节=1、科室=8、终末=4
		var workscreen = properties.data.workScreen;
		var qaTyCd = '';
		if(workscreen == '1'){
			
			qaTyCd = iih.mr.qa.QaStatusGlobal.qaTypeCodeProcess; 
		}else if(workscreen == '4'){
			
			qaTyCd = iih.mr.qa.QaStatusGlobal.qaTypeCodeTerminal; 
			
	    }else if(workscreen == '8'){
	    	
	    	qaTyCd = iih.mr.qa.QaStatusGlobal.qaTypeCodeDept; 
	    }
		obj.statusCode = iih.mr.qa.QaStatusGlobal.faultToReform; 
		obj.qaTyCd = qaTyCd; 
		obj.rfmDes = data.rfmDes; 
		
    	datasArr.push(obj);
    	

    	 var data={enPk:properties.data.encounterPk,qaTypeCode:properties.data.qaTypeCode,curMngDctId:faultBlock.data.mrCreateUserCode,currentDeptCode:faultBlock.data.mrCreateDeptCode,qaFaultArray:datasArr};
    	 
    	 return data;
    }
});
/** 
 * 提缺陷画面关闭Action
 * @extends Xap.ej.action.Action
 * @author ：wu_guocheng
 */
Ext.define('iih.mr.qa.process_qa_work.action.FaultInputCloseAction', {
	extend:  Xap.ej.action.Action ,
	requires:[],
    
	execute: function(context){
		
	    var me = this;
		
	    var owner = this.getOwner();
	    
	    var parentOwner = owner.ownerCt;
	    
	    parentOwner.close();
	}
	
})
/** 
 * ：
 * @author ：wang_yanli
 */
Ext.define('iih.mr.qa.process_qa_work.action.CheckAssociateMrAction', {
extend:  Xap.ej.action.Action ,
	
	
	/*
	* @Override
	*/
	execute: function(context) {
		
		 var me = this;
		 var block = this.getBlock('content');
         var associateMr = block.down('[name=associateMr]');
         var mrTypeNameStatus = block.down('[name=mrTypeName]');
         if(associateMr.checked){
         
         	mrTypeNameStatus.setDisabled(false);
         }else{
        	 mrTypeNameStatus.setDisabled(true);
         }
    }
});
/** 
 * 集成编辑器和缺陷一览视图
 * @extends Xap.ej.stl.view.TopBottomContainerTemplate
 * @author ：wu_guocheng
 */

Ext.define('iih.mr.qa.process_qa_work.view.FaultInputView',{
//    extend: 'Xap.ej.stl.view.TopBottomContainerTemplate',
	extend :  Xap.ej.template.BaseTemplate ,
	
	alias:'widget.faultinputview', 
	
	          
	                                      
	   		                                 
	   		                                           
	                                                   
	                                              
	                                             
	                                   
	                                                  
	                                                            
	                                                                  
	                                                                  
	                                                               
	   		                                                            
	   		                                                          
	   		                                                           
	   		                                                           
	            
	
	xapConfig:{         
		blocks: {
			'top':{
				xclass: 'iih.mr.qa.process_qa_work.block.FaultInputBlock',
				height: 460
			}/*,
			'bottom':{
				xclass: 'Xap.ej.block.ToolbarBlock',
				items:[{
					xtype: 'xapbutton',
					text: '确认',
					action: 'save',
					iconCls: 'icon-send'
				},{
					xtype: 'xapbutton',
					text: '取消',
					action: 'cancel',
					iconCls: 'icon-cancel'
				}]
			}*/
		},
		actions:{
			'initQaItmFst':{ 
                xclass:'iih.mr.qa.process_qa_work.action.QaItmFstSearchAction',
                url:'mr/qaitm/init',
                blocks:{
                    content: 'top'
                }
            },
			'init':{
				xclass: 'iih.mr.qa.process_qa_work.action.FaultInputSearchAction',
				url:'qacustom/item',
				blocks: {
				    content: 'top'
				}
			},
			'searchQaItmSnd':{
                xclass:'iih.mr.qa.process_qa_work.action.QaItmSndSearchAction',
                url:'itmsnd',
                blocks:{
                    content:'top'
                }
            },
            'searchQaItm':{
                xclass:'iih.mr.qa.process_qa_work.action.QaItmSearchAction',
                blocks:{
                    content:'top'
                }
            },
			'saveFaultAction':{
				xclass: 'iih.mr.qa.process_qa_work.action.FaultInputSaveAction',
				url:'qacustom/fault',
				//url:'qa/fault',
				blocks: {
				    content: 'top'
				}
			},
			'closeFaultAction':{
				xclass: 'iih.mr.qa.process_qa_work.action.FaultInputCloseAction',
				//url:'/di/sens12',
				blocks: {
				    content: 'top'
				}
			},
			'checkAssociateMr':{
				xclass: 'iih.mr.qa.process_qa_work.action.CheckAssociateMrAction',
				blocks: {
				    content: 'top'
				}
			}
		},
		chains:{
			'initQaItmFst':['initQaItmFst'],
			'init':['init'],
			'searchQaItmSnd':['searchQaItmSnd'],
			'searchQaItm':['searchQaItm'],
			'saveFaultAction':['saveFaultAction'],
			'closeFaultAction':['closeFaultAction'],
			'checkAssociateMr':['checkAssociateMr']
		},
		connections:{
			'top':[/*{
                event:'afterrender',
                chain:'initAmrScore'
            },*/{
                selector: 'xapcombobox[name=qaItmFst]',
                event: 'change',
                chain: 'searchQaItmSnd'
            },{
                selector: 'xapcombobox[name=qaItmSnd]',
                event: 'change',
                chain: 'searchQaItm'
            },{
				selector: 'button[action=save]',
				event: 'click',
				chain: 'saveFaultAction'
			},{
				selector: 'xapgridblock',
				event: 'itemdblclick',
				chain: 'saveFaultAction'
			},{
				selector: 'button[action=cancel]',
				event: 'click',
				chain: 'closeFaultAction'
			},{
                selector: 'xapcheckbox[name=associateMr]',
                event: 'change',
                chain: 'checkAssociateMr'
            }]
		}
	}
})
/** 
 * 弹出录入缺陷画面Action
 * @extends Xap.ej.action.PopAction
 * @author ：wang_yanli
 */

Ext.define('iih.mr.qa.process_qa_work.action.PopupFaultInputViewAction', {
	extend:  Xap.ej.action.PopAction ,
	
	                                                           
	
	execute: function(context){  
		this.closeAction = 'hide';
		var owner=this.getOwner();
		var properties = owner.ownerCt.ownerCt.getLayer(Xap.ej.block.Layer.PROPERTIES);
		
		//就诊序号
		var encounterPk = properties.data.encounterPk;
		
		var firstCode = properties.data.firstCode;
		
		var mrdoceditview = owner.down('mrdoceditview');
		var mrTypeCode = '';
		var mrTypeName = '';
		var mrCreateUserCode = '';
		var mrCreateDeptCode = '';
		
        var properties = owner.ownerCt.ownerCt.getLayer(Xap.ej.block.Layer.PROPERTIES);
        
        //新建对象，赋值给弹出的画面
        var workScreen = properties.data.workScreen;
        //主画面传递过来的参数
        var mainPageParams;
        var currentDeptCode; //患者当前科室
		var curMngDctId; //整改医生编码
		var currentDeptName;
		var currentManageDoctorName;
        if(workScreen == '1' || workScreen == '4' || workScreen == '8'){
        	mainPageParams = properties.data.patientRecord;
        	currentDeptCode = mainPageParams.currentDeptCode; //患者当前科室
			curMngDctId = mainPageParams.currentManageDoctorId;//整改医生编码
			currentDeptName = mainPageParams.currentDeptName;
			currentManageDoctorName = mainPageParams.currentManageDoctorName;
        }else if(workScreen == '2' || workScreen == '5' || workScreen == '9'){
        	mainPageParams = properties.data.patientRecord.data;
        	//环节质控追踪的参数有变化，故改为给变量赋值
        	currentDeptCode = mainPageParams.rfmDeptCd; //患者当前科室
			curMngDctId = mainPageParams.rfmDoctorCd;//整改医生编码
			currentDeptName = mainPageParams.rfmDeptNM;
			currentManageDoctorName = mainPageParams.rfmDoctorNM;
        }
		
		if(mrdoceditview == null){
			mrCreateUserCode = curMngDctId;
			mrCreateDeptCode = currentDeptCode;
		}else{
			//医疗记录编码和医疗记录段落类型编码获取的是打开当前文书的
			var medicalRecord = owner.down('mrdoceditview').medicalRecord;
			if(medicalRecord != null){
				//医疗记录编码
				mrTypeCode = medicalRecord.typeCode;
				
				//医疗记录名称
				mrTypeName = medicalRecord.typeName;
				//var blockTitle = "["+mrTypeName+"]质控项目";
				
				//病历文书起草人
				mrCreateUserCode = medicalRecord.createUserId;
				
				//病历文书起草科室
				mrCreateDeptCode = medicalRecord.deptCd;
			}
		}
		
		
		//医疗记录段落类型编码
		var mrSegmemtTypeCode = '';
		
		//获取缺陷一览的Grid,通过grid获取病历文书PK及段落PK
		var defectinGrid = owner.down('defectsinblock').down('xapgrid');
		
		var config = {
				title:"病案评分标准项目",
	    		width: 800,
	    		height:500,
	    		contentConfig: {
	    			xtype: 'faultinputview',
	    			socuseOwner:owner,  //传入上级视图
	    			initChain: {
	    				name: 'initQaItmFst',
	    				context: {
	    					encounterPk: encounterPk,
	    					mrTypeCode: mrTypeCode,
	    					mrTypeName: mrTypeName,
	    					mrCreateUserCode:mrCreateUserCode,
	    					mrCreateDeptCode:mrCreateDeptCode,
	    					mrSegmemtTypeCode:mrSegmemtTypeCode,
	    					firstCode:properties.data.firstCode
	    				}
	    			}
	    		}
	    	};
		
		this.callParent([config]);
		
	}
})
Ext.define('Xap.ej.stl.action.SimpleSearchAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
    doExecute: function(context) {
        this.prepareOperations(context.operations);
    },

    /*
    * @return {mclass: '', condition: {}}
    */
    prepareOperations: function(operations) {
        var block = this.getBlock('condition');
    	var condition = block.getData();
        var url = this.url;
        if(condition) {
            var qs = Ext.Object.toQueryString(condition);
            if(qs) {
                url += '?' + qs;
            }
        }
        var mclass = null;
        if(block.getModelClass) {
            mclass = block.getModelClass();
        }
    	var operation = {
            url: url,
    		mclass: mclass,
    		method: 'get',
    		condition: condition,
    		scope: this,
    		success: this.onSuccess
    		// fail: this.onFail
    	};
    	operations.push(operation);
    },

    onSuccess: function(operation) {
        var block = this.getBlock('result');
        var m = operation.result;
        // TODO 数据格式就这样了？
        if(m instanceof Ext.data.Model) {
            block.setData({
                mclass: operation.mclass,
                data: m.getData(true)
            });
        }
        else {
            block.setData(m);
        }
        // var r = rb.getData();
    }
});

/** 
 *
 * @extends Ext.button.Button
 * @author ：chenyajie<chen_yajie@founder.com>
 * 工具条小按钮
 *
 */
 
Ext.define('Xap.ej.element.toolbarbutton.ToolBarButton', {
	extend:  Ext.button.Button ,
	alias: 'widget.toolbarbutton'
});
Ext.define('iih.mr.qa.process_qa_work.block.DefectNoticeInferBlock',{
	extend :  Xap.ej.block.FormBlock ,

	requires: [],
	
	alias:'widget.defectnoticeinferblock',
	
	buttons:[{
            xtype: "button",
            name: 'send',
            method:'send',
            text: '确认',
            iconCls: 'icon-OK'
        },{
            xtype: "button",
            name: 'cancel',
            method:'cancel',
            text: '取消' ,
            iconCls: 'icon-cancel' 
    }],

	items: [{
//		title:'本次质控完成确认',
		xtype: 'xapform',
		name:'defectComplete',
		width:'100%',
//		border: 1,
		layout: {
			type: 'table',
			columns: 3,
			tableAttrs: {
	            border: 0,
	            cellpadding: 5,
	            cellspacing: 1,
	            width: '100%',
	            height:'100%'
	        },
	        tdAttrs: {
	            valign: 'left'
	        }
		},
		items:[{
			xtype: 'xaplabel',
			colspan : 3,
			style: {
    		fontSize:'20px'
			},
			margin:'0 300 0 300',
	    	labelAlign : 'center',
	    	text: '病历整改通知'
		},/*{
			xtype: 'xaptextfield',
	    	name:'curMngDctId',
	    	labelAlign : 'right',
	    	width:230,
	    	hidden:true,
	    	fieldLabel: '接收人编码'
		},{
			xtype: 'xaptextfield',
	    	name:'currentDeptCode',
	    	labelAlign : 'right',
	    	width:230,
	    	hidden:true,
	    	fieldLabel: '接收科室编码'
		},*/{
			xtype:'xaptextfield',
			name:'patientName',
			labelAlign : 'right',
			hidden:true,
			fieldLabel:'患者姓名后台传值'
		},/*{
			xtype: 'xapdisplayfield',
	    	name:'currentManageDoctorName',
	    	labelAlign : 'right',
	    	width:230,
	    	fieldLabel: '接收人'
		},{
			xtype: 'xapdisplayfield',
	    	name:'currentDeptName',
	    	labelAlign : 'right',
	    	width:230,
	    	fieldLabel: '接收科室'
		},*/{
			xtype:'xapdisplayfield',
			name:'patientName1',
			labelAlign : 'right',
			width:250,
			fieldLabel:'患者姓名'
		},{
			xtype: 'xapdisplayfield',
	    	name: 'excuteUserName',
	    	labelAlign : 'right',
	    	fieldLabel: '质控医师'
		},{
			xtype:'xapdisplayfield',
			name:'executeDeptName',
			labelAlign : 'right',
//               colspan:2,
			fieldLabel:'质控科室'
		},{
			xtype:'xapdisplayfield',
			name:'executeEndTime',
			labelAlign : 'right',
			fieldLabel:'通知时间',
			renderer: function(v){
				if(v){
				var times =	parseInt(v);
				v = new Date(times);
				return Ext.util.Format.date(v, 'Y-m-d H:i');
				}else{
					var currTime = new Date();
					return Ext.util.Format.date(currTime, 'Y-m-d H:i');
				}
				
			}
		},{
			xtype:'xapdisplayfield',
			name:'qaTypeName',
			labelAlign : 'right',
			fieldLabel:'质控类别'
		},{
        	   xtype:'xappanel',
        	   width:300,
        	   border:0,
        	   bodyPadding: 5,
        	   layout: 'column',
        	   defaultType: 'rangenumberfield',
        	   items: [{
        	        name: 'reformDeadline',
					method:'reformDeadline',
					fieldLabel:'整改期限',
					labelAlign : 'right',
					margin:'0 0 0 35',
//					width:200,
					value: 3,
					maxValue: 7,
					minValue: 1,
        	        columnWidth: 0.6,
        	        labelWidth:60
        	    },{
        	    	xtype:'xapdisplayfield',
        	        name: 'day',
        	        value:'天',
					margin:'0 0 0 5',
        	        columnWidth: 0.2
        	    }]
           },/*{
			xtype:'rangenumberfield',
			method:'reformDeadline',
			name:'reformDeadline',
			labelAlign : 'right',
			width:230,
			fieldLabel:'整改期限',
			value: 3,
			maxValue: 7,
			minValue: 1
		},{
    	    xtype:'xappanel',
    	    border:0,
    	    bodyPadding: 5,
    	    layout: 'column',
    	    defaultType: 'xapdisplayfield',
    	    items: [{
    	        name: 'day',
    	        value:'天',
    	        columnWidth: 0.65
    	    }]
       },*/{     
    	xtype : 'xapgridblock',
		name : 'faultinputgrid',
		colspan : 3,
		height:325,
		rownumShow:false,
		plugins : [Ext.create('Xap.ej.element.grid.plugin.CellEditing', {
			clicksToEdit : 1
		})],
		CM_JR_Record:[{
			header : '新质控项目编码',
			name: 'qaItmCd',
			dataIndex : 'qaItmCd',
			hidden:true
		},{
			header : '缺陷名称',
			name: 'req',
			dataIndex : 'req',
			flex:1
		},{
			header : '扣分标准',
			width:60,
			name: 'deductDes',
			dataIndex : 'deductDes'
		},{
			header : '缺陷次数',
			name: 'deductScrTimes',
			dataIndex : 'deductScrTimes',
			width:60
		},{
			header : '文档名称',
			name: 'mrName',
			dataIndex : 'mrName',
			width:180
		},{
			header : '接收人',
			name: 'rfmUserNm',
			dataIndex : 'rfmUserNm',
			width:80
		},{
			header : '接收科室',
			name: 'rfmDeptNm',
			dataIndex : 'rfmDeptNm',
			width:80
		}]
    },{
			xtype : 'xaptextarea',
			fieldLabel : '整改备注',
			colspan : 3,
			labelWidth:80,
			labelAlign : 'right',
			padding:'8 0 8 0',
			height:40,
			width: 700,
			name: 'reformMemo',
			dataIndex : 'reformMemo'
		}]
	}],

    setData : function(data) {
    	if(data){
    		var defectGrid = this.down('xapgridblock');
    		if(data.qaFaultList.dataList){
    			defectGrid.setData(data.qaFaultList.dataList);
    	    }else{
    	    	defectGrid.setData([]); //dataList为空时，置空
    	    }
			this.getForm().setValues(data.formData); //给form表单赋值
    	}
    }
})
Ext.define('iih.mr.qa.process_qa_work.action.DefectReformDeadlineAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/** 
	 * 本次质控完成确认页面修改[整改期限]监听
	 * @extends Xap.ej.action.Action
	 * @author ：yao_lijie
	 */
	execute: function(context) {
    	var owner = this.getOwner();
    	var b = this.getBlock('result');
        var form = b.down('xapform'); 
        var executeEndTime = form.down('xapdisplayfield[name=executeEndTime]');		//质控时间
        var executeEndTimeValue = executeEndTime.value;
        var reformDeadline = form.down('xapnumberfield[name=reformDeadline]');		//整改期限
        var reformDeadlineValue = reformDeadline.value;
        var deadline = form.down('xapdisplayfield[name=deadline]');		//整改截止日期
        reformDeadline.setDisabled(false);
//		 var v = new Date(1411315200000 + reformDeadlineValue*24*60*60*1000);
		 var times = parseInt(executeEndTimeValue) + (reformDeadlineValue*24*60*60*1000);
		 var v = new Date(times);
		 var value = Ext.util.Format.date(v, 'Y-m-d H:i');
		 deadline.setValue(value);
       /*	if(submitedValue == "0"){
       		reformDeadline.setDisabled(true);
       	}else{
       		reformDeadline.setDisabled(false);
//       		 var v = new Date(1411315200000 + reformDeadlineValue*24*60*60*1000);
       		 var times = parseInt(executeEndTimeValue) + (reformDeadlineValue*24*60*60*1000);
       		 var v = new Date(times);
       		 var value = Ext.util.Format.date(v, 'Y-m-d H:i');
       		 deadline.setValue(value);
       	}*/
    }
});
Ext.define('iih.mr.qa.process_qa_work.action.DefectNoticeInferSaveAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override
	*/
	execute: function(context) {
		
		var owner = this.getOwner();
        var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
        var data = properties.getData();
        var haveFault = data.haveFault;
        
        var block = this.getBlock('result');
    	
    	var isValid = block.down('xapform').getForm().isValid();
        if(!isValid){
    		return;
    	}
        if(haveFault){
        	
        	this.showSubmitProgressBar();
        }
    
    	
    	var owner = this.getOwner();
    	var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
        var encounterPk = properties.data.encounterPk;
        var qaTypeCode = properties.data.qaTypeCode;
        var dataList = properties.data.dataList;
        var workScreen = properties.data.workScreen;
        var revisionCd = properties.data.revisionCd;
        var haveFault = properties.data.haveFault;
        
        var executeEndTimeValue = block.getData().executeEndTime;//质控时间
        var reformDeadlineValue = block.getData().reformDeadline;
        var currentDeptCode = block.getData().currentDeptCode;
        var curMngDctId = block.getData().curMngDctId;
        var reformMemo = block.getData().reformMemo;
        var patientName = block.getData().patientName;
        var data = {
        	'executeEndTime' :executeEndTimeValue,
			'reformDeadline' : reformDeadlineValue,
			'reformMemo' : reformMemo,
			'enPk' : encounterPk, // 就诊主键，就诊序号
			'qaTypeCode' : qaTypeCode,// 质控类型
			'haveFault': haveFault,
			'currentDeptCode':currentDeptCode, //患者当前科室
			'curMngDctId':curMngDctId,//整改医生编码
			'dataList' : dataList, //需整改缺陷质控工作记录     
			'workScreen':workScreen,
			'revisionCd':revisionCd,
			'patientName':patientName
		};
    	var operations = context.operations;
    	if(!operations) {
    		return;
    	}
    	this.prepareOperations(operations,data);
    },
    prepareOperations: function(operations,data){
        var url = this.url;
        var mclass = null;
        var METHODS = this.getInvocationMethods();
    	var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_CREATE,
            data:data,
    		scope: this,
    		success: this.onSuccess,
    		failure: this.onFail
    	};
    	operations.length = 0;
    	operations.push(operation);
    },
    onSuccess: function(operation) {
    	//关闭窗口
    	var owner = this.getOwner();
        var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
        var data = properties.getData();
        var haveFault = data.haveFault;
        var workScreen = properties.data.workScreen;
        if(haveFault){
        	 XapMessageBox.info("发送整改通知成功");
        }else if(workScreen !='2' && workScreen !='5' && workScreen !='9'){
        	 XapMessageBox.info("本次质控完成");
        }
       
        if(data.parentWindow){
        	  data.parentWindow.close();
        }
      
        
        var defectinAndmreditview = properties.data.sourceView; 	//缺陷一览画面
        if(defectinAndmreditview){
        	//初始化缺陷一览列表
            var chain = defectinAndmreditview.getActionChain('searchDefectsAction');
            if(chain) {
                chain.execute();
            }
        }
        
       // var workScreen = properties.data.workScreen;
        if(workScreen=='2' || workScreen=='5' || workScreen=='9'){
        	XapMessageBox.info('发送再整改通知成功！');
        	var contentBlock = defectinAndmreditview.getBlock('bottom');
    	    // 审核通过按钮
            var checkPass = contentBlock.down('xapgrid xapbutton[action=checkPass]');
            // 扣分按钮
            var deduction = contentBlock.down('xapgrid xapbutton[action=deduction]');
            // 再整改按钮
            var rectification = contentBlock.down('xapgrid xapbutton[action=rectification]');
            // 完成本次审核按钮
            var finishCheck = contentBlock.down('xapgrid xapbutton[action=finishCheck]');
            // 设置按钮不可用
            checkPass.setDisabled(true);
            deduction.setDisabled(true);
            rectification.setDisabled(true);
            finishCheck.setDisabled(true);
            
            //储存画面间参数
    	    var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
            properties.setData({
        		revisionStatus:iih.mr.qa.QaStatusGlobal.revisionNoticeToReform
            });
        }
		
    },
    onFail:function(operation){
    	XapMessageBox.info('失败');
    }
});
Ext.define('iih.mr.qa.process_qa_work.action.CancelAction', {
	extend:  Xap.ej.action.Action ,
	
	                                 
	
	execute: function(context) {
    	var owner = this.getOwner();
        var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
        var data = properties.getData();
        data.parentWindow.close();
    }
});
Ext.define('iih.mr.qa.process_qa_work.action.DefectNoticeInferInitAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/** 
	 * 本次质控完成确认页面初始化
	 * @extends Xap.ej.action.Action
	 * @author ：yao_lijie
	 */
	execute: function(context) {
		var owner = this.getOwner();
		var socuseOwner = owner.socuseOwner;//传入上级视图
		var datas = {};
		var workScreen = context.workScreen;
		//if(workScreen!=null && workScreen!=undefined)
		if(workScreen == '1' || workScreen == '4' || workScreen == '8'){
			datas.encounterPk = context.patientRecord.pk,//得到就诊号
			datas.qaTypeCode = context.qaTypeCode,//质控类型编码
			datas.revisionCd = context.revisionCd,//通知书主键
			datas.workScreen = context.workScreen //质控类型编码
		}else if(workScreen == '2' || workScreen == '5' || workScreen == '9'){
			datas.encounterPk = context.patientRecord.enPk,//得到就诊号
			datas.qaTypeCode = context.qaTypeCode,//质控类型编码
			datas.revisionCd = context.revisionCd,//通知书主键
			datas.workScreen = context.workScreen //质控类型编码
		}
    	var owner = this.getOwner();
        var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);//DefectNoticeInferview
        properties.setData({
            parentWindow: context.parentWindow,
            sourceView: socuseOwner,
            encounterPk: datas.encounterPk,
            qaTypeCode: datas.qaTypeCode,
            qaTypeName: context.qaTypeName,
            patientRecord:context.patientRecord,  //患者就诊记录      
            workScreen:context.workScreen,
            revisionCd:context.revisionCd,
            haveFault:context.haveFault
            
        });
    	var operations = context.operations;
    	if(!operations) {
    		return;
    	}
    	this.prepareOperations(operations,datas);
    },

    /*
    * @return {mclass: '', condition: {}}
    */
    prepareOperations: function(operations,datas) {
        var url = this.url+"?encounterPk=" + datas.encounterPk + "&revisionCd="  + datas.revisionCd + "&workScreen=" + datas.workScreen;
        var METHODS = this.getInvocationMethods();
    	var operation = {
            url: url,
    		mclass: null,
    		method: METHODS.METHOD_GET,
//    		data:datas,
    		scope: this,
    		success: this.onSuccess
    	};
    	operations.push(operation);
    },

    onSuccess: function(operation) {
        var block = this.getBlock('result');
        var m = operation.result.data;
        
        var owner = this.getOwner();
        var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
        
        //新建对象，赋值给弹出的画面
        var workScreen = properties.data.workScreen;
        //主画面传递过来的参数
        var mainPageParams;
        var currentDeptCode; //患者当前科室
		var curMngDctId; //整改医生编码
		var currentDeptName;
		var currentManageDoctorName;
        if(workScreen == '1' || workScreen == '4' || workScreen == '8'){
        	mainPageParams = properties.data.patientRecord;
        	currentDeptCode = mainPageParams.currentDeptCode; //患者当前科室
			curMngDctId = mainPageParams.currentManageDoctorId;//整改医生编码
			currentDeptName = mainPageParams.currentDeptName;
			currentManageDoctorName = mainPageParams.currentManageDoctorName;
        }else if(workScreen == '2' || workScreen == '5' || workScreen == '9'){
        	mainPageParams = properties.data.patientRecord.data;
        	//环节质控追踪的参数有变化，故改为给变量赋值
        	currentDeptCode = mainPageParams.rfmDeptCd; //患者当前科室
			curMngDctId = mainPageParams.rfmDoctorCd;//整改医生编码
			currentDeptName = mainPageParams.rfmDeptNM;
			currentManageDoctorName = mainPageParams.rfmDoctorNM;
        }
        var obj = {
				encounterSn: properties.data.encounterSn,
				qaTypeCode: properties.data.qaTypeCode,    //质控类型编码
				qaTypeName: properties.data.qaTypeName,  //质控类型名称
				currentDeptCode: currentDeptCode, //患者当前科室
				curMngDctId: curMngDctId,//整改医生编码
				currentDeptName: currentDeptName,
				currentManageDoctorName: currentManageDoctorName,
				patientName: mainPageParams.patientName,
				patientName1:mainPageParams.patientName,
				patientRecord: mainPageParams,  //患者就诊记录 
				excuteUserName: IMER_GLOBAL.user.name,
				executeDeptName: IMER_GLOBAL.department.name
        };
        m.formData = obj;
        block.setData(m);
       /*	var form = block.down('xapform'); 
        var faultSubmited = form.down('xapdisplayfield[name=faultSubmited]');		//需整改缺陷
        var submitedValue = faultSubmited.value;
        var reformDeadline = form.down('xapnumberfield[name=reformDeadline]');		//整改期限
       	if(submitedValue == "0"){
       		reformDeadline.setDisabled(true);
       	}*/
    }
});
Ext.define('iih.mr.qa.process_qa_work.view.DefectNoticeInferView',{
	extend :  Xap.ej.template.BaseTemplate ,
	
	          
	  	                                       
	  	                           
	                               
	                                 
	                                     
	                                    
	                                    
	                                                 
	                                   
	                                       
	                                        
	                                            
		                                                         
		                                                              
		                                                               
		                                                
		                                                              
	  

    alias:'widget.defectnoticeinferview',
	
	
	xapConfig: {
		blocks: {
			'list': {
				xclass: 'iih.mr.qa.process_qa_work.block.DefectNoticeInferBlock',
				height:560
			}
		},
		actions: {
			'refresh': {
				xclass: 'iih.mr.qa.process_qa_work.action.DefectNoticeInferInitAction',
				url: '/qacustom/faults',
//				url: 'http://172.18.72.123:8081/qa/fault/statics',
				blocks: {
					condition: 'properties',
					result: 'list'
				}
			},
			'reformDeadline': {
				xclass: 'iih.mr.qa.process_qa_work.action.DefectReformDeadlineAction',
				blocks: {
					result: 'list'
				}
			},
			'send': {
				xclass: 'iih.mr.qa.process_qa_work.action.DefectNoticeInferSaveAction',
				url:"qacustom/submitted/faults",
//				url: "http://172.18.73.65:8082/qa/submitted/faults",
				blocks: {
					result: 'list'
				}
			},
			'cancel': {
				xclass: 'iih.mr.qa.process_qa_work.action.CancelAction',
				blocks: {
					result: 'list'
				}
			}
		},

		chains: {
			'refresh': ['refresh'],
			'reformDeadline': ['reformDeadline'],
			'send': ['send'],
			'cancel': ['cancel']
		},

		connections: {
			'list': [/*{
				event: 'afterrender',
				chain: 'refresh'
			},{
				//填写整改期限，计算整改截止日期
				selector: 'xapnumberfield[method=reformDeadline]',
				event: 'change',
				chain: 'reformDeadline'
			},*/{
				selector: 'button[method=send]',
				event: 'click',
				chain: 'send'
			},{
				selector: 'button[method=cancel]',
				event: 'click',
				chain: 'cancel'
			}]
		}
	}
})
/** 
 * 弹出完成本次质控Action
 * @extends Xap.ej.action.PopAction
 * @author ：wang_yanli
 */

Ext.define('iih.mr.qa.process_qa_work.action.PopupDefectNoticeInferViewAction', {
	extend:  Xap.ej.action.PopAction ,
	       
	                                                                                       
	
	execute: function(context){ 
		
		var defectBlock = this.getBlock("bottomcontent");
		
		var defectGrid = defectBlock.down('xapgrid');
		
		var defectData = defectGrid.getData(); 
		
		var haveFault = true;
		
		var owner=this.getOwner();	
		
		var properties = owner.ownerCt.ownerCt.getLayer(Xap.ej.block.Layer.PROPERTIES);
		
		//质控类型
		var typeFlag = properties.data.typeFlag;
		
		//就诊序号
		var encounterSn = properties.data.encounterPk;
		
		//病案号
		var medicalNum = properties.data.medicalNum;
		
		var config = {};
		//var defectnoticeinferview1 = Ext.create('iih.mr.qa.process_qa_work.view.DefectNoticeInferView');
		if(defectData.length == '0'){
			XapMessageBox.confirm2( "本次质控无缺陷，确定完成？", function(button) {
							            if (button == "yes") {
							            	haveFault = false;
											var defectnoticeinferview = Ext.create('iih.mr.qa.process_qa_work.view.DefectNoticeInferView');
											var propertiesNoticeInferView = defectnoticeinferview.getLayer(Xap.ej.block.Layer.PROPERTIES);
											propertiesNoticeInferView.setData({
													typeFlag: '1',
										        	encounterPk:encounterSn,  //就诊PK
										        	qaTypeCode:properties.data.qaTypeCode,    //质控类型编码
						        					qaTypeName:properties.data.qaTypeName,  //质控类型名称
						        					patientRecord:properties.data.patientRecord,  //患者就诊记录 
						        					haveFault:haveFault,
						        					revisionCd:'',
						        					workScreen:properties.data.workScreen
						        					
										        	
										    });
									        var chain = defectnoticeinferview.getActionChain('send');
									        
									        if(chain) {
									            chain.execute();
									        }
									        defectnoticeinferview.destroy();
							            }else{
							            	return;
							            }
							        });
		}else{
			haveFault = true;	
			config = {
	    		width: 760,
	    		height:600,
	    		title:'发送病历整改通知书',
	    		contentConfig: {
	    			xtype: 'defectnoticeinferview',
	    			socuseOwner:owner,  //传入上级视图
	    			initChain: {
	    				name: 'refresh',
	    				context: {
	    					typeFlag: '1',
	    					encounterSn: encounterSn,
	    					medicalNum: medicalNum,
	    					qaTypeCode:properties.data.qaTypeCode,    //质控类型编码
        					qaTypeName:properties.data.qaTypeName,  //质控类型名称
        					haveFault:haveFault,//是否有缺陷
        					patientRecord:properties.data.patientRecord,  //患者就诊记录
        					workScreen:properties.data.workScreen,
        					revisionCd:''
	    					
	    				}
	    			}
	    		}
	    	};
	    	this.callParent([config]);
		}
		
	
		
		
		
	}
})
/** 
 * 删除单条缺陷的Action
 * @extends Xap.ej.action.ServiceInvocation
 * @author ：wang_yanli
 */

Ext.define('iih.mr.qa.process_qa_work.action.DefectInDeleteAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override  
	*/
	doExecute: function(context) {
    
    	var owner = this.getOwner();
    	
    	var me = this;
    	      
    	//获取缺陷一览的 block
		var block = this.getBlock('bottomcontent');
    	
		var record = context;
		/*var defectGrid = block.down('xapgrid');
		
		var selModel = defectGrid.getSelectionModel();
		
		var record = selModel.getSelection()[0];*/
    	
    	var operations = context.operations;
            	if(!operations) {
            		return;
        }
        me.prepareOperations(operations,record);
    	
    },
    prepareOperations: function(operations,record){
        var url = this.url+'/'+record.data.qaFltPk;
        var mclass = null;
        var METHODS = this.getInvocationMethods();
    	var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_DELETE,
            condition: null,	
           // data:data.data.pk,
    		scope: this,
    		success: this.onSuccess
    	};
    	operations.push(operation);
    },
    onSuccess: function(operation) {
        //调用查询Action
    	var owner = this.getOwner();
    	var searchDefectsChain = owner.getActionChain('searchDefectsAction');
    	searchDefectsChain.execute();
    }
})
/** 
 * 保存缺陷的Action
 * @extends Xap.ej.action.ServiceInvocation
 * @author ：wang_yanli
 */

Ext.define('iih.mr.qa.process_qa_work.action.DefectInSaveAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override  
	*/
	execute: function(context) {    
		
		this.showSubmitProgressBar();
		if(context.complete != undefined ){
			
			this.complete = context.complete;
		}
		
    
    	var owner = this.getOwner();
    	      
    	//获取缺陷一览的 block
		var block = this.getBlock('bottomcontent');
		
		var defectinGrid = block.down('xapgrid');
    	
		//定义更新的数据集合
		var updateData= [];
		
		//通过Store获取数据集方便判断
		var datas  = defectinGrid.getStore().getModifiedRecords( );

    	//遍历判断被修改的记录添加到集合变量中
    	for(var i=0;i<datas.length;i++){
    		
    		if(datas[i].dirty){
    			
    			var obj = new Object();
    			obj.pk = datas[i].data.pk;
    			obj.reformRequirement = datas[i].data.reformRequirement;
    			obj.reformedDescription = datas[i].data.reformedDescription;
    			obj.dropDescription = datas[i].data.dropDescription;
    			obj.faultConfirmResult = datas[i].data.faultConfirmResult;
    			updateData.push(obj);
    		}
    		
    	}
    	
    	var updatas = {qaFaultList:updateData};
    	
    	var operations = context.operations;
    	if(!operations) {
    		return;
    	}
    	this.prepareOperations(operations,updatas);
    	
    	
    },
    prepareOperations: function(operations,data){
        var url = this.url;
        var mclass = null;
        var METHODS = this.getInvocationMethods();
    	var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_UPDATE,
            condition: null,	
            data:data,
    		scope: this,
    		success: this.onSuccess,
    		failure: this.onFail
    	};
    	operations.push(operation);
    },
    onSuccess: function(operation) {
       
    	var owner = this.getOwner();
    	
    	if(this.complete != undefined && this.complete == 1){
    	    
    		this.complete = undefined;
    		
    		var popupDefectNoticeInferViewChain = owner.getActionChain("popupDefectNoticeInferViewAction");
    		popupDefectNoticeInferViewChain.execute();
    		
    	}
    	//提示保存成功
    	XapMessageBox.info('保存成功');
    	
    	//调用查询Action
    	var searchChain = owner.getActionChain('searchDefectsAction');
    	searchChain.execute();
        
    },
    onFail:function(operation){
    	XapMessageBox.info('保存失败');
    }
});
/** 
 * 查询缺陷的Action
 * @extends Xap.ej.action.ServiceInvocation
 * @author ：wu_guocheng
 */

Ext.define('iih.mr.qa.process_qa_work.action.DefectInSearchAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	                                      
	/*
	* @Override
	*/
	execute: function(context) {      
    
    	var owner = this.getOwner();
    	
    	var properties =owner.ownerCt.ownerCt.getLayer(Xap.ej.block.Layer.PROPERTIES);
    	
    	//就诊序号
    	var encounterPk = properties.data.patientRecord.pk;//encounterPk;
    	
    	//缺陷状态
    	var statusCode = properties.data.statusCode;
    	if(statusCode == 'ALL'){	//	如果选择“全部”，赋空值
			statusCode='';		
    	}
    	
    	//获取查询参数
    	//var data = properties.getData();
    	
    	var dataJson = {
    			encounterPk:encounterPk,  //就诊PK
            	qaTypeCode:properties.data.qaTypeCode,    //质控类型编码
            	statusCode:statusCode,    				 //缺陷状态编码
            	dropFlag:properties.data.dropFlag,        //不扣分缺陷
            	workScreen:properties.data.workScreen    //工作场景
    	}
      
    	//获取缺陷一览的 block
		var block = this.getBlock('bottomcontent');
		
		var defectinGrid = block.down('xapgrid');
    	
    	var operations = context.operations;
    	if(!operations) {
    		return;
    	}
    	this.prepareOperations(operations,dataJson);
    	
    },
    prepareOperations: function(operations,data){
    
    	var qs = Ext.Object.toQueryString(data);
 
       // var url = this.url+'?encounterPk='+data.encounterPk+'&qaTypeCode='+data.qaTypeCode+'&statusCode='+data.statusCode+'&dropFlag='+data.dropFlag+'&workScreen='+data.workScreen+'&isDept='+data.isDept;
        var url = this.url+'?'+ qs;
    	var mclass = null;
        var METHODS = this.getInvocationMethods();
    	var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_GET,
            condition: null,	
            data:data,
    		scope: this,
    		success: this.onSuccess
    	};
    	operations.push(operation);
    },
    onSuccess: function(operation) {
        
    	//获取缺陷一览的 block
		var block = this.getBlock('bottomcontent');
		var defectinGrid = block.down('xapgrid');
	    var m = operation.result;
	    
        var owner = this.getOwner();
    	
    	var properties =owner.ownerCt.ownerCt.getLayer(Xap.ej.block.Layer.PROPERTIES);
    	properties.data.currentQaPk = m.data.currentQaPk  //当前未完成的质控主键
	    
    	if(m.data.qaFaultList.dataList){
	    	defectinGrid.setData(m.data.qaFaultList.dataList);
	    }else{
	    	defectinGrid.setData([]); //dataList为空时，置空
	    }
    	
        var datas  = defectinGrid.getStore().getModifiedRecords( );
		
		
		/*defectinGrid.down('xapbutton[action=editDefect]').setDisabled(true);
		defectinGrid.down('xapbutton[action=defectDelete]').setDisabled(true);*/
		//设置完成本次质控按钮可编辑
		defectinGrid.down('xapbutton[action=defectsfinish]').setDisabled(false);
		
/*		if(b){
			
			defectinGrid.down('xapbutton[action=defectssave]').setDisabled(false);
		}*/
		
		defectinGrid.refresh();
		
		//默认选中第一条
		/*if(properties.data.record== undefined ){
			
			var selectModel = defectinGrid.getSelectionModel();
	    	selectModel.select(0);
	    	
		}else{
			
			//获取定位缺陷一览的CHAIN
			var positionChain = owner.getActionChain('positionAction');
			positionChain.execute({record:properties.data.record});
		}*/
    }
});

/** 
 * 缺陷一览页面删除按钮
 * @extends Xap.ej.action.Action
 * @author ：wang_yanli
 */
Ext.define('iih.mr.qa.process_qa_work.action.DefectsInItemClickAction', {
	extend:  Xap.ej.action.Action ,
	
	                                      
    
	execute: function(context){  
		
		var owner = this.getOwner();
		
		var defectsInBlock = this.getBlock('bottomcontent');
		
		var mrBlock = this.getBlock('topcontent');
		
		//获取缺陷一览的GRID
		var defectsInGrid = defectsInBlock.down('xapgrid');
		/*//设置删除按钮可用
		defectsInGrid.down('xapbutton[action=defectDelete]').setDisabled(false);
		
		//设置编辑按钮可用
		defectsInGrid.down('xapbutton[action=editDefect]').setDisabled(false);*/

	/*	var selModel = defectsInGrid.getSelectionModel();
	    var record = selModel.getSelection()[0];*/
		var record = context.event.arguments[1];
	    var mrPk = record.data.mrPk;
	    var properties = owner.ownerCt.ownerCt.getLayer(Xap.ej.block.Layer.PROPERTIES);//qaworkview
        if(mrPk!=undefined && mrPk !="" ){
        	if(properties.data.medicalRecord && properties.data.medicalRecord.mrPk == mrPk){
        		return;
        	}
        	var config = {
	                xclass: 'iih.mr.wr.mr.view.MrDocEditView',
	                viewConfig:{
	                    mrSn:mrPk,
	                    opType:'readonly'
	                	}
	        }; 
        	
        	
            var workView =  Ext.create(config.xclass,config.viewConfig);
            mrBlock.removeAll();
            mrBlock.add(workView);
            
            //
        	
        	properties.data.medicalRecord = {'mrPk':mrPk};
        }
    
			
	}
	
})
/** 
 * 病案等级设置（新增、编辑）BLOCK
 * @extends Xap.ej.block.Block
 * @author ：yao_lijie
 */
var me;
Ext.define('iih.mr.qa.process_qa_work.block.DefectEditBlock',{
	extend :  Xap.ej.block.FormBlock ,
	
	requires: [],

    alias:'widget.defecteditblock',
    
    layout: {
		type: 'table',
		columns: 1,
		tableAttrs: {
            border: 0,
            cellpadding: 0,
            cellspacing: 1,
            width: '100%'
        },
        tdAttrs: {
            valign: 'left'
        }
	},
    
    buttons:[{
            xtype: "button",
            name: 'save',
            action:'save',
            text: '确认',
            iconCls: 'icon-OK'
        },{
            xtype: "button",
            name: 'cancel',
            action:'cancel',
            text: '取消' ,
            iconCls: 'icon-cancel' 
    }],
    
    items:[{
    	xtype:'xaptextfield',
    	fieldLabel:'缺陷主键',
		name: 'qaFltPk',
		hidden:true
	},{
        xtype:'xapdisplayfield',
        name:'mrName',
		fieldLabel:'病历文书',
		labelAlign : 'right',
		width: 400,
		margin:'10 0 0 0'
    },{
        xtype:'xapdisplayfield',
        name:'req',
        labelAlign : 'right',
		fieldLabel:'缺陷描述',
		width: 400,
		margin:'10 0 0 0'
    },
    {
		xtype : 'xaptextarea',
		fieldLabel : '整改说明',
		//labelWidth:80,
		labelAlign : 'right',
		padding:'10 0 8 0',
		height:70,
		width: 400,
		name: 'rfmDes',
		dataIndex : 'rfmDes'
	},{
		xtype: 'xapdisplayfield',
		fieldLabel: '',
		colspan:16,
		vertical: true,
		name:'showInfo',
		value: '',
		margin:'0 10 0 0'
	}]
})
Ext.define('iih.mr.qa.process_qa_work.action.DefectEditInitAction', {
	extend:  Xap.ej.action.Action ,
	
	requires: [],
	
	execute: function(context) {
		var data = context.data;
    	var block = this.getBlock('content');
    	var textarea = block.down('xaptextarea');
    	block.setData(data);
    	textarea.focus();
    	
    }
});
/** 
 * 缺陷编辑保存Action
 * @extends Xap.ej.action.ServiceInvocation
 * @author ：yao_lijie
 */

Ext.define('iih.mr.qa.process_qa_work.action.DefectEditSaveAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	requires:[],
	
	/*   
	* @Override
	*/
	execute: function(context) {   
    	var owner = this.getOwner();
		var block = this.getBlock('content');
		var showInfo = block.down('xapdisplayfield[name=showInfo]');
		var form= block.getForm();
        var data = form.getValues();

    	var operations = context.operations;
        if(!operations) {
     		return;
	    }
	    this.prepareOperations(operations,data);
    
        /*if(data.rfmDes == ""){
        	showInfo.setValue('<font color=red>整改说明为空</font>');
			return null;
        }else{}*/
    },

    prepareOperations: function(operations,data){
    	var qaFltPk = data.qaFltPk;
        var url = this.url+"/"+qaFltPk; 
        var mclass = null;
        var METHODS = this.getInvocationMethods();
    	var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_UPDATE,
            condition: null,	
            data:data,
    		scope: this,
    		success: this.onSuccess
    	};
    	operations.length = 0;
    	operations.push(operation);
    },
    onSuccess: function(operation) {
	    var owner = this.getOwner();
	    //关闭此画面
    	var closeChain = owner.getActionChain('close');
    	closeChain.execute();
    	
    	//刷新缺陷一览的记录
        var view  =  owner.sourceView;
    	var chain = view.getActionChain('searchDefectsAction');
    	chain.execute();
    }
});
/** 
 * 编辑整改说明视图
 * @author ：yao_lijie
 */

Ext.define('iih.mr.qa.process_qa_work.view.DefectEditView',{
	extend :  Xap.ej.template.BaseTemplate ,
	
	alias:'widget.defecteditview', 
	
	          
	                                      
	   		                                 
	   		                                           
	                                                   
	                                              
	                                             
	                                   
	                                                  
	                                                            
	                                                                  
	                                                                  
	                                                                  
	            
	
	xapConfig:{         
		blocks: {
			'content':{
				xclass: 'iih.mr.qa.process_qa_work.block.DefectEditBlock',
				height:210
			}
		},
		actions:{
			'init':{
				xclass: 'iih.mr.qa.process_qa_work.action.DefectEditInitAction',
				blocks: {
				    content: 'content'
				}
			},
			'saveDefect':{
				xclass: 'iih.mr.qa.process_qa_work.action.DefectEditSaveAction',
				url:'qacustom/saverfmdes',
				blocks: {
				    content: 'content'
				}
			},
			'close':{
				xclass: 'iih.mr.qa.process_qa_work.action.FaultInputCloseAction',
				blocks: {
				    content: 'content'
				}
			}
		},
		chains:{
			'init':['init'],
			'saveDefect':['saveDefect'],
			'close':['close']
		},
		connections:{
			'content':[{
				selector: 'button[action=save]',
				event: 'click',
				chain: 'saveDefect'
			},{
				selector: 'button[action=cancel]',
				event: 'click',
				chain: 'close'
			}]
		}
	}
})
/** 
 * 弹出病案等级新增、编辑画面Action
 * @extends Xap.ej.action.PopAction
 * @author ：yao_lijie
 */

Ext.define('iih.mr.qa.process_qa_work.action.PopupEditDefectAction', {
	extend:  Xap.ej.action.PopAction ,
	
	                                                           
	
	execute: function(context){
		var owner = this.getOwner();
		/*var contentBlock = this.getBlock('bottomcontent');
	    var grid = contentBlock.down('xapgrid');
	    var data = grid.getSelectionModel().getSelection()[0].data;*/
		var data = context.data;
		var config = {
				title:'缺陷编辑',
	    		width: 450,
	    		height:250,
	    		contentConfig: {
	    			xtype: 'defecteditview',
	    			sourceView:owner,  //传入上级视图
	    			initChain: {
	    				name: 'init',
	    				context: {
	    					data:data
	    				}
	    			}
	    		}
	    	};
		
		this.callParent([config]);
		
	}
})
/** 
 * 集成编辑器和缺陷一览视图
 * @extends Xap.ej.stl.view.TopBottomContainerTemplate
 * @author ：wang_yanli
 */

Ext.define('iih.mr.qa.process_qa_work.view.DefectInAndMrEditView',{
    extend:  Xap.ej.template.BaseTemplate ,
	
	alias:'widget.defectinAndmreditview', 
	   
	          
	                                                           
	                                                          
	                                                                     
	                                                                       
	                                                                              
	                                                                  
	                                                                
	                                                                  
	                                                                     
	            
	          
	layout: {
        type : 'vbox',
        align : 'stretch'
    },
	
	xapConfig:{
		blocks: {
			'top':{
				xclass: 'iih.mr.qa.process_qa_work.block.QaMrEditBlock',
				flex:1
			},
			'bottom':{
				xclass: 'iih.mr.qa.process_qa_work.block.DefectsInBlock',
				height:180
			}
		},
		actions:{
			
			'defectsInViewreadyAction': {
				xclass: 'iih.mr.qa.process_qa_work.action.DefectInViewreadyAction',
				blocks: {
					bottomcontent: 'bottom',
					topcontent:'top'	
				}
			},
			'popupFaultInputViewAction':{
				xclass: 'iih.mr.qa.process_qa_work.action.PopupFaultInputViewAction',
				blocks: {
					bottomcontent: 'bottom',
					topcontent:'top'	
				}
			},
			'popupDefectNoticeInferViewAction':{
				xclass: 'iih.mr.qa.process_qa_work.action.PopupDefectNoticeInferViewAction',
				blocks: {
					bottomcontent: 'bottom',
					topcontent:'top'	
				}
			},
			'editDefectAction':{
				xclass: 'iih.mr.qa.process_qa_work.action.PopupEditDefectAction',
				blocks: {
					bottomcontent: 'bottom',
					topcontent:'top'	
				}
			},
			'deleteDefectsAction':{
				xclass: 'iih.mr.qa.process_qa_work.action.DefectInDeleteAction',
				url:'qacustom/fault',
				blocks: {
					bottomcontent: 'bottom',
					topcontent:'top'	
				}
			},
			'saveDefectsAction':{
				xclass: 'iih.mr.qa.process_qa_work.action.DefectInSaveAction',
				url:'/di/sens',
				blocks: {
					bottomcontent: 'bottom',
					topcontent:'top'	
				}
			},
			'searchDefectsAction':{
				xclass: 'iih.mr.qa.process_qa_work.action.DefectInSearchAction',
				//url:'dm-mr/qa/faults',
				url:'qacustom/faults',
				blocks: {
					bottomcontent: 'bottom',
					topcontent:'top'	
				}
			},
			'itemClickAction':{
				xclass: 'iih.mr.qa.process_qa_work.action.DefectsInItemClickAction',
				blocks: {
					bottomcontent: 'bottom',
					topcontent:'top'	
				}
			}
		},
		chains:{
			
			'defectsInViewreadyAction':['defectsInViewreadyAction'],
			'popupFaultInputViewAction':['popupFaultInputViewAction'],
			'popupDefectNoticeInferViewAction':['popupDefectNoticeInferViewAction'],
			'editDefectAction':['editDefectAction'],
			'deleteDefectsAction':['deleteDefectsAction'],
			'saveDefectsAction':['saveDefectsAction'],
			'searchDefectsAction':['searchDefectsAction'],
			'itemClickAction':['itemClickAction']
		},
		connections:{
			
			'bottom':[{
				selector: 'xapgrid',
				event: 'viewready',
				chain: 'defectsInViewreadyAction'
			},{
				selector : 'xapgrid',
				event: 'itemclick',
				chain: 'itemClickAction'
			},{
                selector: 'xapgrid',
                event: 'linkClick',
                chain: 'itemClickAction'
            }
			]
		}
	}
})
Ext.define('iih.po.com.block.MrDocTreeBlock',{
	extend :  Xap.ej.block.FormBlock ,

	           
	                                    
	  
	alias:'widget.mrdoctreeblock',
	
	 layout: 'fit',
	 
	 border:0,
	
	items:[{
	        xtype:'xaptree',
	        autoScroll:true,
//	        height:545,
	        name:'MrDocTree',
	        ifSelect:true,
	        rootVisible: false,
	        border:0
	}],

	setData: function(data) {
	    var tree = this.down('xaptree');
	    var myobj=eval(data);  
	    tree.setData(myobj);
	},
    getData: function() {
        return null;
    }    
})
Ext.define('iih.po.com.action.MrDocTreeInitAction', {
	extend:  Xap.ej.action.ServiceInvocation ,

	doExecute: function(context) {  
        var operations = context.operations;    
        var encounterSn = context.encounterSn;
        this.prepareOperations(operations,encounterSn);    
    }, 
    prepareOperations: function(operations,encounterSn) {
    	//就診序號變量
    	var encounterCode = IMER_GLOBAL.encounterSn;
        console.log(encounterCode);
        var url = this.url+'?encounterPk='+encounterSn;//+'?keyword='+'test'+'&'
        var mclass = null;        
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: mclass,
            method: METHODS.METHOD_GET,
            condition: null,
            scope: this,
            success: this.onSuccess
        };
        operations.push(operation);
    },
        
    onSuccess: function(operation) {
        var block = this.getBlock('result');
        var m = operation; 
        //console.log(operation.result);
        // TODO 数据格式就这样了？
        if(m instanceof Ext.data.Model) {
        	block.setData({
				mclass: operation.mclass,
				data: m.getData(true)
			});
        }
        else {
        	//block.setData(m.result.root.children);
        	block.setData(m.result.data.children);
        }
    }    

});

Ext.define('iih.po.com.view.MrDocTreeView', {
	extend :  Xap.ej.template.BaseTemplate ,

	           
	                                             
	                                                  
	             

	alias:'widget.mrdoctreeview',
	
	layout:'fit',
	
	xapConfig: {
		blocks: {
			'list': {
	                xclass: 'iih.po.com.block.MrDocTreeBlock',
	                width:200
	                
	        }
		},

		actions: {
			'refreshTree': {
				//url:'tree/mrs',
				url: 'mr_doc_tree/mrs',
                xclass: 'iih.po.com.action.MrDocTreeInitAction',
                blocks: {
                    result: 'list'
                }
			}
		},

		chains: {
			'initTree': ['refreshTree']
		}

		/*connections: {
			'list': [ {
                selector: 'xaptree',//[name=groupElement]名字加不上
                event: 'afterrender',
                chain: 'initTree'
	         }]
		}*/
	}
	
})

/** 
 * 病历树面板
 * @extends Xap.ej.element.panel.Panel
 * @author ：wang_yanli 
 */
Ext.define('iih.mr.qa.process_qa_work.block.MrInBlock',{
	extend :  Xap.ej.element.panel.Panel ,
	
	                                            

    alias:'widget.mrinblock',
    
    layout: 'fit',
        
    title: '病历一览',
    
    tools: [{
        type: 'left',
        handler: function(event, toolEl, header, tool) {
            var panel = header.ownerCt;
            panel.collapse();
        }
    }],
    
    items:[{
    	xtype:'mrdoctreeview'
    }]

})

/** 
 * 质控工作画面BLOCK 集成病历树和编辑器及缺陷一览
 * @extends Xap.ej.block.Block
 * @author ：wang_yanli
 */

Ext.define('iih.mr.qa.process_qa_work.block.QaWorkBlock',{
	extend :  Xap.ej.block.Block ,
	
	alias:'widget.qaworkblock',  
	
	          
	                                                                 
	                                                     
	           
	layout: 'border',
	 
	items:[{
		
		region:'west',
        xtype: 'mrinblock',
        width: 200,
        padding:'0 2 0 0'
       // split: true,
       // collapsible: true
       
//        region:'west',
//        xtype: 'mrinblock',
//        header: false,
//        split: true,
//        collapsible: true,
//        width: 200
	},{
		region: 'center',
	    xtype: 'defectinAndmreditview'
	}]
	
})
/** 
 * 质控工作画面加载初始化Action
 * @extends Xap.ej.action.Action
 * @author ：wang_yanli
 */

Ext.define('iih.mr.qa.process_qa_work.action.QaWorkInitAction', {
	extend:  Xap.ej.action.Action ,
	
	                                                                                  
	      
	execute: function(context){
		
		var me = this;
		
	    var owner = this.getOwner();   
	    
	    var windowView = owner.ownerCt;
	    
	    var encounterPk = owner.patientRecord.pk;
	    
	    var workScreen = owner.workScreen;
	    
	    var qaTypeName = '';
	    
	    //监听弹出窗口的关闭事件,刷新不同工作场景的画面缺陷
	    windowView.on('close',function(){
	    	var closeChain = owner.getActionChain('closeAction');
	    	closeChain.execute();
	    });
	    
	    //储存画面间参数
	    var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);//qaworkview
	    
	    //1=环节质控工作 2=环节质控追踪  4、5 = 终末 8、9=科室
	    if(workScreen == '1' || workScreen == '2'){
	    	qaTypeName = "环节质控";
	    }else if(workScreen == '4' || workScreen == '5'){
	    	qaTypeName = "终末质控";
	    }else if(workScreen == '8' || workScreen == '9'){
	    	qaTypeName = "科室质控";
	    }
        properties.setData({
        	encounterPk:encounterPk,  //就诊PK
        	qaTypeCode:context.qaTypeCode,    //质控类型编码
        	qaTypeName:qaTypeName,    //质控类型名称        	
        	patientRecord: owner.patientRecord,  //患者就诊记录        
        	workScreen:workScreen
        	
        });
	    
	    //获取工作区
		var block = this.getBlock('content');
		
		//获取病历树视图
		var mrDocTreeView = owner.down('mrdoctreeview');
		
		//初始化病历树
		var initTreeChain = mrDocTreeView.getActionChain('initTree');
		//initTreeChain.execute({'encounterSn':1203730});
		initTreeChain.execute({'encounterSn':encounterPk});
		
		//获取缺陷一览视图
		var defectinAndmreditview = owner.down('defectinAndmreditview');
		
		//初始化缺陷一览列表
		var searchDefectsChain =  defectinAndmreditview.getActionChain('searchDefectsAction');
		searchDefectsChain.execute();
		
		//根据记录创建文书
		if(context.record!=undefined){
			
			var mrdocBlock = defectinAndmreditview.down('qamreditblock');
			var mrSn = context.record.targetObjectPk;
			//iih.mr.qa.QaFunction.qaCreateMrdoc(mrdocBlock,mrSn);
			
			var defectsinGrid = defectinAndmreditview.down('xapgrid');
			
			//创建病历文书并添加到病历文书工作区
			var mrdocEditView = iih.mr.qa.QaFunction.qaCreateMrdoc(mrdocBlock,mrSn);
			
			mrdocEditView.on('editorOpened',function(medicalRecord){
				
				 //设置TITLE
				 iih.mr.qa.QaFunction.setBlockTitle(mrdocBlock,properties,context.record);
				 
				 //如果是终末质控需求判断提缺陷的按钮是否可操作
				 if(iih.mr.qa.QaFunction.getQaTypeBoolean(properties)){
					 
					 iih.mr.qa.QaFunction.setButDisabled(defectsinGrid,owner,false);
					 
				 }else{
					 
					 iih.mr.qa.QaFunction.setButDisabled(defectsinGrid,defectinAndmreditview,true);
				 }
			});
			
			/*//暂时先用任务处理
			this.task = new Ext.util.DelayedTask(function(){ me.setTitleAndButDisabled(defectsinGrid,defectinAndmreditview);}); 
			
			 if(iih.mr.qa.QaFunction.getQaTypeBoolean(properties)){
				 
				 //暂时先用定时来处理
				 me.task.delay(iih.mr.qa.QaFunction.taskTimes);
				 
			 }else{
				 
				 iih.mr.qa.QaFunction.setButDisabled(defectsinGrid,defectinAndmreditview,true);
			 }
			 
			 //设置TITLE
			 iih.mr.qa.QaFunction.setBlockTitle(mrdocBlock,properties,context.record);*/
		}
		
	},
	
	setTitleAndButDisabled:function(defectsinGrid,owner){

		iih.mr.qa.QaFunction.setButDisabled(defectsinGrid,owner,false);
	}
	
})

/** 
 * 病历树点击触发的事件加载病历
 * @extends Xap.ej.action.Action
 * @author ：wang_yanli11111111111
 */
Ext.define('iih.mr.qa.process_qa_work.action.MrInTreeItemClickAction', {
	extend:  Xap.ej.action.Action ,
	
	                                                             
    
	execute: function(context){  
		
		var owner = this.getOwner();  
		
		var me = this;
		
		//获取点击树的记录
		var treeRecord = context.event.arguments[1].raw;
		if(!treeRecord.leaf){
			return;
		}
		
		var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);//qaworkview
		
		var patientRecord = properties.data.patientRecord;
		
		//病历记录的主键
		var mrSn = treeRecord.mrPk;
		
        //获取编辑器及缺陷一览的视图
		var mrdocAndDefetcView = owner.down('defectinAndmreditview');
		
		//获取病历工作区的block
		var mrdocBlock = mrdocAndDefetcView.getBlock('top');
		
		//获取缺陷一览的表格
		var defectsinGrid =  mrdocAndDefetcView.getBlock('bottom');
		
		//文书类型对应的质控项目一级分类
		var firstCode = "";
		
		//创建病历文书并添加到病历文书工作区
		var mrdocEditView = iih.mr.qa.QaFunction.qaCreateMrdoc(mrdocBlock,mrSn);
		
		mrdocEditView.on('editorOpened',function(medicalRecord){
			
			firstCode = medicalRecord.firstCode;
			properties.data.firstCode = firstCode;
			properties.data.medicalRecord = medicalRecord;
			//设置TITLE
			 iih.mr.qa.QaFunction.setBlockTitle(mrdocBlock,properties,treeRecord);
			 
			 //如果是终末质控需求判断提缺陷的按钮是否可操作
			 if(iih.mr.qa.QaFunction.getQaTypeBoolean(properties)){
				 
				 iih.mr.qa.QaFunction.setButDisabled(defectsinGrid,owner,false);
				 
			 }else{
				 
				 iih.mr.qa.QaFunction.setButDisabled(defectsinGrid,owner,true);
			 }
		});
	
		
		/*//获取定位缺陷一览的CHAIN
		var positionChain = mrdocAndDefetcView.getActionChain('positionAction');
		positionChain.execute({record:treeRecord});*/
		
		//页面间要定位的文书存储
		properties.data.record = treeRecord;
		
	}

	
})

/** 
 * 质控工作主画面
 * @extends Xap.ej.template.BaseTemplate
 * @author ：wang_yanli
 */

Ext.define('iih.mr.qa.process_qa_work.view.QaWorkView',{
	extend: Xap.ej.template.BaseTemplate ,
	alias:'widget.qaworkview', 
	
	layout: 'fit',
	
	          
                                                            
                                                                  
                                                                         
                                            
	                                                   
	                                                    
	                                         
	                                          
	                                          
	                                           
	                                            
	                                     
	                                                   
	                                     
	                                                                
	           
	         
	xapConfig:{ 
			blocks: {   
				'content': {
					xclass: 'iih.mr.qa.process_qa_work.block.QaWorkBlock'
				}
			},
			actions:{
				'init': {
					xclass: 'iih.mr.qa.process_qa_work.action.QaWorkInitAction',
					blocks: {
						content:'content'
					}
				},
				'treeItemClickAction':{
					xclass: 'iih.mr.qa.process_qa_work.action.MrInTreeItemClickAction',
					blocks: {
						content:'content'
					}
				}
			},
			chains:{
				'init':['init'],
				'treeItemClickAction':['treeItemClickAction']
				//'closeAction':['closeAction']
			},
			connections:{
				'content':[{
					event: 'afterrender',
					chain: 'init'
				},
				{
					selector : 'mrinblock mrdoctreeview xaptree',
					event: 'itemclick',
					chain: 'treeItemClickAction'
				}]
			}
	  }	     	

	
})
/** 
 * 初始化环节质控工作画面：
 * @author ：wang_yanli
 */
Ext.define('iih.mr.qa.process_qa_work.action.ProcessWorkAction', {
extend:  Xap.ej.action.Action ,
	
	                                                        
	
	/*
	* @Override
	*/
	execute: function(context) {
		
		 var me = this;
		 //判断是否打开tab页
		 var owner = this.owner;
		 var record = context.record;
		 var event = context.event;;
		 var typeFlag;
		 if(record != undefined){
			 typeFlag = context.typeFlag;
			 var patientName = record.data.patientName;
	    	 iih.mr.qa.QaStatusGlobal.patient.name = patientName;
		 }else{
		 	 typeFlag = owner.typeFlag;
		 }
		 
		 
//		 var typeFlag = owner.typeFlag;
		 
		 //3=待签收患者列表
		 if(typeFlag == '3'){
		 	return;
		 }
		 var topBlock = this.getBlock('result');

	     //判断是患者质控还是终末质控
//	     var typeFlag = owner.typeFlag;
	     var enGrid;
	     var workScreen = '';
	     var pageTitle = '';
	     var pageCode = '';
	     if(typeFlag == '1'){
	     	enGrid = topBlock.down('xapgrid');
	     	workScreen = iih.mr.qa.QaStatusGlobal.workScreenWorkProcess;
	     	pageCode = "processQaWorkView";
	     	pageTitle = '环节质控工作';
	     }else if(typeFlag == '2'){
	     	enGrid = topBlock.down('xapgrid[name=alreadySignGrid]');
	   		workScreen = iih.mr.qa.QaStatusGlobal.workScreenWorkTerminal;
	   		pageCode = "terminalQaWorkView";
	   		pageTitle = '终末质控工作';
	     }else if(typeFlag == '5'){
	     	enGrid = topBlock.down('xapgrid');
	   		workScreen = iih.mr.qa.QaStatusGlobal.workScreenWorkDept; //8
	   		pageCode = "deptQaWorkView";
	   		pageTitle = '科室质控工作';
	     }
	     
	     if(record == undefined){
			 var selModel = enGrid.getSelectionModel();
	     	 record = selModel.getSelection()[0];
		 }
	     /*var selModel = enGrid.getSelectionModel();
	     var record = selModel.getSelection()[0];*/
	     
	      if(record == undefined){
	    	  XapMessageBox.info('请选择患者');
         }else{
		     var viewConfig = {		    		
					patientRecord: record.data,
					workScreen:workScreen
		     }
		    
	        if(event) {
	            var config = {
	                    pageCode: pageCode,
	                    pageTitle: pageTitle,
	                    viewConfig:  viewConfig
	                   // assistantConfig: item.assistantConfig
	                };
	            var canvas = Xap.getCanvas();
	            canvas.fireEvent("updatePatient",{patient:record.data});  // top患者信息刷新
	            canvas.fireEvent("addWorkPage",config);
	        };
         }
    }
});
Ext.define('iih.mr.qa.terminal_qa_patient.action.TerminalFinishAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override
	*/
	execute: function(context) {
		//    	this.callParent();
		this.showLoading();
		var data = context.data;
		var rb = this.getBlock('result');
//		var eventNm = context.event.name;
		var eventNm = context.eventNm;
		var grid;
		if(eventNm == 'finishDeptClick'){
			grid = rb.down('xapgrid');
		}else if(eventNm == 'finishTerminalClick'){
			grid = rb.down('xapgrid[name=alreadySignGrid]');
		}
		rb.eventNm = eventNm;
//		var rs = grid.getSelectionModel().getSelection();
		var rs = context.record;
		rb.rs = rs;
		var enPk = rs.data.pk; //就诊外键
		var operations = context.operations;
		var url = this.url;
		url += '/'+enPk;
		var METHODS = this.getInvocationMethods();
        var mclass = null;
		var operation = {
			url : url,
			method: 'put',
			scope : this,
			success : this.onSuccess
			// fail: this.onFail
		};
		operations.length = 0;
		operations.push(operation);
	},
	onSuccess : function(operation) {
		var view = this.getOwner();
		var block = this.getBlock('result');
		var eventNm = block.eventNm;
		var grid;
		if(eventNm == 'finishDeptClick'){		//判断是科室质控的完成还是终末质控的完成
			grid = block.down('xapgrid');
		}else if(eventNm == 'finishTerminalClick'){
			grid = block.down('xapgrid[name=alreadySignGrid]');
		}
		var rs = block.rs;
		var pageSize = block.pageSize;
		var initChain = view.getActionChain('search');
		initChain.execute({
			rs:rs,
			pageSize:pageSize
		});
	}     
});

Ext.define('iih.mr.qa.dept_qa_patient.view.DeptQAPatientListView',{
	extend :  Xap.ej.template.BaseTemplate ,

	alias:'widget.deptqapatientlistview',

	          
		                           
	   	                                  
		                                
		                                       
		                                             
		                           
		                           
		                                                         
		                                                             
		                                                                 
		                                                       
		                                                  
		                                                          
		                                                     
		                                                           
	  

	layout: {
        type : 'vbox',
        align : 'stretch'
    },
	
	xapConfig: {
		blocks: {
			'condition':{
				xclass: 'iih.mr.qa.dept_qa_patient.block.DeptQAPatientListBlock',
				height:56
			},
			'toolbar': {
				xclass: 'Xap.ej.block.ToolbarBlock',
				items: [{
					xtype: 'button',
					iconCls: 'icon-Search',
					text: '查询',
					action: 'search'
				}]
			},
			'result':{
				xclass: 'iih.mr.qa.dept_qa_patient.block.DeptQAPatientListGridBlock',
				flex:1
			}
		},
		actions: {
			'search': {
				xclass: 'iih.mr.qa.dept_qa_patient.action.DeptQAPatientListSearchAction',
				url:'qa/terminal/amrs',
				blocks: {
					condition: 'condition',
					result: 'result'
				}
			},
			'deptViewready': {
				xclass: 'iih.mr.qa.dept_qa_patient.action.DeptViewreadyAction',
				blocks: {
					condition: 'condition',
					result: 'result'
				}
			},
			/*'judgeState': { //判断表格中按钮的状态
				xclass: 'iih.mr.qa.terminal_qa_patient.action.JudgeStateAction',
				url:'qa/judgeState/amr',
				blocks: {
					condition: 'condition',
					result: 'result'
				}
			},*/
			'judgeBtn': { //判断按钮的状态
				xclass: 'iih.mr.qa.dept_qa_patient.action.JudgeBtnAction',
				blocks: {
					condition: 'condition',
					result: 'result'
				}
			},
			'back': {//打回
				xclass: 'iih.mr.qa.terminal_qa_patient.action.TerminalBackAction',
				url:'qa/back/amr',
				blocks: {
					condition: 'condition',
					result: 'result'
				}
			},
			'inDept': { //进入科室质控
				xclass: 'iih.mr.qa.process_qa_work.action.ProcessWorkAction',
				blocks: {
					condition: 'condition',
					result: 'result'
				}
			},
			'finishDept': {//完成科室质控
				xclass: 'iih.mr.qa.terminal_qa_patient.action.TerminalFinishAction',
				url:'qa/qaCompletedDept/amr',
				blocks: {
					condition: 'condition',
					result: 'result'
				}
			}
		},

		chains: {
			'search': ['search'],
			'judgeBtn':['judgeBtn'],
//			'judgeState': ['judgeState'],
			'back':['back'],
			'inDept':['inDept'],
			'finishDept':['finishDept'],
			'deptViewready':['deptViewready']
		},

		connections: {
			'condition':[{
                selector: 'comboxgrid[method=curDeptNm]',
                event: 'combochange',
                chain: 'search'
			},{
                selector: 'xaptextfield[name=amrNo]',
                event: 'blur',
                chain: 'search'
			},{
                selector: 'xaptextfield[name=patientName]',
                event: 'blur',
                chain: 'search'
			}],
			'result': [/*{
				event: 'afterrender',
				chain: 'search'
			},*/{
				selector: 'xapgrid',
				event: 'viewready',
				chain: 'deptViewready'
			},{
				selector: 'xapgrid',
				event: 'select',
				chain: 'judgeBtn'
			},{
				selector: 'xapgrid',
				event: 'itemdblclick',
				chain: 'inDept'
			},{//翻页操作
				selector: 'xapgrid',
				event: 'turnpage',
				chain: 'search'
			}],
			'toolbar': [{
				selector: 'button[action=search]',
				event: 'click',
				chain: 'search'
			}]
		}
	},
		
	initComponent : function() {
			this.callParent();
			this.addEvents("pageRefresh");//为视图添加刷新事件
			this.addListener('pageRefresh', function(){//添加监听事件
				 var properties = this.getLayer(Xap.ej.block.Layer.PROPERTIES);
		        var chain = this.getActionChain('search');
		        var block = this.getBlock('result');
//		        var pageSize = block.pageSize;
		        if(properties.data == undefined){
		        	 if(chain) {
		            chain.execute({});
		        	}
		        }else{
		        	var pageSize = properties.data.pageSize;
			        var pageNum = properties.data.pageNum;
			        if(chain) {
			            chain.execute({
			            	pageSize:pageSize,
			            	pageNum:pageNum
			            });
			        }
		        }
			});
		}
})
/** 
 * 查询：质控评分画面---查询质控评分
 * @author ：wang_yanli
 */
Ext.define('iih.mr.qa.doctor_self_score.action.QaScoreSearchAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	doExecute: function(context) {
	        this.prepareOperations(context.operations,context);
	 },
	 prepareOperations: function(operations,context) {
	        
	        var url = this.url;
	        var owner = this.getOwner();
	        var enPk = IMER_GLOBAL.encounterSn;
	    	var operation = {
	            url: url+'?enPk='+ enPk + '&qaTypeCode=',
	    		mclass: null,
	    		method: 'get',
	    		condition: null,
	    		scope: this,
	    		success: this.onSuccess
	    	};
	    	
	    	operations.length = 0;
	    	operations.push(operation);
	    
	 },

    onSuccess: function(operation) {
    	
        var scoreFormBlock = this.getBlock('result');
        
        var m = operation.result;
        m.data.score = '<div style=\'color:red;font-weight:800;font-size:24px;\'>'+ m.data.score+'分</div>';
        m.data.lvl = '<div style=\'color:red;font-weight:800;font-size:24px;\'>'+ m.data.lvl +'级</div>';
        scoreFormBlock.setData(m.data);
        
    }
});

/** 
 * 查询：质控评分画面---扣分项目列表
 * @author ：wang_yanli
 */

Ext.define('iih.mr.qa.doctor_self_score.action.ScoreItemListSearchAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	doExecute: function(context) {
		this.prepareOperations(context);
	 },
	 prepareOperations: function(context) {
		var operations = context.operations;
        var url = this.url;
        
        // 获取选中患者的就诊序号
        var enPk;
    	enPk = IMER_GLOBAL.encounterSn;
    	var operation = {
            url: url+'?enPk='+enPk+'&qaTypeCode=QAM13.04',
    		mclass: null,
    		method: 'get',
    		condition: null,
    		scope: this,
    		success: this.onSuccess
    	};
    	operations.length = 0;
    	operations.push(operation);
    },

   onSuccess: function(operation) {
	    var owner = this.getOwner(); 
	    var block = this.getBlock('bottom');
        var m = operation.result;
        block.setData(m);
       
        var chain = owner.getActionChain('qaScoreSearch');
        
        if(chain) {
            chain.execute();
        }
    }
});

Ext.define('iih.mr.qa.doctor_self_score.block.DoctorScoreFormBlock',{
	extend :  Xap.ej.block.FormBlock ,

	           
		                                 
		                                
                                         
                                        
                                           
	  

	alias:'widget.doctorscoreformblock',

	layout:{
        type: 'table',
        columns: 8,
        tableAttrs: {
            border: 0,
            cellpadding: 0,
            cellspacing: 0,
            height:60,
            width: '100%'
        },
        tdAttrs: {
            valign: 'middle',
            align:'left'
            
        }},
        items: [
                { 
                   xtype:'xapdisplayfield',
  	               name:'score',
  	               columnWidth:1,
  	               labelAlign : 'right',
  	               fieldLabel:'病案得分'
  	               
                },{
	               xtype:'xapdisplayfield',
	               name:'lvl',
	               columnWidth:4,
	               labelAlign : 'right',
	               fieldLabel:'等级'
	           },{
	               xtype:'xapdisplayfield',
	               name:'qaDivideLevelCd',
	               width:100,
	               fieldLabel:'',
	               value:'',
	               hidden:true
	           },{
                   xtype:'tbspacer',
                   width:800
	           }],

	setData: function(data) {
        this.callParent(arguments);
    },
    getData: function() {
        this.callParent(arguments);
    }
})
Ext.define('iih.mr.qa.doctor_self_score.block.DoctorScoreItemListBlock',{
	extend :  Xap.ej.block.Block ,


	alias:'widget.doctorscoreitemListblock',

	layout: 'fit',

	items: [{
		xtype: 'xapgridblock',
		title: '扣分项目',
		autoScroll:true,
		plugins : [Ext.create('Xap.ej.element.grid.plugin.CellEditing', {
			clicksToEdit : 1
		})],
		CM_JR_Record: [
				/*	{
						header : '扣分项目表主键',
						name: 'qaDivideCd',
						dataIndex : 'qaDivideCd',
						hidden:true
					},
					{
						header : '质控项目主键',
						name: 'qaItmPk',
						dataIndex : 'qaItmPk',
						hidden:true
					},
		 */
                  /* { header: '就诊序号', dataIndex: 'enSn', hidden: true},*/
                   { header: '质控类别', dataIndex: 'itemFirstNM', width:160},
                   { header: '评分项目', dataIndex: 'req', width:400,flex:1},
                   { header: '评分标准', dataIndex: 'deductDes', width:150},
                   { header: '扣分说明', dataIndex: 'drpDes', width:360}
		]
	}],

	setData: function(data) {
		
		var grid = this.down('xapgridblock');
		if(data){
			grid.setData(data.dataList);
		}else{
			grid.setData([]);
		}
	}
})
Ext.define('iih.mr.qa.doctor_self_score.view.DoctorScoreWorkView',{
	extend :  Xap.ej.stl.view.TopBottomContainerTemplate ,

	           
	                                             
	                                
                                        
                                        
                                       
                                     
                                                 
                                                  
	                                      
	                             
	                                                             
	                                                                 
	                                                                   
	                                                            
	    
	  

	alias:'widget.doctorscoreworkview',
 
	xapConfig: {
		blocks: {
		    'top': {
                xclass: 'iih.mr.qa.doctor_self_score.block.DoctorScoreFormBlock',
                height: 60
            },
			'bottom': {
				xclass: 'iih.mr.qa.doctor_self_score.block.DoctorScoreItemListBlock'
				
			}
		},

		actions: {
			'init': {
				xclass: 'iih.mr.qa.doctor_self_score.action.ScoreItemListSearchAction',
				url: 'qacustom/qaAuto',
				//url: 'qacustom/dropdoctor_self_scoreItems',
				blocks: {
					top: 'top',
					bottom: 'bottom'
				}
			},
			'qaScoreSearch': {
				xclass: 'iih.mr.qa.doctor_self_score.action.QaScoreSearchAction',
				url: 'qacustom/amrScore',
				//url: 'http://172.18.73.65:8083/scored/amr',
				blocks: {
					condition: 'properties',
					result: 'top'
				}
			}
		},

		chains: {
			'init':['init'],
			'qaScoreSearch':['qaScoreSearch']
			
		},

		connections: {
			'top': [/*{
				event: 'afterrender',
				chain: 'init'
			},*/
			],
			'bottom': [/*{
				event: 'afterrender',
				chain: 'init'
			 }
			*/]
		}
	},
	initComponent : function() {
		this.callParent();
		this.addEvents("pageRefresh");//为视图添加刷新事件
		this.addListener('pageRefresh', function(){//添加监听事件
		    //var owner = this.getOwner();
	        /*var chainGrid = this.getActionChain('refresh');
	        if(chainGrid) {
	            chainGrid.execute();
	        };*/
	        var chainInit = this.getActionChain('init');
	        if(chainInit) {
	        	chainInit.execute();
	        }
		});
	}
})
/** 
 * 查询：质控评分画面---扣分项目列表
 * @author ：wang_yanli
 */

Ext.define('iih.mr.qa.need_write_mr.action.MrListSearchAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	doExecute: function(context) {
		this.prepareOperations(context);
	 },
	 prepareOperations: function(context) {
		var operations = context.operations;
        var url = this.url;
        
        // 获取选中患者的就诊序号
        var enPk;
    	enPk = IMER_GLOBAL.encounterSn;
    	var operation = {
            url: url+'?enPk='+enPk,
    		mclass: null,
    		method: 'get',
    		condition: null,
    		scope: this,
    		success: this.onSuccess
    	};
    	operations.length = 0;
    	operations.push(operation);
    },

   onSuccess: function(operation) {
	    var owner = this.getOwner(); 
	    var block = this.getBlock('content');
        var m = operation.result;
        block.setData(m);
       
    }
});

Ext.define('iih.mr.qa.need_write_mr.block.MrListBlock',{
	extend :  Xap.ej.block.Block ,


	alias:'widget.mrlistblock',

	layout: 'fit',

	modCount: 0,//gird修改次数
	
	canSave: false,
	items: [{
		xtype: 'xapgridblock',
		title: '',
		autoScroll:true,
		plugins : [Ext.create('Xap.ej.element.grid.plugin.CellEditing', {
			clicksToEdit : 1
		})],
		CM_JR_Record: [
					
		 
                  // { header: '就诊序号', dataIndex: 'enSn', hidden: true},
                   { header: '文书类型', dataIndex: 'mrType', width:160},
                   { header: '质控项目', dataIndex: 'qaItem', width:400,flex:1},
                   { header: '截止时间', dataIndex: 'deadDate', xtype: 'xapdatecolumn', width:150},
                   { header: '剩余时间', dataIndex: 'surplusTime', width:150}
		]
	}],

	setData: function(data) {
		
		var grid = this.down('xapgridblock');
		if(data.dataList){
			grid.setData(data.dataList);
		}else{
			grid.setData([]);
		}
	}
})
Ext.define('iih.mr.qa.need_write_mr.view.MrListView',{
	extend:  Xap.ej.template.BaseTemplate ,

	           
	                                             
	                                
                                        
                                        
                                       
                                     
                                                 
                                                  
	                                      
	                             
	                                                
	                                                       
	    
	  

	alias:'widget.mrlistview',
 
	xapConfig: {
		blocks: {
			'content': {
				xclass: 'iih.mr.qa.need_write_mr.block.MrListBlock'
				
			}
		},

		actions: {
			'init': {
				xclass: 'iih.mr.qa.need_write_mr.action.MrListSearchAction',
				url: 'qacustom/needSubmitMr',
				blocks: {
					content: 'content'
				}
			}
		},

		chains: {
			'init':['init']
		},

		connections: {
			'content': [{
				event: 'afterrender',
				chain: 'init'
			}
			
			]
		}
	}
})
Ext.define('iih.mr.qa.process_qa_auto_search.action.QaAutoInitAction', {
	extend:  Xap.ej.action.Action ,
	
	/*
	* @Override
	*/
	execute: function(context) {
		var block = this.getBlock('content');
	    var curDeptNm = block.down('comboxgrid[name=curDeptNm]');
		curDeptNm.select(IMER_GLOBAL.department.code,true,true) ;
		curDeptNm.comboxHiddenValue = IMER_GLOBAL.department.code;
	}
});

Ext.define('iih.mr.qa.process_qa_auto_search.action.QaAutoSearchAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override
	*/
	execute: function(context) {
		if(context.event != undefined && context.event.name=='combochange' && context.event.from.rawValue != ""){
			return;
		}
		var view = this.getBlock('condition');
        var block = view.getBlock('content');
    	var condition = block.getData();
    	
		this.showLoading();
		var block = this.getBlock('result');
		var curDeptNm = context.curDeptNm;
		var currentManageDoctorName = context.currentManageDoctorName;
		var pageNum,pageSize;
		if(context.event == undefined){
			pageNum = context.pageNum; 
			pageSize = context.pageSize; 
		}else{
			pageNum = context.event.arguments[0]; 
			pageSize = context.event.arguments[1]; 
		}
		block.pageSize = pageSize;
		var data = {
			pageNum : pageNum,
			pageSize : pageSize,
            curDeptNm:curDeptNm,
            currentManageDoctorName:currentManageDoctorName
		}
    	var owner = this.getOwner();
        var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
        properties.setData({
            parentWindow: context.parentWindow,
            sourceView: context.sourceView,
            pageSize:pageSize,
            pageNum:pageNum,
            curDeptNm:curDeptNm
        });
    	var operations = context.operations;
    	if(!operations) {
    		return;
    	}
    	this.prepareOperations(operations,data);
    },
    
    prepareOperations: function(operations,data) {
        var view = this.getBlock('condition');
        var block = view.getBlock('content');
    	var condition = block.getData();
    	if(data.curDeptNm != undefined){
    		condition.curDeptNm = data.curDeptNm;
    	}

    	if(data.currentManageDoctorName != undefined){
    		condition.currentManageDoctorName = data.currentManageDoctorName;
    	}
        var url = this.url;
        var pageNum = data.pageNum; 
		var pageSize = data.pageSize; 
        if(condition) {
            var qs = Ext.Object.toQueryString(condition);
//            alert(qs);
            
            	if(data.pageSize == undefined || typeof(data.pageSize)=='object'){
            		if(qs) {
            			url += '?' + qs +"&workScreen=" + iih.mr.qa.QaStatusGlobal.workScreenWorkProcess;
            		}else{
            			url += '?' +"&workScreen=" + iih.mr.qa.QaStatusGlobal.workScreenWorkProcess;
            		}
            	}else{
            		if(qs) {
                		url += '?' + qs +"&workScreen=" + iih.mr.qa.QaStatusGlobal.workScreenWorkProcess +"&pageNum="+ pageNum +"&pageSize="+ pageSize;
            		}else{
            			url +='?' + "&workScreen=" + iih.mr.qa.QaStatusGlobal.workScreenWorkProcess + "&pageNum="+ pageNum +"&pageSize="+ pageSize;
            		}
            	}
            console.log(url);
        }
        var mclass = null;
        if(block.getModelClass) {
            mclass = block.getModelClass();
        }
    	var operation = {
            url: url,
    		mclass: mclass,
    		method: 'get',
    		condition: condition,
    		scope: this,
    		success: this.onSuccess
    	};
    	operations.length = 0;
    	operations.push(operation);
    },

    onSuccess: function(operation) {
        var block = this.getBlock('result');
        if(block){
	        var pageSize = block.pageSize;
	        var m = operation.result;
	        m.pageSize = pageSize;
	        // TODO 数据格式就这样了？
	        if(m instanceof Ext.data.Model) {
	            block.setData({
	                mclass: operation.mclass,
	                data: m.getData(true)
	            });
	        }
	        else {
	        	block.setData(m);
	        	console.log(m);
	        }
	        
	        //判断按钮状态
	        var grid = block.down('xapgrid');
	        if(grid){
	        	var rs = grid.getSelectionModel().getSelection();
			    //查看按钮
				var look = grid.down('button[method=look]');
				if(rs.length > 0){
					look.setDisabled(false);
				}else{
					look.setDisabled(true);
				} 
	        }
        }
    }
});

Ext.define('iih.mr.qa.process_qa_auto_search.block.QaAutoDefectListBlock',{
	extend :  Xap.ej.block.Block ,


	alias:'widget.qaautodefectlistblock',

	layout: 'fit',
	
	items: [{
		xtype: 'xapgridblock',
		title: '扣分项目',
		autoScroll:true,
		plugins : [Ext.create('Xap.ej.element.grid.plugin.CellEditing', {
			clicksToEdit : 1
		})],
		CM_JR_Record: [
					{
						header : '扣分项目表主键',
						name: 'qaDivideCd',
						dataIndex : 'qaDivideCd',
						hidden:true
					},
					{
						header : '质控项目主键',
						name: 'qaItmPk',
						dataIndex : 'qaItmPk',
						hidden:true
					},
		 
                   { header: '就诊序号', dataIndex: 'enSn', hidden: true},
                   { header: '质控类别', dataIndex: 'itemFirstNM', width:160},
                   { header: '评分项目', dataIndex: 'req', width:400,flex:1},
                   { header: '评分标准', dataIndex: 'deductDes', width:150},
                   { header: '扣分次数', dataIndex: 'deductScrTimes', width:150}
		]
	}],

	setData: function(data) {
		
		var grid = this.down('xapgridblock');
		if(data.dataList){
			grid.setData(data.dataList);
		}else{
			grid.setData([]);
		}
	}
})

/** 
 * 自动缺陷列表
 * @author ：yao_lijie
 */
 
Ext.define('iih.mr.qa.process_qa_auto_search.view.QaAutoDefectView',{
	extend:  Xap.ej.template.BaseTemplate ,
	           
	                                       
	                                           
	                                           
	                                          
	                                        
	                                             
	                                      
	                                    
	                                                  
			                                                      
			                                                         
	  

	alias:'widget.qaautodefectview',
	
	layout: {
        type : 'vbox',
        align : 'stretch'
    },
    
	xapConfig: {
		blocks: {
		    'top': {
                xclass: 'iih.mr.qa.score.block.ScoreFormBlock',
                height: 60
            },
			'bottom': {
				xclass: 'iih.mr.qa.process_qa_auto_search.block.QaAutoDefectListBlock'
			}
		},
		
		actions: {
			'init': {
				xclass: 'iih.mr.qa.score.action.ScoreItemListSearchAction',
				url: 'qacustom/dropScoreItems',
				blocks: {
					top: 'top',
					bottom: 'bottom'
				}
			},
			'qaScoreSearch': {
				xclass: 'iih.mr.qa.score.action.QaScoreSearchAction',
				url: 'qacustom/amrScore',
				blocks: {
					condition: 'properties',
					result: 'top'
				}
			}
		},

		chains: {
			'init':['init'],
			'qaScoreSearch':['qaScoreSearch']
		},

		connections: {
			'bottom':[{
				event: 'afterrender',
				chain: 'init'
			}]
		}
	}
})
/** 
 * 通知书缺陷列表
 * @author ：yao_lijie
 */
Ext.define('iih.mr.qa.process_qa_auto_search.action.ToQaAutoDefectAction', {
extend:  Xap.ej.action.Action ,
	
	                                                                     
	
	execute: function(context) {
		
		var me = this;
		
		var owner = this.getOwner();   
		
		var topBlock = this.getBlock('result');
	        
	    var enGrid = topBlock.down('xapgrid');
	     
	    var selModel = enGrid.getSelectionModel();
	        
	    var record = selModel.getSelection()[0];
	    
	    var pk = record.data.pk;
	    
	    var workScreen = iih.mr.qa.QaStatusGlobal.workScreenScoreAuto;
	    
	    var sourceView=this.getOwner();	
		
	    var event = context.event;
	    var pageCode = 'qaAutoDefectView';
	    var pageTitle = '扣分项列表';

	    var viewConfig = {
	    	patientRecord:record.data,
	    	pk: pk,
	    	workScreen:workScreen
	    }
        if(event) {
            var config = {
            	pageCode: pageCode,
            	pageTitle: pageTitle,
                viewConfig:  viewConfig
            };
            var canvas = Xap.getCanvas();
            canvas.fireEvent("updatePatient",{patient:record.data});  // top患者信息刷新
            canvas.fireEvent("addWorkPage",config);
        };
    }
});
Ext.define('iih.mr.qa.process_qa_auto_search.block.QaAutoSearchBlock',{
	extend :  Xap.ej.block.FormBlock ,
	
	requires: [],

	alias:'widget.qaautosearchblock',
	
	border: 0,

	items: [{
//		title: '自动质控工作查询',
		xtype: 'xapform',
	layout: {
		type: 'table',
		columns: 4,
		tableAttrs: {
            border: 0,
            cellpadding: 0,
            cellspacing: 1,
            width: '100%',
            height:86
        },
        tdAttrs: {
            valign: 'left'
        }
	},
	items:[{
			xtype:'comboxgrid',
//			margin:'10 0 10 0',
			name:'curDeptNm',
			method:'curDeptNm',
			url: 'organization/keyword',//科室查询的url
			fieldLabel:'科室',
			labelAlign : 'right',
			labelWidth : 50,
			listWidth:230,    //gird的宽度
			width:210,        //combo的宽度
			valueField : 'code',//科室编码的字段名
			displayField: 'name',//科室名称的字段名
			columns: [{              //grid的column配置
			   text: '科室编码',
			   dataIndex: 'code',
			   width:80
			},{
			   text: '科室',
			   flex:1,
			   dataIndex: 'name'
			}],
			callback:function(newValue,oldValue,record){  //在grid选择记录后的回调函数
				var view = this.up('qaautosearchview');
				var initChain = view.getActionChain('search');
				initChain.execute({
					curDeptNm:newValue
				});
			}
		},{
			xtype:'xaptextfield',
	        name:'amrNo',
//	        labelWidth:50,
	        labelAlign:'right',
	        fieldLabel:'住院号',
	        listeners:{
	        	specialkey : function(field, e) {  
	                if (e.getKey() == Ext.EventObject.ENTER) {  
	                    var view = this.up('qaautosearchview');
						var initChain = view.getActionChain('search');
						initChain.execute({}); 
	                }  
	            }
	        }
		},{
			xtype:'xaptextfield',
	        name:'patientName',
//	        labelWidth:60,
	        labelAlign:'right',
	        fieldLabel:'患者姓名',
//	        margin:'0 0 0 10',
	        listeners:{
	        	specialkey : function(field, e) {  
	                if (e.getKey() == Ext.EventObject.ENTER) {  
	                    var view = this.up('qaautosearchview');
						var initChain = view.getActionChain('search');
						initChain.execute({}); 
	                }  
	            }
	        }
		},{
	        xtype:'comboxgrid',
	        name:'currentManageDoctorName',
//	        margin:'0 100 10 150',
	        fieldLabel:'主管医师',
	        url: 'employee',
	        labelAlign : 'right',
			labelWidth : 60,
			listWidth:230,    //gird的宽度
			width:210, 
	        valueField : 'id',
	        displayField: 'name',
	        searchParam: {'deptCd': IMER_GLOBAL.department.code},
	        columns: [{
	           text: '人员id',
	           dataIndex: 'id',
	           width:70
	        },{
	           text: '医师姓名',
	           flex:1,
	           dataIndex: 'name'
	        }],
			callback:function(newValue,oldValue,record){  //在grid选择记录后的回调函数
				var view = this.up('qaautosearchview');
				var initChain = view.getActionChain('search');
				initChain.execute({
					currentManageDoctorName:newValue
				});
			  }
	    }]
	}]
})
Ext.define('iih.mr.qa.process_qa_auto_search.block.QaAutoSearchGridBlock',{
	extend :  Xap.ej.block.Block ,
	
	requires: [],

	alias:'widget.qaautosearchgridblock',
	
	layout: 'fit',
	border: 0,

    items:  [{
        xtype: 'xapgrid',
        ifSelect : true,
        selectBy: 'qaPk',
		tools:[{
           xtype:'button',
           text:'查看',
           method: 'look',
           disabled : true
       	}],
		autoScroll:true,
		pageSize : 25,
		pageShow : true,
             
  CM_JR_Record: [      
  				{  dataIndex: 'qaPk',field: 'textfield',type: 'string',flex:1 ,hidden:true},
  				//为了显示top信息
  				{  dataIndex: 'pk',field: 'textfield',type: 'string',flex:1 ,hidden:true},
  				{  dataIndex: 'patientId',field: 'textfield',type: 'string',flex:1 ,hidden:true},
  				{ header: '住院号', dataIndex: 'amrNo',field: 'textfield',type: 'string',width:90 ,hidden:true},
  				{ header: '床号', dataIndex: 'currentBedCode',field: 'textfield',type: 'string',width:70 ,hidden:true},
  				{ header: '患者姓名', dataIndex: 'patientName',field: 'textfield',type: 'string',width:100 ,hidden:true},
                { header: '性别', dataIndex: 'sexName',field: 'textfield',type: 'string',width:60 ,hidden:true},
                { header: '年龄', dataIndex: 'age',field: 'textfield',type: 'string',width:60 ,hidden:true},
                { header: '入院时间', dataIndex: 'receiveTime',xtype: 'xapdatecolumn',width:130 ,hidden:true},
//  				{ header: '质控日期', dataIndex: 'crtTime',xtype: 'xapdatecolumn',width:130},
  				{ header: '住院号', dataIndex: 'amrNo',field: 'textfield',type: 'string',width:150},
  				{ header: '患者姓名', dataIndex: 'patientName',field: 'textfield',type: 'string',width:120},
  				{ header: '主诊断', dataIndex: 'currentMainDiagnosisName',field: 'textfield',type: 'string',flex:1 },
                { header: '缺陷数', dataIndex: 'faultTotal',field: 'textfield',type: 'int',width:80 },
                { header: '主管医师', dataIndex: 'currentManageDoctorName',field: 'textfield',type: 'string',width:120 },
                { header: '就诊科室', dataIndex: 'currentDeptName' ,field: 'textfield',type: 'string',width:120}
                
        ]
    }],
    setData: function(data) {
        	var grid = this.down('xapgrid');
        	var dataList = data.dataList;
        	if(grid){
        		if(dataList){
			    	var totalList = {"total":data.total,"dataList":dataList};
			    	var pageSize = data.pageSize;
			    	if(pageSize == undefined || typeof(data.pageSize) == 'object'){
			    		grid.setPageData(totalList);	//初始化赋值
			    	}else{
			    		grid.setData(dataList);	//翻页时赋值
			    	}
	        	}else{
	        		var totalList = {"total":data.total,"dataList":data.dataList};
	        		grid.setPageData(totalList);
	        	}
        	}
    	}  
})

Ext.define('iih.mr.qa.process_qa_auto_search.view.QaAutoInitView',{
	extend :  Xap.ej.template.BaseTemplate ,

	alias:'widget.qaautoinitview',

	          
		                                
   		                                
		                                       
		                                             
		                           
		                           
   		                             
   		                                  
   		                                  
   		                                         
   		                                                           
   		                                                          
	  

	layout: {
        type : 'fit'
    },
	
	xapConfig: {
		blocks: {
			'content':{
				xclass: 'iih.mr.qa.process_qa_auto_search.block.QaAutoSearchBlock'
			}
		},
		actions: {
			'init': {
				xclass: 'iih.mr.qa.process_qa_auto_search.action.QaAutoInitAction',
				blocks: {
					content: 'content'
				}
			}
		},

		chains: {
			'init': ['init']
		},

		connections: {
			'content':[{
				event: 'afterrender',
				chain: 'init'
			}]
		}
	}
})
Ext.define('iih.mr.qa.process_qa_auto_search.view.QaAutoSearchView',{
	extend :  Xap.ej.template.BaseTemplate ,

	alias:'widget.qaautosearchview',

	          
		                                
   		                                
		                                       
		                                             
		                           
		                           
   		                             
   		                                  
   		                                  
   		                                         
   		                                                       
   		                                                               
   		                                                             
   		                                                    
   		                                                               
   		                                                                 
	  

	layout: {
        type : 'vbox',
        align : 'stretch'
    },
	
	xapConfig: {
		blocks: {
			'condition':{
				xclass: 'iih.mr.qa.process_qa_auto_search.view.QaAutoInitView',
				height:86
			},
			'toolbar': {
				xclass: 'Xap.ej.block.ToolbarBlock',
				items: [{
					xtype: 'button',
					iconCls: 'icon-Search',
					text: '查询',
					action: 'search'
				}]
			},
			'result':{
				xclass: 'iih.mr.qa.process_qa_auto_search.block.QaAutoSearchGridBlock',
				flex:1
			}
		},
		actions: {
			'search': {
				xclass: 'iih.mr.qa.process_qa_auto_search.action.QaAutoSearchAction',
				url:'qa/inprocess/autowork',
				blocks: {
					condition: 'condition',
					result: 'result'
				}
			},
			'judgeBtn':{
				xclass: 'iih.mr.qa.process_qa_search.action.JudgeBtnAction',
				blocks: {
				    result: 'result'
				}
			},
			'look': {
				xclass: 'iih.mr.qa.process_qa_auto_search.action.ToQaAutoDefectAction',
				blocks: {
					condition: 'condition',
					result: 'result'
				}
			},
			'inProcessWorkViewready': {
				xclass: 'iih.mr.qa.process_qa_search.action.InProcessWorkViewreadyAction',
				blocks: {
					condition: 'condition',
					result: 'result'
				}
			}
		},

		chains: {
			'search': ['search'],
			'judgeBtn':['judgeBtn'],
			'look':['look'],
			'inProcessWorkViewready':['inProcessWorkViewready']
		},

		connections: {
			'condition':[{
                selector: 'comboxgrid[method=curDeptNm]',
                event: 'combochange',
                chain: 'search'
			},{
                selector: 'comboxgrid[name=currentManageDoctorName]',
                event: 'combochange',
                chain: 'search'
			}],
			'result': [{
				selector: 'xapgrid',
				event : 'viewready',
				chain: 'inProcessWorkViewready'
			},{
				selector: 'xapgrid',
				event : 'itemclick',
				chain: 'judgeBtn'
			},{
				selector: 'xapgrid',
				event: 'itemdblclick',
				chain: 'look'
			},{//翻页操作
				selector: 'xapgrid',
				event: 'turnpage',
				chain: 'search'
			}],
			'toolbar': [{
				selector: 'button[action=search]',
				event: 'click',
				chain: 'search'
			}]
		}
	},
		
	initComponent : function() {
			this.callParent();
			this.addEvents("pageRefresh");//为视图添加刷新事件
			this.addListener('pageRefresh', function(){//添加监听事件
				 var properties = this.getLayer(Xap.ej.block.Layer.PROPERTIES);
		        var chain = this.getActionChain('search');
		        var block = this.getBlock('result');
//		        var pageSize = block.pageSize;
		        if(properties.data == undefined){
		        	 if(chain) {
		            chain.execute({});
		        	}
		        }else{
		        	var pageSize = properties.data.pageSize;
			        var pageNum = properties.data.pageNum;
			        if(chain) {
			            chain.execute({
			            	pageSize:pageSize,
			            	pageNum:pageNum
			            });
			        }
		        }
			});
		}
})
Ext.define('iih.mr.qa.process_qa_patient.action.ConfirmOpenAction', {
    extend:  Xap.ej.action.Action ,

    /*
     * @Override
     */
    execute: function(context) {
    	var me = this;
    	
		var owner = this.getOwner();   
		
		var typeFlag = owner.typeFlag;
		
		var topBlock = this.getBlock('result');
	        
	    var enGrid = topBlock.down('xapgrid');
	     
	    var selModel = enGrid.getSelectionModel();
	        
	    var record = selModel.getSelection()[0];
	    
	    var pk = record.data.pk;
	    var patientName = record.data.patientName;
	    var curPatientName = iih.mr.qa.QaStatusGlobal.patient.name;
	     
		var eventName = context.event.name;
	    var topview = owner.up('portalblock').down('topview');//
		var eventNm = topview.eventNm;
		var encounterSn = IMER_GLOBAL.encounterSn;
		var processQaDefectsView;
		var processQaWorkView;
		var items = owner.up().items.items;
		for(var i=0;i<items.length;i++){
			var tabId = items[i].tabId;
			if('processQaDefectsView' == tabId){
				processQaDefectsView = items[i];
			}else if('processQaWorkView' == tabId){
				processQaWorkView = items[i];
			}
		}
		
		if(eventName == 'linkClick'){
			var faultTotal = record.data.faultTotal;
		    if(faultTotal == '' || faultTotal == null){
		    	return;
		    }
		}
	    
		if(eventNm != undefined && eventName != eventNm && encounterSn !=pk && encounterSn !=null){
			
			XapMessageBox.confirm2('当前正在质控【'+curPatientName+'】患者，是否切换至【'+patientName+'】患者？', function(id){
				if(id=='yes'){
					var owner = me.getOwner();
					topview.eventNm = eventName;
				        var chain = owner.getActionChain('defects');
				        if(chain) {
				            chain.execute({
				            	record:record,
				            	event:context.event
				            });
				        }
				        var chain = owner.getActionChain('inProcess');
				        if(chain) {
				            chain.execute({
				            	record:record,
				            	event:context.event,
				            	typeFlag:typeFlag
				            });
				        }
				}
			});
			
		}else{
			if(eventName == 'linkClick' ){
				var owner = me.getOwner();
				topview.eventNm = eventName;
				if(processQaWorkView){
					var chain = owner.getActionChain('inProcess');
				        if(chain) {
				            chain.execute({
				            	record:record,
				            	event:context.event,
				            	typeFlag:typeFlag
				            });
				        }
					}
			        var chain = owner.getActionChain('defects');
			        if(chain) {
			            chain.execute({
			            	record:record,
			            	event:context.event
			            });
			        }
			}else if(eventName == 'itemdblclick'){
				var owner = me.getOwner();
				topview.eventNm = eventName;
				if(processQaDefectsView){
					var chain = owner.getActionChain('defects');
			        if(chain) {
			            chain.execute({
			            	record:record,
			            	event:context.event
			            });
			        }
				}
			        var chain = owner.getActionChain('inProcess');
			        if(chain) {
			            chain.execute({
			            	record:record,
			            	event:context.event,
			            	typeFlag:typeFlag
			            });
			        }
			}
		}
	    
    }
});

Ext.define('iih.mr.qa.process_qa_patient.action.InProcessConditionInitAction', {
	extend:  Xap.ej.action.Action ,
	
	/*
	* @Override
	*/
	execute: function(context) {
		var block = this.getBlock('content');
	    var curDeptNm = block.down('comboxgrid[name=curDeptNm]');
		curDeptNm.select(IMER_GLOBAL.department.code,true,true) ;
		curDeptNm.comboxHiddenValue = IMER_GLOBAL.department.code;
	}

});

Ext.define('iih.mr.qa.process_qa_patient.action.InProcessQAPatientListSearchAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override
	*/
	execute: function(context) {
		if(context.event != undefined && context.event.name=='combochange' && context.event.from.rawValue != ""){
			return;
		}
		this.showLoading();
		var block = this.getBlock('result');
		var curDeptNm = context.curDeptNm;
		var pageNum,pageSize;
		if(context.event == undefined){
			pageNum = context.pageNum; 
			pageSize = context.pageSize; 
		}else{
			pageNum = context.event.arguments[0]; 
			pageSize = context.event.arguments[1]; 
		}
		block.pageSize = pageSize;
		var data = {
			pageNum : pageNum,
			pageSize : pageSize,
			curDeptNm:curDeptNm
		}
    	var owner = this.getOwner();
        var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
        properties.setData({
            parentWindow: context.parentWindow,
            sourceView: context.sourceView,
            pageSize:pageSize,
            pageNum:pageNum,
            curDeptNm:curDeptNm
        });
    	var operations = context.operations;
    	if(!operations) {
    		return;
    	}
    	this.prepareOperations(operations,data);
    },
    
    prepareOperations: function(operations,data) {
        var block = this.getBlock('condition');
        var topBlock = block.getBlock('content');
    	var condition = topBlock.getData();
    	if(data.curDeptNm != undefined){
    		condition.curDeptNm = data.curDeptNm;
    	}
        var url = this.url;
        var pageNum = data.pageNum; 
		var pageSize = data.pageSize; 
        if(condition) {
            var qs = Ext.Object.toQueryString(condition);
//            alert(qs);
            
            	if(data.pageSize == undefined || typeof(data.pageSize)=='object'){
            		if(qs) {
            			url += '?' + qs +"&workScreen=" + iih.mr.qa.QaStatusGlobal.workScreenWorkProcess;
            		}else{
            			url += '?' +"&workScreen=" + iih.mr.qa.QaStatusGlobal.workScreenWorkProcess;
            		}
            	}else{
            		if(qs) {
                		url += '?' + qs +"&workScreen=" + iih.mr.qa.QaStatusGlobal.workScreenWorkProcess +"&pageNum="+ pageNum +"&pageSize="+ pageSize;
            		}else{
            			url +='?' + "&workScreen=" + iih.mr.qa.QaStatusGlobal.workScreenWorkProcess + "&pageNum="+ pageNum +"&pageSize="+ pageSize;
            		}
            	}
            console.log(url);
        }
        var mclass = null;
        if(block.getModelClass) {
            mclass = block.getModelClass();
        }
    	var operation = {
            url: url,
    		mclass: mclass,
    		method: 'get',
    		condition: condition,
    		scope: this,
    		success: this.onSuccess
    	};
    	operations.length = 0;
    	operations.push(operation);
    },

    onSuccess: function(operation) {
        var block = this.getBlock('result');
        if(block){
	        var pageSize = block.pageSize;
	        var m = operation.result;
	        m.pageSize = pageSize;
	        // TODO 数据格式就这样了？
	        if(m instanceof Ext.data.Model) {
	            block.setData({
	                mclass: operation.mclass,
	                data: m.getData(true)
	            });
	        }
	        else {
	        	block.setData(m);
	        	console.log(m);
	        }
	        
	        //判断按钮状态
	        var grid = block.down('xapgrid');
	        if(grid){
	        	var rs = grid.getSelectionModel().getSelection();
			    //进入环节质控按钮
				var inProcess = grid.down('button[method=inProcess]');
				if(rs.length > 0){
					inProcess.setDisabled(false);
				}else{
					inProcess.setDisabled(true);
				} 
	        }
        }
    }
});

/** 
 * 环节质控页面加载完成后查找到tools上的相关按钮进行事件的监听
 * @extends Xap.ej.action.Action
 * @author ：yao_lijie
 */

Ext.define('iih.mr.qa.process_qa_patient.action.InProcessViewreadyAction', {
	extend:  Xap.ej.action.Action ,
	
	requires:[],
	      
	execute: function(context){
		var me = this;
		
	    var owner = this.getOwner();
	    
	    //获取就诊一览的 block
		var resultBlock = this.getBlock('result');	
		var inProcessGrid = resultBlock.down('xapgrid');

		//进入环节质控按钮
		var inProcess = inProcessGrid.down('button[method=inProcess]');
		inProcess.on('click',function(btn){
			context.event.name='itemdblclick';
			var inProcessChain = me.getOwner().getActionChain("confirmOpen");
			inProcessChain.execute(context);
		});
	}
	
})
/** 
 * 点击记录，判断按钮状态
 * @author ：yao_lijie
 */
Ext.define('iih.mr.qa.process_qa_patient.action.JudgeBtnAction', {
	extend:  Xap.ej.action.Action ,
	
	execute: function(context) {
		var block = this.getBlock('result');
		var grid = block.down('xapgrid');
		//环节质控进入环节质控按钮
		var inProcess = grid.down('button[method=inProcess]');
		inProcess.setDisabled(false);
	}
});

/** 
 * 查询：环节质控---缺陷一览列表
 * @author ：yao_lijie
 */
Ext.define('iih.mr.qa.process_qa_patient.action.QaDefectListAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	doExecute: function(context) {
			this. showLoading();
	        this.prepareOperations(context);
	 },
	 prepareOperations: function(context) {
		 var me = this;
		
	    var owner = this.getOwner();   
	    
	    var record = owner.revisionRecord;
	    
	    var pk = record.data.pk;
	    
		var operations = context.operations;
		
        var bottomBlock = this.getBlock('result');  
        
       var event = context.event;
        
        var url = this.url;
        var qs = 'pk=' + pk;
    	var operation = {
            url: url + '?' +qs,
    		mclass: null,
    		method: 'get',
    		condition: null,
    		scope: this,
    		success: this.onSuccess
    	};
    	operations.length = 0;
    	operations.push(operation);
    },

    onSuccess: function(operation) {
        var block = this.getBlock('result');
        var m = operation.result;
        var data = m.data.qaFaultList.dataList;
        block.setData(data);
    }
});

/** 
 * 缺陷列表block
 * @author ：yao_lijie
 */
Ext.define('iih.mr.qa.process_qa_search.block.NotificationDefectListBlock',{
	extend :  Xap.ej.block.Block ,
	
	           
   		                           
		                                 
   	  
   	
	alias:'widget.notificationdefectlistblock',

	layout: 'fit',

	items: [{
		xtype: 'xapgrid',
		tools:[{
            itemId: 'up',
            hidden: false,
            xtype: 'tool',
            type: 'up'
        },{
            itemId: 'down',
            hidden: true,
            xtype: 'tool',
            type: 'down'
        }
	],
		autoScroll:true,
		title:'缺陷列表',
		CM_JR_Record: [
		   {header: '状态', dataIndex: 'fltStaNm', field: 'textfield', type: 'string', width: 80},
           {header: '文书名称', dataIndex: 'mrName', alink:true,field: 'textfield', type: 'string', width: 170},
           {header: '缺陷描述', dataIndex: 'req', field: 'textfield', type: 'string',flex:1},
           {header: '扣分标准', dataIndex: 'deductDes', field: 'textfield',type: 'string', width: 80},
           {header: '缺陷次数',dataIndex: 'deductScrTimes', field: 'textfield', type: 'string' ,width: 80},
           { header: '提出日期', dataIndex: 'sbmtTime', xtype: 'xapdatecolumn',width:130},
           {header: '提出人', dataIndex: 'crtUserNm', field: 'textfield', type: 'string', width: 80},
           {header: '整改说明', dataIndex: 'rfmDes', field: 'textfield', type: 'string', flex:1},
           {header : '缺陷主键', name: 'qaFltPk', dataIndex : 'qaFltPk', hidden:true },
		   {header : '质控项', name: 'qaItmCd', dataIndex : 'qaItmCd', hidden:true },
           {header: '文书主键', dataIndex: 'mrPk', field: 'textfield', type: 'string', hidden:true },
		   {header: '缺陷状态编码', dataIndex: 'fltStaCd', field: 'textfield', type: 'string', hidden:true}
		]
	}],

	setData: function(data) {
		var grid = this.down('xapgrid');
		if(data){
			grid.setData(data);
		}else{
			grid.setData([]);
		}
	}
})
/** 
 * 环节质控查询页面，缺陷列表加载完成后查找到tools上的相关按钮进行事件的监听
 * @extends Xap.ej.action.Action
 * @author ：cheng_feng
 */

Ext.define('iih.mr.qa.process_qa_search.action.ProcessQaDefectViewreadyAction', {
	extend:  Xap.ej.action.Action ,
	
	requires:[],
	      
	execute: function(context){
		
		var me = this;
		
	    var owner = this.getOwner();
	    
		//获取缺陷一览的 block
		var bottomBlock = this.getBlock('bottom');		
		var defectGrid = bottomBlock.down('xapgrid');
		
		
		//向上按钮
		var up = bottomBlock.down('tool[itemId=up]');
		up.addListener('click', function() {
            me.maximize(300,bottomBlock);
            up.hide();
            down.show();
        });
		
		//向下按钮
		var down = bottomBlock.down('tool[itemId=down]');
		down.addListener('click', function() {
            me.minimize(bottomBlock);
            up.show();
            down.hide();
        });
       
        //表头
		var tbar = defectGrid.down('header');
        tbar.addListener('dblclick', function() {
            if(down.hidden==false){
               me.minimize(bottomBlock);
               up.show();
               down.hide();
            }else{
               me.maximize(300,bottomBlock);
               up.hide();
               down.show();
            }
        });
        
	},
    
    maximize: function(h,bottomBlock) {
        bottomBlock.setHeight(h);
    },
    
    minimize: function(bottomBlock) {
        bottomBlock.setHeight(200);
    }
	
})
/** 
 * 环节质控缺陷列表
 * @author ：yao_lijie
 */
 
Ext.define('iih.mr.qa.process_qa_patient.view.ProcessQaDefectsView',{
	extend:  Xap.ej.template.BaseTemplate ,
	           
	                                       
	                                           
	                                           
	                                          
	                                        
	                                             
	                                      
	                                    
	                                                           
	                                                                           
	                                                                    
	                                                                 
	  

	alias:'widget.processqadefectsview',
	
	layout: {
        type : 'vbox',
        align : 'stretch'
    },
    
	xapConfig: {
		blocks: {
		    'top': {
                xclass: 'iih.mr.qa.process_qa_work.block.QaMrEditBlock',
                flex:1
            },
			'bottom': {
				xclass: 'iih.mr.qa.process_qa_search.block.NotificationDefectListBlock',
				height:200
			}
		},
		
		actions: {
			'init': {
				xclass: 'iih.mr.qa.process_qa_patient.action.QaDefectListAction',
				url: 'qa/patient/faults',
				blocks: {
					condition: 'properties',
					top:'top',
					result: 'bottom'
				}
			},
			'qaMrSignOpen': {
				xclass: 'iih.mr.qa.process_qa_track.action.QaMrSignOpenAction',
				blocks: {
					condition: 'properties',
					top: 'top',
					result: 'bottom'
				}
			},
			'processQaDefectViewready': {
				xclass: 'iih.mr.qa.process_qa_search.action.ProcessQaDefectViewreadyAction',
				blocks: {
					top: 'top',
					bottom: 'bottom'
				}
			}
		},

		chains: {
			'init':['init'],
			'qaMrSignOpen':['qaMrSignOpen'],
			'processQaDefectViewready':['processQaDefectViewready']
		},

		connections: {
			'bottom':[/*{
				event: 'afterrender',
				chain: 'init'
			},*/{
				selector: 'xapgrid',
				event: 'viewready',
				chain: 'processQaDefectViewready'
			},{
				selector: 'xapgrid',
				event:'itemdblclick',
				chain: 'qaMrSignOpen'
			},{
                selector: 'xapgrid',
                event: 'linkClick',
                chain: 'qaMrSignOpen'
            }]
		}
	},
		
	initComponent : function() {
			this.callParent();
			this.addEvents("pageRefresh");//为视图添加刷新事件
			this.addListener('pageRefresh', function(){//添加监听事件
				var properties = this.getLayer(Xap.ej.block.Layer.PROPERTIES);
		        var chain = this.getActionChain('init');
		        if(chain) {
		            chain.execute({});
		        }
			});
		}
})
/** 
 * 通知书缺陷列表
 * @author ：yao_lijie
 */
Ext.define('iih.mr.qa.process_qa_patient.action.ToProcessQaDefectAction', {
extend:  Xap.ej.action.Action ,
	
	                                                                     
	
	execute: function(context) {
		
		var me = this;
		
		var owner = this.getOwner();   
	    var record = context.record;
	    var  event = context.event;
	    
	    var patientName = record.data.patientName;
	    iih.mr.qa.QaStatusGlobal.patient.name = patientName;
	   /* var topview = owner.up('portalblock').down('topview');
		topview.eventNm = record.eventNm;*/
		
		/*var topBlock = this.getBlock('result');
	        
	    var enGrid = topBlock.down('xapgrid');
	     
	    var selModel = enGrid.getSelectionModel();
	        
	    var record = selModel.getSelection()[0];
	    
	    var faultTotal = record.data.faultTotal;
	    if(faultTotal == '' || faultTotal == null){
	    	return;
	    }
	    
	    var pk = record.data.pk;
	    
	    var sourceView=this.getOwner();	*/
		
	    var event = context.event;
	    var pageTitle = '缺陷列表';
	    var	pageCode = "processQaDefectsView";

	    var viewConfig = {
	    	revisionRecord:record
	    }
        if(event) {
            var config = {
            	pageCode: pageCode,
            	pageTitle: pageTitle,
                viewConfig:  viewConfig
            };
            var canvas = Xap.getCanvas();
            canvas.fireEvent("updatePatient",{patient:record.data});  // top患者信息刷新
            canvas.fireEvent("addWorkPage",config);
        };
    }
});
Ext.define('iih.mr.qa.process_qa_patient.block.InProcessQAPatientListBlock',{
	extend :  Xap.ej.block.FormBlock ,
	
	requires: [],

	alias:'widget.inprocessqapatientlistblock',
	
	border: 0,

	items: [{
		title: '环节质控患者查询',
		xtype: 'xapform',
	layout: {
		type: 'table',
		columns: 3,
		//width: 1024,
		tableAttrs: {
            border: 0,
            cellpadding: 0,
            cellspacing: 1,
            width: '100%'/*,
            height:86*/
        },
        tdAttrs: {
            valign: 'left'
        }
	},
	items:[
	    {
			xtype:'comboxgrid',
			margin:'10 0 10 0',
			name:'curDeptNm',
			method:'curDeptNm',
			url: 'organization/keyword',//科室查询的url
			fieldLabel:'科室',
			labelAlign : 'right',
			labelWidth : 50,
			listWidth:230,    //gird的宽度
			width:210,        //combo的宽度
			valueField : 'code',//科室编码的字段名
			displayField: 'name',//科室名称的字段名
			columns: [{              //grid的column配置
			   text: '科室编码',
			   dataIndex: 'code',
			   width:80
			},{
			   text: '科室',
			   flex:1,
			   dataIndex: 'name'
			}],
			callback:function(newValue,oldValue,record){  //在grid选择记录后的回调函数
				var view = this.up('inprocessqapatientlistview');
				var initChain = view.getActionChain('search');
				initChain.execute({
					curDeptNm:newValue
				});
			   /* console.log(newValue);     //本次选择的科室编码
			    console.log(oldValue);     //上次选择的科室编码
			    console.log(record);       //本次选择的科室完整记录
*/			}
	},/*{
		xtype:'comboxgrid',
        name:'curMainDiNm',
        dataIndex : 'curMainDiNm',
        method:'diagnosis',
        anchor: "90%",
        width:200,
        fieldLabel:'主诊断',
        labelWidth : 60,
		labelAlign : 'right',
        parentXtype:'inprocessqapatientlistblock',
        dictionary:'diagnosisCdLoad',
        columns: [{
            text: '适用病种编码',
            dataIndex: 'value',
//            dataIndex: 'abbr',
            hidden:true
        },{
            text: '适用病种',
            dataIndex: 'text'
//            dataIndex: 'name'
        }],
        serchParam:['keyword'],
        displayField: 'text',
//        displayField: 'name',
        valueField: 'value'
	},*/
	{
		xtype:'xaptextfield',
//		width:140,
        name:'amrNo',
        labelWidth:50,
        labelAlign:'right',
        fieldLabel:'住院号',
        listeners:{
        	specialkey : function(field, e) {  
                if (e.getKey() == Ext.EventObject.ENTER) {  
                    var view = this.up('inprocessqapatientlistview');
					var initChain = view.getActionChain('search');
					initChain.execute({}); 
                }  
            }
        }
	},{
		xtype:'xaptextfield',
//		width:140,
        name:'patientName',
        labelWidth:60,
        labelAlign:'right',
        fieldLabel:'患者姓名',
        margin:'0 0 0 10',
        listeners:{
        	specialkey : function(field, e) {  
                if (e.getKey() == Ext.EventObject.ENTER) {  
                    var view = this.up('inprocessqapatientlistview');
					var initChain = view.getActionChain('search');
					initChain.execute({}); 
                }  
            }
        }
	},{
		xtype: 'xapcheckboxgroup',
		method:'checkFlag',
		width:300,
		margin:'0 0 5 20',
//		colspan:4,
		vertical: true,
		items: [
			{ boxLabel: '病危/病重', name: 'dangerIll', inputValue: '1' ,width:100},//病重为seriouslyIll
			{ boxLabel: '手术', name: 'suF', inputValue: '1' ,width:70},
			{ boxLabel: '质控标记', name: 'qaFlag', inputValue: '1' ,width:130}
		]
	},{
		xtype: 'xapradiogroup',
		border: 1,
		style: {
    		borderStyle: 'dashed'
		},
		method:'changeTime',
		
//		fieldLabel: '',
		margin:'0 0 5 10',
//		width:285,
		items: [
			{boxLabel: '入院24小时内', name: 'rcvTime',width:100, inputValue: '1'},
			{boxLabel: '入院7天内', name: 'rcvTime', width:80,inputValue: '2'},
			{boxLabel: '全部', name: 'rcvTime', width:50,inputValue: '3', checked: true}
		]/*,
		listeners: {
			change:function(editor, e){ 
				var form = editor.up('xapform');
				var xapcheckbox = form.down('xapcheckbox');
				if(e.rcvTime == '3' ){
					xapcheckbox.setDisabled(true);
				}else{
					xapcheckbox.setDisabled(false);
				}
			}
		}*/
	},{
		xtype: 'xapradiogroup',
		border: 1,
		style: {
    		borderStyle: 'dashed'
		},
		method:'inOrOut',
		margin:'0 0 0 15',
		items: [
			{boxLabel: '在院患者', name: 'enStaCd',width:85, inputValue: '1',checked: true},
			{boxLabel: '出院未完成', name: 'enStaCd', width:85,inputValue: '2'}
		]
	}/*,{
		xtype: 'xapcheckbox',
		boxLabel : '已出院',
//		margin:'0 0 0 80',
		name: 'leaveHospitalF',
		method:'leaveHospitalF',
		inputValue: '1',
//		width:200,
		listeners: {
			change:function(editor, checked){ 
				var form = editor.up('xapform');
				var xapradiogroup = form.down('xapradiogroup');
				var allIn = xapradiogroup.items.items[2];
				if(checked){
					allIn.setDisabled(true);
				}else{
					allIn.setDisabled(false);
				}
			}
		}
	}*//*,{
		xtype : 'tbspacer', //插入的空填充
		width : 50
	}*/]
	}]
})
var widthRate = 1
Ext.define('iih.mr.qa.process_qa_patient.block.InProcessQAPatientListGridBlock',{
	extend :  Xap.ej.block.Block ,
	
	requires: [],

	alias:'widget.inprocessqapatientlistgridblock',
	
	layout: 'fit',
	border: 0,

    items:  [{
        xtype: 'xapgrid',
        ifSelect : true,
        selectBy: 'pk',
		title: '就诊患者一览',
		tools:[{
           xtype:'button',
           text:'进入环节质控',
           iconCls: 'icon-inProcess',
           method: 'inProcess',
           disabled : true
       	}],
		autoScroll:true,
//		height:465,
		pageSize : 25,
		pageShow : true,
//       width:1200*widthRate,
       /*plugins: [
                 Ext.create('Ext.grid.plugin.CellEditing', {
                     clicksToEdit: 0
                 })
             ],*/
             
  CM_JR_Record: [      
  				{  header: '标记', dataIndex: 'qaFlag',name: 'qaFlag',width:50,
  				renderer:function(value,metaData,record){
			        if(value == 1){
			        	return "<label>★</label>";
			        }else{
			        	return null;
			        	}
					}
  				},//质控标记
  				{ header: '住院号', dataIndex: 'amrNo',field: 'textfield',type: 'string',width:90},
  				{ header: '床号', dataIndex: 'currentBedCode',field: 'textfield',type: 'string',width:70},
  				{ header: '患者姓名', dataIndex: 'patientName',field: 'textfield',type: 'string',width:100},
                { header: '性别', dataIndex: 'sexName',field: 'textfield',type: 'string',width:60 },
                { header: '年龄', dataIndex: 'age',field: 'textfield',type: 'string',width:60 },
//                { dataIndex: 'deptCd',field: 'textfield',type: 'string', flex:1 ,hidden:true},
                { header: '就诊科室', dataIndex: 'currentDeptName',field: 'textfield',type: 'string',width:70 },
                { header: '入院时间', dataIndex: 'receiveTime',xtype: 'xapdatecolumn',width:130},
                /*{ header: '入院时间', dataIndex: 'receiveTime', flex:1,
					field: {
						xtype: 'datetimefield'
					},
					renderer: function(v){
						if(v){
							v = new Date(v);
							return Ext.util.Format.date(v, 'Y-m-d H:i:s');
						}
						return v;
					}
				 },*/
//                { header: '入院次数', dataIndex: 'encounterCount',field: 'textfield',type: 'Short',flex:1},
                { header: '主诊断', dataIndex: 'currentMainDiagnosisName',field: 'textfield',type: 'string',flex:1 },
                { header: '主管医师', dataIndex: 'currentManageDoctorName',field: 'textfield',type: 'string',width:60 },
//                { header: '出院时间', dataIndex: 'fnshTime',field: 'textfield',type: 'string',flex:1 },
               /* { header: '出院时间', dataIndex: 'finishTime',  
					field: {
						xtype: 'datetimefield'
					},
					renderer: function(v){
						if(v){
							v = new Date(v);
							return Ext.util.Format.date(v, 'Y-m-d H:i:s');
						}
						return v;
					}
				 },*/
                { header: '病危/病重', dataIndex: 'illStatusCode',width:70,
                	renderer:function(value,metaData,record){
			        if(value ==  "ENM05.01" || value == "ENM05.02"){//病危 DANGER_ILL = "ENM05.01" 病重 SERIOUSLY_ILL = "ENM05.02"
			        	return "<div style='text-align:center'><label style='align:center'>√</label></div>";
			        }else{
			        	return null;
			        	}
					}
				},
                { header: '手术标识', dataIndex: 'surgeryFlag',name: 'surgeryFlag',width:70,
					renderer:function(value,metaData,record){
			        if(value == 1){
			        	return "<div style='text-align:center'><label style='align:center'>√</label></div>";
			        }else{
			        	return null;
			        	}
					}
				},
                { header: '缺陷数', dataIndex: 'faultTotal', alink:true, field: 'textfield',type: 'int',width:60 },
                { header: '质控次数', dataIndex: 'qaCount', field: 'textfield',type: 'string',width:60 },
                { header: '质控医师', dataIndex: 'curUserName', field: 'textfield',type: 'string',width:60 },
                {  dataIndex: 'pk',field: 'textfield',type: 'string',flex:1 ,hidden:true},
  				{  dataIndex: 'patientId',field: 'textfield',type: 'string',flex:1 ,hidden:true},
  				{  dataIndex: 'curMainDiNm',field: 'textfield',type: 'string',flex:1 ,hidden:true},
  				{  dataIndex: 'currentDeptIntoTime',field: 'textfield',type: 'string',flex:1 ,hidden:true},
  				{  header: '当前科室编码', dataIndex: 'currentDeptCode',field: 'textfield',type: 'string',flex:1 ,hidden:true},
  				{  header: '当前科室名称', dataIndex: 'currentDeptName',field: 'textfield',type: 'string',flex:1 ,hidden:true},
  				{  header: '主管医生编码', dataIndex: 'currentManageDoctorId',field: 'textfield',type: 'string',flex:1 ,hidden:true},
  				{  header: '主管医生名称', dataIndex: 'currentManageDoctorName',field: 'textfield',type: 'string',flex:1 ,hidden:true}
        ]
    }],
    setData: function(data) {
        	var grid = this.down('xapgrid');
        	var dataList = data.dataList;
        	if(grid){
        		if(dataList){
			    	var totalList = {"total":data.total,"dataList":dataList};
			    	var pageSize = data.pageSize;
			    	if(pageSize == undefined || typeof(data.pageSize) == 'object'){
			    		grid.setPageData(totalList);	//初始化赋值
			    	}else{
			    		grid.setData(dataList);	//翻页时赋值
			    	}
	        	}else{
	        		var totalList = {"total":data.total,"dataList":data.dataList};
	        		grid.setPageData(totalList);
	        	}
        	}
    	}  
        /*setData: function(data) {
        	var grid = this.down('xapgrid');
        	if(data.dataList){
	        	var cusAmr;
	        	var encounterModel;
	        	var dataList = data.dataList;
	        	var dataListGroup = [];
//	        	var model = Ext.create('iih.po.model.PatientModel',data.data);
	        	for(i=0;i<dataList.length;i++){
	        		cusAmr = dataList[i].cusAmr;
	        		encounterModel = dataList[i].encounterModel;
	        		dataListGroup[i]={
						enPk:encounterModel.enPk,
						qaFlag:cusAmr.qaFlag,
						curBedCd:encounterModel.curBedCd,
						amrNo:cusAmr.amrNo,
						paNm:encounterModel.paNm,
						sexNm:encounterModel.sexNm,
						age:encounterModel.age,
						curDeptNm:encounterModel.curDeptNm,
						rcvTime:encounterModel.rcvTime,
						enCnt:encounterModel.enCnt,
						curMainDiNm:encounterModel.curMainDiNm,
						fnshTime:encounterModel.fnshTime,
						illStaCd:encounterModel.illStaCd,
						suF:encounterModel.suF,
						faultTotal:cusAmr.faultTotal,
						faultTodoReform:cusAmr.faultTodoReform,
						faultTodoReview:cusAmr.faultTodoReview,
						executeEndTime:cusAmr.executeEndTime,
						executeDeptName:cusAmr.executeDeptName,
						excuteUserName:cusAmr.excuteUserName
						};
	        	}
//	    	grid.setData(dataList);
        	var totalList = {"total":data.total,"dataList":dataList};
        	var pageSize = data.pageSize;
        	if(pageSize == undefined || typeof(data.pageSize) == 'object'){
        		grid.setPageData(totalList);	//初始化赋值
        	}else{
        		grid.setData(dataList);	//翻页时赋值
        	}
        	}else{
        		var totalList = {"total":data.total,"dataList":data.dataList};
        		grid.setPageData(totalList);
        	}
    	}  */             
})

Ext.define('iih.mr.qa.process_qa_patient.view.InProcessQAPatientConditionView',{
	extend :  Xap.ej.template.BaseTemplate ,

	alias:'widget.inprocessqapatientconditionview',

	          
		                                
   		                                
		                                       
		                                             
		                           
		                           
   		                             
   		                                  
   		                                  
   		                                         
   		                                                                 
   		                                                                  
	  

	layout: {
        type : 'fit'
    },
	
	xapConfig: {
		blocks: {
			'content':{
				xclass: 'iih.mr.qa.process_qa_patient.block.InProcessQAPatientListBlock'
			}
		},
		actions: {
			'init': {
				xclass: 'iih.mr.qa.process_qa_patient.action.InProcessConditionInitAction',
				blocks: {
					content: 'content'
				}
			}
		},

		chains: {
			'init': ['init']
		},

		connections: {
			'content':[{
				event: 'afterrender',
				chain: 'init'
			}]
		}
	}
})
Ext.define('iih.mr.qa.process_qa_patient.view.InProcessQAPatientListView',{
	extend :  Xap.ej.template.BaseTemplate ,
//	extend : 'Xap.ej.stl.view.SearchTemplate',

	alias:'widget.inprocessqapatientlistview',

	          
		                                
   		                                
		                                       
		                                             
		                           
		                           
   		                             
   		                                  
   		                                         
		                                                                    
		                                                                     
   		                                                                         
   		                                                               
   		                                                     
   		                                                     
   		                                                             
	  

	layout: {
        type : 'vbox',
        align : 'stretch'
    },
	
	xapConfig: {
		blocks: {
			'condition':{
				xclass: 'iih.mr.qa.process_qa_patient.view.InProcessQAPatientConditionView',
				height:100
			},
			'toolbar': {
				xclass: 'Xap.ej.block.ToolbarBlock',
				items: [{
					xtype: 'button',
					iconCls: 'icon-Search',
					text: '查询',
					action: 'search'
				}]
			},
			'result':{
				xclass: 'iih.mr.qa.process_qa_patient.block.InProcessQAPatientListGridBlock',
				flex:1
			}
		},
		actions: {
			'search': {
				xclass: 'iih.mr.qa.process_qa_patient.action.InProcessQAPatientListSearchAction',
				url:'inprocess/amrs',
				blocks: {
					condition: 'condition',
					result: 'result'
				}
			},
			'judgeBtn':{
				xclass: 'iih.mr.qa.process_qa_patient.action.JudgeBtnAction',
				blocks: {
				    result: 'result'
				}
			},
			'confirmOpen': {
				xclass: 'iih.mr.qa.process_qa_patient.action.ConfirmOpenAction',
				blocks: {
					condition: 'condition',
					result: 'result'
				}
			},
			'inProcess': {
				xclass: 'iih.mr.qa.process_qa_work.action.ProcessWorkAction',
				blocks: {
					condition: 'condition',
					result: 'result'
				}
			},
			'defects':{
				xclass: 'iih.mr.qa.process_qa_patient.action.ToProcessQaDefectAction',
				blocks: {
					condition: 'condition',
					result: 'result'
				}
			},
			'inProcessViewready': {
				xclass: 'iih.mr.qa.process_qa_patient.action.InProcessViewreadyAction',
				blocks: {
					condition: 'condition',
					result: 'result'
				}
			}
		},

		chains: {
			'search': ['search'],
			'judgeBtn':['judgeBtn'],
			'confirmOpen':['confirmOpen'],
			'inProcess':['inProcess'],
			'defects':['defects'],
			'inProcessViewready':['inProcessViewready']
		},

		connections: {
			'condition':[{
                selector: 'comboxgrid[method=curDeptNm]',
                event: 'combochange',
                chain: 'search'
			},{
                selector: 'xapcheckboxgroup[method=checkFlag]',
                event: 'change',
                chain: 'search'
			},{
                selector: 'xapradiogroup[method=changeTime]',
                event: 'change',
                chain: 'search'
			},{
                selector: 'xapradiogroup[method=inOrOut]',
                event: 'change',
                chain: 'search'
			}],
			'result': [/*{
				event: 'afterrender',
				chain: 'search'
			},*/{
				selector: 'xapgrid',
				event : 'viewready',
				chain: 'inProcessViewready'
			},{
				selector: 'xapgrid',
				event : 'itemclick',
				chain: 'judgeBtn'
			},{
				selector: 'xapgrid',
				event: 'itemdblclick',
				chain: 'confirmOpen'
			},{
				selector: 'xapgrid',
				event:'linkClick',
				chain: 'confirmOpen'
			},{//翻页操作
				selector: 'xapgrid',
				event: 'turnpage',
				chain: 'search'
			}],
			'toolbar': [{
				selector: 'button[action=search]',
				event: 'click',
				chain: 'search'
			}]
		}
	},
		
	initComponent : function() {
			this.callParent();
			this.addEvents("pageRefresh");//为视图添加刷新事件
			this.addListener('pageRefresh', function(){//添加监听事件
				 var properties = this.getLayer(Xap.ej.block.Layer.PROPERTIES);
		        var chain = this.getActionChain('search');
		        var block = this.getBlock('result');
//		        var pageSize = block.pageSize;
		        if(properties.data == undefined){
		        	 if(chain) {
		            chain.execute({});
		        	}
		        }else{
		        	var pageSize = properties.data.pageSize;
			        var pageNum = properties.data.pageNum;
			        if(chain) {
			            chain.execute({
			            	pageSize:pageSize,
			            	pageNum:pageNum
			            });
			        }
		        }
			});
		}
})
/** 
 * 点击整改，完成本次整改按钮前判断文书是否编辑
 * @author ：yao_lijie
 */
Ext.define('iih.mr.qa.process_qa_reform.action.ConfirmAction', {
	extend:  Xap.ej.action.Action ,
	
	execute: function(context) {
		var me = this;
		var owner = this.getOwner();
		var topBlock = this.getBlock('top');
		var resultBlock = this.getBlock('bottom');
	    var defectGrid = resultBlock.down('xapgrid');
	    var selModel = defectGrid.getSelectionModel();
	    var record = selModel.getSelection()[0];
	    if(record != undefined){
	    	var mrPk = record.data.mrPk;
	   		var sbmtTime = record.data.sbmtTime;
	    }
	    var mrPkFirst = topBlock.mrPk;
	    var sbmtTimeFirst = topBlock.sbmtTime;
	    //判断同一份缺陷不做操作
	    if(mrPk == mrPkFirst && sbmtTime == sbmtTimeFirst){
	    	return;
	    }else{
			var workView = topBlock.down();  //获取病历编辑器页面
			var workareapageview = owner.ownerCt;
	        var page = this.getBlock('top');
			//整改
	    	var rfmChain = this.getBlock('bottom').ownerCt.getActionChain('rfmDefect');
	    	//完成本次整改按钮
	    	var finishRfmChain = this.getBlock('bottom').ownerCt.getActionChain('defectStatusJudge');
	    	//双击
	    	var qaMrSignOpenChain = this.getBlock('bottom').ownerCt.getActionChain('qaMrSignOpen');
	        if(workView == undefined){
	        	if(context.event.name == "rfmClick"){
	        		if(rfmChain) {
		        		rfmChain.execute({});
		    		}
	        	}else if(context.event.name == "finishRfmClick"){
	        		if(finishRfmChain) {
		        		finishRfmChain.execute({});
		    		}
	        	}else if(context.event.name == "itemdblclick"){
	        		if(qaMrSignOpenChain) {
		        		qaMrSignOpenChain.execute({});
		    		}
	        	}else if(context.event.name == "linkClick"){
	        		if(qaMrSignOpenChain) {
		        		qaMrSignOpenChain.execute({});
		    		}
	        	}
	        }else{
	        	if(page.hasEdit && Ext.isFunction(page.hasEdit)){
	                    if(page.hasEdit()){
	                        workareapageview.showConfirm(function() {
	                            workareapageview.callControllerMethod(workView, function(workView) {
							    	if(context.event.name == "rfmClick"){
						        		if(rfmChain) {
							        		rfmChain.execute({});
							    		}
						        	}else if(context.event.name == "finishRfmClick"){
						        		if(finishRfmChain) {
							        		finishRfmChain.execute({});
							    		}
						        	}else if(context.event.name == "itemdblclick"){
						        		if(qaMrSignOpenChain) {
							        		qaMrSignOpenChain.execute({});
							    		}
						        	}else if(context.event.name == "linkClick"){
						        		if(qaMrSignOpenChain) {
							        		qaMrSignOpenChain.execute({});
							    		}
						        	}
	                            });
	                        }, function() {
	                        	if(context.event.name == "rfmClick"){
					        		if(rfmChain) {
						        		rfmChain.execute({});
						    		}
					        	}else if(context.event.name == "finishRfmClick"){
					        		if(finishRfmChain) {
						        		finishRfmChain.execute({});
						    		}
					        	}else if(context.event.name == "itemdblclick"){
					        		if(qaMrSignOpenChain) {
						        		qaMrSignOpenChain.execute({});
						    		}
					        	}else if(context.event.name == "linkClick"){
					        		if(qaMrSignOpenChain) {
						        		qaMrSignOpenChain.execute({});
						    		}
					        	}
	                        });
	                        return false;
	                    }else{
			                if(context.event.name == "rfmClick"){
				        		if(rfmChain) {
					        		rfmChain.execute({});
					    		}
				        	}else if(context.event.name == "finishRfmClick"){
				        		if(finishRfmChain) {
					        		finishRfmChain.execute({});
					    		}
		        			}else if(context.event.name == "itemdblclick"){
				        		if(qaMrSignOpenChain) {
					        		qaMrSignOpenChain.execute({});
					    		}
				        	}else if(context.event.name == "linkClick"){
				        		if(qaMrSignOpenChain) {
					        		qaMrSignOpenChain.execute({});
					    		}
				        	}
	                	}
	            }
	        }
		 }
	 }
});

/** 
 * 完成本次整改
 * @author ：yao_lijie
 */
Ext.define('iih.mr.qa.process_qa_reform.action.DefectFinishRfmAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	doExecute: function(context) {
	        this.prepareOperations(context);
	 },
	 prepareOperations: function(context) {
		var me = this;
	    var owner = this.getOwner();   
	    var revisionCd = owner.revisionCd;
    	//储存画面间参数
	    var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
        properties.setData({
        	revisionCd:revisionCd  //整改通知编码
        });
		var operations = context.operations;
		
        var url = this.url;
        url+= '/' + revisionCd;
        console.log(url);
    	var operation = {
            url: url,
    		mclass: null,
    		method: 'put',
    		condition: null,
    		scope: this,
    		success: this.onSuccess
    	};
    	operations.length = 0;
    	operations.push(operation);
    },

    onSuccess: function(operation) {
	 	XapMessageBox.info("整改成功");
		var bottomBlock = this.getBlock('bottom');
	    var defectGrid = bottomBlock.down('xapgrid');
//		var rfmBtn = bottomBlock.down('xapgrid xapbutton[action=rfm]');    //整改按钮
		var finishRfmBtn = bottomBlock.down('xapgrid xapbutton[action=finishRfm]');    //本次质控完成确认
//		rfmBtn.setDisabled(true);
		finishRfmBtn.setDisabled(true);
		/*//编辑器只读
		var plugin = document.getElementById('iemrEditor'); 
		if(plugin){
			plugin.SetReadOnly();
			plugin.OfficeCommand('com.founder.iemr.editor.toolbar:emrBrowsMode'); 
//			plugin.SetCommandEnable('com.founder.iemr.editor.toolbar:emrSave',false);
//			plugin.UpdateToolbar();
		}*/
    }
});

/** 
 * 是否可以整改
 * @author ：yao_lijie
 */
Ext.define('iih.mr.qa.process_qa_reform.action.DefectIfRfmAction', {
    extend:  Xap.ej.action.Action ,

    execute: function(context) {
    	var resultBlock = this.getBlock('bottom');
	    var defectGrid = resultBlock.down('xapgrid');
		var rfmBtn = resultBlock.down('xapgrid xapbutton[action=rfm]');    //整改按钮
//		var finishRfmBtn = resultBlock.down('xapgrid xapbutton[action=finishRfm]');    //本次质控完成确认
	    var selModel = defectGrid.getSelectionModel();
	    var record = selModel.getSelection()[0];
	    var statusCode = record.data.fltStaCd;
	    var owner = this.getOwner(); 
	    var revisionStatus = owner.revisionStatus;
	    if(revisionStatus == iih.mr.qa.QaStatusGlobal.revisionNoticeToReform || revisionStatus == iih.mr.qa.QaStatusGlobal.revisionNoticeReforming){
		    if(statusCode == iih.mr.qa.QaStatusGlobal.faultVerified || statusCode == iih.mr.qa.QaStatusGlobal.faultDeductioned || statusCode == iih.mr.qa.QaStatusGlobal.faultReformed){
		    	rfmBtn.setDisabled(true);
//				finishRfmBtn.setDisabled(true);
		    }else{
		    	rfmBtn.setDisabled(false);
//				finishRfmBtn.setDisabled(false);
			}
	    }
    }
});

/** 
 * 查询：环节质控追踪画面---缺陷一览列表
 * @author ：cheng_feng
 */
Ext.define('iih.mr.qa.process_qa_reform.action.DefectListAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	doExecute: function(context) {
		this.showLoading();
		var owner = this.getOwner(); 
		var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
         	properties.setData({
            	rfmNotificationView:owner.rfmNotificationView
        });
	        this.prepareOperations(context);
	 },
	prepareOperations: function(context) {
		var me = this;
		var topBlock = this.getBlock('top');
	    var bottomBlock = this.getBlock('bottom');
	    var defectGrid = bottomBlock.down('xapgrid');
//		var rfmBtn = bottomBlock.down('xapgrid xapbutton[action=rfm]');    //整改按钮
		var finishRfmBtn = bottomBlock.down('xapgrid xapbutton[action=finishRfm]');    //本次质控完成确认
		var owner = this.getOwner(); 
		var typeFlag = owner.typeFlag; 
	    var revisionCd = owner.revisionCd;
	    var revisionStatus = owner.revisionStatus;
	    if(revisionStatus == iih.mr.qa.QaStatusGlobal.revisionNoticeReformed || revisionStatus == iih.mr.qa.QaStatusGlobal.revisionNoticeVerified){
//			rfmBtn.setDisabled(true);
			finishRfmBtn.setDisabled(true);
		}else{
//			rfmBtn.setDisabled(false);
			finishRfmBtn.setDisabled(false);
		}
	    
	 	//储存画面间参数
	    var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
        properties.setData({
        	revisionCd : revisionCd,  //整改通知编码
        	typeFlag : typeFlag
        });
	 	
		var operations = context.operations;
        
		var url = this.url;
		var qaTypeCode = "";
		var workScreen = "";
		if(typeFlag==1){
			workScreen = iih.mr.qa.QaStatusGlobal.workScreenReformProcess;
			qaTypeCode = iih.mr.qa.QaStatusGlobal.qaTypeCodeProcess;
		}else if(typeFlag==2){
			workScreen = iih.mr.qa.QaStatusGlobal.workScreenReformTerminal;
			qaTypeCode = iih.mr.qa.QaStatusGlobal.qaTypeCodeTerminal;
		}else if(typeFlag==3){
			workScreen = iih.mr.qa.QaStatusGlobal.workScreenReformDept;
			qaTypeCode = iih.mr.qa.QaStatusGlobal.qaTypeCodeDept;
		}

        url += '?' + 'revisionCd=' + revisionCd + '&workScreen='+ workScreen + "&qaTypeCode=" + qaTypeCode;
    	var operation = {
            url: url,
    		mclass: null,
    		method: 'get',
    		condition: null,
    		scope: this,
    		success: this.onSuccess
    	};
    	operations.length = 0;
    	operations.push(operation);
    },

    onSuccess: function(operation) {
        var defectBlock = this.getBlock('bottom');
        var defectGrid = defectBlock.down('xapgrid');
        var m = operation.result;
        defectBlock.setData(m.data.qaFaultList.dataList);
    }
});

/** 
 * 整改
 * @author ：yao_lijie
 */
Ext.define('iih.mr.qa.process_qa_reform.action.DefectRfmAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	doExecute: function(context) {
	    this.prepareOperations(context);
	 },
	 prepareOperations: function(context) {
		var me = this;
		var topBlock = this.getBlock('top');
		var mrPkFirst = topBlock.mrPk;
	    var sbmtTimeFirst = topBlock.sbmtTime;
	    var qaFltPkFirst = topBlock.qaFltPk;
		var resultBlock = this.getBlock('bottom');
	    var defectGrid = resultBlock.down('xapgrid');
	    /*var selModel = defectGrid.getSelectionModel();
	    var record = selModel.getSelection()[0];*/
	    var record = context.record;
	    var faultPk;
	    if(record == undefined){
			XapMessageBox.info("请选择一条缺陷");
		}else{
			//修改缺陷状态以当前打开文书为准
			var mrPk = record.data.mrPk;
	   		var sbmtTime = record.data.sbmtTime;
	   		if(mrPk != ""){
				var owner = this.getOwner();
				var topBlock = this.getBlock('top');
				var workView = topBlock.down();  //获取病历编辑器页面
				var plugin = document.getElementById('iemrEditor'); 
				if(plugin&&plugin.valid&&plugin.IsModified()){
					var emrSave = workView.getActionChain('emrSave');
		    		if(emrSave){
			        	emrSave.execute({});
			    	}
				}
				if(plugin&&plugin.valid){
					setTimeout(function() {
		        		plugin.SetReadOnly();
						plugin.OfficeCommand('com.founder.iemr.editor.toolbar:emrBrowsMode'); 
		        	},250);
				}
	   		}
	   		if(mrPk != ""  && mrPkFirst != mrPk){
				if(sbmtTimeFirst != null && sbmtTimeFirst != sbmtTime){
					faultPk = qaFltPkFirst;
					XapMessageBox.info("当前打开文书与所选中缺陷不一致，以文书为准");
				}else{
					faultPk = record.data.qaFltPk;
				}
	   		}else{
	   			faultPk = record.data.qaFltPk;
	   		}
			var operations = context.operations;
	        var url = this.url;
	        url+= '/' + faultPk;
	        console.log(url);
	    	var operation = {
	            url: url,
	    		mclass: null,
	    		method: 'put',
	    		condition: null,
	    		scope: this,
	    		success: this.onSuccess
	    	};
	    	operations.length = 0;
	    	operations.push(operation);
	    }
    },

    onSuccess: function(operation) {
        
    	var me = this;
		
	    var owner = this.getOwner();   
	    
	    var revisionCd = owner.revisionCd;
	    
    	//储存画面间参数
	    var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
        properties.setData({
        	revisionCd:revisionCd  //整改通知编码
        });
    	//刷新
    	var chain = this.getBlock('bottom').ownerCt.getActionChain('init');
    	if(chain) {
        	chain.execute({
	        	rownum:0,
        		revisionCd: revisionCd
        	});
    	}
    	
    	/*var resultBlock = this.getBlock('bottom');
	    var defectGrid = resultBlock.down('xapgrid');
		var rfmBtn = resultBlock.down('xapgrid xapbutton[action=rfm]');    //整改按钮
		rfmBtn.setDisabled(true);*/
    }
});

/** 
 * 完成本次整改前判断整改通知书下的缺陷状态
 * @author ：yao_lijie
 */
Ext.define('iih.mr.qa.process_qa_reform.action.DefectStatusJudgeAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	doExecute: function(context) {
	        this.prepareOperations(context);
	 },
	 prepareOperations: function(context) {
		var me = this;
	    var owner = this.getOwner();   
	    var revisionCd = owner.revisionCd;
	    var typeFlag = owner.typeFlag

		var operations = context.operations;
		var workScreen = "";
		if(typeFlag==1){
			workScreen = iih.mr.qa.QaStatusGlobal.workScreenReformProcess;
		}else if(typeFlag==2){
			workScreen = iih.mr.qa.QaStatusGlobal.workScreenReformTerminal;
		}else if(typeFlag==3){
			workScreen = iih.mr.qa.QaStatusGlobal.workScreenReformDept;
		}
        var url = this.url;
        url += '?' + 'revisionCd=' + revisionCd + '&workScreen='+ workScreen;
        console.log(url);
    	var operation = {
            url: url,
    		mclass: null,
    		method: 'get',
    		condition: null,
    		scope: this,
    		success: this.onSuccess
    	};
    	operations.length = 0;
    	operations.push(operation);
    },

    onSuccess: function(operation) {
    	var me = this;
	    var owner = this.getOwner();   
	    var revisionCd = owner.revisionCd;
    	//储存画面间参数
	    var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
        properties.setData({
        	revisionCd:revisionCd  //整改通知编码
        });
        var m = operation.result;
        if(m=="2"){
			 XapMessageBox.info("存在待整改的缺陷");
        }else{
        	//完成本次整改
        	var chain = this.getBlock('bottom').ownerCt.getActionChain('finishRfm');
        	if(chain) {
            	chain.execute({
    	        	rownum:0,
            		revisionCd: revisionCd
            	});
        	}
        }
    	
    }
});

/** 
 * 病历文书保存调用
 * @author ：yao_lijie
 */
Ext.define('iih.mr.qa.process_qa_reform.action.MrDocSaveAction', {
    extend:  Xap.ej.action.Action ,

    execute: function(context) {
    	var owner = this.getOwner();
	    var topBlock = this.getBlock('content');
	    var workView = topBlock.down();  //获取病历编辑器页面
    	var doSaveChain = workView.getActionChain('doSave');
    		if(doSaveChain) {
    		    var chain = owner.getActionChain('doSave');
    		    if(chain){
    		        workView._removeTab = owner._removeTab;
    		        workView._tabPanel = owner._tabPanel;
    		        doSaveChain.callBack = chain.callBack;
    		    };
        		doSaveChain.execute({});
    		}
    }
});

/** 
 * 整改通知单一览列表（环节、终末整改）
 * @author ：yao_lijie
 */
Ext.define('iih.mr.qa.process_qa_reform.action.NotificationListSearchAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	doExecute: function(context) {
		this.showLoading();
	    this.prepareOperations(context);
	        
	 },
	 prepareOperations: function(context) {
		var operations = context.operations;
		var sourceView=this.getOwner();	
		var typeFlag = sourceView.typeFlag; 
		var url = this.url;
		var qaTypeCode = "";
		var workScreen = "";
		if(typeFlag==1){
			workScreen = iih.mr.qa.QaStatusGlobal.workScreenReformProcess;
			qaTypeCode = iih.mr.qa.QaStatusGlobal.qaTypeCodeProcess;
		} else if(typeFlag==2){
			workScreen = iih.mr.qa.QaStatusGlobal.workScreenReformTerminal;
			qaTypeCode = iih.mr.qa.QaStatusGlobal.qaTypeCodeTerminal;
		}else if(typeFlag==3){
			workScreen = iih.mr.qa.QaStatusGlobal.workScreenReformDept;
			qaTypeCode = iih.mr.qa.QaStatusGlobal.qaTypeCodeDept;
		}
		
		url += "?workScreen=" + workScreen + "&qaTypeCode=" + qaTypeCode;
		
    	var operation = {
            url: url ,
    		mclass: null,
    		method: 'get',
    		condition: null,
    		scope: this,
    		success: this.onSuccess
    	};
    	operations.length = 0;
    	operations.push(operation);
    },
    onSuccess: function(operation) {
    	var block = this.getBlock('content');
        var m = operation.result.dataList;
        // TODO 数据格式就这样了？
        if(m instanceof Ext.data.Model) {
            block.setData({
                mclass: operation.mclass,
                data: m.getData(true)
            });
        }
        else {
        	block.setData(m);
        	console.log(m);
        }
        //点击消息链接到通知单
        var grid = block.down('xapgrid');
    	var revisionCd = this.getOwner().revisionCd;
    	if(revisionCd){
	        grid.selectById(revisionCd);
	        grid.nodeId = revisionCd;
	        var stertRfmChain = this.getOwner().getActionChain("stertRfm");
			stertRfmChain.execute({});
			this.getOwner().revisionCd = null;
    	}
    }
});

/** 
 * 缺陷列表block
 * @author ：yao_lijie
 */
 var me = this;
Ext.define('iih.mr.qa.process_qa_reform.block.DefectRfmListBlock',{
	extend :  Xap.ej.block.Block ,

	alias:'widget.defectrfmlistblock',

	layout: 'fit',

	items: [{
		xtype: 'xapgrid',
		height : 170,
		tools:[/*{
			xtype: 'xapbutton',
			text: '整改',
			margin:'0 10 0 0',
			action: 'rfm'
		},*/{
			xtype: 'xapbutton',
			text : '完成本次整改',
			margin:'0 10 0 0',
			action: 'finishRfm'
		},{
            itemId: 'up',
            hidden: false,
            xtype: 'tool',
            type: 'up'
        },{
            itemId: 'down',
            hidden: true,
            xtype: 'tool',
            type: 'down'
        }
	],
		autoScroll:true,
		title:'缺陷列表',
		CM_JR_Record: [
			{xtype:'xapactioncolumn',text:'操作',width : 60,
				items: [
					{text:'整改',
						isDisabled : function(view,rowIndex,colIndex,item ,record) {
							var fltStaCd = record.data.fltStaCd;
							if(fltStaCd == iih.mr.qa.QaStatusGlobal.faultToReform){
								return false;
							}else{
								return true;
							}
						},
						handler: function(view,rowIndex,colIndex,e,item ,record) {
							var owner = this.up('processrfmdefectview');
							var rfmDefectChain = owner.getActionChain("rfmDefect");
							rfmDefectChain.execute({
								record:record
							});
						}	
					}
				]
			},
		   {header: '状态', dataIndex: 'fltStaNm', field: 'textfield', type: 'string', width: 80},
           {header: '文书名称', dataIndex: 'mrName', alink:true,field: 'textfield', type: 'string',flex:1},
           {header: '缺陷描述', dataIndex: 'req', field: 'textfield', type: 'string', width: 220},
           {header: '扣分标准', dataIndex: 'deductDes', field: 'textfield',type: 'string', width: 80},
           {header: '缺陷次数',dataIndex: 'deductScrTimes', field: 'textfield', type: 'string' ,width: 80},
           {header: '提出日期', dataIndex: 'sbmtTime', xtype: 'xapdatecolumn',  width: 135},
           {header: '提出人', dataIndex: 'crtUserNm', field: 'textfield', type: 'string', width: 80},
           {header: '整改说明', dataIndex: 'rfmDes', field: 'textfield', type: 'string',flex:1},
           {header : '缺陷主键', name: 'qaFltPk', dataIndex : 'qaFltPk', hidden:true },
           {header: '文书主键', dataIndex: 'mrPk', field: 'textfield', type: 'string', hidden:true },
		   {header: '状态编码', dataIndex: 'fltStaCd', field: 'textfield', type: 'string', width: 80,hidden:true}
		]
	}],

	setData: function(data) {
		var grid = this.down('xapgrid');
		if(grid){
			if(data){
				grid.setData(data);
			}else{
				grid.setData([]);
			}
		}
	}
})
/** 
 * 环节整改通知页面，缺陷列表加载完成后查找到tools上的相关按钮进行事件的监听
 * @extends Xap.ej.action.Action
 * @author ：yao_lijie
 */

Ext.define('iih.mr.qa.process_qa_reform.action.ProcessRfmDefectViewreadyAction', {
	extend:  Xap.ej.action.Action ,
	
	requires:[],
	      
	execute: function(context){
		
		var me = this;
		
	    var owner = this.getOwner();
	    
		//获取缺陷一览的 block
		var bottomBlock = this.getBlock('bottom');		
		var defectGrid = bottomBlock.down('xapgrid');
		
		/*//整改按钮，点击前先判断文书是否修改
		var rfmBtn = bottomBlock.down('xapgrid xapbutton[action=rfm]');
		rfmBtn.on('click',function(btn){
			context.event.name='rfmClick';
			var rfmDefectChain = me.getOwner().getActionChain("rfmDefect");
			rfmDefectChain.execute(context);
		});*/
		
		//完成本次整改按钮，点击前先判断文书是否修改
		var finishRfmBtn = bottomBlock.down('xapgrid xapbutton[action=finishRfm]');
		finishRfmBtn.on('click',function(btn){
			context.event.name='finishRfmClick';
			var finishRfmChain = me.getOwner().getActionChain("defectStatusJudge");
			finishRfmChain.execute(context);
		});
		
		//向上按钮
		var up = bottomBlock.down('tool[itemId=up]');
		up.addListener('click', function() {
            me.maximize(300,bottomBlock);
            up.hide();
            down.show();
        });
		
		//向下按钮
		var down = bottomBlock.down('tool[itemId=down]');
		down.addListener('click', function() {
            me.minimize(bottomBlock);
            up.show();
            down.hide();
        });
       
        //表头
		var tbar = defectGrid.down('header');
        tbar.addListener('dblclick', function() {
            if(down.hidden==false){
               me.minimize(bottomBlock);
               up.show();
               down.hide();
            }else{
               me.maximize(300,bottomBlock);
               up.hide();
               down.show();
            }
        });
		
	},
    
    maximize: function(h,bottomBlock) {
        bottomBlock.setHeight(h);
    },
    
    minimize: function(bottomBlock) {
        bottomBlock.setHeight(170);
    }
	
})
/** 
 * 打开病历文书(可编辑/只读)
 * @author ：yao_lijie
 */
Ext.define('iih.mr.qa.process_qa_reform.action.QaMrSignOpenAction', {
    extend:  Xap.ej.action.Action ,

    execute: function(context) {
    	var owner = this.getOwner();
    	var topBlock = this.getBlock('top');
	    var bottomBlock = this.getBlock('bottom');
	    var defectGrid = bottomBlock.down('xapgrid');
		var rfmBtn = bottomBlock.down('xapgrid xapbutton[action=rfm]');    //整改按钮
		var finishRfmBtn = bottomBlock.down('xapgrid xapbutton[action=finishRfm]');    //本次质控完成确认
		var selModel = defectGrid.getSelectionModel();
	    var record = selModel.getSelection()[0];
	    var fltStaCd = record.data.fltStaCd;
	    var mrPk = record.data.mrPk;
	    topBlock.mrPk = mrPk;
	    topBlock.sbmtTime = record.data.sbmtTime;
	    topBlock.qaFltPk = record.data.qaFltPk;
        var page = this.getOwner();
        var operations = context.operations;
        if(mrPk!=undefined && mrPk !=""){
        	if(finishRfmBtn.disabled == false){
        		if(fltStaCd == iih.mr.qa.QaStatusGlobal.faultToReform ){
					var config = {
	                xclass: 'iih.mr.wr.mr.view.MrDocQaEditView',
	                viewConfig:{
	                    mrSn:mrPk,
	                    opType:'reform'
	                	},
	                assistantConfig:{
	                	 tgtObCd: 'MRB02',
	                     tgtObPk: mrPk
	                	}
	            	};  
				}else{
					var config = {
	                xclass: 'iih.mr.wr.mr.view.MrDocEditView',
	                viewConfig:{
	                    mrSn:mrPk,
	                    opType:'readonly'
	                	}
	            	};  
				}
        	}else{
        		var config = {
	                xclass: 'iih.mr.wr.mr.view.MrDocEditView',
	                viewConfig:{
	                    mrSn:mrPk,
	                    opType:'readonly'
	                	}
	            	};  
        	}
        	var workContent = page.getBlock('top');
            var workView =  Ext.create(config.xclass,config.viewConfig);
            workContent.removeAll();
            workContent.add(workView);
         	/*var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
         	properties.setData({
            	workView:workView
        });*/
        }
    }
});


/** 
 * 环节整改通知缺陷列表
 * @author ：yao_lijie
 */
 
Ext.define('iih.mr.qa.process_qa_reform.view.ProcessRfmDefectView',{
	extend:  Xap.ej.template.BaseTemplate ,

	           
			                              
	                                           
	                                           
	                                          
	                                        
	                                             
	                                                     
	                                      
	                                                           
	                                                                  
	                                                                 
	                                                                                 
	                                                              
	                                                                
	                                                                      
	                                                                   
	                                                                  
	                                                               
	           
	  

	alias:'widget.processrfmdefectview',
	
	layout: {
        type : 'vbox',
        align : 'stretch'
    },
 
	xapConfig: {
		blocks: {
		    'top': {
                xclass: 'iih.mr.qa.process_qa_work.block.QaMrEditBlock',
				flex:1
            },
			'bottom': {
				xclass: 'iih.mr.qa.process_qa_reform.block.DefectRfmListBlock',
				height:180
			}
		},
		
		actions: {
			'init': {
				xclass: 'iih.mr.qa.process_qa_reform.action.DefectListAction',
//				url: 'qacustom/faults',
				url: 'qa/notification/faults',
				blocks: {
					top: 'top',
					bottom: 'bottom'
				}
			},
			'processRfmDefectViewready': {
				xclass: 'iih.mr.qa.process_qa_reform.action.ProcessRfmDefectViewreadyAction', 
				blocks: {
					top: 'top',
					bottom: 'bottom'
				}
			},
			'confirm' : {
				xclass: 'iih.mr.qa.process_qa_reform.action.ConfirmAction',
				url: 'qa/fault/rfm',
				blocks: {
					top: 'top',
					bottom: 'bottom'
				}
			},
			'rfmDefect': {
				xclass: 'iih.mr.qa.process_qa_reform.action.DefectRfmAction',
				url: 'qa/fault/rfm',
				blocks: {
					top: 'top',
					bottom: 'bottom'
				}
			},
			'defectStatusJudge': {
				xclass: 'iih.mr.qa.process_qa_reform.action.DefectStatusJudgeAction',
				url: 'qa/notification/faultStatistical',
				blocks: {
					top: 'top',
					bottom: 'bottom'
				}
			},
			'finishRfm': {
				xclass: 'iih.mr.qa.process_qa_reform.action.DefectFinishRfmAction',
				url: 'qa/notification/finishRfm',
				blocks: {
					top: 'top',
					bottom: 'bottom'
				}
			},
			'qaMrSignOpen': {
				xclass: 'iih.mr.qa.process_qa_reform.action.QaMrSignOpenAction',
				blocks: {
					top: 'top',
					bottom: 'bottom'
				}
			},
			/*'ifRef': {
				xclass: 'iih.mr.qa.process_qa_reform.action.DefectIfRfmAction',
				blocks: {
					top: 'top',
					bottom: 'bottom'
				}
			},*/
			'doSave': {
                xclass: 'iih.mr.qa.process_qa_reform.action.MrDocSaveAction',
//                url: 'mr',
                blocks: {
                    content: 'top'
                }
            }
		},

		chains: {
			'init':['init'],
			'processRfmDefectViewready':['processRfmDefectViewready'],
			'confirm':['confirm'],
			'rfmDefect':['rfmDefect'],
			'defectStatusJudge':['defectStatusJudge'],
			'finishRfm':['finishRfm'],
			'qaMrSignOpen':['qaMrSignOpen'],
//			'ifRef':['ifRef'],
			'doSave':['doSave']
		},

		connections: {
			'bottom':[{
				event: 'afterrender',
				chain: 'init'
			},{
				selector: 'xapgrid',
				event: 'viewready',
				chain: 'processRfmDefectViewready'
			},{
				selector: 'xapgrid',
				event:'itemdblclick',
				chain: 'confirm'
			},/*{
				selector: 'xapgrid',
				event:'select',
				chain: 'ifRef'
			},*/{
				selector: 'xapgrid',
				event:'linkClick',
				chain: 'confirm'
			}]
		}
	},
	
	 hasEdit: function() {
        var plugin = document.getElementById('iemrEditor');
        if (plugin != undefined &&plugin.valid&&plugin.IsModified()) {
            return true;
        } else {
            return false;
        }
    }/*,
		
	initComponent : function() {
			this.callParent();
			this.addEvents("pageRefresh");//为视图添加刷新事件
			this.addListener('pageRefresh', function(){//添加监听事件
		        var chain = this.getActionChain('init');
		        if(chain) {
		            chain.execute();
		        }
			});
		}*/
})
/** 
 * 环节整改通知开始整改
 * @author ：yao_lijie
 */
Ext.define('iih.mr.qa.process_qa_reform.action.PopProcessRfmDefectAction', {
extend:  Xap.ej.action.Action ,
	
	                                                                    
	
	execute: function(context) {
	    var revisionCd = context.revisionCd;
	    var revisionStatus = context.revisionStatus;
	    var record = context.record;
	    //为了top页显示患者信息，将后台模板enPk的值赋给pk
	    var data = record.data;
	   	data.pk = data.enPk;
	    var sourceView=this.getOwner();	
	    var typeFlag = sourceView.typeFlag;
	    var event = context.event;
	    var pageCode ;
	    var pageTitle;
	    if(typeFlag==1){
	    	pageTitle = '环节整改通知工作';
	    	pageCode = "processRfmDefectView";
	    }else if(typeFlag==2){
	    	pageCode = "terminalRfmDefectView";
	    	pageTitle = '终末整改通知工作';
	    }else if(typeFlag==3){
	    	pageCode = "deptRfmDefectView";
	    	pageTitle = '科室整改通知工作';
	    }

	    var viewConfig = {
	    	revisionCd: revisionCd,
	    	revisionStatus:revisionStatus,
	    	typeFlag:typeFlag
	    }

        var config = {
            pageCode: pageCode,
            pageTitle: pageTitle,
            viewConfig: viewConfig
        };
        var canvas = Xap.getCanvas();
        canvas.fireEvent("updatePatient",{patient:record.data});  // top患者信息刷新
        canvas.fireEvent("addWorkPage",config);
	}
});
/** 
 * 环节整改通知页面（住院医生站），整改通知列表加载完成后查找到tools上的相关按钮进行事件的监听
 * @author ：yao_lijie
 */

Ext.define('iih.mr.qa.process_qa_reform.action.ProcessRfmNotificationViewreadyAction', {
	extend:  Xap.ej.action.Action ,
	
	requires:[],
	      
	execute: function(context){
		var me = this;
		
	    var owner = this.getOwner();
	    
	    //获取整改通知的 block
		var resultBlock = this.getBlock('content');	
		var inProcessGrid = resultBlock.down('xapgrid');

		//开始整改按钮
		var stertRfm = inProcessGrid.down('xapbutton[action=stertRfm]');
		stertRfm.on('click',function(btn){
			context.event.name='click';
			var inProcessChain = me.getOwner().getActionChain("stertRfm");
			inProcessChain.execute(context);
		});
	}
	
})
/** 
 * 环节整改通知（开始整改）
 * @author ：yao_lijie
 */
Ext.define('iih.mr.qa.process_qa_reform.action.ToStartRfmAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	doExecute: function(context) {
		this.prepareOperations(context);
	 },
	 prepareOperations: function(context) {
		var contentBlock = this.getBlock('content');
	    var rfmGrid = contentBlock.down('xapgrid');
	    var selModel = rfmGrid.getSelectionModel();
	    var record = selModel.getSelection()[0];
	    if(record == undefined){
			 XapMessageBox.info("请选择整改通知书");
		}else{
			var operations = context.operations;
			var revisionCd = record.data.revisionCd;
			contentBlock.revisionCd = revisionCd;
			contentBlock.record = record;
		    var revisionStatus = record.data.status;
			if(revisionStatus == iih.mr.qa.QaStatusGlobal.revisionNoticeToReform){
				var url = this.url;
		        url+= '/' + revisionCd;
		        console.log(url);
		    	var operation = {
		            url: url,
		    		mclass: null,
		    		method: 'put',
		    		condition: null,
		    		scope: this,
		    		success: this.onSuccess
		    	};
		    	operations.length = 0;
		    	operations.push(operation);
			}else{
			//弹出缺陷整改画面
				var chain = this.getOwner().getActionChain('popProcessRfmDefect');
				if(chain) {
			    	chain.execute({
			    		revisionCd: revisionCd,
			    		revisionStatus:revisionStatus,
			    		record:record
			    	});
				}
			}
	    }
    },
    onSuccess: function(operation) {
    	var contentBlock = this.getBlock('content');
    	var revisionCd = contentBlock.revisionCd;
    	var revisionStatus = iih.mr.qa.QaStatusGlobal.revisionNoticeReforming;//整改中
    	var record = contentBlock.record;
    	//弹出缺陷整改画面
    	var chain = this.getOwner().getActionChain('popProcessRfmDefect');
    	if(chain) {
        	chain.execute({
        		revisionCd: revisionCd,
        		revisionStatus:revisionStatus,
        		record:record
        	});
    	}
    }
});

/** 
 * 整改通知列表block
 * @author ：yao_lijie
 */
 
Ext.define('iih.mr.qa.process_qa_reform.block.RfmNotificationListBlock',{
	extend :  Xap.ej.block.Block ,


	alias:'widget.rfmnotificationlistblock',

	layout: 'fit',

	items: [{
		xtype: 'xapgrid',
		ifSelect : true,
        selectBy: 'revisionCd',
		tools:[
			{
				xtype: 'xapbutton',
				text: '开始整改',
				margin:'0 10 0 0',
				action: 'stertRfm'
			}
		],
		autoScroll:true,
		CM_JR_Record: [
						//为了显示top信息
						{ header: '就诊外键', dataIndex: 'enPk',field: 'textfield',type: 'string',flex:1 ,hidden:true},
						{ header: '性别', dataIndex: 'sexName',field: 'textfield',type: 'string',width:70 ,hidden:true},
			            { header: '年龄', dataIndex: 'age',field: 'textfield',type: 'string',width:70,hidden:true},
						{  dataIndex: 'patientId',field: 'textfield',type: 'string',flex:1 ,hidden:true},
						{ header: '住院号', dataIndex: 'amrNo',field: 'textfield',type: 'string',width:90 ,hidden:true},
						{ header: '床位号', dataIndex: 'currentBedCode',field: 'textfield',type: 'string',flex:1,hidden:true},
						{ header: '主诊断', dataIndex: 'currentMainDiagnosisName',field: 'textfield',type: 'string',flex:1 ,hidden:true},
						{ header: '入院时间', dataIndex: 'currentDeptIntoTime',field: 'textfield',type: 'string',flex:1 ,hidden:true},
				        { header: '整改通知主键', dataIndex: 'revisionCd',field: 'textfield',type: 'string',flex:1,hidden:true },
		  				{ header: '状态编码', dataIndex: 'status',field: 'textfield',type: 'string',flex:1,hidden:true },
		  				{ header: '状态', dataIndex: 'statusNM',field: 'textfield',type: 'string',flex:1},
  						{ header: '发送时间', dataIndex: 'sendTime',xtype: 'xapdatecolumn',  width: 135},
  						/*{ header: '发送时间', dataIndex: 'sendTime', width: 135,
							field: {
								xtype: 'datetimefield'
							},
							renderer: function(v){
								if(v){
									v = new Date(v);
									return Ext.util.Format.date(v, 'Y-m-d H:i');
								}
								return v;
							}
						},*/
		                { header: '质控医师',dataIndex: 'execDoctorNM',field: 'textfield',type: 'string', flex:1},
		                { header: '质控科室', dataIndex: 'execDeptNM',field: 'textfield',type: 'string',flex:1},
		  				{ header: '患者姓名', dataIndex: 'patientName',field: 'textfield',type: 'string',flex:1},
		  				{ header: '缺陷数', dataIndex: 'defectCount',field: 'textfield',type: 'string',flex:1},
		                { header: '整改期限', dataIndex: 'rfmDeadline',field: 'textfield',type: 'string',flex:1 },
		                { header: '截止时间', dataIndex: 'deadline',xtype: 'xapdatecolumn',  width: 135},
		                { header: '整改说明', dataIndex: 'memo',field: 'textfield',type: 'string',flex:1}
		        ]
	}],

	setData: function(data) {
		var grid = this.down('xapgrid');
		if(grid){
			if(data){
			grid.setData(data);
			}else{
				grid.setData([]);
			}
		}
	}
})

/** 
 * 环节整改通知列表(住院医生站)
 * @author ：yao_lijie
 */
 
Ext.define('iih.mr.qa.process_qa_reform.view.ProcessRfmNotificationView',{
	extend:  Xap.ej.template.BaseTemplate ,

	           
	                                       
	                                           
	                                           
	                                          
	                                        
	                                             
	                                      
	                                                                        
	                                                                             
	                                                                                      
	                                                                 
	                                                                         
	  

	alias:'widget.processnotificationwrview',
	layout: {
        type: 'fit'
    },
    
	xapConfig: {
		blocks: {
            'content': {
                xclass: 'iih.mr.qa.process_qa_reform.block.RfmNotificationListBlock',
                flex: 1
            }
		},
		
		actions: {
			'init': {
				xclass: 'iih.mr.qa.process_qa_reform.action.NotificationListSearchAction',
				url: 'qa/notifications',
				blocks: {
					content: 'content'
				}
			},
			'processRfmNotificationViewReadyAction': {
				xclass: 'iih.mr.qa.process_qa_reform.action.ProcessRfmNotificationViewreadyAction',
				blocks: {
					content: 'content'
				}
			},
			'stertRfm': {
				xclass: 'iih.mr.qa.process_qa_reform.action.ToStartRfmAction',
				url: 'qa/notification/startRfm',
				blocks: {
					content: 'content'
				}
			},
			'popProcessRfmDefect': {
				xclass: 'iih.mr.qa.process_qa_reform.action.PopProcessRfmDefectAction',
				blocks: {
					content: 'content'
				}
			}
		},

		chains: {
			'init':['init'],
			'stertRfm':['stertRfm'],
			'popProcessRfmDefect':['popProcessRfmDefect'],
			'processRfmNotificationViewReadyAction':['processRfmNotificationViewReadyAction']
		},

		connections: {
			'content': [{
				event: 'afterrender',
				chain: 'init'
			},{
				selector: 'xapgrid',
				event: 'itemdblclick',
				chain: 'stertRfm'
			},{
				selector: 'xapgrid',
				event: 'viewready',
				chain: 'processRfmNotificationViewReadyAction'
			}
			]
		}

	},
		
	initComponent : function() {
			this.callParent();
			this.addEvents("pageRefresh");//为视图添加刷新事件
			this.addListener('pageRefresh', function(){//添加监听事件
		        var chain = this.getActionChain('init');
		        if(chain) {
		            chain.execute();
		        }
			});
		}
})
Ext.define('iih.mr.qa.process_qa_search.action.InProcessWorkInitAction', {
	extend:  Xap.ej.action.Action ,
	
	/*
	* @Override
	*/
	execute: function(context) {
		var block = this.getBlock('content');
		var crtTimeStart = block.down('xapdatefield[name=crtTimeStart]');
	    var crtTimeEnd = block.down('xapdatefield[name=crtTimeEnd]');
	    var crtUserNm = block.down('comboxgrid[name=crtUserNm]');
	    var curDeptNm = block.down('comboxgrid[name=curDeptNm]');
	    var curDate = new Date();
		var curDateTime = curDate.getTime();
		var preDateTime = curDateTime - 24*60*60*1000;  
		crtTimeStart.setValue(preDateTime);
		crtTimeEnd.setValue(curDateTime);
//		crtUserNm.setValue(IMER_GLOBAL.user.name);
		crtUserNm.select(IMER_GLOBAL.user.code,true,true) ;
		crtUserNm.comboxHiddenValue = IMER_GLOBAL.user.code;
		curDeptNm.select(IMER_GLOBAL.department.code,true,true) ;
		curDeptNm.comboxHiddenValue = IMER_GLOBAL.department.code;
	}

});

Ext.define('iih.mr.qa.process_qa_search.action.InProcessWorkSearchAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override
	*/
	execute: function(context) {
		if(context.event != undefined && context.event.name=='combochange' && context.event.from.rawValue != ""){
			return;
		}
		var view = this.getBlock('condition');
        var block = view.getBlock('content');
    	var condition = block.getData();
    	var crtTimeStart = condition.crtTimeStart;
    	var crtTimeEnd = condition.crtTimeEnd;
    	var rfmTimeStart = condition.rfmTimeStart;
    	var rfmTimeEnd = condition.rfmTimeEnd;
    	if(crtTimeEnd != ""){
    		if(crtTimeEnd < crtTimeStart){
				 XapMessageBox.info("开始日期大于结束日期，请重新选择！");
	    		return;
    		}
    	}
    	if(rfmTimeEnd != ""){
    		if(rfmTimeEnd < rfmTimeStart){
				 XapMessageBox.info("开始日期大于结束日期，请重新选择！");
	    		return;
    		}
    	}
    	
		this.showLoading();
		var block = this.getBlock('result');
		var curDeptNm = context.curDeptNm;
		var crtUserNm = context.crtUserNm;
		var currentManageDoctorName = context.currentManageDoctorName;
		var pageNum,pageSize;
		if(context.event == undefined){
			pageNum = context.pageNum; 
			pageSize = context.pageSize; 
		}else{
			pageNum = context.event.arguments[0]; 
			pageSize = context.event.arguments[1]; 
		}
		block.pageSize = pageSize;
		var data = {
			pageNum : pageNum,
			pageSize : pageSize,
            curDeptNm:curDeptNm,
            crtUserNm:crtUserNm,
            currentManageDoctorName:currentManageDoctorName
		}
    	var owner = this.getOwner();
        var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
        properties.setData({
            parentWindow: context.parentWindow,
            sourceView: context.sourceView,
            pageSize:pageSize,
            pageNum:pageNum,
            curDeptNm:curDeptNm
        });
    	var operations = context.operations;
    	if(!operations) {
    		return;
    	}
    	this.prepareOperations(operations,data);
    },
    
    prepareOperations: function(operations,data) {
        var view = this.getBlock('condition');
        var block = view.getBlock('content');
    	var condition = block.getData();
    	if(data.curDeptNm != undefined){
    		condition.curDeptNm = data.curDeptNm;
    	}
    	if(data.crtUserNm != undefined){
    		condition.crtUserNm = data.crtUserNm;
    	}
    	if(data.currentManageDoctorName != undefined){
    		condition.currentManageDoctorName = data.currentManageDoctorName;
    	}
        var url = this.url;
        var pageNum = data.pageNum; 
		var pageSize = data.pageSize; 
        if(condition) {
            var qs = Ext.Object.toQueryString(condition);
//            alert(qs);
            
            	if(data.pageSize == undefined || typeof(data.pageSize)=='object'){
            		if(qs) {
            			url += '?' + qs +"&workScreen=" + iih.mr.qa.QaStatusGlobal.workScreenWorkProcess;
            		}else{
            			url += '?' +"&workScreen=" + iih.mr.qa.QaStatusGlobal.workScreenWorkProcess;
            		}
            	}else{
            		if(qs) {
                		url += '?' + qs +"&workScreen=" + iih.mr.qa.QaStatusGlobal.workScreenWorkProcess +"&pageNum="+ pageNum +"&pageSize="+ pageSize;
            		}else{
            			url +='?' + "&workScreen=" + iih.mr.qa.QaStatusGlobal.workScreenWorkProcess + "&pageNum="+ pageNum +"&pageSize="+ pageSize;
            		}
            	}
            console.log(url);
        }
        var mclass = null;
        if(block.getModelClass) {
            mclass = block.getModelClass();
        }
    	var operation = {
            url: url,
    		mclass: mclass,
    		method: 'get',
    		condition: condition,
    		scope: this,
    		success: this.onSuccess
    	};
    	operations.length = 0;
    	operations.push(operation);
    },

    onSuccess: function(operation) {
        var block = this.getBlock('result');
        if(block){
	        var pageSize = block.pageSize;
	        var m = operation.result;
	        m.pageSize = pageSize;
	        // TODO 数据格式就这样了？
	        if(m instanceof Ext.data.Model) {
	            block.setData({
	                mclass: operation.mclass,
	                data: m.getData(true)
	            });
	        }
	        else {
	        	block.setData(m);
	        	console.log(m);
	        }
	        
	        //判断按钮状态
	        var grid = block.down('xapgrid');
	        if(grid){
	        	var rs = grid.getSelectionModel().getSelection();
			    //进入环节质控按钮
				var look = grid.down('button[method=look]');
				if(rs.length > 0){
					look.setDisabled(false);
				}else{
					look.setDisabled(true);
				} 
	        }
        }
    }
});

/** 
 * 查询：环节质控追踪画面---缺陷一览列表
 * @author ：cheng_feng
 */
Ext.define('iih.mr.qa.process_qa_track.action.DefectListAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	doExecute: function(context) {
			this. showLoading();
	        this.prepareOperations(context);
	 },
	 prepareOperations: function(context) {
		 var me = this;
		
	    var owner = this.getOwner();   
	    
	    var record = owner.revisionRecord;
	    
	    var revisionCd = owner.revisionCd;
	    
	    var revisionStatus = owner.revisionStatus;
	    
	    var typeFlag = owner.typeFlag;
	    
	    //储存画面间参数
	    var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
        properties.setData({
        	revisionRecord:record,
    		revisionCd: revisionCd,//整改通知编码
    		revisionStatus:revisionStatus,
    		typeFlag:typeFlag
        });
	    
		var operations = context.operations;
		
        var bottomBlock = this.getBlock('result');  
        
       var event = context.event;
       
       var qaTypeCode = "";
       if(typeFlag==1){
    	   qaTypeCode = iih.mr.qa.QaStatusGlobal.qaTypeCodeProcess;
       } else if(typeFlag==2){
    	   qaTypeCode = iih.mr.qa.QaStatusGlobal.qaTypeCodeTerminal;
       } else if(typeFlag==3){
    	   qaTypeCode = iih.mr.qa.QaStatusGlobal.qaTypeCodeDept;
       }
        
        var url = this.url;
        var qs = 'revisionCd=' + revisionCd + '&qaTypeCode='+qaTypeCode;
    	var operation = {
            url: url + '?' +qs,
    		mclass: null,
    		method: 'get',
    		condition: null,
    		scope: this,
    		success: this.onSuccess
    	};
    	operations.length = 0;
    	operations.push(operation);
    },

    onSuccess: function(operation) {
    	var owner = this.getOwner();  
    	var revisionStatus = owner.revisionStatus;
        var block = this.getBlock('result');
        var defectBlock = block.ownerCt.getBlock('bottom');
        var defectGrid = defectBlock.down('xapgrid');
        var m = operation.result;
        for(var i=0;i<m.data.qaFaultList.dataList.length;i++){
        	m.data.qaFaultList.dataList[i].revisionStatus = revisionStatus;
        }
        defectBlock.setData(m.data.qaFaultList.dataList);
    }
});


/** 
 * 通知书缺陷列表
 * @author ：cheng_feng
 */
 
Ext.define('iih.mr.qa.process_qa_search.view.ProcessQaDefectView',{
	extend:  Xap.ej.template.BaseTemplate ,
	           
	                                       
	                                           
	                                           
	                                          
	                                        
	                                             
	                                      
	                                    
	                                                           
	                                                                           
			                                                        
			                                                         
	  

	alias:'widget.processqadefectview',
	
	layout: {
        type : 'vbox',
        align : 'stretch'
    },
    
	xapConfig: {
		blocks: {
		    'top': {
                xclass: 'iih.mr.qa.process_qa_work.block.QaMrEditBlock',
                flex:1
            },
			'bottom': {
				xclass: 'iih.mr.qa.process_qa_search.block.NotificationDefectListBlock',
				height:200
			}
		},
		
		actions: {
			'init': {
				xclass: 'iih.mr.qa.process_qa_track.action.DefectListAction',
				url: 'qa/notification/faults',
				blocks: {
					condition: 'properties',
					result: 'bottom'
				}
			},
			'qaMrSignOpen': {
				xclass: 'iih.mr.qa.process_qa_track.action.QaMrSignOpenAction',
				blocks: {
					condition: 'properties',
					top: 'top',
					result: 'bottom'
				}
			},
			'processQaDefectViewready': {
				xclass: 'iih.mr.qa.process_qa_search.action.ProcessQaDefectViewreadyAction',
				blocks: {
					top: 'top',
					bottom: 'bottom'
				}
			}
		},

		chains: {
			'init':['init'],
			'processQaDefectViewready':['processQaDefectViewready'],
			'qaMrSignOpen':['qaMrSignOpen']
		},

		connections: {
			'bottom':[{
				event: 'afterrender',
				chain: 'init'
			},{
				selector: 'xapgrid',
				event: 'viewready',
				chain: 'processQaDefectViewready'
			},{
				selector: 'xapgrid',
				event:'itemdblclick',
				chain: 'qaMrSignOpen'
			},{
				selector: 'xapgrid',
				event:'linkClick',
				chain: 'qaMrSignOpen'
			}]
		}
	}
})
/** 
 * 通知书缺陷列表
 * @author ：yao_lijie
 */
Ext.define('iih.mr.qa.process_qa_search.action.ToProcessQaDefectAction', {
extend:  Xap.ej.action.Action ,
	
	                                                                   
	
	execute: function(context) {
		
		var me = this;
		
		var owner = this.getOwner();   
		
		var topBlock = this.getBlock('result');
	        
	    var enGrid = topBlock.down('xapgrid');
	     
	    var selModel = enGrid.getSelectionModel();
	        
	    var record = selModel.getSelection()[0];
	    
	    var revisionCd = record.data.revisionCd;
	    if(revisionCd == '' || revisionCd == null){
	    	return;
	    }
	    
	    var revisionStatus = record.data.status;
	    
	    var sourceView=this.getOwner();	
		
	    var typeFlag = sourceView.typeFlag;
	       
	    var event = context.event;
	    var pageCode = 'processQaDefectSearchView';
	    var pageTitle = '缺陷列表';

	    var viewConfig = {
	    	revisionRecord:record,
	    	revisionCd: revisionCd,
	    	revisionStatus:revisionStatus,
	    	typeFlag:typeFlag
	    }
        if(event) {
            var config = {
            	pageCode: pageCode,
            	pageTitle: pageTitle,
                viewConfig:  viewConfig
            };
            var canvas = Xap.getCanvas();
            canvas.fireEvent("updatePatient",{patient:record.data});  // top患者信息刷新
            canvas.fireEvent("addWorkPage",config);
        };
    }
});
Ext.define('iih.mr.qa.process_qa_search.block.InProcessWorkSearchBlock',{
	extend :  Xap.ej.block.FormBlock ,
	
	requires: [],

	alias:'widget.inprocessworksearchblock',
	
	border: 0,

	items: [{
//		title: '质控工作查询',
		xtype: 'xapform',
	layout: {
		type: 'table',
		columns: 5,
		tableAttrs: {
            border: 0,
            cellpadding: 0,
            cellspacing: 1,
            width: '100%',
            height:86
        },
        tdAttrs: {
            valign: 'left'
        }
	},
	items:[{
			xtype:'xapdatefield',
		    name:'crtTimeStart',
		    fieldLabel:'质控日期',
		    labelWidth:60,
		    labelAlign:'right',
			margin:'0 10 0 10'
		},{
			xtype: 'xapdisplayfield',
//      		name:'intervalSymbol',
      		width:20,
      		value:'~'
		},{
			xtype:'xapdatefield',
			name:'crtTimeEnd',
			labelAlign:'right'
		},/*{
			xtype:'xaptextfield',
	        name:'crtUserNm',
	        labelWidth:60,
	        labelAlign:'right',
	        fieldLabel:'质控医师',
	        margin:'0 0 0 10',
	        listeners:{
	        	specialkey : function(field, e) {  
	                if (e.getKey() == Ext.EventObject.ENTER) {  
	                    var view = this.up('inprocessworksearchview');
						var initChain = view.getActionChain('search');
						initChain.execute({}); 
	                }  
	            }
	        }
		},*/{
	        xtype:'comboxgrid',
	        margin:'10 100 10 150',
	        name:'crtUserNm',
	        fieldLabel:'质控医师',
	        url: 'employee',
	        labelAlign : 'right',
			labelWidth : 60,
			listWidth:230,    //gird的宽度
			width:210, 
	        valueField : 'id',
	        displayField: 'name',
	        searchParam: {'deptCd': IMER_GLOBAL.department.code},
	        columns: [{
	           text: '人员id',
	           dataIndex: 'id',
	           width:70
	        },{
	           text: '医师姓名',
	           flex:1,
	           dataIndex: 'name'
	        }],
			callback:function(newValue,oldValue,record){  //在grid选择记录后的回调函数
				var view = this.up('inprocessworksearchview');
				var initChain = view.getActionChain('search');
				initChain.execute({
					crtUserNm:newValue
				});
			   }
	    },{
			xtype:'comboxgrid',
			margin:'10 70 10 0',
			name:'curDeptNm',
			method:'curDeptNm',
			url: 'organization/keyword',//科室查询的url
			fieldLabel:'质控科室',
			labelAlign : 'right',
			labelWidth : 60,
			listWidth:230,    //gird的宽度
			width:210,        //combo的宽度
			valueField : 'code',//科室编码的字段名
			displayField: 'name',//科室名称的字段名
			columns: [{              //grid的column配置
			   text: '科室编码',
			   dataIndex: 'code',
			   width:80
			},{
			   text: '科室',
			   flex:1,
			   dataIndex: 'name'
			}],
			callback:function(newValue,oldValue,record){  //在grid选择记录后的回调函数
				var view = this.up('inprocessworksearchview');
				var initChain = view.getActionChain('search');
				initChain.execute({
					curDeptNm:newValue
				});
			   }
		},/*{
			xtype: 'xapdisplayfield',
			width:230
		},*/
		
		{
			xtype:'xapdatefield',
		    name:'rfmTimeStart',
		    fieldLabel:'整改日期',
		    labelWidth:60,
		    labelAlign:'right',
			margin:'0 0 10 10'
		},{
			xtype: 'xapdisplayfield',
//      		name:'intervalSymbol',
      		width:20,
      		value:'~'
		},{
			xtype:'xapdatefield',
			name:'rfmTimeEnd',
			labelAlign:'right'
		},/*{
			xtype:'xaptextfield',
	        name:'currentManageDoctorName',
	        labelAlign : 'right',
			labelWidth : 60,
			listWidth:230,    //gird的宽度
			width:210, 
	        fieldLabel:'整改医师',
	        margin:'0 0 10 10',
	        listeners:{
	        	specialkey : function(field, e) {  
	                if (e.getKey() == Ext.EventObject.ENTER) {  
	                    var view = this.up('inprocessworksearchview');
						var initChain = view.getActionChain('search');
						initChain.execute({}); 
	                }  
	            }
	        }
		},*/{
        xtype:'comboxgrid',
        name:'currentManageDoctorName',
        margin:'0 100 10 150',
        fieldLabel:'整改医师',
        url: 'employee',
        labelAlign : 'right',
		labelWidth : 60,
		listWidth:230,    //gird的宽度
		width:210, 
        valueField : 'id',
        displayField: 'name',
        searchParam: {'deptCd': IMER_GLOBAL.department.code},
        columns: [{
           text: '人员id',
           dataIndex: 'id',
           width:70
        },{
           text: '医师姓名',
           flex:1,
           dataIndex: 'name'
        }],
		callback:function(newValue,oldValue,record){  //在grid选择记录后的回调函数
			var view = this.up('inprocessworksearchview');
			var initChain = view.getActionChain('search');
			initChain.execute({
				currentManageDoctorName:newValue
			});
		  }
    },
		{
			xtype:'xaptextfield',
	        name:'amrNo',
	        labelWidth:50,
	        labelAlign:'right',
	        margin:'0 0 10 10',
	        fieldLabel:'住院号',
	        listeners:{
	        	specialkey : function(field, e) {  
	                if (e.getKey() == Ext.EventObject.ENTER) {  
	                    var view = this.up('inprocessworksearchview');
						var initChain = view.getActionChain('search');
						initChain.execute({}); 
	                }  
	            }
	        }
		}]
	}]
})
Ext.define('iih.mr.qa.process_qa_search.block.InProcessWorkSearchGridBlock',{
	extend :  Xap.ej.block.Block ,
	
	requires: [],

	alias:'widget.inprocessworksearchgridblock',
	
	layout: 'fit',
	border: 0,

    items:  [{
        xtype: 'xapgrid',
        ifSelect : true,
        selectBy: 'qaPk',
		tools:[{
           xtype:'button',
           text:'查看',
           method: 'look',
           disabled : true
       	}],
		autoScroll:true,
		pageSize : 25,
		pageShow : true,
             
  CM_JR_Record: [      
  				{  dataIndex: 'qaPk',field: 'textfield',type: 'string',flex:1 ,hidden:true},
  				{ header: '通知书编码', dataIndex: 'revisionCd',field: 'textfield',type: 'string',hidden:true },
  				{ header: '通知书状态编码', dataIndex: 'status',field: 'textfield',type: 'string',hidden:true },
  				//为了显示top信息
  				{  dataIndex: 'pk',field: 'textfield',type: 'string',flex:1 ,hidden:true},
  				{  dataIndex: 'patientId',field: 'textfield',type: 'string',flex:1 ,hidden:true},
  				{ header: '住院号', dataIndex: 'amrNo',field: 'textfield',type: 'string',width:90 ,hidden:true},
  				{ header: '床号', dataIndex: 'currentBedCode',field: 'textfield',type: 'string',width:70 ,hidden:true},
  				{ header: '患者姓名', dataIndex: 'patientName',field: 'textfield',type: 'string',width:100 ,hidden:true},
                { header: '性别', dataIndex: 'sexName',field: 'textfield',type: 'string',width:60 ,hidden:true},
                { header: '年龄', dataIndex: 'age',field: 'textfield',type: 'string',width:60 ,hidden:true},
                { header: '入院时间', dataIndex: 'receiveTime',xtype: 'xapdatecolumn',width:130 ,hidden:true},
  				{ header: '质控日期', dataIndex: 'crtTime',xtype: 'xapdatecolumn',width:130},
  				/*{ header: '质控日期', dataIndex: 'crtTime',xtype: 'xapdatecolumn',width:130 ,
  				renderer: function(value, cellmeta, record, rowIndex, colIndex, store){
  						if (value) {
  							if (Ext.isNumber(value)) {
  								value = new Date(value);
  								return Ext.util.Format.date(value, 'Y-m-d ');
  							}
  							return value;
  						}
  					}
  					
  				},*/
  				{ header: '住院号', dataIndex: 'amrNo',field: 'textfield',type: 'string',width:110},
  				{ header: '患者姓名', dataIndex: 'patientName',field: 'textfield',type: 'string',width:80},
  				{ header: '主诊断', dataIndex: 'currentMainDiagnosisName',field: 'textfield',type: 'string',flex:1 },
                { header: '通知书', dataIndex: 'revisionMemo',field: 'textfield',type: 'string',flex:1 },
                { header: '通知书状态', dataIndex: 'statusNM',field: 'textfield',type: 'string',width:90 },
                { header: '缺陷数', dataIndex: 'defectCount',field: 'textfield',type: 'int',width:60 },
                { header: '整改医师', dataIndex: 'rfmDoctorNm',field: 'textfield',type: 'string',width:80 },
                { header: '整改日期', dataIndex: 'rfmTime',xtype: 'xapdatecolumn',width:130},
                { header: '质控医师', dataIndex: 'crtUserNm', field: 'textfield',type: 'string',width:80 },
                { header: '质控科室', dataIndex: 'crtDeptNm' ,field: 'textfield',type: 'string',width:90}
                
        ]
    }],
    setData: function(data) {
        	var grid = this.down('xapgrid');
        	var dataList = data.dataList;
        	if(grid){
        		if(dataList){
			    	var totalList = {"total":data.total,"dataList":dataList};
			    	var pageSize = data.pageSize;
			    	if(pageSize == undefined || typeof(data.pageSize) == 'object'){
			    		grid.setPageData(totalList);	//初始化赋值
			    	}else{
			    		grid.setData(dataList);	//翻页时赋值
			    	}
	        	}else{
	        		var totalList = {"total":data.total,"dataList":data.dataList};
	        		grid.setPageData(totalList);
	        	}
        	}
    	}  
})

Ext.define('iih.mr.qa.process_qa_search.view.InProcessWorkInitView',{
	extend :  Xap.ej.template.BaseTemplate ,

	alias:'widget.inprocessworkinitview',

	          
		                                
   		                                
		                                       
		                                             
		                           
		                           
   		                             
   		                                  
   		                                  
   		                                         
   		                                                             
   		                                                            
	  

	layout: {
        type : 'fit'
    },
	
	xapConfig: {
		blocks: {
			'content':{
				xclass: 'iih.mr.qa.process_qa_search.block.InProcessWorkSearchBlock'
			}
		},
		actions: {
			'init': {
				xclass: 'iih.mr.qa.process_qa_search.action.InProcessWorkInitAction',
				blocks: {
					content: 'content'
				}
			}
		},

		chains: {
			'init': ['init']
		},

		connections: {
			'content':[{
				event: 'afterrender',
				chain: 'init'
			}]
		}
	}
})
Ext.define('iih.mr.qa.process_qa_search.view.InProcessWorkSearchView',{
	extend :  Xap.ej.template.BaseTemplate ,

	alias:'widget.inprocessworksearchview',

	          
		                                
   		                                
		                                       
		                                             
		                           
		                           
   		                             
   		                                  
   		                                  
   		                                         
   		                                                         
   		                                                                 
   		                                                               
   		                                                    
   		                                                             
   		                                                                 
	  

	layout: {
        type : 'vbox',
        align : 'stretch'
    },
	
	xapConfig: {
		blocks: {
			'condition':{
				xclass: 'iih.mr.qa.process_qa_search.view.InProcessWorkInitView',
				height:86
			},
			'toolbar': {
				xclass: 'Xap.ej.block.ToolbarBlock',
				items: [{
					xtype: 'button',
					iconCls: 'icon-Search',
					text: '查询',
					action: 'search'
				}]
			},
			'result':{
				xclass: 'iih.mr.qa.process_qa_search.block.InProcessWorkSearchGridBlock',
				flex:1
			}
		},
		actions: {
			'search': {
				xclass: 'iih.mr.qa.process_qa_search.action.InProcessWorkSearchAction',
				url:'qa/inprocesswork',
				blocks: {
					condition: 'condition',
					result: 'result'
				}
			},
			'judgeBtn':{
				xclass: 'iih.mr.qa.process_qa_search.action.JudgeBtnAction',
				blocks: {
				    result: 'result'
				}
			},
			'look': {
				xclass: 'iih.mr.qa.process_qa_search.action.ToProcessQaDefectAction',
				blocks: {
					condition: 'condition',
					result: 'result'
				}
			},
			'inProcessWorkViewready': {
				xclass: 'iih.mr.qa.process_qa_search.action.InProcessWorkViewreadyAction',
				blocks: {
					condition: 'condition',
					result: 'result'
				}
			}
		},

		chains: {
			'search': ['search'],
			'judgeBtn':['judgeBtn'],
			'look':['look'],
			'inProcessWorkViewready':['inProcessWorkViewready']
		},

		connections: {
			'condition':[{
                selector: 'comboxgrid[method=curDeptNm]',
                event: 'combochange',
                chain: 'search'
			},{
                selector: 'comboxgrid[name=crtUserNm]',
                event: 'combochange',
                chain: 'search'
			},{
                selector: 'comboxgrid[name=currentManageDoctorName]',
                event: 'combochange',
                chain: 'search'
			}],
			'result': [/*{
				event: 'afterrender',
				chain: 'search'
			},*/{
				selector: 'xapgrid',
				event : 'viewready',
				chain: 'inProcessWorkViewready'
			},{
				selector: 'xapgrid',
				event : 'itemclick',
				chain: 'judgeBtn'
			},{
				selector: 'xapgrid',
				event: 'itemdblclick',
				chain: 'look'
			},{//翻页操作
				selector: 'xapgrid',
				event: 'turnpage',
				chain: 'search'
			}],
			'toolbar': [{
				selector: 'button[action=search]',
				event: 'click',
				chain: 'search'
			}]
		}
	},
		
	initComponent : function() {
			this.callParent();
			this.addEvents("pageRefresh");//为视图添加刷新事件
			this.addListener('pageRefresh', function(){//添加监听事件
				 var properties = this.getLayer(Xap.ej.block.Layer.PROPERTIES);
		        var chain = this.getActionChain('search');
		        var block = this.getBlock('result');
//		        var pageSize = block.pageSize;
		        if(properties.data == undefined){
		        	 if(chain) {
		            chain.execute({});
		        	}
		        }else{
		        	var pageSize = properties.data.pageSize;
			        var pageNum = properties.data.pageNum;
			        if(chain) {
			            chain.execute({
			            	pageSize:pageSize,
			            	pageNum:pageNum
			            });
			        }
		        }
			});
		}
})
/** 
 * 审核通过
 * @author ：cheng_feng
 */
Ext.define('iih.mr.qa.process_qa_track.action.DefectCheckPassAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	doExecute: function(context) {
	        this.prepareOperations(context);
	 },
	 prepareOperations: function(context) {
		var me = this;
		var resultBlock = this.getBlock('result');
	        
	    /*var enGrid = resultBlock.down('xapgrid');
	     
	    var selModel = enGrid.getSelectionModel();
	        
	    var record = selModel.getSelection()[0];*/
		
		var record = context.record;
	    
	    var faultPk = record.data.qaFltPk;
	    
		var operations = context.operations;
		
        var url = this.url;
        url+= '/' + faultPk;
    	var operation = {
            url: url,
    		mclass: null,
    		method: 'put',
    		condition: null,
    		scope: this,
    		success: this.onSuccess
    	};
    	operations.length = 0;
    	operations.push(operation);
    },

    onSuccess: function(operation) {
    	var owner = this.getOwner();   
	    var revisionCd = owner.revisionCd;
    	//刷新
    	var chain = this.getBlock('result').ownerCt.getActionChain('init');
    	if(chain) {
        	chain.execute({
	        	rownum:0,
        		revisionCd: revisionCd
        	});
    	}
		var contentBlock = this.getBlock('result');
	    // 审核通过按钮
        var checkPass = contentBlock.down('xapgrid xapbutton[action=checkPass]');
        // 扣分按钮
        var deduction = contentBlock.down('xapgrid xapbutton[action=deduction]');
        // 再整改按钮
        var rectification = contentBlock.down('xapgrid xapbutton[action=rectification]');
        // 设置按钮可用
        checkPass.setDisabled(true);
        deduction.setDisabled(true);
        rectification.setDisabled(true);
    }
});

/** 
 * 扣分
 * @author ：cheng_feng
 */
Ext.define('iih.mr.qa.process_qa_track.action.DefectDeductionAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	doExecute: function(context) {
	        this.prepareOperations(context);
	 },
	 prepareOperations: function(context) {
		var me = this;
		var resultBlock = this.getBlock('result');
	        
	    /*var enGrid = resultBlock.down('xapgrid');
	     
	    var selModel = enGrid.getSelectionModel();
	        
	    var record = selModel.getSelection()[0];*/
	    
		var record = context.record;
		
	    var faultPk = record.data.qaFltPk;
	    
		var operations = context.operations;
		
        var url = this.url;
        url+= '/' + faultPk;
        console.log(url);
    	var operation = {
            url: url,
    		mclass: null,
    		method: 'put',
    		condition: null,
    		scope: this,
    		success: this.onSuccess
    	};
    	operations.length = 0;
    	operations.push(operation);
    },

    onSuccess: function(operation) {
    	var owner = this.getOwner();   
	    var revisionCd = owner.revisionCd;
    	//刷新
    	var chain = this.getBlock('result').ownerCt.getActionChain('init');
    	if(chain) {
        	chain.execute({
	        	rownum:0,
        		revisionCd: revisionCd
        	});
    	}
    	var contentBlock = this.getBlock('result');
	    // 审核通过按钮
        var checkPass = contentBlock.down('xapgrid xapbutton[action=checkPass]');
        // 扣分按钮
        var deduction = contentBlock.down('xapgrid xapbutton[action=deduction]');
        // 再整改按钮
        var rectification = contentBlock.down('xapgrid xapbutton[action=rectification]');
        // 设置按钮可用
        checkPass.setDisabled(true);
        deduction.setDisabled(true);
        rectification.setDisabled(true);
    }
});

/** 
 * 审核通过
 * @author ：cheng_feng
 */
Ext.define('iih.mr.qa.process_qa_track.action.DefectFinishCheckAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	doExecute: function(context) {
	        this.prepareOperations(context);
	 },
	 prepareOperations: function(context) {
		var me = this;
			
	    var owner = this.getOwner();   
	    
	    var revisionCd = owner.revisionCd;
	    
		var operations = context.operations;
		
        var url = this.url;
        url+= '/' + revisionCd;
        console.log(url);
    	var operation = {
            url: url,
    		mclass: null,
    		method: 'put',
    		condition: null,
    		scope: this,
    		success: this.onSuccess
    	};
    	operations.length = 0;
    	operations.push(operation);
    },

    onSuccess: function(operation) {
	    var me = this;
    	XapMessageBox.info("完成本次审核成功");
    	var owner = this.getOwner();   
	    var revisionCd = owner.revisionCd;
    	//刷新
    	var chain = this.getBlock('result').ownerCt.getActionChain('init');
    	if(chain) {
        	chain.execute({
	        	rownum:0,
        		revisionCd: revisionCd
        	});
    	}
    	var contentBlock = me.getBlock('result');
	    // 审核通过按钮
        var checkPass = contentBlock.down('xapgrid xapbutton[action=checkPass]');
        // 扣分按钮
        var deduction = contentBlock.down('xapgrid xapbutton[action=deduction]');
        // 再整改按钮
        var rectification = contentBlock.down('xapgrid xapbutton[action=rectification]');
        // 完成本次审核按钮
        var finishCheck = contentBlock.down('xapgrid xapbutton[action=finishCheck]');
        // 设置按钮可用
        checkPass.setDisabled(true);
        deduction.setDisabled(true);
        rectification.setDisabled(true);
        finishCheck.setDisabled(true);
        
        //储存画面间参数
	    var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
        properties.setData({
    		revisionStatus:iih.mr.qa.QaStatusGlobal.revisionNoticeVerified
        });
        
    }
});

/** 
 * 再整改
 * @author ：cheng_feng
 */
Ext.define('iih.mr.qa.process_qa_track.action.DefectRectificationAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	doExecute: function(context) {
	        this.prepareOperations(context);
	 },
	 prepareOperations: function(context) {
		var me = this;
		
		var resultBlock = this.getBlock('result');
	        
	    /*var enGrid = resultBlock.down('xapgrid');
	     
	    var selModel = enGrid.getSelectionModel();
	        
	    var record = selModel.getSelection()[0];*/
	    
		var record = context.record;
		
	    var faultPk = record.data.qaFltPk;
	    
		var operations = context.operations;
		
        var url = this.url;
        url+= '/' + faultPk;
        console.log(url);
    	var operation = {
            url: url,
    		mclass: null,
    		method: 'put',
    		condition: null,
    		scope: this,
    		success: this.onSuccess
    	};
    	operations.length = 0;
    	operations.push(operation);
    },

    onSuccess: function(operation) {
    	var owner = this.getOwner();   
	    var revisionCd = owner.revisionCd;
    	//刷新
    	var chain = this.getBlock('result').ownerCt.getActionChain('init');
    	if(chain) {
        	chain.execute({
	        	rownum:0,
        		revisionCd: revisionCd
        	});
    	}
    	var contentBlock = this.getBlock('result');
	    // 审核通过按钮
        var checkPass = contentBlock.down('xapgrid xapbutton[action=checkPass]');
        // 扣分按钮
        var deduction = contentBlock.down('xapgrid xapbutton[action=deduction]');
        // 再整改按钮
        var rectification = contentBlock.down('xapgrid xapbutton[action=rectification]');
        // 设置按钮可用
        checkPass.setDisabled(true);
        deduction.setDisabled(true);
        rectification.setDisabled(true);
    }
});

/** 
 * 重发整改通知
 * @author ：cheng_feng
 */
Ext.define('iih.mr.qa.process_qa_track.action.DefectSendNotificationAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	doExecute: function(context) {
	        this.prepareOperations(context);
	 },
	 prepareOperations: function(context) {
		
	    var owner = this.getOwner();
	    
    	var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
    	
        var revisionCd = properties.data.revisionCd;
	    
		var operations = context.operations;
		
        var url = this.url;
        url+= '/' + revisionCd;
        console.log(url);
    	var operation = {
            url: url,
    		mclass: null,
    		method: 'put',
    		condition: null,
    		scope: this,
    		success: this.onSuccess
    	};
    	operations.length = 0;
    	operations.push(operation);
    },

    onSuccess: function(operation) {
        var block = this.getBlock('result');
        var defectBlock = block.ownerCt.getBlock('bottom');
        var defectGrid = defectBlock.down('xapgrid');
        var m = operation.result;
        defectBlock.setData(m.data.qaFaultList.dataList);
    }
});

/** 
 * 完成本次审核前判断整改通知书下的缺陷状态
 * @author ：cheng_feng
 */
Ext.define('iih.mr.qa.process_qa_track.action.DefectStatisticalAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	doExecute: function(context) {
	        this.prepareOperations(context);
	 },
	 prepareOperations: function(context) {
		var me = this;
			
	    var owner = this.getOwner();   
	    
	    var revisionCd = owner.revisionCd;
	    
		var operations = context.operations;
		
    	//获取储存于画面间的参数
	    var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
	    
	    var typeFlag = properties.data.typeFlag;
	    
		var workScreen;
		
		if(typeFlag==1){
			workScreen = iih.mr.qa.QaStatusGlobal.workScreenTrackProcess;
		}else if(typeFlag==2){
			workScreen = iih.mr.qa.QaStatusGlobal.workScreenTrackTerminal;
		}else if(typeFlag==3){
			workScreen = iih.mr.qa.QaStatusGlobal.workScreenTrackDept;
		}
		
        var url = this.url;
        url += '?' + 'revisionCd=' + revisionCd + '&workScreen='+ workScreen;
        console.log(url);
    	var operation = {
            url: url,
    		mclass: null,
    		method: 'get',
    		condition: null,
    		scope: this,
    		success: this.onSuccess
    	};
    	operations.length = 0;
    	operations.push(operation);
    },

    onSuccess: function(operation) {
		var me = this;
		
	    var owner = this.getOwner();   
	    
	    var revisionCd = owner.revisionCd;
	    
    	//获取储存于画面间的参数
	    var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
		
		var revisionRecord = properties.data.revisionRecord;
        
        var m = operation.result;
        if(m=="1"){
        	XapMessageBox.info("存在未审核的缺陷，请先审核。");
        }else if(m=="2"){
        	XapMessageBox.confirm2("存在需要再次整改的缺陷，再次发送整改通知？", function(button) {
	            if (button == "yes") {
		        	//刷新
		        	var chain = owner.getActionChain('popupNotification');
		        	if(chain) {
		            	chain.execute();
		        	}
	            }else{
	            	return;
	            }
	        });
        }else if(m=="3"){
        	//刷新
        	var chain = this.getBlock('result').ownerCt.getActionChain('finishCheck');
        	if(chain) {
            	chain.execute({
    	        	rownum:0,
            		revisionCd: revisionCd
            	});
        	}
        }
    }
});

/** 
 * 查询环节质控-整改通知单一览列表
 * @author ：cheng_feng
 */
Ext.define('iih.mr.qa.process_qa_track.action.NotificationListAction', {
	extend:  Xap.ej.action.ServiceInvocation ,

	doExecute: function(context) {
		this. showLoading();
	    this.prepareOperations(context);
	 },
	 prepareOperations: function(context) {
	 	
		var operations = context.operations;
		
        var contentBlock = this.getBlock('result');
        
        var notificationGrid = contentBlock.down('xapgrid');
        
        // 开始审核按钮
         var inQaWork = contentBlock.down('xapgrid xapbutton[action=inQaWork]');
        
        // 设置按钮可用
        inQaWork.setDisabled(true);
        
        var sourceView=this.getOwner();	
		
		var typeFlag = sourceView.typeFlag;
		
		var qaTypeCode = "";
		if(typeFlag==1){
			qaTypeCode = iih.mr.qa.QaStatusGlobal.qaTypeCodeProcess;
			notificationGrid.setTitle('环节整改通知');
		} else if(typeFlag==2){
			qaTypeCode = iih.mr.qa.QaStatusGlobal.qaTypeCodeTerminal;
			notificationGrid.setTitle('终末整改通知');
		} else if(typeFlag==3){
			qaTypeCode = iih.mr.qa.QaStatusGlobal.qaTypeCodeDept;
			notificationGrid.setTitle('科室整改通知');
		}
		
        var isVerifiedBox = contentBlock.down('xapgrid xapcheckbox');
        
        var verifiedChecked = isVerifiedBox.checked;
        
        var verifiedDeadline = 0;
        
        if(verifiedChecked){
        	verifiedDeadline = iih.mr.qa.QaStatusGlobal.verifiedDeadline;
        }

        var url = this.url;
        url+= '?workScreen='+iih.mr.qa.QaStatusGlobal.workScreenTrack+'&qaTypeCode='+qaTypeCode+'&verifiedDeadline='+verifiedDeadline;
    	var operation = {
            url: url ,
    		mclass: null,
    		method: 'get',
    		condition: null,
    		scope: this,
    		success: this.onSuccess
    	};
    	operations.length = 0;
    	operations.push(operation);
    },

    onSuccess: function(operation) {
        var block = this.getBlock('result');
        var m = operation.result.dataList;
        if(m==null){
        	block.setData([]);
        }else{
        	block.setData(m);
        }
    }
});

 /*
 *  弹出完成本次质控Action
 * @extends Xap.ej.action.PopAction
 * @author ：cheng_feng
 */
Ext.define('iih.mr.qa.process_qa_track.action.PopupNotificationAction', {
	extend:  Xap.ej.action.PopAction ,
	
	execute: function(context) {

        var owner = this.getOwner();   
        
    	//获取储存于画面间的参数
        var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
        
		var typeFlag = properties.data.typeFlag;
			
		var qaTypeCode = "";
		var qaTypeName = "";
		var workScreen = "2";
		if(typeFlag==1){
		   qaTypeCode = iih.mr.qa.QaStatusGlobal.qaTypeCodeProcess;
		   qaTypeName = "环节质控";
		   workScreen = iih.mr.qa.QaStatusGlobal.workScreenTrackProcess;
		} else if(typeFlag==2){
		   qaTypeCode = iih.mr.qa.QaStatusGlobal.qaTypeCodeTerminal;
		   qaTypeName = "终末质控";
		   workScreen = iih.mr.qa.QaStatusGlobal.workScreenTrackTerminal;
		} else if(typeFlag==3){
		   qaTypeCode = iih.mr.qa.QaStatusGlobal.qaTypeCodeDept;
		   qaTypeName = "科室质控";
		   workScreen = iih.mr.qa.QaStatusGlobal.workScreenTrackDept;
		}
        
        var revisionCd = owner.revisionCd;
    	
    	var revisionRecord = properties.data.revisionRecord;
        
		var config = {
    		width: 760,
    		height:600,
    		title:'发送病历整改通知书',
    		contentConfig: {
    			xtype: 'defectnoticeinferview',
    			socuseOwner:owner,  //传入上级视图
    			initChain: {
    				name: 'refresh',
    				context: {
    					typeFlag: '1',
    					encounterPk:revisionRecord.data.enPk,  //就诊PK
			        	qaTypeCode:qaTypeCode,    //质控类型编码
    					qaTypeName:qaTypeName,  //质控类型名称
    					patientRecord:revisionRecord,  //患者就诊记录 
    					revisionCd:revisionRecord.data.revisionCd,
    					workScreen:workScreen
    				}
    			}
    		}
    	};
    	this.callParent([config]);
	}
});

/** 
 * 环节质控追踪页面，缺陷列表加载完成后查找到tools上的相关按钮进行事件的监听
 * @extends Xap.ej.action.Action
 * @author ：cheng_feng
 */

Ext.define('iih.mr.qa.process_qa_track.action.ProcessQaDefectViewreadyAction', {
	extend:  Xap.ej.action.Action ,
	
	requires:[],
	      
	execute: function(context){
		
		var me = this;
		
	    var owner = this.getOwner();
	    
		//获取缺陷一览的 block
		var bottomBlock = this.getBlock('bottom');		
		var defectGrid = bottomBlock.down('xapgrid');
		
		//审核通过按钮
		var checkPass = bottomBlock.down('xapgrid xapbutton[action=checkPass]');
		checkPass.on('click',function(btn){
			context.event.name='click';
			var checkPassChain = me.getOwner().getActionChain("checkPass");
			checkPassChain.execute(context);
		});
		
		//扣分按钮
		var deduction = bottomBlock.down('xapgrid xapbutton[action=deduction]');
		deduction.on('click',function(btn){
			context.event.name='click';
			var deductionChain = me.getOwner().getActionChain("deduction");
			deductionChain.execute(context);
		});
		
		//再整改按钮
		var rectification = bottomBlock.down('xapgrid xapbutton[action=rectification]');
		rectification.on('click',function(btn){
			context.event.name='click';
			var rectificationChain = me.getOwner().getActionChain("rectification");
			rectificationChain.execute(context);
		});
		
		//完成本次审核按钮
		var finishCheck = bottomBlock.down('xapgrid xapbutton[action=finishCheck]');
		finishCheck.on('click',function(btn){
			context.event.name='click';
			var finishCheckChain = me.getOwner().getActionChain("statistical");
			finishCheckChain.execute(context);
		});
		
		//向上按钮
		var up = bottomBlock.down('tool[itemId=up]');
		up.addListener('click', function() {
            me.maximize(300,bottomBlock);
            up.hide();
            down.show();
        });
		
		//向下按钮
		var down = bottomBlock.down('tool[itemId=down]');
		down.addListener('click', function() {
            me.minimize(bottomBlock);
            up.show();
            down.hide();
        });
       
        //表头
		var tbar = defectGrid.down('header');
        tbar.addListener('dblclick', function() {
            if(down.hidden==false){
               me.minimize(bottomBlock);
               up.show();
               down.hide();
            }else{
               me.maximize(300,bottomBlock);
               up.hide();
               down.show();
            }
        });
        
	},
    
    maximize: function(h,bottomBlock) {
        bottomBlock.setHeight(h);
    },
    
    minimize: function(bottomBlock) {
        bottomBlock.setHeight(200);
    }
	
})
/** 
 * 环节质控追踪页面，整改通知列表加载完成后查找到tools上的相关按钮进行事件的监听
 * @author ：cheng_feng
 */

Ext.define('iih.mr.qa.process_qa_track.action.ProcessQaNotificationViewreadyAction', {
	extend:  Xap.ej.action.Action ,
	
	execute: function(context){
		var me = this;
		
	    var owner = this.getOwner();
	    
	    //获取整改通知的 block
		var resultBlock = this.getBlock('result');	
		var inProcessGrid = resultBlock.down('xapgrid');
		
		//已审核（7天内） checkbox   
		var isVerified = resultBlock.down('xapcheckbox[action=isVerified]');
		isVerified.on('change',function(btn){
			context.event.name='change';
			var defectListInitChain = me.getOwner().getActionChain("init");
			defectListInitChain.execute(context);
		});
		
		//开始审核按钮
		var inProcess = inProcessGrid.down('xapbutton[action=inQaWork]');
		inProcess.on('click',function(btn){
			context.event.name='click';
			var inProcessChain = me.getOwner().getActionChain("toProcessQaDefect");
			inProcessChain.execute(context);
		});
	}
	
})
/** 
 * 缺陷列表block
 * @author ：cheng_feng
 */
Ext.define('iih.mr.qa.process_qa_track.block.DefectListBlock',{
	extend :  Xap.ej.block.Block ,
	
	           
   		                           
		                                 
   	  
   	
	alias:'widget.defectlistblock',

	layout: 'fit',

	items: [{
		xtype: 'xapgrid',
		tools:[{
			xtype: 'xapbutton',
			text : '审核通过',
			action: 'checkPass',
            hidden: true,
			disabled: true
		},{
			xtype: 'xapbutton',
			text : '扣分',
			action: 'deduction',
            hidden: true,
			disabled: true
		},
		{
			xtype: 'xapbutton',
			text: '再整改',
			action: 'rectification',
            hidden: true,
			disabled: true
		},{
			xtype: 'xapbutton',
			text : '完成本次审核',
			action: 'finishCheck',
			disabled: true
		},{
            itemId: 'up',
            hidden: false,
            xtype: 'tool',
            type: 'up'
        },{
            itemId: 'down',
            hidden: true,
            xtype: 'tool',
            type: 'down'
        }
	],
		autoScroll:true,
		title:'缺陷列表',
		CM_JR_Record: [
			 { xtype:'xapactioncolumn',
				text:'操作',
				width: 170,
				defectStore: null,
				items: [
					{
						text:'审核通过',
						/*getClass : function(v,m,record) {
							if(record.data.bugState=='MRM010.01' || record.data.bugState=='MRM010.03'  || record.data.bugState=='MRM010.05'){
								return 'x-hidden';
							}							
						},*/
						isDisabled : function(view,rowIndex,colIndex,item ,record) {
							if(record.data.revisionStatus==iih.mr.qa.QaStatusGlobal.revisionNoticeReformed){
								return false;
							}else{
								return true;
							}
						},
						handler: function(view,rowIndex,colIndex,e,item ,record) {
//							this.ownerCt.ownerCt.fireEvent('columnClick',record);
							var owner = this.up('processqadefectview');
							var checkPassChain = owner.getActionChain("checkPass");
							checkPassChain.execute({
								record:record
							});
							var wakeDefectButtonChain = owner.getActionChain("wakeDefectButton");
							wakeDefectButtonChain.execute({
								record:record
							});
						}
					},{
						text:'扣分',
						/*getClass : function(v,m,record) {
							if(record.data.bugState=='MRM010.01' || record.data.bugState=='MRM010.03'  || record.data.bugState=='MRM010.05'){
								return 'x-hidden';
							}							
						},*/
						isDisabled : function(view,rowIndex,colIndex,item ,record) {
							if(record.data.revisionStatus==iih.mr.qa.QaStatusGlobal.revisionNoticeReformed){
								return false;
							}else{
								return true;
							}
						},
						handler: function(view,rowIndex,colIndex,e,item ,record) {
//							this.ownerCt.ownerCt.fireEvent('columnClick',record);
							var owner = this.up('processqadefectview');
							var deductionChain = owner.getActionChain("deduction");
							deductionChain.execute({
								record:record
							});
							var wakeDefectButtonChain = owner.getActionChain("wakeDefectButton");
							wakeDefectButtonChain.execute({
								record:record
							});
						}
					},{
						text:'再整改',
						/*getClass : function(v,m,record) {
							if(record.data.bugState=='MRM010.01' || record.data.bugState=='MRM010.02' || record.data.bugState=='MRM010.04'   || record.data.bugState=='MRM010.05'){
								return 'x-hidden';
							}							
						},*/
						isDisabled : function(view,rowIndex,colIndex,item ,record) {
							if(record.data.revisionStatus==iih.mr.qa.QaStatusGlobal.revisionNoticeReformed){
								return false;
							}else{
								return true;
							}
						},
						handler: function(view,rowIndex,colIndex,e,item ,record) {
//							console.log('click '+'---'+rowIndex+'---'+colIndex+'---'+record.data.bugCd);
//							console.log('click '+'---'+this.ownerCt.ownerCt.xtype);
//							this.ownerCt.ownerCt.fireEvent('columnClick',record);
							var owner = this.up('processqadefectview');
							var rectificationChain = owner.getActionChain("rectification");
							rectificationChain.execute({
								record:record
							});
							var wakeDefectButtonChain = owner.getActionChain("wakeDefectButton");
							wakeDefectButtonChain.execute({
								record:record
							});
						}	
					}
				]
			},
		   {header: '状态', dataIndex: 'fltStaNm', field: 'textfield', type: 'string', width: 80},
           {header: '文书名称', dataIndex: 'mrName',alink:true, field: 'textfield', type: 'string', width: 150},
           {header: '缺陷描述', dataIndex: 'req', field: 'textfield', type: 'string', width: 165},
           {header: '扣分标准', dataIndex: 'deductDes', field: 'textfield',type: 'string', width: 80},
           {header: '缺陷次数',dataIndex: 'deductScrTimes', field: 'textfield', type: 'string' ,width: 80},
           /*{ header: '提出日期', dataIndex: 'sbmtTime', 
				field: {
					xtype: 'datetimefield'
				},
				renderer: function(v){
					if(v){
						v = new Date(v);
						return Ext.util.Format.date(v, 'Y-m-d H:i');
					}
					return v;
				}
			 },*/
           {header: '提出日期', dataIndex: 'sbmtTime', xtype: 'xapdatecolumn',  width: 120},
           {header: '提出人', dataIndex: 'crtUserNm', field: 'textfield', type: 'string', width: 80},
           {header: '整改说明', dataIndex: 'rfmDes', field: 'textfield', type: 'string', width: 80, flex:1},
		   {header : '缺陷主键', name: 'qaFltPk', dataIndex : 'qaFltPk', hidden:true },
		   {header : '通知书状态', name: 'revisionStatus', dataIndex : 'revisionStatus', hidden:true },
		   {header : '质控项', name: 'qaItmCd', dataIndex : 'qaItmCd', hidden:true },
           {header: '文书主键', dataIndex: 'mrPk', field: 'textfield', type: 'string', hidden:true },
		   {header: '缺陷状态编码', dataIndex: 'fltStaCd', field: 'textfield', type: 'string', hidden:true}
		]
	}],

	setData: function(data) {
		var grid = this.down('xapgrid');
		if(data){
			grid.setData(data);
		}else{
			grid.setData([]);
		}
	}
})
/** 
 * 缺陷列表，选择一条缺陷记录后，根据整改通知单的状态唤醒按钮
 * @author ：cheng_feng
 */
Ext.define('iih.mr.qa.process_qa_track.action.WakeDefectButtonAction', {
extend:  Xap.ej.action.ServiceInvocation ,

	requires: [],
	
	execute: function(context) {

		var contentBlock = this.getBlock('result');
		
		var owner = this.getOwner();
	        
	    //获取储存于画面间的参数
	    var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
		
		var noticeStatus = properties.data.revisionStatus;
		
	    if(iih.mr.qa.QaStatusGlobal.revisionNoticeReformed == noticeStatus){
	    	 // 审核通过按钮
//	         var checkPass = contentBlock.down('xapgrid xapbutton[action=checkPass]');
	         // 扣分按钮
//	         var deduction = contentBlock.down('xapgrid xapbutton[action=deduction]');
	         // 再整改按钮
//	         var rectification = contentBlock.down('xapgrid xapbutton[action=rectification]');
	         // 完成本次审核按钮
	         var finishCheck = contentBlock.down('xapgrid xapbutton[action=finishCheck]');
	        
	         if(iih.mr.qa.QaStatusGlobal.revisionNoticeReformed == noticeStatus){
	 	        // 设置按钮可用
//	 	        checkPass.setDisabled(false);
//	 	        deduction.setDisabled(false);
//	 	        rectification.setDisabled(false);
	 	        finishCheck.setDisabled(false);
	         }
	    }
	    
        contentBlock.down('xapgrid').refresh();
        
    }
});

/** 
 * 环节质控追踪缺陷列表
 * @author ：cheng_feng
 */
 
Ext.define('iih.mr.qa.process_qa_track.view.ProcessQaDefectView',{
//	extend : 'Xap.ej.stl.view.TopBottomContainerTemplate',
	extend:  Xap.ej.template.BaseTemplate ,
	           
	                                       
	                                           
	                                           
	                                          
	                                        
	                                             
	                                      
	                                    
	                                                           
	                                                              
			                                                        
			                                                                      
			                                                              
			                                                          
			                                                             
			                                                             
			                                                                 
			                                                               
			                                                               
			                                                          
			                                                              
	  

	alias:'widget.processqadefectview',
	
	layout: {
        type : 'vbox',
        align : 'stretch'
    },
    
	xapConfig: {
		blocks: {
		    'top': {
                xclass: 'iih.mr.qa.process_qa_work.block.QaMrEditBlock',
                flex:1
            },
			'bottom': {
				xclass: 'iih.mr.qa.process_qa_track.block.DefectListBlock',
				height:200
			}
		},
		
		actions: {
			'init': {
				xclass: 'iih.mr.qa.process_qa_track.action.DefectListAction',
				url: 'qa/notification/faults',
				blocks: {
					condition: 'properties',
					result: 'bottom'
				}
			},
			'processQaDefectViewready': {
				xclass: 'iih.mr.qa.process_qa_track.action.ProcessQaDefectViewreadyAction',
				blocks: {
					top: 'top',
					bottom: 'bottom'
				}
			},
			'wakeDefectButton': {
				xclass: 'iih.mr.qa.process_qa_track.action.WakeDefectButtonAction',
				blocks: {
					condition: 'properties',
					result: 'bottom'
				}
			},
			'qaMrSignOpen': {
				xclass: 'iih.mr.qa.process_qa_track.action.QaMrSignOpenAction',
				blocks: {
					condition: 'properties',
					top: 'top',
					result: 'bottom'
				}
			},
			'checkPass': {
				xclass: 'iih.mr.qa.process_qa_track.action.DefectCheckPassAction',
				url: 'qa/fault/checkpass',
				blocks: {
					condition: 'properties',
					result: 'bottom'
				}
			},
			'deduction': {
				xclass: 'iih.mr.qa.process_qa_track.action.DefectDeductionAction',
				url: 'qa/fault/deduction',
				blocks: {
					condition: 'properties',
					result: 'bottom'
				}
			},
			'rectification': {
				xclass: 'iih.mr.qa.process_qa_track.action.DefectRectificationAction',
				url: 'qa/fault/rectification',
				blocks: {
					condition: 'properties',
					result: 'bottom'
				}
			},
			'finishCheck': {
				xclass: 'iih.mr.qa.process_qa_track.action.DefectFinishCheckAction',
				url: 'qa/notification/finishCheck',
				blocks: {
					condition: 'properties',
					result: 'bottom'
				}
			},
			'statistical': {
				xclass: 'iih.mr.qa.process_qa_track.action.DefectStatisticalAction',
				url: 'qa/notification/faultStatistical',
				blocks: {
					condition: 'properties',
					result: 'bottom'
				}
			},
			'popupNotification': {
				xclass: 'iih.mr.qa.process_qa_track.action.PopupNotificationAction',
				blocks: {
					condition: 'properties',
					result: 'bottom'
				}
			}
		},

		chains: {
			'init':['init'],
			'processQaDefectViewready':['processQaDefectViewready'],
			'wakeDefectButton':['wakeDefectButton'],
			'qaMrSignOpen':['qaMrSignOpen'],
			'checkPass':['checkPass'],
			'deduction':['deduction'],
			'rectification':['rectification'],
			'finishCheck':['finishCheck'],
			'statistical':['statistical'],
			'popupNotification':['popupNotification']
		},

		connections: {
			'bottom':[{
				event: 'afterrender',
				chain: 'init'
			},/*{
				selector: 'xapgrid',
				event:'itemclick',
				chain: 'inQaWork'
			},*/{
				selector: 'xapgrid',
				event: 'viewready',
				chain: 'processQaDefectViewready'
			},{
                selector: 'xapgrid',
                event: 'linkClick',
                chain: 'qaMrSignOpen'
            },{
				selector: 'xapgrid',
				event:'select',
				chain: 'wakeDefectButton'
			},{
				selector: 'xapgrid',
				event:'itemdblclick',
				chain: 'qaMrSignOpen'
			}]
		}
	}/*,
	
	initComponent : function() {
		this.callParent();
		this.addEvents("pageRefresh");//为视图添加刷新事件
		this.addListener('pageRefresh', function(){//添加监听事件
	        var chain = this.getActionChain('init');
	        if(chain) {
	            chain.execute();
	        }
		});
	}*/
})
/** 
 * 初始化环节质控追踪画面，缺陷列表
 * @author ：cheng_feng
 */
Ext.define('iih.mr.qa.process_qa_track.action.ToProcessQaDefectAction', {
extend:  Xap.ej.action.Action ,
	
	                                                                  
	
	execute: function(context) {
		
		var me = this;
		
		var owner = this.getOwner();   
		
		var topBlock = this.getBlock('result');
	        
	    var enGrid = topBlock.down('xapgrid');
	     
	    var selModel = enGrid.getSelectionModel();
	        
	    var record = selModel.getSelection()[0];
	    
	    var revisionCd = record.data.revisionCd;
	    
	    record.data.pk = record.data.encounterNo;
	    
	    var revisionStatus = record.data.status;
	    
	    var sourceView=this.getOwner();	
		
	    var typeFlag = sourceView.typeFlag;
	       
	    var event = context.event;
	    var pageCode ;
	    var pageTitle;
	    if(typeFlag==1){
	    	pageTitle = '环节质控追踪工作画面';
	    	pageCode = "processQaDefectView";
	    }else if(typeFlag==2){
	    	pageCode = "terminalQaDefectView";
	    	pageTitle = '终末质控追踪工作画面';
	    }else if(typeFlag==3){
	    	pageCode = "departmentQaDefectView";
	    	pageTitle = '科室质控追踪工作画面';
	    }

	    var viewConfig = {
	    	revisionRecord:record,
	    	revisionCd: revisionCd,
	    	revisionStatus:revisionStatus,
	    	typeFlag:typeFlag
	    }
        if(event) {
            var config = {
            	pageCode: pageCode,
            	pageTitle: pageTitle,
                xclass: 'iih.mr.qa.process_qa_track.view.ProcessQaDefectView',
                viewConfig:  viewConfig
            };
            var canvas = Xap.getCanvas();
            canvas.fireEvent("updatePatient",{patient:record.data});  // top患者信息刷新
            canvas.fireEvent("addWorkPage",config);
        };
    }
});
/** 
 *  整改通知列表，选择一条整改通知记录后，根据整改通知记录的状态唤醒按钮
 * @author ：cheng_feng
 */
Ext.define('iih.mr.qa.process_qa_track.action.WakeNotificationButtonAction', {
extend:  Xap.ej.action.ServiceInvocation ,

	requires: [],
	
	execute: function(context) {

		 var me = this;
		 var contentBlock = this.getBlock('result');
	        
	     var enGrid = contentBlock.down('xapgrid');
	     
	     var selModel = enGrid.getSelectionModel();
	        
	     var record = selModel.getSelection()[0];
	     
	     var noticeStatus = record.data.status;
	     // 开始审核按钮
         var inQaWork = contentBlock.down('xapgrid xapbutton[action=inQaWork]');
        
        // 设置按钮可用
        inQaWork.setDisabled(false);
        
        contentBlock.down('xapgrid').refresh();
    }
});

/** 
 * 整改通知列表block
 * @author ：cheng_feng
 */
 
Ext.define('iih.mr.qa.process_qa_track.block.NotificationListBlock',{
	extend :  Xap.ej.block.Block ,


	alias:'widget.notificationlistblock',

	layout: 'fit',

	items: [{
		title: '环节整改通知',

		xtype: 'xapgrid',
		ifSelect : true,
        selectBy: 'revisionCd',
		tools:[{
				xtype: 'xapcheckbox',
				boxLabel : '已审核（7天内）',
				action: 'isVerified',
				padding:'0 870 0 0'
			},
			{
				xtype: 'xapbutton',
				text: '开始审核',
				action: 'inQaWork',
				disabled: true
			}
		],
		autoScroll:true,
		CM_JR_Record: [
				        { header: '整改通知主键', dataIndex: 'revisionCd',field: 'textfield',type: 'string',hidden:true },
				        { header: '患者编码', dataIndex: 'patientId',field: 'textfield',type: 'string',hidden:true },
				        { header: '性别', dataIndex: 'sexName',field: 'textfield',type: 'string',hidden:true },
				        { header: '年龄', dataIndex: 'age',field: 'textfield',type: 'string',hidden:true },
				        { header: '病案号', dataIndex: 'amrNo',field: 'textfield',type: 'string',hidden:true },
				        { header: '就诊号', dataIndex: 'encounterNo',field: 'textfield',type: 'string',hidden:true },
				        { header: '主诊断', dataIndex: 'currentMainDiagnosisName',field: 'textfield',type: 'string',hidden:true },
				        /*{ header: '入院时间', dataIndex: 'currentDeptIntoTime',
					        field: {
								xtype: 'datetimefield'
							},
							renderer: function(v){
								if(v){
									v = new Date(v);
									return Ext.util.Format.date(v, 'Y-m-d H:i');
								}
								return v;
							},hidden:true },*/
           				/*{ header: '入院时间', dataIndex: 'currentDeptIntoTime', xtype: 'xapdatecolumn',  width: 120},*/
				        { header: '床位号', dataIndex: 'currentBedCode',field: 'textfield',type: 'string',hidden:true },
				        { header: '质控类型', dataIndex: 'qaTyCd',field: 'textfield',type: 'string',hidden:true },
		  				{ header: '状态编码', dataIndex: 'status',field: 'textfield',type: 'string',hidden:true },
		  				{ header: '状态', dataIndex: 'statusNM',field: 'textfield',type: 'string' },
		  				/*{ header: '发送时间', dataIndex: 'sendTime', 
							field: {
								xtype: 'datetimefield'
							},
							renderer: function(v){
								if(v){
									v = new Date(v);
									return Ext.util.Format.date(v, 'Y-m-d H:i');
								}
								return v;
							}
						 },*/
           				{header: '发送时间', dataIndex: 'sendTime', xtype: 'xapdatecolumn',  width: 120},
			            { header: '整改医师编码',dataIndex: 'rfmDoctorCd',field: 'textfield',type: 'string',hidden:true},
		                { header: '整改医师',dataIndex: 'rfmDoctorNM',field: 'textfield',type: 'string'},
		                { header: '整改科室编码', dataIndex: 'rfmDeptCd',field: 'textfield',type: 'string',hidden:true},
		                { header: '整改科室', dataIndex: 'rfmDeptNM',field: 'textfield',type: 'string'},
		  				{ header: '患者姓名', dataIndex: 'patientName',field: 'textfield',type: 'string'},
		  				{ header: '缺陷数', dataIndex: 'defectCount',field: 'textfield',type: 'string'},
		                { header: '整改期限', dataIndex: 'rfmDeadline',field: 'textfield',type: 'string' },
		                /*{ header: '截止时间', dataIndex: 'deadline', 
							field: {
								xtype: 'datetimefield'
							},
							renderer: function(v){
								if(v){
									v = new Date(v);
									return Ext.util.Format.date(v, 'Y-m-d H:i');
								}
								return v;
							}
						},*/
           				{header: '截止时间', dataIndex: 'deadline', xtype: 'xapdatecolumn',  width: 120},
		                { header: '整改说明', dataIndex: 'memo',field: 'textfield',type: 'string',flex:1 },
           				{ header: '整改时间', dataIndex: 'rfmTime', xtype: 'xapdatecolumn',  width: 120}
		        ]
	}],

	setData: function(data) {
		if(data){
			var grid = this.down('xapgrid');
			/*var resultList = [];
			for(var i in data){
				var cusAmr = data[i].cusAmr;
	        	var encounterModel = data[i].encounterModel;
	        	var rs = Ext.Object.merge(cusAmr,encounterModel);//不严谨
				var patientEncounterModel = Ext.create('iih.mr.model.QAPatientEncounterModel',cusAmr);
				resultList.push(patientEncounterModel);
			}
			grid.setData(resultList);*/
			if(grid){
				if(data){
					grid.setData(data);
				}else{
					grid.setData([]);
				}
			}
		}
	}
})

/** 
 * 环节质控追踪整改通知列表
 * @author ：cheng_feng
 */
 
Ext.define('iih.mr.qa.process_qa_track.view.ProcessQaNotificationView',{
	extend:  Xap.ej.template.BaseTemplate ,

	           
	                                       
	                                           
	                                           
	                                          
	                                        
	                                             
	                                      
	                                                                    
	                                                                      
	                                                                       
	                                                                                    
	                                                                           
	  

	alias:'widget.processqanotificationview',
	layout: {
        type: 'fit'
    },
    
	xapConfig: {
		blocks: {
            'content': {
                xclass: 'iih.mr.qa.process_qa_track.block.NotificationListBlock',
                flex: 1
            }
		},
		
		actions: {
			'init': {
				xclass: 'iih.mr.qa.process_qa_track.action.NotificationListAction',
				url: 'qa/notifications',
				blocks: {
					condition: 'properties',
					result: 'content'
				}
			},
			'wakeButton': {
				xclass: 'iih.mr.qa.process_qa_track.action.WakeNotificationButtonAction',
				blocks: {
					condition: 'properties',
					result: 'content'
				}
			},
			'processQaNotificationViewreadyAction': {
				xclass: 'iih.mr.qa.process_qa_track.action.ProcessQaNotificationViewreadyAction',
				blocks: {
					condition: 'properties',
					result: 'content'
				}
			},
			'toProcessQaDefect': {
				xclass: 'iih.mr.qa.process_qa_track.action.ToProcessQaDefectAction',
				blocks: {
					condition: 'properties',
					result: 'content'
				}
			}
		},

		chains: {
			'init':['init'],
			'toProcessQaDefect':['toProcessQaDefect'],
			'processQaNotificationViewreadyAction':['processQaNotificationViewreadyAction'],
			'wakeButton':['wakeButton']
		},

		connections: {
			'content': [/*{
				event: 'afterrender',
				chain: 'init'
			},*/{
				selector: 'xapgrid',
				event: 'itemdblclick',
				chain: 'toProcessQaDefect'
			},{
				selector: 'xapgrid',
				event: 'select',
				chain: 'wakeButton'
			},{
				selector: 'xapgrid',
				event: 'viewready',
				chain: 'processQaNotificationViewreadyAction'
			}
			]
		}
	},
		initComponent : function() {
			this.callParent();
			this.addEvents("pageRefresh");//为视图添加刷新事件
			this.addListener('pageRefresh', function(){//添加监听事件
				 var properties = this.getLayer(Xap.ej.block.Layer.PROPERTIES);
		        var chain = this.getActionChain('init');
//		        var block = this.getBlock('result');
//		        var pageSize = block.pageSize;
//		        var pageSize = properties.data.pageSize;
//		        var pageNum = properties.data.pageNum;
		        if(chain) {
		            chain.execute({
//		            	pageSize:pageSize,
//		            	pageNum:pageNum
		            });
		        }
			});
		}
})
Ext.define('iih.mr.qa.qa_divide_level.action.CreateRuleAction', {
	extend:  Xap.ej.action.Action ,
	
	/*
	* 当事件类型为多选时，动态的添加规则运算值（暂时不做多选）
	*/
	execute: function(context) {
		var owner = this.getOwner();
		var workAreaView = owner.up();
		var beforeLn = workAreaView.beforeLn;
		var beforeQaItmCd = workAreaView.beforeQaItmCd;
		var block = this.getBlock('content');
		var frequencyAuto = block.down('xapform[name=frequencyAuto]');
		var data = frequencyAuto.getData();
		var qaItmCd = data.qaItmCd;
		var eventTypeCodeF = frequencyAuto.down('xapcombobox[name=eventTypeCodeF]');
		var eventTypeName = frequencyAuto.down('xapdisplayfield[name=eventTypeName]');
		var eventTypeCode = eventTypeCodeF.getValue();
		var eventTypeCodeLength = eventTypeCode.length;
		var test = eventTypeCodeLength -1;
		var eventTypeCodeFNames = eventTypeCodeF.rawValue;
		var eventTypeCodeFName = eventTypeCodeFNames.split(',');
		if(beforeQaItmCd == undefined){ //判断是否为同一条质控项
			workAreaView.beforeQaItmCd = qaItmCd;
		}else if(beforeQaItmCd != qaItmCd){
			beforeLn = undefined;
		}
		if(beforeLn == undefined){ //判断初始化赋值
			if(eventTypeCodeLength>1){
				eventTypeName.setValue(eventTypeCodeFName[0]);
				for(var i=1;i<eventTypeCodeLength;i++){
					var blankdisplayfield0 = Ext.create("Xap.ej.element.field.DisplayField", {
								 vertical: true
						});
					var eventTypeNamei = Ext.create("Xap.ej.element.field.DisplayField", {
							xtype:'xapdisplayfield',
							margin:'10 0 0 0',
							vertical: true,
							fieldLabel: '',
							name:'eventTypeName'+'i',
							value:''
						});
					eventTypeNamei.setValue(eventTypeCodeFName[i])
					var numberfield = Ext.create("Xap.ej.element.field.NumberField", {
							margin:'10 0 0 0',
					        width:100,
					        vertical: true,
							fieldLabel:'',
							labelAlign : 'left'
						});
					var displayfield = Ext.create("Xap.ej.element.field.DisplayField", {
							margin:'10 0 0 0',
					        vertical: true,
							fieldLabel:'',
							labelAlign : 'left',
							value:'天/次'
						});
					var blankdisplayfield = Ext.create("Xap.ej.element.field.DisplayField", {
								colspan:8,
								 vertical: true
						});
					var blankdisplayfield1 = Ext.create("Xap.ej.element.field.DisplayField", {
								 vertical: true
						});
						
					frequencyAuto.insert(14,blankdisplayfield0);
					frequencyAuto.insert(15,eventTypeNamei);
					frequencyAuto.insert(16,numberfield);
					frequencyAuto.insert(17,displayfield);
					frequencyAuto.insert(18,blankdisplayfield);
					frequencyAuto.insert(19,blankdisplayfield1);
				}
			}else{
				eventTypeName.setValue(eventTypeCodeFName);
			}
			workAreaView.beforeLn = eventTypeCodeLength;
		}else{
			if(beforeLn>eventTypeCodeLength){ //减少一个
				/*if(eventTypeCodeLength <= 1){
					var eventTypeName1 = frequencyAuto.down('xapdisplayfield[name=eventTypeName1]');
					eventTypeName.setValue(eventTypeCodeFName[0]);
				}else{
					eventTypeName.setValue(eventTypeCodeFName[0]);
					eventTypeNamei.setValue('')
				}*/
				
				frequencyAuto.removeDocked(blankdisplayfield0,true);
				frequencyAuto.remove(eventTypeName1);
				frequencyAuto.remove(numberfield);
				frequencyAuto.remove(displayfield);
				frequencyAuto.remove(blankdisplayfield);
				frequencyAuto.remove(blankdisplayfield1);
				workAreaView.beforeLn = eventTypeCodeLength;
			}else{ //添加一个
				var blankdisplayfield0 = Ext.create("Xap.ej.element.field.DisplayField", {
							 vertical: true
					});
				var eventTypeName1 = Ext.create("Xap.ej.element.field.DisplayField", {
						margin:'10 0 0 0',
						vertical: true,
						fieldLabel: '',
						name:'eventTypeName',
						value:''
					});
				eventTypeName1.setValue(eventTypeCodeFName[eventTypeCodeLength -1]);
				var numberfield = Ext.create("Xap.ej.element.field.NumberField", {
						margin:'10 0 0 0',
				        width:100,
				        name:'number',
				        vertical: true,
						fieldLabel:'',
						labelAlign : 'left'
					});
				var displayfield = Ext.create("Xap.ej.element.field.DisplayField", {
						margin:'10 0 0 0',
				        vertical: true,
						fieldLabel:'',
						labelAlign : 'left',
						value:'天/次'
					});
				var blankdisplayfield = Ext.create("Xap.ej.element.field.DisplayField", {
							colspan:8,
							 vertical: true
					});
				var blankdisplayfield1 = Ext.create("Xap.ej.element.field.DisplayField", {
							 vertical: true
					});
				frequencyAuto.insert(14,blankdisplayfield0);
				frequencyAuto.insert(15,eventTypeName1);
				frequencyAuto.insert(16,numberfield);
				frequencyAuto.insert(17,displayfield);
				frequencyAuto.insert(18,blankdisplayfield);
				frequencyAuto.insert(19,blankdisplayfield1);
				
				workAreaView.beforeLn = eventTypeCodeLength;
			}
		}
		workAreaView.beforeQaItmCd = qaItmCd;
	}
});

/** 
 * 点击记录，判断按钮状态
 * @author ：yao_lijie
 */
Ext.define('iih.mr.qa.qa_divide_level.action.JudgeBtnAction', {
	extend:  Xap.ej.action.Action ,
	
	execute: function(context) {
		
		var owner = this.getOwner();
		var block = this.getBlock('content');
		var grid = block.down('xapgrid');
    	var workBlock = owner.up();
    	var groupType = workBlock.groupType;
		//编辑按钮
		var editLevel = grid.down('button[method=editLevel]');
		editLevel.setDisabled(false);
		//删除按钮
		var delLevel = grid.down('button[method=delLevel]');
    	delLevel.setDisabled(false);
	}
});

Ext.define('iih.mr.qa.qa_divide_level.action.JudgeDocOpTypeAction', {
	extend:  Xap.ej.action.Action ,
	
	/*
	* @Override
	*/
	execute: function(context) {
		var owner = this.getOwner();
		var block = this.getBlock('content');
		var integrityAuto = block.down('xapform[name=integrityAuto]');
		var jobTitleCd = integrityAuto.down('xapcombobox[name=jobTitleCd]').getValue();
		var dctOpTpCd = integrityAuto.down('xapcombobox[name=dctOpTpCd]');
		if(jobTitleCd == ''){
			dctOpTpCd.setDisabled(true);
			dctOpTpCd.select('');
		}else{
			dctOpTpCd.setDisabled(false);
		}
	}
});

Ext.define('iih.mr.qa.qa_divide_level.action.MrTypeSearchAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override
	*/
	execute: function(context) {
	    this.prepareOperations(context.operations);
    },
    prepareOperations: function(operations) {
        var block = this.getOwner().getBlock('content');
        var mrCustClaCd = '';
        var condition={"mrTypeCustomCategoryCd":mrCustClaCd,"enTypeCd":'ENM01.04'};
        var url = this.url;
        var operation = {
                url: url,
                method: 'get',
                params: condition,
                scope: this,
                success: this.onSuccess
            };
        operations.push(operation);
    },
    onSuccess: function(operation) {
    	var owner = this.getOwner();
        var block = owner.getBlock('content');
        var qaItmTpCd = block.down('xapcombobox[name=qaItmTpCd]').value;
        var timeAuto = block.down('xapform[name=timeAuto]');
        var frequencyAuto = block.down('xapform[name=frequencyAuto]');
        var integrityAuto = block.down('xapform[name=integrityAuto]');
        var qaItmData = owner.qaItmData;
		var qaItmCd = owner.qaItmCd;
		var sourceView = owner.sourceView;
        var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
        properties.setData({
            qaItmData : qaItmData,
            sourceView : sourceView
        });
    	if(operation.result){
    		if(qaItmTpCd == 'QAM06.02'){
        		var mrTypeCd = timeAuto.down('xapcombobox[name=mrTypes]');
        	}else if(qaItmTpCd == 'QAM06.05'){
        		var mrTypeCd = frequencyAuto.down('xapcombobox[name=mrTypes]');
        	}else if(qaItmTpCd == 'QAM06.04'){
        		var mrTypeCd = integrityAuto.down('xapcombobox[name=mrTypes]');
        	}
            mrTypeCd.setData(operation.result.dataList);
            var result = this.getOwner();
            var initChain = result.getActionChain('init');
            initChain.execute({
            	qaItmCd:qaItmCd,
            	qaItmData:qaItmData
            });
        }
    }
});

/** 
 * 病案等级设置（新增、编辑）BLOCK
 * @extends Xap.ej.block.Block
 * @author ：yao_lijie
 */

Ext.define('iih.mr.qa.qa_divide_level.block.QaDivideLevelSetBlock',{
	extend :  Xap.ej.block.FormBlock ,
	
	requires: [],

    alias:'widget.qadividelevelsetblock',
    
    layout: {
		type: 'table',
		columns: 1,
		//width: 1024,
		tableAttrs: {
            border: 0,
            cellpadding: 0,
            cellspacing: 1,
            width: '100%'
//            height:76
        },
        tdAttrs: {
            valign: 'left'
        }
	},
    
    buttons:[{
            xtype: "button",
            name: 'save',
            action:'save',
            text: '确认',
            iconCls: 'icon-OK'
        },{
            xtype: "button",
            name: 'cancel',
            action:'cancel',
            text: '取消' ,
            iconCls: 'icon-cancel' 
    }],
    
    items:[{
        xtype:'xapcombobox',
        name:'lvl',
        margin:'10 0 0 0',
//        padding:'10 0 8 15',
//        labelWidth:80,
//        width:220,
//        labelWidth : 60,
		labelAlign : 'right',
        editable:false,
        allOptions: false,
        fieldLabel:'等级',
        dictionary:'MRM10'
    },{
        xtype:'xapnumberfield',
        name:'minScr',
        labelAlign : 'right',
		fieldLabel:'最低分',
		allowBlank:false,
		margin:'10 0 10 0',
		decimalPrecision: 1, //精确1位小数
		maxValue: 100,
		minValue: 0
    },{
        xtype:'xapnumberfield',
        labelAlign : 'right',
        name:'maxScr',
		fieldLabel:'最高分',
		decimalPrecision: 1, //精确1位小数
		allowBlank:false,
		maxValue: 100,
		minValue: 0
    },{
		xtype: 'xapdisplayfield',
		fieldLabel: '',
		colspan:16,
		vertical: true,
		name:'showInfo',
		value: '',
		margin:'0 10 0 0'
    }]
})
Ext.define('iih.mr.qa.qa_divide_level.action.QaDivideLevelSetSearchAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override
	*/
	execute: function(context) {
		var owner = this.getOwner();
		var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
         	properties.setData({
            	eventNm : context.eventNm,
            	qaDivideLevelCd : context.qaDivideLevelCd
        });
		var block = this.getBlock('content');
		var lvl = block.down('xapcombobox[name=lvl]');
		var data = {
			eventNm : context.eventNm,
			qaDivideLevelCd : context.qaDivideLevelCd
		}
		if(context.eventNm == 'addClick'){
    		lvl.disabled = false;
    	}else{
    		lvl.disabled = true;
    		var operations = context.operations;
	    	if(!operations) {
	    		return;
	    	}
			this.prepareOperations(operations,data);
    	}
	},
    
    prepareOperations: function(operations,data) {
		var url = this.url + '?qaDivideLevelCd=' + data.qaDivideLevelCd;
    	var operation = {
            url: url ,
    		mclass: null,
    		method: 'get',
    		condition: null,
    		scope: this,
    		success: this.onSuccess
    	};
    	operations.length = 0;
    	operations.push(operation);
    },

    onSuccess: function(operation) {
        var block = this.getBlock('content');
        var m = operation.result;
        // TODO 数据格式就这样了？
        if(m instanceof Ext.data.Model) {
            block.setData({
                mclass: operation.mclass,
                data: m.getData(true)
            });
        }
        else {
        	block.setData(m);
        	console.log(m);
        }
    }
});

Ext.define('iih.mr.qa.qa_divide_level.action.QaDivideLevelVaidatorNmAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override
	*/
	execute: function(context) {
		var owner = this.getOwner();
		var block = this.getBlock('content');
		var showInfo = block.down('xapdisplayfield[name=showInfo]');
		var form= block.getForm();
        var data = form.getValues();
        var lvlValue = data.lvl;
        var minScr = data.minScr;
        var maxScr = data.maxScr;
        if(lvlValue == ""){
    		showInfo.setValue('<font color=red>等级不能为空</font>');
			return null;
    	}else if(minScr == "" || maxScr == ""){
    		showInfo.setValue('<font color=red>分数不能为空</font>');
			return null;
    	}else if(minScr<0 || minScr >100){
    		showInfo.setValue('<font color=red>分数超出范围</font>');
			return null;
    	}else if(maxScr<0 || maxScr >100){
    		showInfo.setValue('<font color=red>分数超出范围</font>');
			return null;
    	}else{
    		var operations = context.operations;
			if(!operations) {
				return;
			}
			this.prepareOperations(operations,lvlValue);
    	}
	},
    
    prepareOperations: function(operations,qaDivideLevelCd) {
		var url = this.url + '/' + qaDivideLevelCd;
    	var operation = {
            url: url ,
    		mclass: null,
    		method: 'get',
    		condition: null,
    		scope: this,
    		success: this.onSuccess
    	};
    	operations.length = 0;
    	operations.push(operation);
    },

    onSuccess: function(operation) {
    	var owner = this.getOwner();
        var block = this.getBlock('content');
        var showInfo = block.down('xapdisplayfield[name=showInfo]');
        var nm = block.down('xapcombobox[name=lvl]');
        var m = operation.result;
		if(m == '1'){
			XapMessageBox.info("病案等级已添加");
			showInfo.setValue('');
		}else{
			var saveQaDivideLevelChain = owner.getActionChain('saveQaDivideLevel');
			saveQaDivideLevelChain.execute();
		}
    }
});

/** 
 * 病案新增、编辑保存Action
 * @extends Xap.ej.action.ServiceInvocation
 * @author ：yao_lijie
 */

Ext.define('iih.mr.qa.qa_divide_level.action.QaDivideLevelSaveAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	                                      
	
	/*   
	* @Override
	*/
	execute: function(context) {   
    	var owner = this.getOwner();
		var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
		var eventNm = properties.data.eventNm;
		var block = this.getBlock('content');
		var lvl = block.down('xapcombobox[name=lvl]');
		var qaDivideLevelCd = lvl.value;
		var lvl = lvl.rawValue; //value
		var form= block.getForm();
        var data = form.getValues();
        data.eventNm = eventNm;
        data.qaDivideLevelCd = qaDivideLevelCd;
        data.lvl = lvl;
        var operations = context.operations;
        if(!operations) {
     		return;
	    }
        if(eventNm == 'addClick'){
	     	this.addOperations(operations,data);
        }else{
        	data.qaDivideLevelCd = properties.data.qaDivideLevelCd;
        	this.prepareOperations(operations,data);
        }
     	
    },
    addOperations: function(operations,data){
        var url = this.url;
        var mclass = null;
        var METHODS = this.getInvocationMethods();
    	var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_CREATE,
            condition: null,	
            data:data,
    		scope: this,
    		success: this.onSuccess
    	};
    	operations.length = 0;
    	operations.push(operation);
    },
    prepareOperations: function(operations,data){
    	//修改病案等级
    	var qaDivideLevelCd =data.qaDivideLevelCd;
        var url = this.url+"/"+qaDivideLevelCd;
        var mclass = null;
        var METHODS = this.getInvocationMethods();
    	var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_UPDATE,
            condition: null,	
            data:data,
    		scope: this,
    		success: this.onSuccess
    	};
    	operations.length = 0;
    	operations.push(operation);
    },
    onSuccess: function(operation) {
	    var owner = this.getOwner();
	    //关闭此画面
    	var closeQaItmFstChain = owner.getActionChain('closeQaDivideLevel');
    	closeQaItmFstChain.execute();
    	
    	//刷新一级分类的记录
        var view  =  owner.sourceView;
    	
    	var chain = view.getActionChain('init');
    	chain.execute();
    }
});
/** 
 * 病案等级设置（新增、编辑）视图
 * @author ：yao_lijie
 */

Ext.define('iih.mr.qa.qa_divide_level.view.QaDivideLevelSetView',{
	extend :  Xap.ej.template.BaseTemplate ,
	
	alias:'widget.qadividelevelsetview', 
	
	          
	                                      
	   		                                 
	   		                                           
	                                                   
	                                              
	                                             
	                                   
	                                                  
	                                                                  
	                                                                          
	                                                                           
	                                                                     
	                                                                  
	            
	
	xapConfig:{         
		blocks: {
			'content':{
				xclass: 'iih.mr.qa.qa_divide_level.block.QaDivideLevelSetBlock',
				height:180
			}
		},
		actions:{
			'init':{
				xclass: 'iih.mr.qa.qa_divide_level.action.QaDivideLevelSetSearchAction',
				url:'qadividelevel/set',
				blocks: {
				    content: 'content'
				}
			},
			'vaidatorNm':{
				xclass: 'iih.mr.qa.qa_divide_level.action.QaDivideLevelVaidatorNmAction',
				url:'qadividelevel/vaidatorNm',
				blocks: {
				    content: 'content'
				}
			},
			'saveQaDivideLevel':{
				xclass: 'iih.mr.qa.qa_divide_level.action.QaDivideLevelSaveAction',
				url:'qadividelevel/save',
				blocks: {
				    content: 'content'
				}
			},
			'closeQaDivideLevel':{
				xclass: 'iih.mr.qa.process_qa_work.action.FaultInputCloseAction',
				blocks: {
				    content: 'content'
				}
			}
		},
		chains:{
			'init':['init'],
			'vaidatorNm':['vaidatorNm'],
			'saveQaDivideLevel':['saveQaDivideLevel'],
			'closeQaDivideLevel':['closeQaDivideLevel']
		},
		connections:{
			'content':[/*{
                event:'afterrender',
                chain:'init'
            },*/{
				selector: 'button[action=save]',
				event: 'click',
				chain: 'vaidatorNm'
			},{
				selector: 'button[action=cancel]',
				event: 'click',
				chain: 'closeQaDivideLevel'
			}/*,{
				selector: 'xapcombobox[name=lvl]',
				event: 'blur',
				chain: 'vaidatorNm'
			}*/]
		}
	}
})
/** 
 * 弹出病案等级新增、编辑画面Action
 * @extends Xap.ej.action.PopAction
 * @author ：yao_lijie
 */

Ext.define('iih.mr.qa.qa_divide_level.action.PopupQaDivideLevelAction', {
	extend:  Xap.ej.action.PopAction ,
	
	                                                                 
	
	execute: function(context){
		var owner = this.getOwner();
		var eventNm = context.eventNm;
		if(eventNm == undefined){
			eventNm = context.event.name;
		}
		var contentBlock = this.getBlock('content');
	    var grid = contentBlock.down('xapgrid');
	    var blockTitle;
	    var qaDivideLevelCd;
		if(eventNm == 'addClick'){
			blockTitle = '新增病案等级设置';
		}else{
			blockTitle = context.blockTitle;
			qaDivideLevelCd = context.qaDivideLevelCd;
		}
		
	   
		
		var config = {
				title:blockTitle,
	    		width: 350,
	    		height:230,
	    		contentConfig: {
	    			xtype: 'qadividelevelsetview',
	    			sourceView:owner,  //传入上级视图
	    			initChain: {
	    				name: 'init',
	    				context: {
	    					qaDivideLevelCd: qaDivideLevelCd,
	    					eventNm: eventNm
	    				}
	    			}
	    		}
	    	};
		
		this.callParent([config]);
		
	}
})
/** 
 * 病案等级设置（新增、编辑）BLOCK
 * @extends Xap.ej.block.Block
 * @author ：yao_lijie
 */
var me;
Ext.define('iih.mr.qa.qa_divide_level.block.QaItmSetBlock',{
	extend :  Xap.ej.block.FormBlock ,
	
	requires: [],

    alias:'widget.qaitmsetblock',
    
    layout: {
		type: 'table',
		columns: 2,
		//width: 1024,
		tableAttrs: {
            border: 0,
            cellpadding: 0,
            cellspacing: 1,
            width: '100%'
//            height:76
        },
        tdAttrs: {
            valign: 'left'
        }
	},
    
    buttons:[{
            xtype: "button",
            name: 'save',
            action:'save',
            text: '确认',
            iconCls: 'icon-OK'
        },{
            xtype: "button",
            name: 'cancel',
            action:'cancel',
            text: '取消' ,
            iconCls: 'icon-cancel' 
    }],
    
    items:[{
        xtype:'xaptextfield',
        name:'qaItmCd',
        fieldLabel:'质控项目编码',
        hidden:true
    },{
        xtype:'xapcombobox',
        name:'fstCd',
        margin:'10 0 0 0',
        labelAlign : 'right',
        editable:false,
        allOptions: false,
        fieldLabel:'一级分类',
        queryMode: 'local',
        displayField: 'nm',
        valueField: 'fstCd'
    },{
        xtype:'xapcombobox',
        name:'sndCd',
        margin:'10 0 0 0',
        labelAlign : 'right',
        editable:false,
        allOptions: false,
        fieldLabel:'二级分类',
        queryMode: 'local',
        displayField: 'nm',
        valueField: 'sndCd',
        id:'sndCdTip'
    },{
        xtype:'xaptextfield',
        colspan:2,
        width:540,
        name:'req',
		fieldLabel:'项目名称',
		allowBlank:false,
		margin:'10 0 0 0'
    },{
        xtype:'xapcombobox',
        labelAlign : 'right',
        name:'qaDrpScrTpCd',
		fieldLabel:'扣分类型',
		dictionary:'QAM02',
		editable:false,
		allowBlank:false,
		margin:'10 0 0 0'
    },{
        xtype:'xapnumberfield',
        margin:'10 0 0 0',
        name:'onceDrpScr',
		fieldLabel:'单次扣分值',
		labelAlign : 'right',
		allowBlank:false,
		decimalPrecision: 1, //精确1位小数
		maxValue: 100,
		minValue: 0
    },{
        xtype:'xaptextfield',
        name:'deductDes',
		fieldLabel:'扣分描述',
		allowBlank:false,
		margin:'10 0 0 0'
    },{
        xtype:'xapnumberfield',
        margin:'10 0 0 0',
        name:'maxDrpScr',
		fieldLabel:'累计扣分最大值',
		labelAlign : 'right',
		maxValue: 100,
		minValue: 0
    },{
		xtype: 'xapradiogroup',
		fieldLabel:'自动质控标志',
		colspan:2,
		margin:'10 0 0 40',
		items: [
			{boxLabel: '是', name: 'autoQaF',width:85, inputValue: '1'},
			{boxLabel: '否', name: 'autoQaF', width:85,inputValue: '0',checked: true}
		]
	},{
		xtype: 'xapdisplayfield',
		fieldLabel: '',
		colspan:16,
		vertical: true,
		name:'showInfo',
		value: '',
		margin:'0 10 0 0'
	}],
initComponent: function() {
    this.callParent(arguments);
	//当指定控件有显示不全时，自动出现tip提示
	this.addListener('afterrender',this.tip);
},
tip : function(){
	Ext.create('Ext.tip.ToolTip', {
        target: 'sndCdTip',
        anchor: 'buttom',
        anchorOffset: 30,
        trackMouse: true,
    	listeners: {
			beforeshow: function updateTipBody(tip) {
				var textTip = Ext.getCmp('sndCdTip');
				var value = textTip.rawValue;
				tip.update(value);				
			}
		}
      
    });
}
})
Ext.define('iih.mr.qa.qa_divide_level.action.QaItmFstCobSearchAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override
	*/
	execute: function(context) {
		var owner = this.getOwner();
		owner.sndNm = context.sndNm;
	    var fstCd = context.fstCd;
	    owner.sndCd = context.sndCd;//新增时将分类树选中的二级分类 默认 赋值
//		var typeFlag = context.typeFlag;
		var groupType = context.groupType;
		var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
		var block = this.getBlock('content');
		var data;
		if(groupType == '3'){
			properties.setData({
            	eventNm : context.eventNm,
            	sndCd: context.sndCd,
            	groupType : groupType
        	});
			data = {
				eventNm : context.eventNm,
				sndCd: context.sndCd,
				fstCd:fstCd,
				groupType:groupType
			}
		}else if(groupType == '4'){
			properties.setData({
            	eventNm : context.eventNm,
            	qaItmCd: context.qaItmCd,
            	groupType : groupType
        	});
			data = {
				eventNm : context.eventNm,
				qaItmCd: context.qaItmCd,
				fstCd:fstCd,
				groupType:groupType
			}
		}
		block.data = data;
		var operations = context.operations;
    	if(!operations) {
    		return;
    	}
		this.prepareOperations(operations);
    },
    prepareOperations: function(operations) {
        var url = this.url;
        var operation = {
                url: url,
                method: 'get',
                scope: this,
                success: this.onSuccess
            };
        operations.length = 0;
        operations.push(operation);
    },
    onSuccess: function(operation) {
    	var view = this.getOwner();
        var block = this.getBlock('content');
        var data = block.data;
        var qaItmFst=block.down('[name=fstCd]');

        if(operation.result){
            qaItmFst.setData(operation.result);
            if(data.groupType == '3'){
            	qaItmFst.select(data.fstCd);
            	var initChain = view.getActionChain('init');
	            initChain.execute({
	            	data: data
	            });
            }else if(data.groupType == '4'){
            	qaItmFst.select(data.fstCd);
            	if(data.eventNm == 'editClick'){
            		qaItmFst.selectAt(0);
            	}
            }
        }else{
        	 qaItmFst.setData(null);
        }
    }
});

Ext.define('iih.mr.qa.qa_divide_level.action.QaItmSndCobSearchAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override
	*/
	execute: function(context) {
		var owner = this.getOwner();
		var block = this.getBlock('content');
		block.sndCd = owner.sndCd;
	    this.prepareOperations(context.operations);
    },
    prepareOperations: function(operations) {
        var block = this.getBlock('content');
        var qaItmFst=block.down('[name=fstCd]').getValue();
        var condition={"qaItmFst":qaItmFst};
        var url = this.url;
        if(condition) {
            var qs = Ext.Object.toQueryString(condition);
            if(qs) {
                url += '?'+qs;
            }
        }
        var operation = {
                url: url,
                method: 'get',
                condition: condition,
                scope: this,
                success: this.onSuccess
                // fail: this.onFail
            };
        operations.length = 0;
        operations.push(operation);
    },
    onSuccess: function(operation) {
    	var block = this.getBlock('content');
    	var data = block.data;
    	var sndCd = block.sndCd;
        var qaItmFst=block.down('[name=fstCd]');
        var qaItmSnd=block.down('[name=sndCd]');
    	if(operation.result){
            qaItmSnd.setData(operation.result.dataList);
            if(sndCd == undefined || sndCd == ''){
            	qaItmSnd.selectAt(0);
            }else{
            	qaItmSnd.select(sndCd);
            }
            
            var view = this.getOwner();
            var initChain = view.getActionChain('init');
            initChain.execute({
            	data:data
            });
        }
    }
});

Ext.define('iih.mr.qa.qa_divide_level.action.QaItmSetSearchAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override
	*/
	execute: function(context) {
		var data = context.data;
		var qaItmCd = data.qaItmCd;

		if(data.eventNm == 'addClick'){
			
    	}else{
    		var operations = context.operations;
	    	if(!operations) {
	    		return;
	    	}
			this.prepareOperations(operations,qaItmCd);
    	}
	},
    
    prepareOperations: function(operations,qaItmCd) {
		var url = this.url + '?qaItmCd=' + qaItmCd;
    	var operation = {
            url: url ,
    		mclass: null,
    		method: 'get',
    		condition: null,
    		scope: this,
    		success: this.onSuccess
    	};
    	operations.length = 0;
    	operations.push(operation);
    },

    onSuccess: function(operation) {
        var block = this.getBlock('content');
        var  qaItmFst = block.down('xapcombobox[name=fstCd]');
        var  qaItmSnd = block.down('xapcombobox[name=sndCd]');
        var m = operation.result;
        qaItmFst.select(m.fstCd);
        qaItmSnd.select(m.sndCd);
        // TODO 数据格式就这样了？
        if(m instanceof Ext.data.Model) {
            block.setData({
                mclass: operation.mclass,
                data: m.getData(true)
            });
        }
        else {
        	block.setData(m);
        	console.log(m);
        }
    }
});

Ext.define('iih.mr.qa.qa_divide_level.action.QaItmVaidatorAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override
	*/
	execute: function(context) {
		var owner = this.getOwner();
		var block = this.getBlock('content');
		var showInfo = block.down('xapdisplayfield[name=showInfo]');
        var form= block.getForm();
        var data = form.getValues();
        var sndCd = data.sndCd;
       	var req = data.req;
        var qaDrpScrTpCd = data.qaDrpScrTpCd;
        var onceDrpScr = data.onceDrpScr;
        var deductDes = data.deductDes;
        var maxDrpScr = data.maxDrpScr;
        if(sndCd == ""){
    		showInfo.setValue('<font color=red>二级分类未设置</font>');
			return null;
    	}else if(req == ""){
    		showInfo.setValue('<font color=red>项目名称不能为空</font>');
			return null;
    	}else if(qaDrpScrTpCd == ""){
    		showInfo.setValue('<font color=red>扣分类型不能为空</font>');
			return null;
    	}else if(onceDrpScr == ""){
    		showInfo.setValue('<font color=red>单次扣分值不能为空</font>');
			return null;
    	}else if(deductDes == ""){
    		showInfo.setValue('<font color=red>扣分描述不能为空</font>');
			return null;
    	}else if(onceDrpScr<0 || onceDrpScr >100){
    		showInfo.setValue('<font color=red>分数超出范围</font>');
			return null;
    	}else if(maxDrpScr<0 || maxDrpScr >100){
    		showInfo.setValue('<font color=red>分数超出范围</font>');
			return null;
    	}else if(qaDrpScrTpCd == iih.mr.qa.QaStatusGlobal.qaDrpScrTpCdB || qaDrpScrTpCd == iih.mr.qa.QaStatusGlobal.qaDrpScrTpCdC){
    		var saveQaItmFstChain = owner.getActionChain('saveQaItm');
			saveQaItmFstChain.execute();
			showInfo.setValue('');
			return null;
    	}else{
    		var operations = context.operations;
			if(!operations) {
				return;
			}
			this.prepareOperations(operations,data);
    	}
	},
    
    prepareOperations: function(operations,data) {
		var url = this.url + '?sndCd=' + data.sndCd +'&onceDrpScr='+data.onceDrpScr;
    	var operation = {
            url: url ,
    		mclass: null,
    		method: 'get',
    		condition: null,
    		scope: this,
    		success: this.onSuccess
    	};
    	operations.length = 0;
    	operations.push(operation);
    },

    onSuccess: function(operation) {
    	var owner = this.getOwner();
        var block = this.getBlock('content');
        var showInfo = block.down('xapdisplayfield[name=showInfo]');
        var m = operation.result;
		if(m == '2'){
			XapMessageBox.info("单次扣分值大于二级分类分数");
			showInfo.setValue('');
		}else{
			var saveQaItmFstChain = owner.getActionChain('saveQaItm');
			saveQaItmFstChain.execute();
		}
    }
});

/** 
 * 质控项目保存Action
 * @extends Xap.ej.action.ServiceInvocation
 * @author ：yao_lijie
 */

Ext.define('iih.mr.qa.qa_divide_level.action.QaItmSaveAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	                                      
	
	/*   
	* @Override
	*/
	execute: function(context) {   
    	var owner = this.getOwner();
		var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
		var eventNm = properties.data.eventNm;
		var block = this.getBlock('content');
		var form= block.getForm();
        var data = form.getValues();
        data.eventNm = eventNm;
        block.fstCd = data.fstCd;
        block.sndCd = data.sndCd;
        var operations = context.operations;
        if(!operations) {
     		return;
	    }
        if(eventNm == 'addClick'){
        	var fstCdValue = block.down('xapcombobox[name=fstCd]').value;
        	var sndCdValue = block.down('xapcombobox[name=sndCd]').value;
        	if(fstCdValue == null || sndCdValue == null){
        		XapMessageBox.info("请添加分类信息");
        	}else{
        		this.addOperations(operations,data);
        	}
        }else{
        	data.qaItmCd = properties.data.qaItmCd;
        	this.prepareOperations(operations,data);
        }
     	
    },
    addOperations: function(operations,data){
        var url = this.url;
        var mclass = null;
        var METHODS = this.getInvocationMethods();
    	var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_CREATE,
            condition: null,	
            data:data,
    		scope: this,
    		success: this.onSuccess
    	};
    	operations.length = 0;
    	operations.push(operation);
    },
    prepareOperations: function(operations,data){
    	//修改二级分类
    	var qaItmCd =data.qaItmCd;
        var url = this.url+"/"+qaItmCd; 
        var mclass = null;
        var METHODS = this.getInvocationMethods();
    	var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_UPDATE,
            condition: null,	
            data:data,
    		scope: this,
    		success: this.onSuccess
    	};
    	operations.length = 0;
    	operations.push(operation);
    },
    onSuccess: function(operation) {
	    var owner = this.getOwner();
	    //关闭此画面
    	var closeQaItmFstChain = owner.getActionChain('closeQaItm');
    	closeQaItmFstChain.execute();
    	var block = this.getBlock('content');
        var fstCd = block.fstCd ;
        var sndCd = block.sndCd ;
    	//刷新一级分类的记录
        var view  =  owner.sourceView;
     
    	var chain = view.getActionChain('treeSelect');
    	chain.execute({
    		fstCd:fstCd,
    		sndCd:sndCd
    	});
    }
});
/** 
 * 质控项目设置（新增、编辑）视图
 * @author ：yao_lijie
 */

Ext.define('iih.mr.qa.qa_divide_level.view.QaItmSetView',{
	extend :  Xap.ej.template.BaseTemplate ,
	
	alias:'widget.qaitmsetview', 
	
	          
	                                      
	   		                                 
	   		                                           
	                                                   
	                                              
	                                             
	                                   
	                                                  
	                                     
	                                                          
	                                                                     
	                                                                     
	                                                                  
	                                                                 
	                                                             
	                                                                  
	            
	
	xapConfig:{         
		blocks: {
			'content':{
				xclass: 'iih.mr.qa.qa_divide_level.block.QaItmSetBlock',
				height:220
			}
		},
		actions:{
			'initQaItmFst':{ 
                xclass:'iih.mr.qa.qa_divide_level.action.QaItmFstCobSearchAction',
                url:'qaitmfst',
                blocks:{
                    content: 'content'
                }
            },
            'searchQaItmSnd':{
                xclass:'iih.mr.qa.qa_divide_level.action.QaItmSndCobSearchAction',
                url:'itmsnd',
                blocks:{
                    content:'content'
                }
            },
            'init':{ 
                xclass:'iih.mr.qa.qa_divide_level.action.QaItmSetSearchAction',
                url:'qaitm/set',
                blocks:{
                    content: 'content'
                }
            },
			'vaidator':{
				xclass: 'iih.mr.qa.qa_divide_level.action.QaItmVaidatorAction',
				url:'qaitm/vaidator',
				blocks: {
				    content: 'content'
				}
			},
			'saveQaItm':{
				xclass: 'iih.mr.qa.qa_divide_level.action.QaItmSaveAction',
				url:'qaitm/save',
				blocks: {
				    content: 'content'
				}
			},
			'closeQaItm':{
				xclass: 'iih.mr.qa.process_qa_work.action.FaultInputCloseAction',
				blocks: {
				    content: 'content'
				}
			}
		},
		chains:{
			'initQaItmFst':['initQaItmFst'],
			'init':['init'],
			'searchQaItmSnd':['searchQaItmSnd'],
			'vaidator':['vaidator'],
			'saveQaItm':['saveQaItm'],
			'closeQaItm':['closeQaItm']
		},
		connections:{
			'content':[/*{
                event:'afterrender',
                chain:'init'
            },*/{
                selector: 'xapcombobox[name=fstCd]',
                event: 'change',
                chain: 'searchQaItmSnd'
            },{
				selector: 'button[action=save]',
				event: 'click',
				chain: 'vaidator'
			},{
				selector: 'button[action=cancel]',
				event: 'click',
				chain: 'closeQaItm'
			}/*,{
				selector: 'xaptextfield[name=nm]',
				event: 'blur',
				chain: 'vaidatorNm'
			}*/]
		}
	}
})
/** 
 * 弹出质控项目新增、编辑画面Action
 * @extends Xap.ej.action.PopAction
 * @author ：yao_lijie
 */

Ext.define('iih.mr.qa.qa_divide_level.action.PopupQaItmAction', {
	extend:  Xap.ej.action.PopAction ,
	
	                                                         
	
	execute: function(context){
		var owner = this.getOwner();
		var workBlock = owner.up();
    	var groupType = workBlock.groupType;
//		var typeFlag = owner.typeFlag;
		var eventNm = context.eventNm;
		if(eventNm == undefined){
			eventNm = context.event.name;
		}
		var contentBlock = this.getBlock('right');
	    var grid = contentBlock.down('xapgrid');
	    var blockTitle;
	    var fstCd;
	    var sndCd;
	    var qaItmCd;
		if(eventNm == 'addClick'){
			fstCd = owner.fstCd;
			sndCd = owner.sndCd;
			blockTitle = '新增质控项目';
		}else if(eventNm == 'editClick'){
			blockTitle = context.blockTitle;
			qaItmCd = context.qaItmCd;
		}
		
		var config = {
				title:blockTitle,
	    		width: 590,
	    		height:260,
	    		contentConfig: {
	    			xtype: 'qaitmsetview',
	    			sourceView:owner,  //传入上级视图
	    			initChain: {
	    				name: 'initQaItmFst',
	    				context: {
	    					qaItmCd: qaItmCd,
	    					fstCd:fstCd, //新增时一级/二级分类赋值
	    					sndCd:sndCd,
	    					eventNm: eventNm,
	    					groupType:groupType
	    				}
	    			}
	    		}
	    	};
		
		this.callParent([config]);
		
	}
})
/** 
 * 病案等级设置（新增、编辑）BLOCK
 * @extends Xap.ej.block.Block
 * @author ：yao_lijie
 */
var me;
Ext.define('iih.mr.qa.qa_divide_level.block.QaItmFstSetBlock',{
	extend :  Xap.ej.block.FormBlock ,
	
	requires: [],

    alias:'widget.qaitmfstsetblock',
    
    layout: {
		type: 'table',
		columns: 1,
		//width: 1024,
		tableAttrs: {
            border: 0,
            cellpadding: 0,
            cellspacing: 1,
            width: '100%'
//            height:76
        },
        tdAttrs: {
            valign: 'left'
        }
	},
    
    buttons:[{
            xtype: "button",
            name: 'save',
            action:'save',
            text: '确认',
            iconCls: 'icon-OK'
        },{
            xtype: "button",
            name: 'cancel',
            action:'cancel',
            text: '取消' ,
            iconCls: 'icon-cancel' 
    }],
    
    items:[{
        xtype:'xaptextfield',
        name:'fstCd',
		fieldLabel:'编码',
		hidden:true
    },{
        xtype:'xaptextfield',
        name:'nm',
		fieldLabel:'名称',
       /* validator : function() {  //"vaidator"为该校验属性，设置校验函数  
            var view = this.up('qaitmfstsetview');
            var vaidatorNmChain = view.getActionChain('vaidatorNm');
    		vaidatorNmChain.execute();
        },
 		invalidText : '此项目名已存在！' ,*/
		allowBlank:false,
		margin:'10 0 0 0'
    },{
        xtype:'xapnumberfield',
        name:'score',
		fieldLabel:'评分',
		decimalPrecision: 1, //精确1位小数
		allowBlank:false,
		margin:'10 0 10 0',
		labelAlign : 'right',
		maxValue: 100,
		minValue: 1
    },{
        xtype:'xaptextfield',
        name:'memo',
		fieldLabel:'描述'
    },{
		xtype: 'xapdisplayfield',
		fieldLabel: '',
		colspan:16,
		vertical: true,
		name:'showInfo',
		value: '',
		margin:'0 10 0 0'
	}]
  
    /*checkCompellation :function(){
    	return false;
    }*/
})
Ext.define('iih.mr.qa.qa_divide_level.action.QaItmFstSetSearchAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override
	*/
	execute: function(context) {
		var owner = this.getOwner();
		owner.fstNm = context.fstNm;
		var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
         	properties.setData({
            	eventNm : context.eventNm,
            	fstCd : context.fstCd
        });
		var data = {
			eventNm : context.eventNm,
			fstCd : context.fstCd
		}
		if(context.eventNm == 'addClick'){
    		
    	}else{
    		var operations = context.operations;
	    	if(!operations) {
	    		return;
	    	}
			this.prepareOperations(operations,data);
    	}
	},
    
    prepareOperations: function(operations,data) {
		var url = this.url + '?fstCd=' + data.fstCd;
    	var operation = {
            url: url ,
    		mclass: null,
    		method: 'get',
    		condition: null,
    		scope: this,
    		success: this.onSuccess
    	};
    	operations.length = 0;
    	operations.push(operation);
    },

    onSuccess: function(operation) {
        var block = this.getBlock('content');
        var m = operation.result;
        // TODO 数据格式就这样了？
        if(m instanceof Ext.data.Model) {
            block.setData({
                mclass: operation.mclass,
                data: m.getData(true)
            });
        }
        else {
        	block.setData(m);
        	console.log(m);
        }
    }
});

Ext.define('iih.mr.qa.qa_divide_level.action.QaItmFstVaidatorNmAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override
	*/
	execute: function(context) {
		var owner = this.getOwner();
		var block = this.getBlock('content');
		var showInfo = block.down('xapdisplayfield[name=showInfo]');
		var form= block.getForm();
        var data = form.getValues();
        var nmValue = data.nm;
        var score = data.score;
        if(nmValue == ""){
    		showInfo.setValue('<font color=red>名称不能为空</font>');
			return null;
    	}else if(score == ""){
    		showInfo.setValue('<font color=red>分数不能为空</font>');
			return null;
    	}else if(score<1 || score >100){
    		showInfo.setValue('<font color=red>分数超出范围</font>');
			return null;
    	}else{
    		var operations = context.operations;
	    	if(!operations) {
	    		return;
	    	}
			this.prepareOperations(operations,nmValue);
    	}
	},
    
    prepareOperations: function(operations,nmValue) {
		var url = this.url + '/' + nmValue;
    	var operation = {
            url: url ,
    		mclass: null,
    		method: 'get',
    		condition: null,
    		scope: this,
    		success: this.onSuccess
    	};
    	operations.length = 0;
    	operations.push(operation);
    },

    onSuccess: function(operation) {
    	var owner = this.getOwner();
    	var fstNm = owner.fstNm;
        var block = this.getBlock('content');
        var showInfo = block.down('xapdisplayfield[name=showInfo]');
        var nm = block.down('xaptextfield[name=nm]');
        var nmValue = nm.value;
        var m = operation.result;
		if(m == '1'){
			if(fstNm != nmValue){
				XapMessageBox.info("一级分类名已存在");
				showInfo.setValue('');
			}else{
				var saveQaItmFstChain = owner.getActionChain('saveQaItmFst');
				saveQaItmFstChain.execute();
			}
		}else{
			var saveQaItmFstChain = owner.getActionChain('saveQaItmFst');
			saveQaItmFstChain.execute();
		}
    }
});

/** 
 * 一级分类保存Action
 * @extends Xap.ej.action.ServiceInvocation
 * @author ：yao_lijie
 */

Ext.define('iih.mr.qa.qa_divide_level.action.QaItmFstSaveAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	                                      
	
	/*   
	* @Override
	*/
	execute: function(context) {   
    	var owner = this.getOwner();
		var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
		var eventNm = properties.data.eventNm;
		var block = this.getBlock('content');
		var form= block.getForm();
        var data = form.getValues();
        data.eventNm = eventNm;
        var operations = context.operations;
        if(!operations) {
     		return;
	    }
        if(eventNm == 'addClick'){
	     	this.addOperations(operations,data);
        }else{
        	data.fstCd = properties.data.fstCd;
        	this.prepareOperations(operations,data);
        }
     	
    },
    addOperations: function(operations,data){
        var url = this.url;
        var mclass = null;
        var METHODS = this.getInvocationMethods();
    	var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_CREATE,
            condition: null,	
            data:data,
    		scope: this,
    		success: this.onSuccess
    	};
    	operations.length = 0;
    	operations.push(operation);
    },
    prepareOperations: function(operations,data){
    	//修改一级分类
    	var fstCd =data.fstCd;
        var url = this.url+"/"+fstCd; 
        var mclass = null;
        var METHODS = this.getInvocationMethods();
    	var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_UPDATE,
            condition: null,	
            data:data,
    		scope: this,
    		success: this.onSuccess
    	};
    	operations.length = 0;
    	operations.push(operation);
    },
    onSuccess: function(operation) {
	    var owner = this.getOwner();
	    //关闭此画面
    	var closeQaItmFstChain = owner.getActionChain('closeQaItmFst');
    	closeQaItmFstChain.execute();
    	
    	//刷新一级分类的记录
        var view  =  owner.sourceView;
    	
    	var chain = view.getActionChain('init');
    	chain.execute();
    }
});
/** 
 * 一级分类设置（新增、编辑）视图
 * @author ：yao_lijie
 */

Ext.define('iih.mr.qa.qa_divide_level.view.QaItmFstSetView',{
	extend :  Xap.ej.template.BaseTemplate ,
	
	alias:'widget.qaitmfstsetview', 
	
	          
	                                      
	   		                                 
	   		                                           
	                                                   
	                                              
	                                             
	                                   
	                                                  
	                                                             
	                                                                     
	                                                                      
	                                                                  
	                                                                  
	            
	
	xapConfig:{         
		blocks: {
			'content':{
				xclass: 'iih.mr.qa.qa_divide_level.block.QaItmFstSetBlock',
				height:180
			}
		},
		actions:{
			'init':{
				xclass: 'iih.mr.qa.qa_divide_level.action.QaItmFstSetSearchAction',
				url:'qaitmfst/set',
				blocks: {
				    content: 'content'
				}
			},
			'vaidatorNm':{
				xclass: 'iih.mr.qa.qa_divide_level.action.QaItmFstVaidatorNmAction',
				url:'qaitmfst/vaidatorNm',
				blocks: {
				    content: 'content'
				}
			},
			'saveQaItmFst':{
				xclass: 'iih.mr.qa.qa_divide_level.action.QaItmFstSaveAction',
				url:'qaitmfst/save',
				blocks: {
				    content: 'content'
				}
			},
			'closeQaItmFst':{
				xclass: 'iih.mr.qa.process_qa_work.action.FaultInputCloseAction',
				blocks: {
				    content: 'content'
				}
			}
		},
		chains:{
			'init':['init'],
			'vaidatorNm':['vaidatorNm'],
			'saveQaItmFst':['saveQaItmFst'],
			'closeQaItmFst':['closeQaItmFst']
		},
		connections:{
			'content':[/*{
                event:'afterrender',
                chain:'init'
            },*/{
				selector: 'button[action=save]',
				event: 'click',
				chain: 'vaidatorNm'
			},{
				selector: 'button[action=cancel]',
				event: 'click',
				chain: 'closeQaItmFst'
			}/*,{
				selector: 'xaptextfield[name=nm]',
				event: 'blur',
				chain: 'vaidatorNm'
			}*/]
		}
	}
})
/** 
 * 弹出病案等级新增、编辑画面Action
 * @extends Xap.ej.action.PopAction
 * @author ：yao_lijie
 */

Ext.define('iih.mr.qa.qa_divide_level.action.PopupQaItmFstAction', {
	extend:  Xap.ej.action.PopAction ,
	
	                                                            
	
	execute: function(context){
		var owner = this.getOwner();
		var eventNm = context.eventNm;
		if(eventNm == undefined){
			eventNm = context.event.name;
		}
		var contentBlock = this.getBlock('content');
	    var grid = contentBlock.down('xapgrid');
	    var blockTitle;
	    var fstCd;
	    var fstNm;
		if(eventNm == 'addClick'){
			blockTitle = '新增一级分类';
		}else if(eventNm == 'editClick'){
			blockTitle = context.blockTitle;
			fstCd = context.fstCd;
			fstNm = context.fstNm;
		}
		
		var config = {
				title:blockTitle,
	    		width: 350,
	    		height:230,
	    		contentConfig: {
	    			xtype: 'qaitmfstsetview',
	    			sourceView:owner,  //传入上级视图
	    			initChain: {
	    				name: 'init',
	    				context: {
	    					fstCd: fstCd,
	    					fstNm:fstNm,
	    					eventNm: eventNm
	    				}
	    			}
	    		}
	    	};
		
		this.callParent([config]);
		
	}
})
/** 
 * 病案等级设置（新增、编辑）BLOCK
 * @extends Xap.ej.block.Block
 * @author ：yao_lijie
 */
var me;
Ext.define('iih.mr.qa.qa_divide_level.block.QaItmSndSetBlock',{
	extend :  Xap.ej.block.FormBlock ,
	
	requires: [],

    alias:'widget.qaitmsndsetblock',
    
    layout: {
		type: 'table',
		columns: 1,
		//width: 1024,
		tableAttrs: {
            border: 0,
            cellpadding: 0,
            cellspacing: 1,
            width: '100%'
//            height:76
        },
        tdAttrs: {
            valign: 'left'
        }
	},
    
    buttons:[{
            xtype: "button",
            name: 'save',
            action:'save',
            text: '确认',
            iconCls: 'icon-OK'
        },{
            xtype: "button",
            name: 'cancel',
            action:'cancel',
            text: '取消' ,
            iconCls: 'icon-cancel' 
    }],
    
    items:[{
        xtype:'xapcombobox',
        name:'fstCd',
        margin:'10 0 0 0',
        labelAlign : 'right',
        editable:false,
        allOptions: false,
        fieldLabel:'一级分类',
        queryMode: 'local',
        displayField: 'nm',
        valueField: 'fstCd'
    },{
        xtype:'xaptextfield',
        name:'nm',
		fieldLabel:'名称',
		allowBlank:false,
		margin:'10 0 10 0'
    },{
        xtype:'xapnumberfield',
        name:'score',
		fieldLabel:'评分',
		decimalPrecision: 1, //精确1位小数
		labelAlign : 'right',
		maxValue: 100,
		minValue: 1
    },{
		xtype: 'xapdisplayfield',
		fieldLabel: '',
		colspan:16,
		vertical: true,
		name:'showInfo',
		value: '',
		margin:'0 10 0 0'
	}]
})
Ext.define('iih.mr.qa.qa_divide_level.action.QaItmSndSetSearchAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override
	*/
	execute: function(context) {
		var data = context.data;
		var sndCd = data.sndCd;

		if(data.eventNm == 'addClick'){
			
    	}else{
    		var operations = context.operations;
	    	if(!operations) {
	    		return;
	    	}
			this.prepareOperations(operations,sndCd);
    	}
	},
    
    prepareOperations: function(operations,sndCd) {
		var url = this.url + '?sndCd=' + sndCd;
    	var operation = {
            url: url ,
    		mclass: null,
    		method: 'get',
    		condition: null,
    		scope: this,
    		success: this.onSuccess
    	};
    	operations.length = 0;
    	operations.push(operation);
    },

    onSuccess: function(operation) {
        var block = this.getBlock('content');
        var  qaItmFst = block.down('xapcombobox[name=fstCd]');
        var m = operation.result;
        qaItmFst.select(m.fstCd);
        // TODO 数据格式就这样了？
        if(m instanceof Ext.data.Model) {
            block.setData({
                mclass: operation.mclass,
                data: m.getData(true)
            });
        }
        else {
        	block.setData(m);
        	console.log(m);
        }
    }
});

Ext.define('iih.mr.qa.qa_divide_level.action.QaItmSndVaidatorNmAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override
	*/
	execute: function(context) {
		var owner = this.getOwner();
		var block = this.getBlock('content');
		var showInfo = block.down('xapdisplayfield[name=showInfo]');
		var form= block.getForm();
        var data = form.getValues();
        var nmValue = data.nm;
        var score = data.score;
        if(nmValue == ""){
    		showInfo.setValue('<font color=red>名称不能为空</font>');
			return null;
    	}else if(score == ""){
    		showInfo.setValue('<font color=red>分数不能为空</font>');
			return null;
    	}else if(score<1 || score >100){
    		showInfo.setValue('<font color=red>分数超出范围</font>');
			return null;
    	}else{
    		var operations = context.operations;
			if(!operations) {
				return;
			}
			this.prepareOperations(operations,data);
    	}
	},
    
    prepareOperations: function(operations,data) {
		var url = this.url + '?nm=' + data.nm + '&fstCd=' +data.fstCd +'&score='+data.score;
    	var operation = {
            url: url ,
    		mclass: null,
    		method: 'get',
    		condition: null,
    		scope: this,
    		success: this.onSuccess
    	};
    	operations.length = 0;
    	operations.push(operation);
    },

    onSuccess: function(operation) {
    	var owner = this.getOwner();
    	var sndNm = owner.sndNm;
        var block = this.getBlock('content');
        var nm = block.down('xaptextfield[name=nm]');
        var showInfo = block.down('xapdisplayfield[name=showInfo]');
        var nmValue = nm.value;
        var m = operation.result;
		if(m == '1'){
			if(sndNm == nmValue){
				var saveQaItmFstChain = owner.getActionChain('saveQaItmSnd');
				saveQaItmFstChain.execute();
			}else{
				XapMessageBox.info("二级分类名已存在");
				showInfo.setValue('');
			}
		}else if(m == '2'){
			XapMessageBox.info("当前分数大于一级分类分数");
			showInfo.setValue('');
		}else{
			var saveQaItmFstChain = owner.getActionChain('saveQaItmSnd');
			saveQaItmFstChain.execute();
		}
    }
});

/** 
 * 二级分类保存Action
 * @extends Xap.ej.action.ServiceInvocation
 * @author ：yao_lijie
 */

Ext.define('iih.mr.qa.qa_divide_level.action.QaItmSndSaveAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	                                      
	
	/*   
	* @Override
	*/
	execute: function(context) {   
    	var owner = this.getOwner();
		var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
		var eventNm = properties.data.eventNm;
		var block = this.getBlock('content');
		var form= block.getForm();
        var data = form.getValues();
        data.eventNm = eventNm;
        block.fstCd = data.fstCd;
        var operations = context.operations;
        if(!operations) {
     		return;
	    }
        if(eventNm == 'addClick'){
	     	this.addOperations(operations,data);
        }else{
        	data.sndCd = properties.data.sndCd;
        	this.prepareOperations(operations,data);
        }
     	
    },
    addOperations: function(operations,data){
        var url = this.url;
        var mclass = null;
        var METHODS = this.getInvocationMethods();
    	var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_CREATE,
            condition: null,	
            data:data,
    		scope: this,
    		success: this.onSuccess
    	};
    	operations.length = 0;
    	operations.push(operation);
    },
    prepareOperations: function(operations,data){
    	//修改二级分类
    	var sndCd =data.sndCd;
        var url = this.url+"/"+sndCd; 
        var mclass = null;
        var METHODS = this.getInvocationMethods();
    	var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_UPDATE,
            condition: null,	
            data:data,
    		scope: this,
    		success: this.onSuccess
    	};
    	operations.length = 0;
    	operations.push(operation);
    },
    onSuccess: function(operation) {
	    var owner = this.getOwner();
	    //关闭此画面
    	var closeQaItmFstChain = owner.getActionChain('closeQaItmSnd');
    	closeQaItmFstChain.execute();
    	var block = this.getBlock('content');
        var fstCd = block.fstCd ;
    	//刷新一级分类的记录
        var view  =  owner.sourceView;
     
    	var chain = view.getActionChain('treeSelect');
    	chain.execute({
    		fstCd:fstCd
    	});
    }
});
/** 
 * 一级分类设置（新增、编辑）视图
 * @author ：yao_lijie
 */

Ext.define('iih.mr.qa.qa_divide_level.view.QaItmSndSetView',{
	extend :  Xap.ej.template.BaseTemplate ,
	
	alias:'widget.qaitmsndsetview', 
	
	          
	                                      
	   		                                 
	   		                                           
	                                                   
	                                              
	                                             
	                                   
	                                                  
	                                                             
	                                                                     
	                                                                     
	                                                                      
	                                                                
	                                                                  
	            
	
	xapConfig:{         
		blocks: {
			'content':{
				xclass: 'iih.mr.qa.qa_divide_level.block.QaItmSndSetBlock',
				height:180
			}
		},
		actions:{
			'initQaItmFst':{ 
                xclass:'iih.mr.qa.qa_divide_level.action.QaItmFstCobSearchAction',
                url:'qaitmfst',
                blocks:{
                    content: 'content'
                }
            },
            'init':{ 
                xclass:'iih.mr.qa.qa_divide_level.action.QaItmSndSetSearchAction',
                url:'qaitmsnd/set',
                blocks:{
                    content: 'content'
                }
            },
			'vaidatorNm':{
				xclass: 'iih.mr.qa.qa_divide_level.action.QaItmSndVaidatorNmAction',
				url:'qaitmsnd/vaidatorNm',
				blocks: {
				    content: 'content'
				}
			},
			'saveQaItmSnd':{
				xclass: 'iih.mr.qa.qa_divide_level.action.QaItmSndSaveAction',
				url:'qaitmsnd/save',
				blocks: {
				    content: 'content'
				}
			},
			'closeQaItmSnd':{
				xclass: 'iih.mr.qa.process_qa_work.action.FaultInputCloseAction',
				blocks: {
				    content: 'content'
				}
			}
		},
		chains:{
			'initQaItmFst':['initQaItmFst'],
			'init':['init'],
			'vaidatorNm':['vaidatorNm'],
			'saveQaItmSnd':['saveQaItmSnd'],
			'closeQaItmSnd':['closeQaItmSnd']
		},
		connections:{
			'content':[/*{
                event:'afterrender',
                chain:'init'
            },*/{
				selector: 'button[action=save]',
				event: 'click',
				chain: 'vaidatorNm'
			},{
				selector: 'button[action=cancel]',
				event: 'click',
				chain: 'closeQaItmSnd'
			}/*,{
				selector: 'xaptextfield[name=nm]',
				event: 'blur',
				chain: 'vaidatorNm'
			}*/]
		}
	}
})
/** 
 * 弹出病案等级新增、编辑画面Action
 * @extends Xap.ej.action.PopAction
 * @author ：yao_lijie
 */

Ext.define('iih.mr.qa.qa_divide_level.action.PopupQaItmSndAction', {
	extend:  Xap.ej.action.PopAction ,
	
	                                                            
	
	execute: function(context){
		var owner = this.getOwner();
		var workBlock = owner.up();
    	var groupType = workBlock.groupType;
//		var typeFlag = owner.typeFlag;
		var eventNm = context.eventNm;
		if(eventNm == undefined){
			eventNm = context.event.name;
		}
		var contentBlock = this.getBlock('right');
	    var grid = contentBlock.down('xapgrid');
	    var blockTitle;
	    var fstCd;
	    var sndCd;
	    var sndNm;
		if(eventNm == 'addClick'){
			fstCd = owner.fstCd
			blockTitle = '新增二级分类';
		}else if(eventNm == 'editClick'){
			blockTitle = context.blockTitle;
			sndCd = context.sndCd;
			sndNm = context.sndNm;
		}
		
		var config = {
				title:blockTitle,
	    		width: 350,
	    		height:230,
	    		contentConfig: {
	    			xtype: 'qaitmsndsetview',
	    			sourceView:owner,  //传入上级视图
	    			initChain: {
	    				name: 'initQaItmFst',
	    				context: {
	    					sndCd: sndCd,
	    					sndNm:sndNm,
	    					fstCd:fstCd,//新增时赋默认值
	    					eventNm: eventNm,
	    					groupType:groupType
	    				}
	    			}
	    		}
	    	};
		
		this.callParent([config]);
		
	}
})
Ext.define('iih.mr.qa.qa_divide_level.action.QaAutoConfigInitAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override
	*/
	execute: function(context) {
		var owner = this.getOwner();
		var block = this.getBlock('content');
		var data = context.qaItmData;
		block.data = data;
		var qaItmCd = context.qaItmCd;
		var operations = context.operations;
    	if(!operations) {
    		return;
    	}
		this.prepareOperations(operations,qaItmCd);
	},
    
    prepareOperations: function(operations,qaItmCd) {
		var url = this.url + '?qaItmCd=' + qaItmCd;
    	var operation = {
            url: url ,
    		mclass: null,
    		method: 'get',
    		condition: null,
    		scope: this,
    		success: this.onSuccess
    	};
    	operations.length = 0;
    	operations.push(operation);
    },

    onSuccess: function(operation) {
    	var owner = this.getOwner();
        var block = this.getBlock('content');
        var qaItmTpCd = block.down('xapcombobox[name=qaItmTpCd]').value;
        var timeAuto = block.down('xapform[name=timeAuto]');
        var frequencyAuto = block.down('xapform[name=frequencyAuto]');
        var integrityAuto = block.down('xapform[name=integrityAuto]');
        var itmData = block.data;
        var m = operation.result;
        var mrTypes = m.mrTypes;
        var jobTitleCd = m.jobTitleCd;
        var eventTypeCode = m.eventTypeCode; //事件类型
        if(m.qaItmConfigCd == null){
        	m.req = itmData.req;
        	m.qaItmCd = itmData.qaItmCd;
        }
        var deadHours = m.deadHours;
        if(deadHours > 24){
        	deadHours = deadHours/24;
        	m.deadHours = deadHours;
        	m.unit ='day';
        }else{
        	m.unit ='time';
        }
        if(mrTypes != null){
        	var comValue = m.mrTypes.split(',')
        }
        if(jobTitleCd != null){
        	var jobTlCdComValue = m.jobTitleCd.split(',')
        }
        // TODO 数据格式就这样了？
        if(m instanceof Ext.data.Model) {
            block.setData({
                mclass: operation.mclass,
                data: m.getData(true)
            });
        }
        else {
        	if(qaItmTpCd == 'QAM06.02'){
        		timeAuto.setData(m);
        		var mrTypes = timeAuto.down('xapcombobox[name=mrTypes]');
        		mrTypes.setValue(comValue);
        	}else if(qaItmTpCd == 'QAM06.05'){
        		if(m.qaRlTpCd == '01'){
        			m.repNum = m.qaRlCd;
        		}else{
        			m.conNum = m.qaRlCd;
        		}
        		frequencyAuto.setData(m);
        		var mrTypes = frequencyAuto.down('xapcombobox[name=mrTypes]');
        		mrTypes.setValue(comValue);
        	}else if(qaItmTpCd == 'QAM06.04'){
        		integrityAuto.setData(m);
        		var mrTypes = integrityAuto.down('xapcombobox[name=mrTypes]');
        		mrTypes.setValue(comValue);
        		var jobTitleCd = integrityAuto.down('xapcombobox[name=jobTitleCd]');
        		if(jobTlCdComValue == undefined){
        			jobTitleCd.selectAt(0);
        		}else{
        			jobTitleCd.setValue(jobTlCdComValue);
        		}
        	}
        	console.log(m);
        }
    }
});

/** 
 * 质控规则保存Action
 * @extends Xap.ej.action.ServiceInvocation
 * @author ：yao_lijie
 */

Ext.define('iih.mr.qa.qa_divide_level.action.QaAutoConfigSaveAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	                                      
	
	/*   
	* @Override
	*/
	execute: function(context) {   
    	var owner = this.getOwner();
		var block = this.getBlock('content');
		var qaItmTpCd = block.down('xapcombobox[name=qaItmTpCd]').value; //质控项目类别
		var timeAuto = block.down('xapform[name=timeAuto]');
        var frequencyAuto = block.down('xapform[name=frequencyAuto]');
        var integrityAuto = block.down('xapform[name=integrityAuto]');
        var req;
        var showInfo;
        var data;
        if(qaItmTpCd == 'QAM06.02'){
        	req = timeAuto.down('xaptextfield[name=req]').value;
        	showInfo = timeAuto.down('xapdisplayfield[name=showInfo]');
        	data = timeAuto.getValues();
    	   if(data.deadHours == ""){
	    		showInfo.setValue('<font color=red>规则运算值未设置</font>');
				return null;
			}else if(data.unit == ""){
	    		showInfo.setValue('<font color=red>单位未设置</font>');
				return null;
			}else if(data.mrOpType == ""){
	    		showInfo.setValue('<font color=red>文书操作类型未设置</font>');
				return null;
			}else{
				var deadHours = data.deadHours;
		        if(data.unit == 'day'){
		        	deadHours = deadHours*24;
		        	data.deadHours = deadHours;
		        }
		    }
        }else if(qaItmTpCd == 'QAM06.05'){
        	req = frequencyAuto.down('xaptextfield[name=req]').value;
        	showInfo = frequencyAuto.down('xapdisplayfield[name=showInfo]');
        	data = frequencyAuto.getValues();
        	var qaRlTpCd = data.qaRlTpCd;
        	/*data.mrTypes = data.mrTypes1;
			data.eventTypeCode = data.eventTypeCodeF;
			var qaRlTpCd = data.qaRlTpCd;
			var number = data.number;
			if(qaRlTpCd == '01'){
				if(number == undefined){
					var repNum = data.repNum;
					data.qaRlCd = qaRlTpCd+':'+data.eventTypeCodeF+':'+data.repNum;
				}else if(number.length >= 1){
					data.qaRlCd = qaRlTpCd+':'+data.eventTypeCodeF[0]+':'+data.repNum;
					for(var i=0;i<number.length;i++){
						var rule = qaRlTpCd+':'+data.eventTypeCodeF[i+1]+':'+number[i];
						data.qaRlCd += ','+rule;
						if(number[i] == ''){
							showInfo.setValue('<font color=red>规则运算值天数未设置</font>');
							return null;
						}
					}
				}
			}else{
				data.qaRlCd = data.conNum;
			}*/
        	if(data.mrOpType == ""){
	    		showInfo.setValue('<font color=red>文书操作类型未设置</font>');
				return null;
			}
			if(qaRlTpCd == '01'){
				if(data.repNum == ""){
		    		showInfo.setValue('<font color=red>规则运算值天数未设置</font>');
					return null;
				}else{
					data.qaRlCd = data.repNum;
				}
			}else{
				if(data.conNum == ""){
		    		showInfo.setValue('<font color=red>规则运算值天数未设置</font>');
					return null;
				}else{
					data.qaRlCd = data.conNum;
				}
			}
			
        }else if(qaItmTpCd == 'QAM06.04'){
        	req = integrityAuto.down('xaptextfield[name=req]').value;
        	showInfo = integrityAuto.down('xapdisplayfield[name=showInfo]');
        	data = integrityAuto.getValues();
        	 /*if(data.jobTitleCd == ""){
	    		showInfo.setValue('<font color=red>医师职称未设置</font>');
				return null;
			}else if(data.dctOpTpCd == ""){
	    		showInfo.setValue('<font color=red>医师操作类型未设置</font>');
				return null;
			}*/
        }
         if(data.mrTypes == ""){
    		showInfo.setValue('<font color=red>文书类型未设置</font>');
			return null;
    	}else if(data.eventTypeCode == ""){
    		showInfo.setValue('<font color=red>事件类型未设置</font>');
			return null;
		}
        data.req = req;
        data.qaItmTpCd = qaItmTpCd;
		var operations = context.operations;
	        if(!operations) {
	     		return;
		    }
			this.addOperations(operations,data);
    },
    addOperations: function(operations,data){
        var url = this.url;
        var mclass = null;
        var METHODS = this.getInvocationMethods();
    	var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_CREATE,
            condition: null,	
            data:data,
    		scope: this,
    		success: this.onSuccess
    	};
    	operations.length = 0;
    	operations.push(operation);
    },
    onSuccess: function(operation) {
 		XapMessageBox.info("保存成功");
    	var owner = this.getOwner();
    	var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
    	var qaItmData = properties.data.qaItmData;
    	var sourceView = properties.data.sourceView;
    	var chain = sourceView.getActionChain('treeSelect');
    	chain.execute({
    		fstCd:qaItmData.fstCd,
    		sndCd:qaItmData.sndCd
    	});
    }
});
/** 
 * 删除单条等级的Action
 * @extends Xap.ej.action.ServiceInvocation
 * @author ：yao_lijie
 */

Ext.define('iih.mr.qa.qa_divide_level.action.QaDivideLevelDelAction', {
	extend:  Xap.ej.action.ServiceInvocation ,

	doExecute: function(context) {
    	var owner = this.getOwner();
    	var workBlock = owner.up();
    	var groupType = workBlock.groupType;
    	var me = this;
		var contentBlock = this.getBlock('content');
		/*var grid = contentBlock.down('xapgrid');
		var selModel = grid.getSelectionModel();
		var record = selModel.getSelection()[0];*/
    	var record = context.record;
		contentBlock.record = record;
    	if(record == undefined){
    		 if(groupType == '1'){
				XapMessageBox.info("请选择要删除的病案等级");
    		}else if(groupType == '2'){
        		XapMessageBox.info("请选择要删除的一级分类");
    		}else if(groupType == '3'){
    			XapMessageBox.info("请选择要删除的二级等级");
    		}else if(groupType == '4'){
    			XapMessageBox.info("请选择要删除的质控项目");
    		}
		}else{
			var operations = context.operations;
            	if(!operations) {
            		return;
        	}
        		me.prepareOperations(operations,record);
		}
    },
    prepareOperations: function(operations,record){
    	var owner = this.getOwner();
    	var workBlock = owner.up();
    	var groupType = workBlock.groupType;
//    	var typeFlag = owner.typeFlag;
    	var url = this.url
    	if(groupType == '1'){
			url += '/'+record.data.qaDivideLevelCd;   //删除病案等级
		}else if(groupType == '2'){
    		url += '/'+record.data.fstCd;		//删除一级分类
		}else if(groupType == '3'){
			url += '/'+record.data.sndCd;   //删除二级分类
		}else if(groupType == '4'){
			url += '/'+record.data.qaItmCd;   //删除质控项目
		}
//        var url = this.url+'/'+record.data.qaDivideLevelCd;
        var mclass = null;
        var METHODS = this.getInvocationMethods();
    	var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_DELETE,
            condition: null,	
           // data:data.data.pk,
    		scope: this,
    		success: this.onSuccess
    	};
    	operations.length = 0;
    	operations.push(operation);
    },
    onSuccess: function(operation) {
    	//调用查询Action
    	var owner = this.getOwner();
    	var workBlock = owner.up();
    	var groupType = workBlock.groupType;
//    	var typeFlag = owner.typeFlag;
    	var contentBlock = this.getBlock('content');
    	if(groupType == '3'){
    		var fstCd = contentBlock.record.data.fstCd;
    		var initChain = owner.getActionChain('treeSelect');
    		initChain.execute({
    			fstCd:fstCd
    		});
    	}else if(groupType == '4'){
    		var fstCd = contentBlock.record.data.fstCd;
    		var sndCd = contentBlock.record.data.sndCd;
    		var initChain = owner.getActionChain('treeSelect');
    		initChain.execute({
    			fstCd:fstCd,
    			sndCd:sndCd
    		});
    	}else{
    		var initChain = owner.getActionChain('init');
    		initChain.execute();
    	}
    }
})
/** 
 * 弹出病案等级新增、编辑画面Action
 * @extends Xap.ej.action.PopAction
 * @author ：yao_lijie
 */

Ext.define('iih.mr.qa.qa_divide_level.action.QaDivideLevelEditAction', {
	extend:  Xap.ej.action.Action ,
	
	requires:[],
	
	execute: function(context){
		var owner = this.getOwner();
		var workBlock = owner.up();
    	var groupType = workBlock.groupType;
		var eventNm = context.eventNm;
	    var record = context.record;
	    var blockTitle;
	    if(groupType == '2'){
	    	blockTitle = '一级分类编辑';
			if(record == undefined){
        		XapMessageBox.info("请选择要编辑的一级分类");
			}else{
				var fstCd = record.data.fstCd;
				var fstNm = record.data.nm;
				//弹出一级分类画面
				var chain = owner.getActionChain('popupQaItmFst');
				if(chain) {
			    	chain.execute({
			    		eventNm:eventNm,
			    		fstCd: fstCd,
			    		fstNm:fstNm, //方便编辑一级分类时校验
			    		blockTitle:blockTitle
			    	});
				}
			}
	    }else if(groupType == '1'){
	    	blockTitle = '病案等级设置编辑';
			if(record == undefined){
        		XapMessageBox.info("请选择要编辑的病案等级");
			}else{
				var qaDivideLevelCd = record.data.qaDivideLevelCd;
				//弹出病案等级画面
				var chain = owner.getActionChain('popupQaDivideLevel');
				if(chain) {
			    	chain.execute({
			    		eventNm:eventNm,
			    		qaDivideLevelCd: qaDivideLevelCd,
			    		blockTitle:blockTitle
			    	});
				}
			}
	    }
	}
})
Ext.define('iih.mr.qa.qa_divide_level.action.QaDivideLevelSearchAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override
	*/
	execute: function(context) {
		this.showLoading();
		var operations = context.operations;
	    	if(!operations) {
	    		return;
	    	}
		this.prepareOperations(operations);
	},
    
    prepareOperations: function(operations) {
		var url = this.url;
		
    	var operation = {
            url: url ,
    		mclass: null,
    		method: 'get',
    		condition: null,
    		scope: this,
    		success: this.onSuccess
    	};
    	operations.length = 0;
    	operations.push(operation);
    },

    onSuccess: function(operation) {
        var block = this.getBlock('content');
        var m = operation.result;
        // TODO 数据格式就这样了？
        if(m instanceof Ext.data.Model) {
            block.setData({
                mclass: operation.mclass,
                data: m.getData(true)
            });
        }
        else {
        	block.setData(m);
        	console.log(m);
        }
    }
});

/** 
 * 病案等级设置页面加载完成后查找到tools上的相关按钮进行事件的监听
 * @extends Xap.ej.action.Action
 * @author ：yao_lijie
 */

Ext.define('iih.mr.qa.qa_divide_level.action.QaDivideLevelViewreadyAction', {
	extend:  Xap.ej.action.Action ,
	
	requires:[],
	      
	execute: function(context){
		var me = this;
	    
	    //获取病案等级一览的 block
		var contentBlock = this.getBlock('content');	
		var grid = contentBlock.down('xapgrid');

		//新增按钮
		var addLevel = grid.down('button[method=addLevel]');
		addLevel.on('click',function(btn){
			context.event.name='addClick';
			var addLevelChain = me.getOwner().getActionChain("addLevel");
			addLevelChain.execute(context);
		});
		
		/*//编辑按钮
		var editLevel = grid.down('button[method=editLevel]');
		editLevel.on('click',function(btn){
			context.event.name='editClick';
			var editLevelChain = me.getOwner().getActionChain("editLevel");
			editLevelChain.execute(context);
		});*/
		
		/*//删除按钮
		var delLevel = grid.down('button[method=delLevel]');
		delLevel.on('click',function(btn){
			XapMessageBox.confirm2 (
			'确认删除？',
			function(btn){
				if(btn == 'yes'){
					context.event.name='click';
					var delLevelChain = me.getOwner().getActionChain("delLevel");
					delLevelChain.execute(context);
				}
			});
			
		});*/
	}
	
})
Ext.define('iih.mr.qa.qa_divide_level.action.QaItmFstTreeInitAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	    execute: function(context) {
	    	this.showLoading();
	        this.prepareOperations(context.operations);
	        
	    },
	    prepareOperations: function(operations) {
	         
	         var url = this.url;
	         var operation = {
	             url: url,
	             method: 'get',
	             scope: this,
	             success: this.onSuccess
	         };
	         operations.length = 0;
	         operations.push(operation);
	     },
	     onSuccess: function(operation) {
	         var block = this.getBlock('left'); 
	         // TODO 数据格式就这样了？
	         if(operation.result.data){
	         	 block.setData(operation.result.data.children);
	         	 var tree = block.down('xaptree'); 
//		         tree.getSelectionModel().select(0,false,false);//默认选中
	         }else{
	        	 block.setData(null);
	         }
	     }
});

Ext.define('iih.mr.qa.qa_divide_level.action.QaItmFstTreeSelectAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
    execute: function(context) {
    	var fstCd = context.fstCd;
    	if(fstCd == undefined){
    		if(context.event){
    			fstCd = context.event.arguments[1].raw.id;
    		};
    	}else{
    		var treeBlock = this.getBlock('left');
        	var tree = treeBlock.down('xaptree'); 
        	var node = tree.getStore().getNodeById(fstCd);
        	var index = node.data.index;
			tree.getSelectionModel().select(index,false,false);
    	}
    	var owner = this.getOwner();
    	owner.fstCd = fstCd;
        this.prepareOperations(context.operations,fstCd);
    },
    prepareOperations: function(operations,fstCd) {
         
         var url = this.url+'?qaItmFst='+fstCd;
         var operation = {
             url: url,
             method: 'get',
             scope: this,
             success: this.onSuccess
         };
         operations.length = 0;
         operations.push(operation);
     },
     onSuccess: function(operation) {
         var block = this.getBlock('right');
         // TODO 数据格式就这样了？
         if(operation.result.dataList){
     	 	 block.setData(operation.result.dataList);
         }else{
        	 block.setData(null);
         }
        /*var grid = block.down('xapgrid');
        var rs = grid.getSelectionModel().getSelection();
        //编辑按钮
		var editLevel = grid.down('button[method=editLevel]');
		//删除按钮
		var delLevel = grid.down('button[method=delLevel]');
		if(rs.length > 0){
			editLevel.setDisabled(false);
	    	delLevel.setDisabled(false);
		}else{
			editLevel.setDisabled(true);
	    	delLevel.setDisabled(true);
		}*/
     }
});

/** 
 * 弹出病案等级新增、编辑画面Action
 * @extends Xap.ej.action.PopAction
 * @author ：yao_lijie
 */

Ext.define('iih.mr.qa.qa_divide_level.action.QaItmSndEditAction', {
	extend:  Xap.ej.action.Action ,
	
	requires:[],
	
	execute: function(context){
		var owner = this.getOwner();
		var workBlock = owner.up();
    	var groupType = workBlock.groupType;
		var eventNm = context.eventNm;
		var record = context.record;
		/*var contentBlock = this.getBlock('right');
	    var grid = contentBlock.down('xapgrid');
		var selModel = grid.getSelectionModel();
	    var record = selModel.getSelection()[0];*/
	    var blockTitle;
	    if(groupType == '3'){
	    	blockTitle = '二级分类编辑';
			if(record == undefined){
        		XapMessageBox.info("请选择要编辑的二级分类");
			}else{
				var sndCd = record.data.sndCd;
				var sndNm = record.data.nm;
				//弹出二级分类画面
				var chain = owner.getActionChain('popupQaItmSnd');
				if(chain) {
			    	chain.execute({
			    		eventNm:eventNm,
			    		sndCd : sndCd,
			    		sndNm:sndNm, //方便编辑二级分类时校验名字
			    		blockTitle:blockTitle
			    	});
				}
			}
	    }else if(groupType == '4'){
	    	blockTitle = '质控项目编辑';
			if(record == undefined){
        		XapMessageBox.info("请选择要编辑的质控项目");
			}else{
				var qaItmCd = record.data.qaItmCd;
				//弹出质控项目编辑画面
				var chain = owner.getActionChain('popupQaItm');
				if(chain) {
			    	chain.execute({
			    		eventNm:eventNm,
			    		qaItmCd: qaItmCd,
			    		blockTitle:blockTitle
			    	});
				}
			}
	    }
	}
})
Ext.define('iih.mr.qa.qa_divide_level.action.QaItmSndTreeInitAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	    execute: function(context) {
	    	this.showLoading();
	        this.prepareOperations(context.operations);
	        
	    },
	    prepareOperations: function(operations) {
	         
	         var url = this.url;
	         var operation = {
	             url: url,
	             method: 'get',
	             scope: this,
	             success: this.onSuccess
	         };
	         operations.length = 0;
	         operations.push(operation);
	     },
	     onSuccess: function(operation) {
	         var block = this.getBlock('left'); 
	         // TODO 数据格式就这样了？
	         if(operation.result.data){
	         	 block.setData(operation.result.data.children);
	         	 var tree = block.down('xaptree'); 
		         //var node = tree.getRootNode().childNodes[0];
//		         tree.getSelectionModel().select(0,false,false);
		         //var selected=tree.getSelectionModel().getSelection();
	         }else{
	        	 block.setData(null);
	         }
	     }
});

Ext.define('iih.mr.qa.qa_divide_level.action.QaItmSndTreeSelectAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
    execute: function(context) {
    	var block = this.getBlock('left');
    	var tree = block.down('xaptree');
    	var sndCd = context.sndCd;
    	var fstCd = context.fstCd;
//    	var fstCd;
    	if(sndCd == undefined){
    	var arguments = context.event.arguments[1];
    	sndCd = "";
//    	if(arguments == undefined){
			var leaf = arguments.raw.leaf;
			if(leaf == true){
				fstCd = arguments.parentNode.raw.sndCd;
				sndCd = arguments.raw.sndCd;
				if(fstCd == undefined){//如果一级分类是叶子节点
					fstCd = sndCd;
					tree.fstNodeId = fstCd;
					tree.sndNodeId = '';
				}else{
					tree.sndNodeId = sndCd;
					tree.fstNodeId = '';
				}
			}else{
				fstCd = arguments.raw.sndCd;
				tree.fstNodeId = fstCd;
				tree.sndNodeId = '';
			}
    	}else{
    		var treeBlock = this.getBlock('left');
    		var tree = treeBlock.down('xaptree');
        	var root = tree.getRootNode().childNodes;
	        for(var i=0;i<root.length;i++){
	        	var node = root[i].childNodes;
	        	for(var j=0;j<node.length;j++){
		        	if(node[j].raw.sndCd == sndCd){
		        		tree.getSelectionModel().deselect(node[j]);
		        		tree.getSelectionModel().select(node[j]);
		        		node[j].parentNode.expand();
		        		break;
		        	}
		        }
	        }
    	}
    	var owner = this.getOwner();
    	owner.fstCd = fstCd;
    	owner.sndCd = sndCd;
        this.prepareOperations(context.operations,fstCd,sndCd);
    },
    prepareOperations: function(operations,fstCd,sndCd) {
         
         var url = this.url+'?qaItmFst='+fstCd +"&qaItmSnd="+sndCd;
         var operation = {
             url: url,
             method: 'get',
             scope: this,
             success: this.onSuccess
         };
         operations.length = 0;
         operations.push(operation);
     },
     onSuccess: function(operation) {
         var block = this.getBlock('right');
         // TODO 数据格式就这样了？
         if(operation.result.dataList){
     	 	 block.setData(operation.result.dataList);
         }else{
        	 block.setData(null);
         }
         
        /*var grid = block.down('xapgrid');
	    var rs = grid.getSelectionModel().getSelection();
	    //编辑按钮
		var editLevel = grid.down('button[method=editLevel]');
		//删除按钮
		var delLevel = grid.down('button[method=delLevel]');
		if(rs.length > 0){
			editLevel.setDisabled(false);
	    	delLevel.setDisabled(false);
		}else{
			editLevel.setDisabled(true);
	    	delLevel.setDisabled(true);
		}*/
     }
});

/** 
 * 点击记录，判断按钮状态
 * @author ：yao_lijie
 */
Ext.define('iih.mr.qa.qa_divide_level.action.QaItmTypeAction', {
	extend:  Xap.ej.action.Action ,
	
	execute: function(context) {
		var me = this;
		var contentBlock = this.getBlock('content');	
		//质控项目类别
		var qaItmTpCd = contentBlock.down('xapcombobox[name=qaItmTpCd]');
		qaItmTpCd.on('change',function(btn){
//			context.event.name='change';
			var qaItmTypeChain = me.getOwner().getActionChain("qaItmTypeChain");
			qaItmTypeChain.execute(context);
		});
		
		var owner = this.getOwner();
		var qaItmData = owner.qaItmData;
		var qaItmTpCd = qaItmData.qaItmTpCd;//质控项目类别
		var qaItmCd = owner.qaItmCd; 
		var sourceView = owner.sourceView;
        var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
        properties.setData({
            qaItmData : qaItmData,
            qaItmCd:qaItmCd,
            sourceView : sourceView
        });
		var block = this.getBlock('content');
		var timeAuto = block.down('xapform[name=timeAuto]');
		var frequencyAuto = block.down('xapform[name=frequencyAuto]');
		var integrityAuto = block.down('xapform[name=integrityAuto]');
		var qaItmTpCdBox = block.down('xapcombobox[name=qaItmTpCd]');
		var value = qaItmTpCdBox.value;
		if(qaItmTpCd !="" && value == null){
			qaItmTpCdBox.setValue(qaItmTpCd);
			value = qaItmTpCd;
		}else if(qaItmTpCd =="" && value == null){
			qaItmTpCdBox.setValue('QAM06.02');
			value = qaItmTpCd;
		}
		if(value == 'QAM06.02'){
			timeAuto.show();
			frequencyAuto.hide();
			integrityAuto.hide();
			var initChain = owner.getActionChain('searchMrType');
            initChain.execute({});
		}else if(value == 'QAM06.05'){
			frequencyAuto.show();
			timeAuto.hide();
			integrityAuto.hide();
			var initChain = owner.getActionChain('searchMrType');
            initChain.execute({});
		}else if(value == 'QAM06.04'){
			integrityAuto.show();
			timeAuto.hide();
			frequencyAuto.hide();
			var initChain = owner.getActionChain('searchMrType');
            initChain.execute({});
		}
	}
});

/** 
 * 质控设置页面初始化
 * @extends Xap.ej.action.Action
 * @author ：yao_lijie
 */

Ext.define('iih.mr.qa.qa_divide_level.action.QaItmWorkInitAction', {
	extend:  Xap.ej.action.Action ,
	
	requires:[],
	      
	execute: function(context){

	    var block = this.getBlock('content');
	    var tabpanel = block.down('xaptabpanel');
        var xappanel = tabpanel.getActiveTab();
        var groupType = xappanel.groupType;
	    if(groupType == '1'){
	    	var view = xappanel.down('qadividelevelview');
	    	var chain = view.getActionChain("init");
			chain.execute(context);
	    }else if(groupType == '2'){
	    	var view = xappanel.down('qaitmfstview');
	    	var chain = view.getActionChain("init");
			chain.execute(context);
	    }else if(groupType == '3'){
	    	var view = xappanel.down('qaitmsndview');
	    	var chain = view.getActionChain("initTree");
			chain.execute(context);
	    }else if(groupType == '4'){
	    	var view = xappanel.down('qaitmview');
	    	var chain = view.getActionChain("initTree");
			chain.execute(context);
	    }
	    
	}
	
})
/** 
 * 自动质控时限规则BLOCK
 * @extends Xap.ej.block.Block
 * @author ：yao_lijie
 */
var me;
Ext.define('iih.mr.qa.qa_divide_level.block.QaAutoConfigBlock',{
	extend :  Xap.ej.block.FormBlock ,
	
	requires: [],

    alias:'widget.qaautoconfigblock',
    
    border:0,
   
    items: [{
        xtype:'xapform',
        title:'自动质控项配置',
        tools:[{
        xtype:'xapcombobox',
        labelAlign : 'right',
        name:'qaItmTpCd',
		fieldLabel:'质控项目类别',
		editable:false,
		margin:'0 800 0 0',
		width:180,
//		value:'QAM06.02',
		comboData : [
			{"value":"QAM06.02", "text":"时限性"},
			{"value":"QAM06.05", "text":"频率性"},
			{"value":"QAM06.04", "text":"完整性"}
		]
			}
		],
        border:false, 
        items:[{
        	xtype:'xapform',
        	name:'timeAuto',
//        	hidden:true,
        	formType:'1',
        	layout: {
			type: 'table',
			columns: 2,
			//width: 1024,
			tableAttrs: {
	            border: 0,
	            cellpadding: 0,
	            cellspacing: 1,
	            width: '100%'
	//            height:76
	        },
	        tdAttrs: {
	            valign: 'left'
	        }
		},
	    
	    buttons:[{
	            xtype: "button",
	            name: 'saveTime',
	            action:'saveTime',
	            text: '保存',
	            iconCls: 'icon-OK'
	        }/*,{
	            xtype: "button",
	            name: 'cancel',
	            action:'cancel',
	            text: '取消' ,
	            iconCls: 'icon-cancel' 
	    }*/],
	    
	    items:[{
	        xtype:'xaptextfield',
	        name:'qaItmConfigCd',
			fieldLabel:'自动配置项编码',
			hidden:true
	    },{
	        xtype:'xaptextfield',
	        name:'qaItmCd',
			fieldLabel:'质控项目编码',
			hidden:true
	    },{
	    	xtype:'xaptextfield',
	        name:'req',
	        width:400,
	        labelAlign : 'right',
			fieldLabel:'规则名称',
			allowBlank:false,
			margin:'10 0 0 0',
			readOnly:true
	    },{
	        xtype:'xapcombobox',
	        name:'mrTypes',
	        margin:'10 0 0 0',
	        labelAlign : 'right',
	        colspan: 3,
	        editable:false,
	        multiSelect : true, //多选
	        fieldLabel:'文书类型',
	        queryMode: 'local',
	        displayField: 'name',
	        valueField: 'code',
	        id:"mrTypesTip"
	    },{
	    	xtype:'xaptextfield',
	        name:'memo',
	        width:400,
	        labelAlign : 'right',
			fieldLabel:'规则描述',
			allowBlank:false,
			margin:'10 0 0 0'
	    },{
	        xtype:'xapcombobox',
	        labelAlign : 'right',
	        name:'eventTypeCode',
			fieldLabel:'事件类型',
			editable:false,
			allowBlank:false,
			margin:'10 0 0 0',
			comboData : [
				{"value":"01", "text":"入院（入科）"},
				{"value":"02", "text":"出院（出科）"},
	//			{"value":"03", "text":"手术"},
				{"value":"04", "text":"转科"},
				{"value":"05", "text":"病情稳定"},
				{"value":"06", "text":"病情危急"},
				{"value":"07", "text":"病情危重"},
	//			{"value":"08", "text":"抢救"},
				{"value":"09", "text":"死亡"},
				{"value":"11", "text":"会诊申请医嘱"},
				{"value":"02,09", "text":"出院/死亡"},
				{"value":"03,10", "text":"手术"}
			]
	    },{
	        xtype:'xapnumberfield',
	        margin:'10 0 0 0',
	        name:'deadHours',
			fieldLabel:'规则运算值',
			labelAlign : 'right',
			maxValue: 100,
			minValue: 0
	    },{
	        xtype:'xapcombobox',
	        labelAlign : 'right',
	        name:'unit',
			fieldLabel:'单位',
			editable:false,
			allowBlank:false,
			margin:'10 0 0 0',
			comboData : [
				{"value":"time", "text":"小时"},
				{"value":"day", "text":"天"}
			]
	    },{
			xtype: 'xapradiogroup',
			fieldLabel:'是否启用',
			margin:'10 0 10 40',
			items: [
				{boxLabel: '是', name: 'useFlag',width:85, inputValue: '1'},
				{boxLabel: '否', name: 'useFlag', width:85,inputValue: '0',checked: true}
			]
		},{
	        xtype:'xapcombobox',
	        labelAlign : 'right',
	        name:'mrOpType',
			fieldLabel:'文书操作类型',
			editable:false,
			allowBlank:false,
			margin:'10 0 0 0',
			comboData : [
				{"value":"01", "text":"提交"},
				{"value":"02", "text":"主治医师审核"}
			]
	    },{
			xtype: 'xapdisplayfield',
			fieldLabel: '',
			colspan:16,
			vertical: true,
			name:'showInfo',
			value: '',
			margin:'10 50 10 80'
		}]
	        	
    },{
        	xtype:'xapform',
        	name:'frequencyAuto',
        	formType:'2',
        	hidden:true,
        	layout: {
			type: 'table',
			columns: 12,
			//width: 1024,
			tableAttrs: {
	            border: 0,
	            cellpadding: 0,
	            cellspacing: 1,
	            width: '100%'
	//            height:76
	        },
	        tdAttrs: {
	            valign: 'left'
	        }
		},
	    
	    buttons:[{
	            xtype: "button",
	            name: 'saveFrequency',
	            action:'saveFrequency',
	            text: '保存',
	            iconCls: 'icon-OK'
	        }],
	    
	    items:[{
	        xtype:'xaptextfield',
	        name:'qaItmConfigCd',
			fieldLabel:'自动配置项编码',
			hidden:true
	    },{
	        xtype:'xaptextfield',
	        name:'qaItmCd',
			fieldLabel:'质控项目编码',
			hidden:true
	    },{
	    	xtype:'xaptextfield',
	    	colspan: 6,
	        name:'req',
	        width:400,
	        labelAlign : 'right',
			fieldLabel:'规则名称',
			allowBlank:false,
			margin:'10 0 0 0',
			readOnly:true
	    },{
	        xtype:'xapcombobox',
	        colspan: 6,
	        name:'mrTypes',
	        margin:'10 0 0 0',
	        labelAlign : 'right',
	        editable:false,
	        multiSelect : true, //多选
	        fieldLabel:'文书类型',
	        queryMode: 'local',
	        displayField: 'name',
	        valueField: 'code',
	        id:"mrTypesTip1"
	    },{
	    	xtype:'xaptextfield',
	    	colspan: 6,
	        name:'memo',
	        width:400,
	        labelAlign : 'right',
			fieldLabel:'规则描述',
			allowBlank:false,
			margin:'10 0 0 0'
	    },{
	        xtype:'xapcombobox',
	        colspan: 6,
	        labelAlign : 'right',
	        name:'eventTypeCode',
			fieldLabel:'事件类型',
//			multiSelect : true, //多选
			editable:false,
			allowBlank:false,
			margin:'10 0 0 0',
			comboData : [
				{"value":"01", "text":"入院（入科）"},
				{"value":"02", "text":"出院（出科）"},
	//			{"value":"03", "text":"手术"},
				{"value":"04", "text":"转科"},
				{"value":"05", "text":"病情稳定"},
				{"value":"06", "text":"病情危急"},
				{"value":"07", "text":"病情危重"},
	//			{"value":"08", "text":"抢救"},
				{"value":"09", "text":"死亡"},
				{"value":"11", "text":"会诊申请医嘱"},
				{"value":"02,09", "text":"出院/死亡"},
				{"value":"03,10", "text":"手术"}
			]
	    },{
	        xtype:'xapdisplayfield',
	        vertical: true,
	        margin:'10 0 0 0',
			fieldLabel:'规则运算值',
			width:70,
			labelAlign : 'right'
	    },{
			xtype: 'xapdisplayfield',
			margin:'10 0 0 0',
			fieldLabel: '',
			vertical: true,
			value:'频率'
		},{
	        xtype:'xapradio',
	        margin:'10 0 0 0',
	        vertical: true,
	        checked : true,
	        name:'qaRlTpCd',
	        inputValue: '01',
			labelAlign : 'left'
	    },{
	        xtype:'xapnumberfield',
	        name:'repNum',
	         margin:'10 0 0 0',
	         width:100,
	        vertical: true,
			maxValue: 100,
			minValue: 0,
			labelAlign : 'left'
	    },{
	        xtype:'xapdisplayfield',
	        margin:'10 0 0 0',
//	        width:250,
	        vertical: true,
			fieldLabel:'',
			labelAlign : 'left',
			value:'天/次'
	    },{
	        xtype:'xapdisplayfield',
	        margin:'10 200 0 0',
	        vertical: true
	    },{
	        xtype:'xapdisplayfield',
	        colspan:6,
	        vertical: true
	    },{
	        xtype:'xapdisplayfield',
	        width:110,
	        vertical: true
	    },{
			xtype: 'xapdisplayfield',
			margin:'10 0 0 0',
			fieldLabel: '',
			vertical: true,
			value:'连续'
		},{
	        xtype:'xapradio',
	        margin:'10 0 0 0',
	        vertical: true,
	        name:'qaRlTpCd',
	        inputValue: '02',
			labelAlign : 'right'
	    },{
	        xtype:'xapnumberfield',
	        margin:'10 0 0 0',
	        width:100,
	        name:'conNum',
	        vertical: true,
			fieldLabel:'',
			labelAlign : 'left'
	    },{
	        xtype:'xapdisplayfield',
	        vertical: true,
			fieldLabel:'',
			margin:'10 0 0 0',
			labelAlign : 'left',
			value:'天'
	    },{
	        xtype:'xapdisplayfield',
	        margin:'10 200 0 0',
	        vertical: true
	    },{
	        xtype:'xapdisplayfield',
	        colspan:6,
	        vertical: true
	    },{
			xtype: 'xapradiogroup',
			colspan:6,
			fieldLabel:'是否启用',
			margin:'10 0 10 40',
			items: [
				{boxLabel: '是', name: 'useFlag',width:85, inputValue: '1'},
				{boxLabel: '否', name: 'useFlag', width:85,inputValue: '0',checked: true}
			]
		},{
	        xtype:'xapcombobox',
	        colspan:6,
	        labelAlign : 'right',
	        name:'mrOpType',
			fieldLabel:'文书操作类型',
			editable:false,
			allowBlank:false,
			margin:'10 0 0 0',
			comboData : [
				{"value":"01", "text":"提交"},
				{"value":"02", "text":"主治医师审核"}
			]
	    },{
			xtype: 'xapdisplayfield',
			fieldLabel: '',
			colspan:16,
			vertical: true,
			name:'showInfo',
			value: '',
			margin:'10 50 10 80'
		}]
    },{
        	xtype:'xapform',
        	name:'integrityAuto',
        	hidden:true,
        	formType:'3',
        	layout: {
			type: 'table',
			columns: 2,
			//width: 1024,
			tableAttrs: {
	            border: 0,
	            cellpadding: 0,
	            cellspacing: 1,
	            width: '100%'
	//            height:76
	        },
	        tdAttrs: {
	            valign: 'left'
	        }
		},
	    
	    buttons:[{
	            xtype: "button",
	            name: 'saveIntegrity',
	            action:'saveIntegrity',
	            text: '保存',
	            iconCls: 'icon-OK'
	        }],
	    
	    items:[{
	        xtype:'xaptextfield',
	        name:'qaItmConfigCd',
			fieldLabel:'自动配置项编码',
			hidden:true
	    },{
	        xtype:'xaptextfield',
	        name:'qaItmCd',
			fieldLabel:'质控项目编码',
			hidden:true
	    },{
	    	xtype:'xaptextfield',
	        name:'req',
	        width:400,
	        labelAlign : 'right',
			fieldLabel:'规则名称',
			allowBlank:false,
			margin:'10 0 0 0',
			readOnly:true
	    },{
	        xtype:'xapcombobox',
	        name:'mrTypes',
	        margin:'10 0 0 0',
	        labelAlign : 'right',
	        editable:false,
	        multiSelect : true, //多选
	        fieldLabel:'文书类型',
	        queryMode: 'local',
	        displayField: 'name',
	        valueField: 'code',
	        id:"mrTypesTip2"
	    },{
	    	xtype:'xaptextfield',
	        name:'memo',
	        width:400,
	        labelAlign : 'right',
			fieldLabel:'规则描述',
			allowBlank:false,
			margin:'10 0 0 0'
	    },{
	        xtype:'xapcombobox',
	        labelAlign : 'right',
	        name:'eventTypeCode',
			fieldLabel:'事件类型',
			editable:false,
			allowBlank:false,
			margin:'10 0 0 0',
			comboData : [
				{"value":"01", "text":"入院（入科）"},
				{"value":"02", "text":"出院（出科）"},
	//			{"value":"03", "text":"手术"},
				{"value":"04", "text":"转科"},
				{"value":"05", "text":"病情稳定"},
				{"value":"06", "text":"病情危急"},
				{"value":"07", "text":"病情危重"},
	//			{"value":"08", "text":"抢救"},
				{"value":"09", "text":"死亡"},
				{"value":"11", "text":"会诊申请医嘱"},
				{"value":"02,09", "text":"出院/死亡"},
				{"value":"03,10", "text":"手术"}
			]
	    },{
	        xtype:'xapcombobox',
	        name:'jobTitleCd',
	        margin:'10 0 0 0',
	        labelAlign : 'right',
	        editable:false,
	        multiSelect : true, //多选
	        fieldLabel:'医师职称',
	        value : "",
	        comboData : [
	        	{"value":"", "text":"无"},
				{"value":"MRM20.01", "text":"住院医师"},
				{"value":"MRM20.02", "text":"主治医师"},
				{"value":"MRM20.03", "text":"副主任医师"},
				{"value":"MRM20.04", "text":"主任医师"}
			]
//	        dictionary:'MRM20'
	    },{
	        xtype:'xapcombobox',
	        labelAlign : 'right',
	        name:'dctOpTpCd',
			fieldLabel:'医师操作类型',
			editable:false,
			allowBlank:false,
			margin:'10 0 0 0',
			value:'',
			comboData : [
				{"value":"", "text":"无"},
				{"value":"01", "text":"提交"},
				{"value":"02", "text":"查房"}
			]
	    },{
			xtype: 'xapradiogroup',
			fieldLabel:'是否启用',
			margin:'10 0 10 40',
			items: [
				{boxLabel: '是', name: 'useFlag',width:85, inputValue: '1'},
				{boxLabel: '否', name: 'useFlag', width:85,inputValue: '0',checked: true}
			]
		},{
			xtype: 'xapdisplayfield',
			fieldLabel: '',
			vertical: true,
			name:'showInfo',
			value: '',
			margin:'10 50 10 80'
		}]
	        	
    
    }]
}],
initComponent: function() {
    this.callParent(arguments);
	//当指定控件有显示不全时，自动出现tip提示
	this.addListener('afterrender',this.tip);
},
tip : function(){
	Ext.create('Ext.tip.ToolTip', {
        target: 'mrTypesTip',
        anchor: 'buttom',
//        minWidth :0,
//        maxWidth:500,
//        width: 160,
        anchorOffset: 30,
        trackMouse: true,
    	listeners: {
			beforeshow: function updateTipBody(tip) {
				var textTip = Ext.getCmp('mrTypesTip');
				var value = textTip.rawValue;
				tip.update(value);				
			}
		}
      
    });
    Ext.create('Ext.tip.ToolTip', {
        target: 'mrTypesTip1',
        anchor: 'buttom',
//        minWidth :0,
//        maxWidth:500,
//        width: 160,
        anchorOffset: 30,
        trackMouse: true,
    	listeners: {
			beforeshow: function updateTipBody(tip) {
				var textTip = Ext.getCmp('mrTypesTip1');
				var value = textTip.rawValue;
				tip.update(value);				
			}
		}
      
    });
    Ext.create('Ext.tip.ToolTip', {
        target: 'mrTypesTip2',
        anchor: 'buttom',
//        minWidth :0,
//        maxWidth:500,
//        width: 160,
        anchorOffset: 30,
        trackMouse: true,
    	listeners: {
			beforeshow: function updateTipBody(tip) {
				var textTip = Ext.getCmp('mrTypesTip2');
				var value = textTip.rawValue;
				tip.update(value);				
			}
		}
      
    });
}
})
/** 
 * 自动质控时限规则视图
 * @author ：yao_lijie
 */

Ext.define('iih.mr.qa.qa_divide_level.view.QaAutoConfigView',{
	extend :  Xap.ej.template.BaseTemplate ,
	
	alias:'widget.qaautoconfigview', 
	
	          
	                                      
	   		                                 
	   		                                           
	                                                   
	                                              
	                                             
	                                   
	                                                  
	                                       
	                                     
	                                                              
	                                                                    
	                                                                
	                                                                    
	                                                            
	            
	
	xapConfig:{         
		blocks: {
			'content':{
				xclass: 'iih.mr.qa.qa_divide_level.block.QaAutoConfigBlock'
			}
		},
		actions:{
            'init':{ 
                xclass:'iih.mr.qa.qa_divide_level.action.QaAutoConfigInitAction',
                url:'qaitm/autoconfig',
                blocks:{
                    content: 'content'
                }
            },
			'searchMrType':{
				xclass: 'iih.mr.qa.qa_divide_level.action.MrTypeSearchAction',
				url:'mrtypes',
				blocks: {
				    content: 'content'
				}
			},
			'saveQaRule':{
				xclass: 'iih.mr.qa.qa_divide_level.action.QaAutoConfigSaveAction',
				url:'qaautoitm/save',
				blocks: {
				    content: 'content'
				}
			},
			'qaItmTypeChain':{
				xclass: 'iih.mr.qa.qa_divide_level.action.QaItmTypeAction',
				blocks: {
				    content: 'content'
				}
			},
			/*'createRule':{
				xclass: 'iih.mr.qa.qa_divide_level.action.CreateRuleAction',
				blocks: {
				    content: 'content'
				}
			},*/
			'judgeDocOpType':{
				xclass: 'iih.mr.qa.qa_divide_level.action.JudgeDocOpTypeAction',
				blocks: {
				    content: 'content'
				}
			}
		},
		chains:{
			'init':['init'],
			'searchMrType':['searchMrType'],
			'saveQaRule':['saveQaRule'],
			'qaItmTypeChain':['qaItmTypeChain'],
//			'createRule':['createRule'],
			'judgeDocOpType':['judgeDocOpType']
		},
		connections:{
			'content':[{
                event:'afterrender',
                chain:'qaItmTypeChain'
            },/*{
                selector: 'xapcombobox[name=eventTypeCodeF]',
                event: 'change',
                chain: 'createRule'
			},*/{
                selector: 'xapcombobox[name=jobTitleCd]',
                event: 'change',
                chain: 'judgeDocOpType'
			},{
				selector: 'button[action=saveTime]',
				event: 'click',
				chain: 'saveQaRule'
			},{
				selector: 'button[action=saveFrequency]',
				event: 'click',
				chain: 'saveQaRule'
			},{
				selector: 'button[action=saveIntegrity]',
				event: 'click',
				chain: 'saveQaRule'
			}]
		}
	}
})
/** 
 * 通知书缺陷列表
 * @author ：yao_lijie
 */
Ext.define('iih.mr.qa.qa_divide_level.action.ToQaAutoConfig', {
extend:  Xap.ej.action.Action ,
	
	                                                              
	
	execute: function(context) {
		var me = this;
		var owner = this.getOwner();   
		var contentBlock = this.getBlock('content');
	    var itmGrid = contentBlock.down('xapgrid');
	    var selModel = itmGrid.getSelectionModel();
	    var record = selModel.getSelection()[0];
	    var qaItmData = record.data;
	    var autoQaF = qaItmData.autoQaF;
	    if(autoQaF == 0){
	    	return;
	    }
	    var qaItmCd = qaItmData.qaItmCd;
	    var pageTitle = '自动质控项配置';
	    var	pageCode = "qaAutoConfigView";
	    var viewConfig = {
	    	qaItmData:qaItmData,
	    	qaItmCd:qaItmCd,
	    	sourceView:owner
	    }
        if(event) {
            var config = {
            	pageCode: pageCode,
            	pageTitle: pageTitle,
                viewConfig:  viewConfig
            };
            var canvas = Xap.getCanvas();
            canvas.fireEvent("addWorkPage",config);
        };
    }
});
Ext.define('iih.mr.qa.qa_divide_level.block.QaDivideLevelBlock',{
    extend :  Xap.ej.block.Block ,

    requires: [],

    alias:'widget.qadividelevelblock',

    layout: 'fit',
    border:0,

    items: [{
        title: '病案等级',
        xtype: 'xapgrid',
        ifSelect : true,
        selectBy: 'qaDivideLevelCd',

        /*tools:[{
           xtype:'button',
           text:'新增',
           method: 'addLevel',
           margin:'0 0 0 10',
           hidden:true
       	},{
           xtype:'button',
           text:'编辑',
           method: 'editLevel',
           margin:'0 0 0 10',
           disabled : true
       	},{
           xtype:'button',
           text:'删除',
           method: 'delLevel',
           margin:'0 0 0 10',
           hidden:true
       	}],*/
//        height:550,
        CM_JR_Record: [
        	{xtype:'xapactioncolumn',text:'操作',width : 60,
				items: [
					{text:'编辑',
						handler: function(view,rowIndex,colIndex,e,item ,record) {
							var owner = this.up('qadividelevelview');
							var editLevelChain = owner.getActionChain("editLevel");
							editLevelChain.execute({
								record:record,
								eventNm:'editClick'
							});
						}	
					}
				]
			},
        	 {header: '等级编码',dataIndex: 'qaDivideLevelCd',field: 'textfield' ,type: 'string',hidden:true},
             {header: '等级',dataIndex: 'lvl',field: 'textfield' ,type: 'string',flex:1},
             {header: '最低分',dataIndex: 'minScr',field: 'textfield' ,type: 'string',width:400},
             {header: '最高分',dataIndex: 'maxScr',field: 'textfield' ,type: 'string',flex:1}
        ]
    }],
    
    setData : function(data) {
        var grid = this.down('xapgrid');
        if(grid){
        	if(data){
        		grid.setData(data);
	        }else{
	        	grid.setData({});
	        }
        }
    }
});


Ext.define('iih.mr.qa.qa_divide_level.block.QaItmBlock',{
    extend :  Xap.ej.block.Block ,

    requires: [],

    alias:'widget.qaitmblock',

    layout: 'fit',
    
    border:0,

    items: [{
        title: '',
        xtype: 'xapgrid',
        ifSelect : true,
        selectBy: 'qaItmCd',

        tools:[{
           xtype:'button',
           text:'新增',
           method: 'addLevel',
           margin:'0 0 0 10'
       	}/*,{
           xtype:'button',
           text:'编辑',
           method: 'editLevel',
           margin:'0 0 0 10',
           disabled : true
       	},{
           xtype:'button',
           text:'删除',
           method: 'delLevel',
           margin:'0 0 0 10',
           disabled : true
       	}*/],
//        height:550,
        CM_JR_Record: [
        	{xtype:'xapactioncolumn',text:'操作',width : 100,
				items: [
					{text:'编辑',
						handler: function(view,rowIndex,colIndex,e,item ,record) {
							var owner = this.up('qaitmview');
							var editLevelChain = owner.getActionChain("editLevel");
							editLevelChain.execute({
								record:record,
								eventNm:'editClick'
							});
						}	
					},{text:'删除',
						handler: function(view,rowIndex,colIndex,e,item ,record) {
							var owner = this.up('qaitmview');
							XapMessageBox.confirm2 (
							'确认删除？',
							function(btn){
								if(btn == 'yes'){
									var delLevelChain = owner.getActionChain("delLevel");
									delLevelChain.execute({
										record:record
									});
								}
							});
						}	
					}
				]
			},
         	 {header: '一级分类编码',dataIndex: 'fstCd',field: 'textfield' ,type: 'string',hidden:true},
        	 {header: '二级分类编码',dataIndex: 'sndCd',field: 'textfield' ,type: 'string',hidden:true},
        	 {header: '质控项目编码',dataIndex: 'qaItmCd',field: 'textfield' ,type: 'string',hidden:true},
             {header: '项目名称',dataIndex: 'req',field: 'textfield' ,type: 'string',flex:1},
             {header: '质控扣分类型编码',dataIndex: 'qaDrpScrTpCd',field: 'textfield' ,type: 'string',width:100,hidden:true},
             {header: '质控扣分类型',dataIndex: 'qaDrpScrTpNm',field: 'textfield' ,type: 'string',width:100},
             {header: '单次扣分值',dataIndex: 'onceDrpScr',field: 'numberfield' ,type: 'string',width:80},
             {header: '累计扣分最大值',dataIndex: 'maxDrpScr',field: 'numberfield' ,type: 'string',width:100},
             {header: '扣分描述',dataIndex: 'deductDes',field: 'textfield' ,type: 'string',width:80},
             {header: '自动质控标识',dataIndex: 'autoQaF',name:'autoQaF',field: 'textfield' ,type: 'string',width:90,
             	renderer:function(value,metaData,record){
			        if(value ==  "1"){
			        	return "<div style='text-align:center'><label style='align:center'>√</label></div>";
			        }else{
			        	return null;
			        }
				}
			},
			{header: '启用标识',dataIndex: 'useFlag',field: 'textfield' ,type: 'string',width:80},
			/** 质控项目类别,主数据QAM06：时限性、频率性、完整性 */
			{header: '质控项目类别',dataIndex: 'qaItmTpCd',field: 'textfield' ,type: 'string',hidden:true}
        ]
    }],
    
    setData : function(data) {
        var grid = this.down('xapgrid');
        if(data){
        	for(var i=0;i<data.length;i++){
	        	if(data[i].autoQaF == '1'){
	        		var useFlag = data[i].useFlag;
	        		if(useFlag == '1'){
	        			data[i].useFlag = '启用';
	        		}else if(useFlag == null || useFlag == '0'){
	        			data[i].useFlag = '停用';
	        		}
	        	}
        	}
        	grid.setData(data);
        }else{
        	grid.setData({});
        }
    }
});


Ext.define('iih.mr.qa.qa_divide_level.block.QaItmFstBlock',{
    extend :  Xap.ej.block.Block ,

    requires: [],

    alias:'widget.qaitmfstblock',

    layout: 'fit',
    
    border:0,

    items: [{
        title: '一级分类',
        xtype: 'xapgrid',
        ifSelect : true,
        selectBy: 'fstCd',

        tools:[{
           xtype:'button',
           text:'新增',
           method: 'addLevel',
           margin:'0 0 0 10'
       	}/*,{
           xtype:'button',
           text:'编辑',
           method: 'editLevel',
           margin:'0 0 0 10',
           disabled : true
       	},{
           xtype:'button',
           text:'删除',
           method: 'delLevel',
           margin:'0 0 0 10',
           disabled : true
       	}*/],
//         height:550,    
        CM_JR_Record: [
        	{xtype:'xapactioncolumn',text:'操作',width : 100,
				items: [
					{text:'编辑',width:50,
						handler: function(view,rowIndex,colIndex,e,item ,record) {
							var owner = this.up('qaitmfstview');
							var editLevelChain = owner.getActionChain("editLevel");
							editLevelChain.execute({
								record:record,
								eventNm:'editClick'
							});
						}	
					},{text:'删除',width:50,
						handler: function(view,rowIndex,colIndex,e,item ,record) {
							var owner = this.up('qaitmfstview');
							XapMessageBox.confirm2 (
							'确认删除？',
							function(btn){
								if(btn == 'yes'){
									var delLevelChain = owner.getActionChain("delLevel");
									delLevelChain.execute({
										record:record
									});
								}
							});
						}	
					}
				]
			},
        	 {header: '一级分类编码',dataIndex: 'fstCd',field: 'textfield' ,type: 'string',hidden:true},
             {header: '名称',dataIndex: 'nm',field: 'textfield' ,type: 'string',flex:1},
             {header: '评分',dataIndex: 'score',field: 'textfield' ,type: 'string',width:400},
             {header: '描述',dataIndex: 'memo',field: 'textfield' ,type: 'string',flex:1}
        ]
    }],
    
    setData : function(data) {
        var grid = this.down('xapgrid');
        if(data){
        	grid.setData(data);
        }else{
        	grid.setData({});
        }
    }
});


Ext.define('iih.mr.qa.qa_divide_level.block.QaItmFstTreeBlock',{
	extend :  Xap.ej.block.FormBlock ,

	requires: [],
	
	alias:'widget.qaitmfsttreeblock',
	
	border:0,
	
	items:[{
	        xtype:'xaptree',
	        layout: 'fit',
	        title: '一级分类',
	        name:'QaItmFstTree',
	        ifSelect:true,
	        selectBy: 'id',
	        rootVisible: false,
	        border:0
	}],

	setData: function(data) {
	    var tree = this.down('xaptree');
	    var myobj=eval(data);  
	    this.setDataTree(tree,myobj);
	},
		/**     
	 *  
     * 得到该tree 赋值节点
	 * @param {object} 赋值一个{} 多个[{},{}]
	 * @return Ext.data.NodeInterface
     * 
	 */
	setDataTree:function(tree,node){
		var tempNode;
		if(node){
			tree.getRootNode( ).removeAll();
			if(node instanceof Array){//是[]
				if(node.length > 0){
					tree.addNodeData(node);
				}
			}else{//是{}
				tree.addNodeData(node);
			}
			for(var i=0; i<node.length; i++){
				var singleNode = node[i];
				if(singleNode.id == tree.nodeId){
					tempNode = tree.nodeId;
					break;				
				}
				tempNode = null;
			}
			//如果赋值后选择上次已选节点
			if(tree.ifSelect){
				tree.selectById(tempNode);
			}
		}   	
    },
    getData: function() {
        return null;
    }    
})
Ext.define('iih.mr.qa.qa_divide_level.block.QaItmSndBlock',{
    extend :  Xap.ej.block.Block ,

    requires: [],

    alias:'widget.qaitmsndblock',

    layout: 'fit',
    
    border:0,

    items: [{
        title: '二级分类',
        xtype: 'xapgrid',
        ifSelect : true,
        selectBy: 'sndCd',

        tools:[{
           xtype:'button',
           text:'新增',
           method: 'addLevel',
           margin:'0 0 0 10'
       	}/*,{
           xtype:'button',
           text:'编辑',
           method: 'editLevel',
           margin:'0 0 0 10',
           disabled : true
       	},{
           xtype:'button',
           text:'删除',
           method: 'delLevel',
           margin:'0 0 0 10',
           disabled : true
       	}*/],
//        height:550,   
        CM_JR_Record: [
        	{xtype:'xapactioncolumn',text:'操作',width : 100,
				items: [
					{text:'编辑',
						handler: function(view,rowIndex,colIndex,e,item ,record) {
							var owner = this.up('qaitmsndview');
							var editLevelChain = owner.getActionChain("editLevel");
							editLevelChain.execute({
								record:record,
								eventNm:'editClick'
							});
						}	
					},{text:'删除',
						handler: function(view,rowIndex,colIndex,e,item ,record) {
							var owner = this.up('qaitmsndview');
							XapMessageBox.confirm2 (
							'确认删除？',
							function(btn){
								if(btn == 'yes'){
									var delLevelChain = owner.getActionChain("delLevel");
									delLevelChain.execute({
										record:record
									});
								}
							});
						}	
					}
				]
			},
         	 {header: '二级分类编码',dataIndex: 'fstCd',field: 'textfield' ,type: 'string',hidden:true},
        	 {header: '一级分类编码',dataIndex: 'sndCd',field: 'textfield' ,type: 'string',hidden:true},
             {header: '名称',dataIndex: 'nm',field: 'textfield' ,type: 'string',flex:1},
             {header: '评分',dataIndex: 'score',field: 'textfield' ,type: 'string',width:400}
        ]
    }],
    
    setData : function(data) {
        var grid = this.down('xapgrid');
        if(data){
        	grid.setData(data);
        }else{
        	grid.setData({});
        }
    }
});


Ext.define('iih.mr.qa.qa_divide_level.block.QaItmSndTreeBlock',{
	extend :  Xap.ej.block.FormBlock ,

	requires: [],
	
	alias:'widget.qaitmsndtreeblock',
	
	layout: 'fit',
	
	border:0,
	
	items:[{
	        xtype:'xaptree',
	        layout: 'fit',
	        title: '分类',
	        name:'QaItmSndTree',
	        autoScroll:true,
//	        id: 'sndCd',
	        ifSelect : true,
        	selectBy: 'sndCd',
	        rootVisible: false,
	        border:0
	}],

	setData: function(data) {
	    var tree = this.down('xaptree');
	    var myobj=eval(data);  
	    this.setDataTree(tree,myobj);
	},
	
	setDataTree:function(tree,node){
		var tempNode;
		if(node){
			tree.getRootNode( ).removeAll();
			if(node instanceof Array){//是[]
				if(node.length > 0){
					tree.addNodeData(node);
				}
			}else{//是{}
				tree.addNodeData(node);
			}
			/*for(var i=0; i<node.length; i++){
				var singleNode = node[i];
				if(singleNode.sndCd == tree.nodeId){
					tempNode = tree.nodeId;
					break;				
				}
				tempNode = null;
			}*/
			//如果赋值后选择上次已选节点
			if(tree.ifSelect){
				if(tree.fstNodeId){
					var root = tree.getRootNode().childNodes;
			        for(var i=0;i<root.length;i++){
			        	if(root[i].raw.sndCd == tree.fstNodeId){
				        	tree.getSelectionModel().select(root[i]);
				        	break;
				        }
			        }
				}else if(tree.sndNodeId){
					var root = tree.getRootNode().childNodes;
					var v = 0;
			        for(var i=0;i<root.length;i++){
			        	var node = root[i].childNodes;
			        	for(var j=0;j<node.length;j++){
				        	if(node[j].raw.sndCd == tree.sndNodeId){
				        		v++;
				        		tree.getSelectionModel().select(node[j]);
				        		node[j].parentNode.expand();
				        		break;
				        	}
				        }
			        }
			        if(v == 0){
			        	tree.getSelectionModel( ).select(0);
			        }
			        
				}else{
					tree.getSelectionModel( ).select(0);
				}
			}
		}   	
    },
    
    getData: function() {
        return null;
    }    
})
/** 
 * 病案等级设置视图
 * @author ：yao_lijie
 */

Ext.define('iih.mr.qa.qa_divide_level.view.QaDivideLevelView',{
	extend :  Xap.ej.template.BaseTemplate ,
	
	alias:'widget.qadividelevelview', 
	
	          
	                                      
	   		                                 
	   		                                           
	                                                   
	                                              
	                                             
	                                   
	                                                               
	                                                                       
	                                                                          
	                                                                      
	                                                            
	                                                                     
	                                                                   
	            
	
	layout: {
        type : 'fit'
    },
	          
	xapConfig:{         
		blocks: {
			'content':{
				xclass: 'iih.mr.qa.qa_divide_level.block.QaDivideLevelBlock',
				flex:1
			}
		},
		actions:{
			'init':{
				xclass: 'iih.mr.qa.qa_divide_level.action.QaDivideLevelSearchAction',
				url:'qadividelevel',
				blocks: {
				    content: 'content'
				}
			},
			'qaDivideLevelViewready':{
				xclass: 'iih.mr.qa.qa_divide_level.action.QaDivideLevelViewreadyAction',
				blocks: {
				    content: 'content'
				}
			},
			/*'addLevel':{
				xclass: 'iih.mr.qa.qa_divide_level.action.PopupQaDivideLevelAction',
				blocks: {
				    content: 'content'
				}
			},*/
			/*'judgeBtn':{
				xclass: 'iih.mr.qa.qa_divide_level.action.JudgeBtnAction',
				blocks: {
				    content: 'content'
				}
			},*/
			'editLevel':{
				xclass: 'iih.mr.qa.qa_divide_level.action.QaDivideLevelEditAction',
				blocks: {
				    content: 'content'
				}
			},
			'popupQaDivideLevel':{
				xclass: 'iih.mr.qa.qa_divide_level.action.PopupQaDivideLevelAction',
				blocks: {
				    content: 'content'
				}
			}/*,
			'delLevel':{
				xclass: 'iih.mr.qa.qa_divide_level.action.QaDivideLevelDelAction',
				url:'qadividelevel/del',
				blocks: {
				    content: 'content'
				}
			}*/
		},
		chains:{
			'init':['init'],
			'qaDivideLevelViewready':['qaDivideLevelViewready'],
//			'addLevel':['addLevel'],
//			'judgeBtn':['judgeBtn'],
			'editLevel':['editLevel'],
			'popupQaDivideLevel':['popupQaDivideLevel']/*,
			'delLevel':['delLevel']*/
		},
		connections:{/*
			'content':[{
				event: 'afterrender',
				chain: 'init'
			},{
				selector: 'xapgrid',
				event : 'viewready',
				chain: 'qaDivideLevelViewready'
			},{
				selector: 'xapgrid',
				event : 'itemclick',
				chain: 'judgeBtn'
			},{
				selector: 'xapgrid',
				event : 'itemdblclick',
				chain: 'editLevel'
			}]
		*/}
	}
})
/** 
 * 病案等级设置视图
 * @author ：yao_lijie
 */

Ext.define('iih.mr.qa.qa_divide_level.view.QaItmFstView',{
	extend :  Xap.ej.template.BaseTemplate ,
	
	alias:'widget.qaitmfstview', 
	
	          
	                                      
	   		                                 
	   		                                           
	                                                   
	                                              
	                                             
	                                   
	                                                          
	                                                                       
	                                                                          
	                                                                 
	                                                                     
	                                                                   
	            
	          
	layout: {
        type : 'fit'
    },
	
	xapConfig:{         
		blocks: {
			'content':{
				xclass: 'iih.mr.qa.qa_divide_level.block.QaItmFstBlock',
				flex:1
			}
		},
		actions:{
			'init':{
				xclass: 'iih.mr.qa.qa_divide_level.action.QaDivideLevelSearchAction',
				url:'qaitmfst',
				blocks: {
				    content: 'content'
				}
			},
			'qaDivideLevelViewready':{
				xclass: 'iih.mr.qa.qa_divide_level.action.QaDivideLevelViewreadyAction',
				blocks: {
				    content: 'content'
				}
			},
			'addLevel':{
				xclass: 'iih.mr.qa.qa_divide_level.action.PopupQaItmFstAction',
				blocks: {
				    content: 'content'
				}
			},
			/*'judgeBtn':{
				xclass: 'iih.mr.qa.qa_divide_level.action.JudgeBtnAction',
				blocks: {
				    content: 'content'
				}
			},*/
			'editLevel':{
				xclass: 'iih.mr.qa.qa_divide_level.action.QaDivideLevelEditAction',
				blocks: {
				    content: 'content'
				}
			},
			'popupQaItmFst':{
				xclass: 'iih.mr.qa.qa_divide_level.action.PopupQaItmFstAction',
				blocks: {
				    content: 'content'
				}
			},
			'delLevel':{
				xclass: 'iih.mr.qa.qa_divide_level.action.QaDivideLevelDelAction',
				url:'qaitmfst/del',
				blocks: {
				    content: 'content'
				}
			}
		},
		chains:{
			'init':['init'],
			'qaDivideLevelViewready':['qaDivideLevelViewready'],
			'addLevel':['addLevel'],
//			'judgeBtn':['judgeBtn'],
			'editLevel':['editLevel'],
			'popupQaItmFst':['popupQaItmFst'],
			'delLevel':['delLevel']
		},
		connections:{
			'content':[/*{
				event: 'afterrender',
				chain: 'init'
			},*/{
				selector: 'xapgrid',
				event : 'viewready',
				chain: 'qaDivideLevelViewready'
			}/*,{
				selector: 'xapgrid',
				event : 'itemclick',
				chain: 'judgeBtn'
			}*/]
		}
	}
})
/** 
 * 病案等级设置视图
 * @author ：yao_lijie
 */

Ext.define('iih.mr.qa.qa_divide_level.view.QaItmSndView',{
	extend:  Xap.ej.stl.view.LeftRightContainerTemplate ,
	
	alias:'widget.qaitmsndview', 
	
	          
	                                      
	                                     
	   		                                 
	   		                                           
	                                                   
	                                              
	                                             
	                                   
	                                                              
	                                                          
	                                                                    
	                                                                      
	                                                                          
	                                                                 
	                                                                
	                                                                   
	            
	
	xapConfig:{         
		blocks: {
			'left':{
				xclass: 'iih.mr.qa.qa_divide_level.block.QaItmFstTreeBlock',
				width:300
			},
			'right':{
				xclass: 'iih.mr.qa.qa_divide_level.block.QaItmSndBlock'
			}
		},
		actions:{
			'initTree':{
				xclass: 'iih.mr.qa.qa_divide_level.action.QaItmFstTreeInitAction',
				url:'qaitmsnd/tree',
				blocks: {
				    left: 'left',
				    right:'right'
				}
			},
			'treeSelect': {
				xclass: 'iih.mr.qa.qa_divide_level.action.QaItmFstTreeSelectAction',
				url: 'itmsnd',
				blocks: {
				   left: 'left',
				   right: 'right'
				}
            },
			'qaDivideLevelViewready':{
				xclass: 'iih.mr.qa.qa_divide_level.action.QaDivideLevelViewreadyAction',
				blocks: {
				    content: 'right'
				}
			},
			'addLevel':{
				xclass: 'iih.mr.qa.qa_divide_level.action.PopupQaItmSndAction',
				blocks: {
				   left: 'left',
				   right: 'right'
				}
			},
			/*'judgeBtn':{
				xclass: 'iih.mr.qa.qa_divide_level.action.JudgeBtnAction',
				blocks: {
				    content: 'right'
				}
			},*/
			'editLevel':{
				xclass: 'iih.mr.qa.qa_divide_level.action.QaItmSndEditAction',
				blocks: {
				   left: 'left',
				   right: 'right'
				}
			},
			'popupQaItmSnd':{
				xclass: 'iih.mr.qa.qa_divide_level.action.PopupQaItmSndAction',
				blocks: {
				   left: 'left',
				   right: 'right'
				}
			},
			'delLevel':{
				xclass: 'iih.mr.qa.qa_divide_level.action.QaDivideLevelDelAction',
				url:'qaitmsnd/del',
				blocks: {
				   left: 'left',
				   content: 'right'
				}
			}
		},
		chains:{
			'initTree':['initTree'],
			'treeSelect':['treeSelect'],
			'qaDivideLevelViewready':['qaDivideLevelViewready'],
			'addLevel':['addLevel'],
//			'judgeBtn':['judgeBtn'],
			'editLevel':['editLevel'],
			'popupQaItmSnd':['popupQaItmSnd'],
			'delLevel':['delLevel']
		},
		connections:{
			'left':[/*{
				event: 'afterrender',
				chain: 'initTree'
			},*/{
                selector: 'xaptree',
                event: 'select',
                chain: 'treeSelect'
            }],
			'right':[{
				selector: 'xapgrid',
				event : 'viewready',
				chain: 'qaDivideLevelViewready'
			}/*,{
				selector: 'xapgrid',
				event : 'itemclick',
				chain: 'judgeBtn'
			}*/]
		}
	}
})
/** 
 * 质控项目设置视图
 * @author ：yao_lijie
 */

Ext.define('iih.mr.qa.qa_divide_level.view.QaItmView',{
	extend:  Xap.ej.stl.view.LeftRightContainerTemplate ,
	
	alias:'widget.qaitmview', 
	
	          
	                                      
	                                     
	   		                                 
	   		                                           
	                                                   
	                                              
	                                             
	                                   
	                                                              
	                                                       
	                                                                    
	                                                                      
	                                                                          
	                                                              
	                                                                
	                                                                    
	                                                           
	            
	
	xapConfig:{         
		blocks: {
			'left':{
				xclass: 'iih.mr.qa.qa_divide_level.block.QaItmSndTreeBlock',
				width:300
			},
			'right':{
				xclass: 'iih.mr.qa.qa_divide_level.block.QaItmBlock'
			}
		},
		actions:{
			'initTree':{
				xclass: 'iih.mr.qa.qa_divide_level.action.QaItmSndTreeInitAction',
				url:'qaitm/tree',
				blocks: {
				    left: 'left',
				    right:'right'
				}
			},
			'treeSelect': {
				xclass: 'iih.mr.qa.qa_divide_level.action.QaItmSndTreeSelectAction',
				url: 'qacustom/item',
				blocks: {
				   left: 'left',
				   right: 'right'
				}
            },
			'qaDivideLevelViewready':{
				xclass: 'iih.mr.qa.qa_divide_level.action.QaDivideLevelViewreadyAction',
				blocks: {
				    content: 'right'
				}
			},
			'addLevel':{
				xclass: 'iih.mr.qa.qa_divide_level.action.PopupQaItmAction',
				blocks: {
				   left: 'left',
				   right: 'right'
				}
			},
			/*'judgeBtn':{
				xclass: 'iih.mr.qa.qa_divide_level.action.JudgeBtnAction',
				blocks: {
				    content: 'right'
				}
			},*/
			'editLevel':{
				xclass: 'iih.mr.qa.qa_divide_level.action.QaItmSndEditAction',
				blocks: {
				   left: 'left',
				   right: 'right'
				}
			},
			'popupQaItm':{
				xclass: 'iih.mr.qa.qa_divide_level.action.PopupQaItmAction',
				blocks: {
				   left: 'left',
				   right: 'right'
				}
			},
			'delLevel':{
				xclass: 'iih.mr.qa.qa_divide_level.action.QaDivideLevelDelAction',
				url:'qaitm/del',
				blocks: {
				   left: 'left',
				   content: 'right'
				}
			},
			'toQaAutoConfig':{
				xclass: 'iih.mr.qa.qa_divide_level.action.ToQaAutoConfig',
				blocks: {
				   left: 'left',
				   content: 'right'
				}
			}
		},
		chains:{
			'initTree':['initTree'],
			'treeSelect':['treeSelect'],
			'qaDivideLevelViewready':['qaDivideLevelViewready'],
			'addLevel':['addLevel'],
//			'judgeBtn':['judgeBtn'],
			'editLevel':['editLevel'],
			'popupQaItm':['popupQaItm'],
			'delLevel':['delLevel'],
			'toQaAutoConfig':['toQaAutoConfig']
		},
		connections:{
			'left':[/*{
				event: 'afterrender',
				chain: 'initTree'
			},*/{
                selector: 'xaptree',
                event: 'select',
                chain: 'treeSelect'
            }],
			'right':[{
				selector: 'xapgrid',
				event : 'viewready',
				chain: 'qaDivideLevelViewready'
			},/*{
				selector: 'xapgrid',
				event : 'itemclick',
				chain: 'judgeBtn'
			},*/{
				selector: 'xapgrid',
				event : 'itemdblclick',
				chain: 'toQaAutoConfig'
			}]
		}
	}
})
Ext.define('iih.mr.qa.qa_divide_level.block.QaItmWorkBlock',{
	extend :  Xap.ej.block.FormBlock ,

	alias:'widget.qaitmworkblock',

	                                                              
				                                              
				                                              
				                                            
	layout: 'fit',
	border: 0,
	items: [{
        xtype:'xaptabpanel',
        layout: 'fit',
        border:false, 
        items:[{
            title:'病案等级设置',
            groupType:1,
            name:'qadividelevel',
            xtype:'xappanel',
            layout: 'fit',
            items:[{
            	xtype:'qadividelevelview'
            }]
        },{
            title:'一级分类',
            name:'qaitmfst',
            xtype:'xappanel',
            layout: 'fit',
            groupType:2,
            items:[{
            	xtype:'qaitmfstview'
            }]
        },{
            title:'二级分类',
            name:'qaitmsnd',
            xtype:'xappanel',
            layout: 'fit',
            groupType:3,
            items:[{
            	xtype:'qaitmsndview'
            }]
        },{
            title:'质控项目设置',
            name:'qaitm',
            xtype:'xappanel',
            layout: 'fit',
            groupType:4,
            items:[{
            	xtype:'qaitmview'
            }]
        }]
    }],
    
    setData : function(data) {/*
    	var grid;
    	if(data.groupType == '1'){
    		 grid = this.down('xapgrid[name=waitSignGrid]');
    	}else if(data.groupType == '2'){
    		 grid = this.down('xapgrid[name=alreadySignGrid]');
    	}
    	var dataList = data.dataList;
    	if(dataList){
        	var totalList = {"total":data.total,"dataList":dataList};
        	var pageSize = data.pageSize;
        	if(pageSize == undefined || typeof(data.pageSize) == 'object'){
        		grid.setPageData(totalList);
	    	}else{
	    		grid.setData(dataList);
	    	}
        }else{
        	var totalList = {"total":data.total,"dataList":dataList};
        	grid.setPageData(totalList);
        }
    */}
})
/** 
 * 质控项目设置视图
 * @author ：yao_lijie
 */

Ext.define('iih.mr.qa.qa_divide_level.view.QaItmWorkView',{
	extend :  Xap.ej.template.BaseTemplate ,
	
	alias:'widget.qaitmworkview', 
	
	          
	                                      
	                                     
	   		                                 
	   		                                           
	                                                   
	                                              
	                                             
	                                   
	                                                           
	                                                                
	            
	          
	layout: {
        type: 'fit'
    },
	
	xapConfig:{         
		blocks: {
			'content':{
				xclass: 'iih.mr.qa.qa_divide_level.block.QaItmWorkBlock',
				flex:1
			}
		},
		actions:{
			'init':{
				xclass: 'iih.mr.qa.qa_divide_level.action.QaItmWorkInitAction',
				blocks: {
				    content: 'content'
				}
			}
		},
		chains:{
			'init':['init']
		},
		connections:{
			'content':[{
				event: 'afterrender',
				chain: 'init'
			},{
                selector: 'xaptabpanel',
                event: 'tabchange',
                chain: 'init'
            }]
		}
	}
})
/** 
 * 质控报表
 * @author ：cheng_feng
 */
Ext.define('iih.mr.qa.qa_reports.action.OpenReportAction', {
extend:  Xap.ej.action.Action ,

	requires: [],
	
	execute: function(context) {
		
		var me = this;
		
		var owner = me.getOwner();   
		
		var reportRecord = owner.reportRecord.data;
		
		var reportUrl = reportRecord.url;
		
		var paraNm = reportRecord.paraNm;
		
		var paraTp = reportRecord.paraTp;
		
		var paraArr = paraNm.split(';');
		
		var topBlock = owner.getBlock('top');
		
		var paramValueItem = topBlock.down('xapcombobox[name=paramValue]');
		
		var formItems = topBlock.items.items;
		
		var beginTime='';
		var endTime='';
		var deptCd='';
		
	    var nowStr = new Date(); 
	    var yearStr = nowStr.getFullYear(); //年份
	    var paramValue = paramValueItem.getValue();//季度、月份
		var messageStr = '';
		if(paraTp=='4'){
			beginTime = formItems[0].value;
			endTime = formItems[2].value;
			if(beginTime>endTime){
				var message = '起始日期必须小于结束日期，请重新选择！';
				XapMessageBox.info(message);
				return;
			}
			messageStr='时间区间';
		}else if(paraTp=='3'){//年份
			if(paramValue!=null && paramValue!='null' && paramValue!='' && paramValue!='undefined' ){
				var yearValue = paramValue;
				beginTime = yearValue + '-01-01 00:00:00';
	            endTime = yearValue + '-12-31 23:59:59';
			}
			messageStr='年度';
		}else if(paraTp=='2' ){//季度
			if(paramValue!=null && paramValue!='null' && paramValue!='' && paramValue!='undefined' ){
				var quarterStr = paramValue;
				if(quarterStr=='1'){
					beginTime = yearStr + '-01-01 00:00:00';
	                endTime = yearStr + '-03-31 23:59:59';
				}else if(quarterStr=='2'){
					beginTime = yearStr + '-04-01 00:00:00';
	                endTime = yearStr + '-06-30 23:59:59';
				}else if(quarterStr=='3'){
					beginTime = yearStr + '-07-01 00:00:00';
	                endTime = yearStr + '-09-30 23:59:59';
				}else if(quarterStr=='4'){
					beginTime = yearStr + '-10-01 00:00:00';
	                endTime = yearStr + '-12-31 23:59:59';
				}
			}
			messageStr='季度';
		}else if(paraTp=='1' ){//月份
			 if(paramValue!=null && paramValue!='null' && paramValue!='' && paramValue!='undefined' ){
			     var monthStr = paramValue;
			     monthStr = monthStr<10?('0'+monthStr):monthStr;
				 var new_date = new Date(yearStr, monthStr, 1);  //取当年当月中的第一天          
	             var dayStr = new Date(new_date.getTime()-1000*60*60*24).getDate();//获取当月最后一天日期
	             dayStr = dayStr<10?('0'+dayStr):dayStr;
	             beginTime = yearStr + '-' + monthStr + '-' +'01 00:00:00';
	             endTime = yearStr + '-' + monthStr + '-' + dayStr+' 23:59:59';
			 }
			 messageStr='月度';
		}
		
		deptCd = formItems[5].comboxHiddenValue;
		
		var bottomBlock = owner.getBlock('bottom');
		
		bottomBlock.removeAll();
		
		//Params=参数1名称=参数1数值；参数2名称=参数2数值；参数3名称=参数3数值… …
		//例如：http://IP地址：服务器端口/web路径/ReportEmitter?rpt=Demo/参数报表/时间参数.brt&params=year=1997;area=华南区
		//yyyy-MM-dd HH:mm:ss
		
		var srcStr = reportUrl;
		
		if((beginTime==undefined) || (endTime==undefined) || (beginTime=='') || (endTime=='') ){
			var message = '请选择'+messageStr+'！';
			XapMessageBox.info(message);
			return;
		}else if((beginTime!=undefined) && (endTime!=undefined) ){
			if(paraTp=='4'){
				beginTime = Ext.util.Format.date(beginTime,'Y-m-d');
				endTime = Ext.util.Format.date(endTime,'Y-m-d');
				beginTime += ' 00:00:00';
				endTime += ' 23:59:59';
			}else{
				beginTime = Ext.util.Format.date(beginTime,'Y-m-d h:m:s');
				endTime = Ext.util.Format.date(endTime,'Y-m-d h:m:s');
			}
			var vArr = new Array([beginTime,endTime,deptCd]);
		    var paramStr ='&params=paramType='+paraTp+';';
			for(var i=0;i<paraArr.length;i++){
				paramStr+=paraArr[i]+'='+vArr[0][i]+';';
			}
			paramStr = paramStr.substring(0, paramStr.length-1);
			srcStr = reportUrl+paramStr;
		}
		srcStr += "&toolbardisplay=top";//&fitwidth=true
		var htmlStr = {'html':'<iframe align = "center" width="100%" height="100%" src="'+srcStr+'"> </iframe>'};
		
		bottomBlock.add(htmlStr);
		
    }
});
/** 
 * 质控报表
 * @author ：cheng_feng
 */
Ext.define('iih.mr.qa.qa_reports.action.OpenSearchReportAction', {
extend:  Xap.ej.action.Action ,

	requires: [],
	
	execute: function(context) {
		
		var me = this;
		
		var owner = me.getOwner();   
		
		var reportRecord = owner.reportRecord.data;
		
		var reportUrl = reportRecord.url.trim();
		
		var resultBlock = owner.getBlock('result');
		var deptCd = IMER_GLOBAL.department.code;
		//Params=参数1名称=参数1数值；参数2名称=参数2数值；参数3名称=参数3数值… …
		//例如：http://IP地址：服务器端口/web路径/ReportEmitter?rpt=Demo/参数报表/时间参数.brt&params=year=1997;area=华南区
		//yyyy-MM-dd HH:mm:ss
		reportUrl += "&toolbardisplay=top&params=deptCd="+deptCd;//&fitwidth=true
		var htmlStr = {'html':'<iframe align = "center" width="100%" height="100%" src="'+reportUrl+'"> </iframe>'};
		
		resultBlock.add(htmlStr);
		
    }
});
/** 
 * 列表加载完成后查找到tools上的相关按钮进行事件的监听
 * @author ：cheng_feng
 */

Ext.define('iih.mr.qa.qa_reports.action.ReportViewreadyAction', {
	extend:  Xap.ej.action.Action ,
	
	execute: function(context){
		var me = this;
		
	    var owner = this.getOwner();
	    
		var resultBlock = this.getBlock('result');	
		var inProcessGrid = resultBlock.down('xapgrid');
		
		//查看按钮
		var inProcess = inProcessGrid.down('xapbutton[action=checkOut]');
		inProcess.on('click',function(btn){
			context.event.name='click';
			var inProcessChain = me.getOwner().getActionChain("toReport");
			inProcessChain.execute(context);
		});
	}
	
})
/** 
 * 质控报表列表
 * @author ：cheng_feng
 */
Ext.define('iih.mr.qa.qa_reports.action.ReportsListAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
//	extend: 'Xap.ej.action.Action',
	
	doExecute: function(context) {
			this. showLoading();
	        this.prepareOperations(context);
	 },
	 prepareOperations: function(context) {
		 var me = this;
		
	    var owner = this.getOwner();   
	    
		var operations = context.operations;
		
        var resultBlock = this.getBlock('result');  
        
       var event = context.event;
        
        var url = this.url;
    	var operation = {
            url: url,
    		mclass: null,
    		method: 'get',
    		condition: null,
    		scope: this,
    		success: this.onSuccess
    	};
    	operations.length = 0;
    	operations.push(operation);
    },

    onSuccess: function(operation) {
        var block = this.getBlock('result');
        var m = operation.result;
        block.setData(m.dataList);
    }
});

/** 
 * 加载质控报表查询条件
 * @author ：cheng_feng
 */
Ext.define('iih.mr.qa.qa_reports.action.ShowReportConditionAction', {
extend:  Xap.ej.action.Action ,

	requires: [],
	
	execute: function(context) {
		
		var me = this;
		
		var owner = me.getOwner();   
		
		var topBlock = owner.getBlock('top');
		
		var beginTimeItem = topBlock.down('xapdatefield[name=beginTime]');
		
		var intervalSymbolItem = topBlock.down('xapdisplayfield[name=intervalSymbol]');
		
		var endTimeItem = topBlock.down('xapdatefield[name=endTime]');
		
		var paramTypeItem = topBlock.down('xapdisplayfield[name=paramType]');
		
		var paramValueItem = topBlock.down('xapcombobox[name=paramValue]');
		
		var reportRecord = owner.reportRecord.data;
		
		var reportParaTp = reportRecord.paraTp;
		
		if(reportParaTp=='4'){
			beginTimeItem.setVisible(true);
			intervalSymbolItem.setVisible(true);
			endTimeItem.setVisible(true);
			paramTypeItem.setVisible(false);
			paramValueItem.setVisible(false);
		}else{
			beginTimeItem.setVisible(false);
			intervalSymbolItem.setVisible(false);
			endTimeItem.setVisible(false);
			paramTypeItem.setVisible(true);
			paramValueItem.setVisible(true);
			var displayStr;
			var dataStr;
			if(reportParaTp=='1'){//月度
				displayStr = '月度：';
				dataStr = [{"code":"1", "name":"一月"},
						        {"code":"2", "name":"二月"},
						        {"code":"3", "name":"三月"},
						        {"code":"4", "name":"四月"},
						        {"code":"5", "name":"五月"},
						        {"code":"6", "name":"六月"},
						        {"code":"7", "name":"七月"},
						        {"code":"8", "name":"八月"},
						        {"code":"9", "name":"九月"},
						        {"code":"10", "name":"十月"},
						        {"code":"11", "name":"十一月"},
						        {"code":"12", "name":"十二月"}];
			} else if(reportParaTp=='2'){//季度
				displayStr = '季度：';
				dataStr = [{"code":"1", "name":"一季度"},
						        {"code":"2", "name":"二季度"},
						        {"code":"3", "name":"三季度"},
						        {"code":"4", "name":"四季度"}];
			} else if(reportParaTp=='3'){//年度
				displayStr = '年度：';
				var nowStr = new Date(); 
	    		var yearStr = nowStr.getFullYear(); //年份
				dataStr = [{"code":yearStr, "name":yearStr},
						        {"code":yearStr-1, "name":yearStr-1},
						        {"code":yearStr-2, "name":yearStr-2},
						        {"code":yearStr-3, "name":yearStr-3},
						        {"code":yearStr-4, "name":yearStr-4}];
			}
			paramTypeItem.setValue(displayStr);
			paramValueItem.setData(dataStr);
		}
	}
});
/** 
 * 报表
 * @author ：cheng_feng
 */

Ext.define('iih.mr.qa.qa_reports.block.ReportBlock',{
	extend :  Xap.ej.block.FormBlock ,
	
	                                            

    alias:'widget.reportblock', 
    
    layout: 'fit',
    
    bodyStyle: 'background:#F0F0F0;',//gray
       
   /* items: [{
    	
//        title: 'Panel 1',
        html: '<iframe align = "center" width="800" height="580" src="http://localhost:8088/BiosQa/ReportEmitter?rpt=sample.brt"> </iframe>'
    }],*/
     hasEdit: function() {
        var plugin = document.getElementById('iemrEditor');
        if (plugin != undefined &&plugin.valid&&plugin.IsModified()) {
            return true;
        } else {
            return false;
        }
    }

})

/** 
 * 质控报表
 * @author ：cheng_feng
 */
 
Ext.define('iih.mr.qa.qa_reports.view.QaReportWithoutConditionView',{
	extend :   Xap.ej.template.BaseTemplate ,
	
	           
	                                      
	                                                    
	                                                               
	  

	alias:'widget.qareportwithoutconditionview',
	
	layout: {
        type : 'vbox',
        align : 'stretch'
    },
    
	xapConfig: {
		blocks: {
		    'result': {
                xclass: 'iih.mr.qa.qa_reports.block.ReportBlock',
                flex:1
            }
		},
		
		actions: {
			'openBios': {
				xclass: 'iih.mr.qa.qa_reports.action.OpenSearchReportAction',
				blocks: {
					condition: 'properties',
					result: 'result'
				}
			}
		},

		chains: {
			'openBios':['openBios']
		},

		connections: {
			'result':[{
				event: 'afterrender',
				chain: 'openBios'
			}]
		}
	}
})
/** 
 * 质控报表
 * @author ：cheng_feng
 */
Ext.define('iih.mr.qa.qa_reports.action.ToReportAction', {
extend:  Xap.ej.action.Action ,

	                                                                     
	
	execute: function(context) {
		
		var me = this;
		
		var owner = this.getOwner();   
		
		var topBlock = this.getBlock('result');
	    
	    var enGrid = topBlock.down('xapgrid');
	    
	    var selModel = enGrid.getSelectionModel();
	    
	    var record = selModel.getSelection()[0];

	    var reportCd = record.data.reportCd;
	    var reportName = record.data.reportName;
	    var event = context.event;
	    
	    var workareapageview = owner.ownerCt;
	    var reportview = workareapageview.items.items[1];
	    if(reportview){
	    	workareapageview.remove(reportview);
	    }
	    
	    var pageCode = 'qareportwithoutconditionview';
//	    var pageCode = 'qareportview';
	    var pageTitle = reportName;
	    
	    var viewConfig = {
	    	reportRecord:record,
	    	reportCd: reportCd,
	    	reportName:reportName
	    }
	    
        if(event) {
            var config = {
            	pageCode: pageCode,
            	pageTitle: pageTitle,
                xclass: 'iih.mr.qa.qa_reports.view.QaReportWithoutConditionView',
//                xclass: 'iih.mr.qa.qa_reports.view.QaReportView',
                viewConfig:  viewConfig
            };
            var canvas = Xap.getCanvas();
            canvas.fireEvent("addWorkPage",config);
        };
    }
});
/** 
 *  唤醒按钮
 * @author ：cheng_feng
 */
Ext.define('iih.mr.qa.qa_reports.action.WakeReportButtonAction', {
extend:  Xap.ej.action.ServiceInvocation ,

	requires: [],
	
	execute: function(context) {

		 var me = this;
		 var contentBlock = this.getBlock('result');
	        
	     var enGrid = contentBlock.down('xapgrid');
	     
	     // 查看按钮
         var checkOut = contentBlock.down('xapgrid xapbutton[action=checkOut]');
        
        // 设置按钮可用
         checkOut.setDisabled(false);
        
        contentBlock.down('xapgrid').refresh();
    }
});
/** 
 * 报表查询条件
 * @author ：cheng_feng
 */

Ext.define('iih.mr.qa.qa_reports.block.ReportConditionBlock',{
	extend :  Xap.ej.block.FormBlock ,
	
	           
                                            
                                          
		                                   
                                              
	  

    alias:'widget.reportconditionblock', 
    
    layout: 'hbox',
    
    items: [
      	  {
      		xtype: 'xapdatefield',
      		width:260,
      		name:'beginTime',
      		fieldLabel:'归档时间',
      		labelAlign:'center',
      		dateFormate:'yyyy-MM-dd',//yyyy-MM-dd HH:mm:ss
      		margin:'10 20 0 30'
      	},{
      		xtype: 'xapdisplayfield',
      		name:'intervalSymbol',
      		width:20,
      		value:'~',
      		margin:'10 0 0 0'
      	},{
      		xtype: 'xapdatefield',
      		name:'endTime',
      		width:150,
      		dateFormate:'yyyy-MM-dd',
      		margin:'10 20 0 0'
      	},{
      		xtype: 'xapdisplayfield',
      		name:'paramType',
      		width:60,
      		value:'',
      		margin:'10 0 0 30'//上右下左
      	},{
      		xtype: 'xapcombobox',
      		name:'paramValue',
      		width:150, 
      		valueField:'code',
      		displayField:'name',
      		margin:'10 0 0 0'
      	},{
			xtype:'comboxgrid',
			url: 'organization/keyword',//科室查询的url
	        anchor: "90%",
			listWidth:210,    //gird的宽度
			width:200,        //combo的宽度
	        padding:'0 0 0 0',
	        margin:'10 20 0 10',
	        name: 'curDeptNm',
			dataIndex : 'curDeptNm',
	        method:'dept',
	        fieldLabel:'所属科室',
	        labelWidth : 60,
			labelAlign : 'right',
			valueField : 'code',//科室编码的字段名
			displayField: 'name',//科室名称的字段名
			columns: [{              //grid的column配置
			   text: '科室编码',
			   dataIndex: 'code',
			   width:60
			},{
			   text: '科室',
			   flex:1,
			   dataIndex: 'name'
			}],
			callback:function(newValue,oldValue,record){  //在grid选择记录后的回调函数
			    console.log(newValue);     //本次选择的科室编码
			    console.log(oldValue);     //上次选择的科室编码
			    console.log(record);       //本次选择的科室完整记录
			}
		 },{
      		xtype: 'xapbutton',
      		width:50,
            name: 'openBios',
            method:'openBios',
      		text:'预览',
      		margin:'10 20 0 0'
      	}]
})
/** 
 * 质控报表列表block
 * @author ：cheng_feng
 */
Ext.define('iih.mr.qa.qa_reports.block.ReportsListBlock',{
	extend :  Xap.ej.block.Block ,
	
	           
   		                           
		                                 
   	  
   	
	alias:'widget.reportslistblock',

	layout: 'fit',

	items: [{
		xtype: 'xapgrid',
		tools:[{
			xtype: 'xapbutton',
			text : '查看',
			action: 'checkOut',
			disabled: true
		}
	],
		autoScroll:true,
		title:'报表一览',
		CM_JR_Record: [
		   {header : '报表主键', name: 'reportCd', dataIndex : 'reportCd', hidden:true },
		   {header : '报表URL', name: 'url', dataIndex : 'url', hidden:true },
		   {header : '报表参数', name: 'paraNm', dataIndex : 'paraNm', hidden:true },
		   {header : '报表类型', name: 'paraTp', dataIndex : 'paraTp', hidden:true },
           {header: '报表名称', dataIndex: 'reportName', field: 'textfield', type: 'string', width: 200},
           {header: '科室', dataIndex: 'deptName', field: 'textfield',type: 'string', width: 80},
           {header: '描述', dataIndex: 'reportDes', field: 'textfield', type: 'string', flex:1}
		]/*,
		gridData :[{'reportCd':'001', 'reportName':'归档病历检查报告', 'deptName':'全院', 'reportDes':'各科室的病历总数，及其甲乙丙级病历数和所占百分率。'},
		           		{'reportCd':'001', 'reportName':'缺陷率统计', 'deptName':'全院', 'reportDes':'各科室的缺陷率。'}] */
	}],
	
	setData: function(data) {
		var grid = this.down('xapgrid');
		if(grid){
			if(data){
				for(var i=0;i<data.length;i++){
					if(data[i].deptCd==''){
						data[i].deptName=' -- ';
					}
				}
				grid.setData(data);
			}else{
				grid.setData([]);
			}
		}
	}
})
/** 
 *
 * 弹出框
 * @extends Ext.window.MessageBox
 * @author：chenyajie<chen_yajie@founder.com>
 * 
 *
 */
Ext.define('Xap.ej.element.MessageBox.MessageBox', {
	extend:  Ext.window.MessageBox ,
	
	                                   
	
	alias: 'widget.xapmessagebox',
	
	closable: true,
	
	draggable: true,
	
	autoScroll: true,
	
	SUCCESS : Ext.baseCSSPrefix + 'message-box-success',
	
	FAIL : Ext.baseCSSPrefix + 'message-box-fail',
	
	initComponent: function () {
		if (!window.FuiLocale) {
			window.FuiLocale = Ext.create('Xap.ej.locale.Locale');
		}
		this.buttonText = {
			ok: FuiLocale.get('messagebox', 'ok'),
			yes: FuiLocale.get('messagebox', 'yes'),
			no: FuiLocale.get('messagebox', 'no'),
			cancel: FuiLocale.get('messagebox', 'cancel')
		};
		
	    this.callParent();
	    
	    this.addListener('beforeshow', this.atBeforeShow, this);
	    this.addListener('hide', this.atHide, this);
	    this.addListener('show', this.atShow, this);
	},
	
	confirm: function(msg, fn, scope) {
		var cfg = {
			title: FuiLocale.get('messagebox', 'confirm'),
			icon: this.QUESTION,
			msg: msg,
			buttons: this.YESNOCANCEL,
			callback: Ext.isFunction(fn) ? fn : Ext.emptyFn,
			scope: scope
		};
		this.show(cfg, arguments);
    },
    
    confirm2: function(msg, fn, scope) {
		var cfg = {
			title: FuiLocale.get('messagebox', 'confirm'),
			icon: this.QUESTION,
			msg: msg,
			buttons: this.YESNO,
			callback: Ext.isFunction(fn) ? fn : Ext.emptyFn,
			scope: scope
		};
		this.show(cfg, arguments);
    },
    
    warn: function(msg, fn, scope) {
    	var cfg = {
    		title: FuiLocale.get('messagebox', 'warn'),
    		icon: this.WARNING,
    		msg: msg,
    		buttons: this.OK,
    		callback: Ext.isFunction(fn) ? fn : Ext.emptyFn,
    		scope: scope
    	};
    	this.show(cfg, arguments);
    },
    
    info: function(msg, fn, scope) {
    	var cfg = {
       		title: FuiLocale.get('messagebox', 'info'),
       		icon: this.INFO,
       		msg: msg,
       		buttons: this.OK,
       		callback: Ext.isFunction(fn) ? fn : Ext.emptyFn,
       		scope: scope
       	};
       	this.show(cfg, arguments);
    },
    
    error: function(msg, fn, scope) {
    	var cfg = {
       		title: FuiLocale.get('messagebox', 'error'),
       		icon: this.ERROR,
       		msg: msg,
       		width: 400,
       		buttons: this.OK,
       		callback: Ext.isFunction(fn) ? fn : Ext.emptyFn,
       		scope: scope
       	};
       	this.show(cfg, arguments);
    },
    
    success: function(msg, fn, scope) {
    	var cfg = {
       		title: FuiLocale.get('messagebox', 'success'),
       		icon: this.SUCCESS,
       		msg: msg,
       		buttons: this.OK,
       		callback: Ext.isFunction(fn) ? fn : Ext.emptyFn,
       		scope: scope
       	};
       	this.show(cfg, arguments);
    },
    
    fail: function(msg, fn, scope) {
    	var cfg = {
       		title: FuiLocale.get('messagebox', 'fail'),
       		icon: this.FAIL,
       		msg: msg,
       		buttons: this.OK,
       		callback: Ext.isFunction(fn) ? fn : Ext.emptyFn,
       		scope: scope
       	};
       	this.show(cfg, arguments);
    },
    
    wait: function(cfg, title, config){
        if (Ext.isString(cfg)) {
            cfg = {
                title: title,
                msg: cfg,
                closable: false,
                wait: true,
                modal: true,
                minWidth: this.minProgressWidth,
                waitConfig: config
            };
        }
        return this.show(cfg, arguments);
    },
    
    show: function(cfg, params) {
    	if (Ext.isObject(cfg.msg)) {
    		this.detail = cfg.msg.detail;
    		cfg.msg = cfg.msg.message;
    	} else {
    		delete this.detail;
    	}
    	
    	if (params && params.length > 0) {
    		var element = 'workareapageview';
    		var lastArg = params[params.length - 1];
    		if (Ext.isObject(lastArg) && lastArg) {
    			element = lastArg;
    		}
    		cfg.alignEl = element;
    	}
    	
    	return this.callParent([cfg]);
    },
    
    atBeforeShow: function() {
    	var me = this;

    	if (this.detail) {
	    	var dockedItems = this.getDockedItems('toolbar[dock="bottom"]')[0];
	    	dockedItems.add({
	    		xtype: 'button',
	    		itemId: 'detail',
	    		width: 75,
	    		enableToggle: true,
	    		text: FuiLocale.get('messagebox', 'detail') + '︾',
	    		dialogHeight: me.getHeight(),
	    		toggleHandler: function(button, state) {
	    			if (state) {
	    				button.setText(FuiLocale.get('messagebox', 'detail') + '︽');
	    				me.setHeight(button.dialogHeight*2);
	    				me.body.child('.messagebox-detail').setStyle({
	    					width: me.getWidth() - 30 + 'px',
	    					height: button.dialogHeight + 5 + 'px',
	    					top: button.dialogHeight/2 - 10 + 'px',
	    					left: '10px',
	    					display: 'block'
	    				});
	    			} else {
	    				button.setText(FuiLocale.get('messagebox', 'detail') + '︾');
	    				me.body.child('.messagebox-detail').setStyle({
	    					display: 'none'
	    				});
	    				me.setHeight(button.dialogHeight);
	    			}
	    		}
	    	});
    	
    		this.body.appendChild({
    			tag: 'div',
    			cls: 'messagebox-detail',
    			html: this.detail
    		});
    		
    	}
    },
    
    atHide: function() {
    	var me = this;
    	
    	if (this.detail) {
    		var dockedItems = this.getDockedItems('toolbar[dock="bottom"]')[0];
    		dockedItems.remove(dockedItems.getComponent('detail'));
    		this.body.child('.messagebox-detail').remove();
    		delete this.detail;
    	}
    },
    
    atShow: function() {
		this.alignTo(this.cfg.alignEl, 'c-c');
    }
}, function() {
	window.XapMessageBox = Ext.create('Xap.ej.element.MessageBox.MessageBox');
});

/** 
 * 质控报表
 * @author ：cheng_feng
 */
 
Ext.define('iih.mr.qa.qa_reports.view.QaReportView',{
	extend :  Xap.ej.stl.view.TopBottomContainerTemplate ,
	
	           
	                                       
	                                           
	                                           
	                                          
	                                        
	                                             
	                                      
	                                    
	                                                  
	                                                    
	                                                             
	                                                          
	                                                                  
	  

	alias:'widget.qareportview',
	
	layout: {
        type : 'vbox',
        align : 'stretch'
    },
    
	xapConfig: {
		blocks: {
		    'top': {
                xclass: 'iih.mr.qa.qa_reports.block.ReportConditionBlock',
                height:50
            },
            'bottom': {
                xclass: 'iih.mr.qa.qa_reports.block.ReportBlock',
                flex:1
            }
		},
		
		actions: {
			'init': {
				xclass: 'iih.mr.qa.qa_reports.action.ShowReportConditionAction',
				blocks: {
					condition: 'properties',
					result: 'top'
				}
			},
			'openBios': {
				xclass: 'iih.mr.qa.qa_reports.action.OpenReportAction',
//				url: 'qa/notification/faults',
				blocks: {
					condition: 'properties',
					result: 'bottom'
				}
			}
		},

		chains: {
			'init':['init'],
			'openBios':['openBios']
		},

		connections: {
			'top':[{
				event: 'afterrender',
				chain: 'init'
			},{
				selector: 'xapbutton[name=openBios]',
				event: 'click',
				chain: 'openBios'
			}]
		}
	}
})

/** 
 * 质控报表列表
 * @author ：cheng_feng
 */
 
Ext.define('iih.mr.qa.qa_reports.view.QaReportsListView',{
	extend:  Xap.ej.template.BaseTemplate ,
	           
	                                       
	                                           
	                                           
	                                          
	                                        
	                                             
	                                      
	                                    
	                                                         
	                                                          
	  

	alias:'widget.qareportslistview',
	
	layout: {
        type : 'vbox',
        align : 'stretch'
    },
    
	xapConfig: {
		blocks: {
		    'result': {
                xclass: 'iih.mr.qa.qa_reports.block.ReportsListBlock',
                flex:1
            }
		},
		
		actions: {
			'init': {
				xclass: 'iih.mr.qa.qa_reports.action.ReportsListAction',
				url: 'qa/reports',
				blocks: {
					condition: 'properties',
					result: 'result'
				}
			},
			'wakeButton': {
				xclass: 'iih.mr.qa.qa_reports.action.WakeReportButtonAction',
				blocks: {
					condition: 'properties',
					result: 'result'
				}
			},
			'reportViewreadyAction': {
				xclass: 'iih.mr.qa.qa_reports.action.ReportViewreadyAction',
				blocks: {
					condition: 'properties',
					result: 'result'
				}
			},
			'toReport': {
				xclass: 'iih.mr.qa.qa_reports.action.ToReportAction',
				blocks: {
					condition: 'properties',
					result: 'result'
				}
			}
		},

		chains: {
			'init':['init'],
			'toReport':['toReport'],
			'wakeButton':['wakeButton'],
			'reportViewreadyAction':['reportViewreadyAction']
		},

		connections: {
			'result':[{
				selector: 'xapgrid',
				event: 'itemdblclick',
				chain: 'toReport'
			},{
				selector: 'xapgrid',
				event: 'select',
				chain: 'wakeButton'
			},{
				selector: 'xapgrid',
				event: 'viewready',
				chain: 'reportViewreadyAction'
			},{
				event: 'afterrender',
				chain: 'init'
			}]
		}
	},
	
	initComponent : function() {
		this.callParent();
		this.addEvents("pageRefresh");//为视图添加刷新事件
		this.addListener('pageRefresh', function(){//添加监听事件
	        var chain = this.getActionChain('init');
	        if(chain) {
	            chain.execute();
	        }
		});
	}
	
})
/** 
 * 点击记录，判断按钮状态
 * @author ：yao_lijie
 */
Ext.define('iih.mr.qa.score.action.JudgeBtnAction', {
	extend:  Xap.ej.action.Action ,
	
	execute: function(context) {
		var block = this.getBlock('result');
		var grid = block.down('xapgrid');
		//科室、终末评分按钮
		var score = grid.down('button[name=score]');
		score.setDisabled(false);
	}
});

/** 
 * 质控项目保存Action
 * @extends Xap.ej.action.ServiceInvocation
 * @author ：wu_guocheng
 */

Ext.define('iih.mr.qa.score.action.ScoreItemSaveAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	                                      
	
	/*   
	* @Override
	*/
	execute: function(context) {   
		
		this.showSubmitProgressBar();
		
    	var owner = this.getOwner();
    	      
    	//获取质控项目block
		var block = this.getBlock('content');
		
		var rfmDes = block.getData().rfmDes;
		var qaItemGrid = block.down('xapgrid');
		
		var socuseOwner = owner.socuseOwner;
		var properties = socuseOwner.getLayer(Xap.ej.block.Layer.PROPERTIES);
    	
    	//参数处理
    	var selModel = qaItemGrid.getSelectionModel();
        var selRecord = selModel.getSelection()[0];
        if(null == selRecord){
        	this.closeSubmitProgressBar();
        	XapMessageBox.info('请选择一条记录');
        	return;
        }
        selRecord.data.drpDes = rfmDes;
    	var listdata = this.getData(selRecord.data,properties,socuseOwner);
    	
    	var operations = context.operations;
    	if(!operations) {
    		this.closeSubmitProgressBar();
    		return;
    	}
    	this.prepareOperations(operations,listdata);
    	
    	
    },
    prepareOperations: function(operations,data){
        var url = this.url;
        var mclass = null;
        var METHODS = this.getInvocationMethods();
    	var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_CREATE,
            condition: null,	
            data:data,
    		scope: this,
    		success: this.onSuccess
    	};
    	operations.push(operation);
    },
    onSuccess: function(operation) {
        
    	//获取质控项目block
		var block = this.getBlock('content');
		var defectinGrid = block.down('xapgrid');
	    var m = operation.result;
	    
	    //质控工作画面中的缺陷一览进行查询
	    var owner = this.getOwner();
	    
	    //关闭此画面
    	var closeChain = owner.getActionChain('closeFaultAction');
    	closeChain.execute();
	    
    	//刷新终末评分页面
    	var socuseOwner = owner.socuseOwner;
    	var chain = socuseOwner.getActionChain('init');
    	chain.execute();
    	
    	
    },
    getData:function(data,properties,socuseOwner){
    	//保存的参数集合
    	var datasArr = [];
    	var workScreen = properties.data.workScreen;
    	var obj = new Object();
		obj.qaItmPk = data.qaItmCd;
		obj.deductScrTimes = data.deductScrTimes;//缺陷次数
		obj.drpDes =  data.drpDes;
		if(workScreen == '7'){
			qaTyCd = iih.mr.qa.QaStatusGlobal.qaTypeCodeTerminal; 
		}else if(workScreen == '11'){
			qaTyCd = iih.mr.qa.QaStatusGlobal.qaTypeCodeDept; 
		}
		
		obj.qaTyCd = qaTyCd; 
		obj.enPk = properties.data.enPk; 
		
    	datasArr.push(obj);
    	
    	 var data={qaDivideArray:datasArr};
    	 
    	 return data;
    }
});
/** 
 * 缺陷录入BLOCK
 * @extends Xap.ej.block.Block
 * @author ：wu_guocheng
 */

Ext.define('iih.mr.qa.score.block.ScoreFaultInputBlock',{
//	extend : 'Xap.ej.block.Block',
	extend :  Xap.ej.block.FormBlock ,
	
	requires: [],

    alias:'widget.scorefaultinputblock',
    
    layout: {
		type: 'table',
		columns: 2,
		//width: 1024,
		tableAttrs: {
            border: 0,
            cellpadding: 0,
            cellspacing: 1,
            width: '100%'
//            height:76
        },
        tdAttrs: {
            valign: 'left'
        }
	},
    
    buttons:[{
            xtype: "button",
            name: 'save',
            action:'save',
            text: '确认',
            iconCls: 'icon-OK'
        },{
            xtype: "button",
            name: 'cancel',
            action:'cancel',
            text: '取消' ,
            iconCls: 'icon-cancel' 
    }],
    
    items:[{
        xtype:'xapcombobox',
        name:'qaItmFst',
        padding:'10 0 8 40',
        labelWidth:80,
        width:260,
        editable:false,
        allOptions: false,
        fieldLabel:'病案评分类别',
        queryMode: 'local',
        displayField: 'nm',
        valueField: 'fstCd'
    },{
        xtype:'xapcombobox',
        name:'qaItmSnd',
        labelWidth:60,
        width:260,
        value:'ALL',
        editable:false,
        allOptions: true,
        fieldLabel:'二级分类',
        queryMode: 'local',
        displayField: 'nm',
        valueField: 'sndCd'
    },{     
    	
    	xtype : 'xapgridblock',
		name : 'faultinputgrid',
		colspan : 2,
		height:320,
		rownumShow:true,
		plugins : [Ext.create('Xap.ej.element.grid.plugin.CellEditing', {
			clicksToEdit : 1
		})],
		 		
		CM_JR_Record:[{
			header : '新质控项目编码',
			name: 'qaItmCd',
			dataIndex : 'qaItmCd',
			hidden:true
		},{
			header : '单次扣分值',
			name: 'onceDropScore',
			dataIndex : 'onceDropScore',
			hidden:true
		},{
			header : '累计最大扣分值',
			name: 'maxDropScore',
			dataIndex : 'maxDropScore',
			hidden:true
		},{
			header : '自动质控标志',
			name: 'autoQaFlag',
			dataIndex : 'autoQaFlag',
			hidden:true
		},{
			header : '质控扣分类型名称',
			name: 'qaDropScoreTypeName',
			dataIndex : 'qaDropScoreTypeName',
			hidden:true
		},{
			header : '质控项目类型编码',
			name: 'qaItemTypeCode',
			dataIndex : 'qaItemTypeCode',
			hidden:true
		},{
			header : '质控扣分类型编码',
			name: 'qaDrpScrTpCd',
			dataIndex : 'qaDrpScrTpCd',
			hidden:true
		},{
			header : '评分项目',
			name: 'req',
			dataIndex : 'req',
			width:400
		},{
			header : '扣分标准',
			width:100,
			dataIndex : 'deductDes',
			name: 'deductDes'
		},{
			header : '扣分次数',
			name: 'deductScrTimes',
			dataIndex : 'deductScrTimes',
			flex:1,
			getEditor:function(record,defaultField ) {
				//质控扣分类型编码为每次的都可编辑,默认值就是1
			   if(record.get('qaDrpScrTpCd')=='QAM02.02'){
				   return {
					   xtype:'rangenumberfield',
					   value: 1,
					   maxValue: 10,
					   minValue: 1,
					   listeners:{
							 change:function(me,newVal,oldVal,eOpts ){
								  var val = me.getValue();
								  var faultGrid = me.up('xapgrid');
								  var selModel=faultGrid.getSelectionModel();
							 	  var record=selModel.getSelection()[0];
								  record.set('deductScrTimes',val);
								  record.set('faultSelect',true);
							 }
					   }
				 };
				  
			   }else{
				   return null;
			   }
	          
            }
		}]
    },{
			xtype : 'xaptextarea',
			fieldLabel : '扣分说明',
			colspan : 2,
			labelWidth:80,
			labelAlign : 'right',
			padding:'10 0 8 10',
			height:40,
			width: 600,
			name: 'rfmDes',
			dataIndex : 'rfmDes'
		}]

})
/** 
 * 集成编辑器和缺陷一览视图
 * @extends Xap.ej.stl.view.TopBottomContainerTemplate
 * @author ：wu_guocheng
 */

Ext.define('iih.mr.qa.score.view.ScoreItemInputView',{
	extend :  Xap.ej.template.BaseTemplate ,
	
	alias:'widget.scoreiteminputview', 
	
	          
	                                      
	   		                                 
	   		                                           
	                                                   
	                                              
	                                             
	                                   
	                                                       
	                                                                  
	                                                                  
	                                                               
	   		                                                            
	   		                                                          
	   		                                                          
	            
	
	xapConfig:{         
		blocks: {
			'top':{
				xclass: 'iih.mr.qa.score.block.ScoreFaultInputBlock',
				height: 460
			}/*,
			'bottom':{
				xclass: 'Xap.ej.block.ToolbarBlock',
				items:[{
					xtype: 'xapbutton',
					text: '确认',
					action: 'save',
					iconCls: 'icon-send'
				},{
					xtype: 'xapbutton',
					text: '取消',
					action: 'cancel',
					iconCls: 'icon-cancel'
				}]
			}*/
		},
		actions:{
			'initQaItmFst':{ 
                xclass:'iih.mr.qa.process_qa_work.action.QaItmFstSearchAction',
                url:'mr/qaitm/init',
                blocks:{
                    content: 'top'
                }
            },
			'init':{
				xclass: 'iih.mr.qa.process_qa_work.action.FaultInputSearchAction',
				url:'qacustom/item',
				blocks: {
				    content: 'top'
				}
			},
			'searchQaItmSnd':{
                xclass:'iih.mr.qa.process_qa_work.action.QaItmSndSearchAction',
                url:'itmsnd',
                blocks:{
                    content:'top'
                }
            },
            'searchQaItm':{
                xclass:'iih.mr.qa.process_qa_work.action.QaItmSearchAction',
                blocks:{
                    content:'top'
                }
            },
			'scoreItemSave':{
				xclass: 'iih.mr.qa.score.action.ScoreItemSaveAction',
				url:'qacustom/dropScoreItems',
				blocks: {
				    content: 'top'
				}
			},
			'closeFaultAction':{
				xclass: 'iih.mr.qa.process_qa_work.action.FaultInputCloseAction',
				blocks: {
				    content: 'top'
				}
			}
		},
		chains:{
			'initQaItmFst':['initQaItmFst'],
			'init':['init'],
			'searchQaItmSnd':['searchQaItmSnd'],
			'searchQaItm':['searchQaItm'],
			'scoreItemSave':['scoreItemSave'],
			'closeFaultAction':['closeFaultAction']
		},
		connections:{
			'top':[/*{
                event:'afterrender',
                chain:'initAmrScore'
            },*/{
                selector: 'xapcombobox[name=qaItmFst]',
                event: 'change',
                chain: 'searchQaItmSnd'
            },{
                selector: 'xapcombobox[name=qaItmSnd]',
                event: 'change',
                chain: 'searchQaItm'
            },{
				selector: 'button[action=save]',
				event: 'click',
				chain: 'scoreItemSave'
			},{
				selector: 'xapgridblock',
				event: 'itemdblclick',
				chain: 'scoreItemSave'
			},{
				selector: 'button[action=cancel]',
				event: 'click',
				chain: 'closeFaultAction'
			}]
		}
	}
})
/** 
 * 弹出扣分项画面Action
 * @extends Xap.ej.action.PopAction
 * @author ：wang_yanli
 */

Ext.define('iih.mr.qa.score.action.PopupScoreItemViewAction', {
	extend:  Xap.ej.action.PopAction ,
	
	                                                     
	
	execute: function(context){  
		
		var owner=this.getOwner();	
		
		var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
		
		//就诊序号
		var enPk = properties.data.enPk;
		
		var firstCode = "";
		
		var config = {
				title:"病案评分标准项目",
	    		width: 650,
	    		height:500,
	    		contentConfig: {
	    			xtype: 'scoreiteminputview',
	    			socuseOwner:owner,  //传入上级视图
	    			initChain: {
	    				name: 'initQaItmFst',
	    				context: {
	    					encounterPk: enPk,
	    					mrTypeCode: "",
	    					mrTypeName: "",
	    					firstCode:""
	    				}
	    			}
	    		}
	    	};
		
		this.callParent([config]);
		
	}
})
/** 
 * 查询：质控评分画面---完成质控评分
 * @author ：wang_yanli
 */
Ext.define('iih.mr.qa.score.action.QaScoreCompleteAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	doExecute: function(context) {
        this.prepareOperations(context);
	},
	prepareOperations: function(context) {
		
		//var scoreItemBlock = this.getBlock('bottom');
		
		var owner = this.getOwner();
	    var scoreWorkProperites = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
	    var workScreen = scoreWorkProperites.data.workScreen;
	    var enPk  = scoreWorkProperites.data.enPk; //获取患者就诊序号
        
		var operations = context.operations;
	        
        var url = this.url;
        if(workScreen == '11'){
        	url = 'qacustom/deptCompleteScore';
        }
        
        var METHODS = this.getInvocationMethods();
        
    	var operation = {
            url: url+'/'+enPk,
    		mclass: null,
    		method: METHODS.METHOD_CREATE,
            condition: null,
    		scope: this,
    		success: this.onSuccess
    	};
    	
    	operations.length = 0;
    	operations.push(operation);
    },

    onSuccess: function(operation) {
    	
    	var scoreItemBlock = this.getBlock('bottom');
    	
    	var addButton = scoreItemBlock.down('xapgrid xapbutton[action=qaScoreItemAdd]');
    	
    	addButton.setDisabled(true);
    	
    	/*var deleteButton = scoreItemBlock.down('xapgrid xapbutton[action=qaScoreItemDelete]');
    	
    	deleteButton.setDisabled(true);*/
    	
    	var completeButton = scoreItemBlock.down('xapgrid xapbutton[action=qaScoreComplete]');
    	
    	completeButton.setDisabled(true);
    	
    	var ownerProperty = this.getOwner().ownerProperty;
    	
    	ownerProperty.completed = true;
    	var initChain = this.owner.getActionChain('init');
 		initChain.execute();
 		XapMessageBox.info("完成质控评分！");
    }
});

/** 
 * 删除单条扣分项目的Action
 * @author ：wang_yanli
 */

Ext.define('iih.mr.qa.score.action.QaScoreDeleteAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override  
	*/
	doExecute: function(context) {
    
    	var me = this;
    	      
    	//获取缺陷一览的 block
		var block = this.getBlock('bottom');
    	
		var grid = block.down("xapgrid");
    	
		var selModel = grid.getSelectionModel();
		
		//var record = context.selModel.getSelection()[0];
		var record  = context.event.arguments[0];
		if(!record){
			return;
		}
		
    	var operations = context.operations;
        if(!operations) {
            return;
        }
        me.prepareOperations(operations,record);
    },
    prepareOperations: function(operations,record){
        var url = this.url+'/'+record.data.qaDivideCd;
        var mclass = null;
        var METHODS = this.getInvocationMethods();
    	var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_DELETE,
            condition: null,	
    		scope: this,
    		success: this.onSuccess
    	};
    	operations.length = 0;
    	operations.push(operation);
    },
    onSuccess: function(operation) {
    	
 		var initChain = this.owner.getActionChain('init');
 		initChain.execute();
 		
    }
})

/** 
 * 缺陷一览页面删除按钮
 * @extends Xap.ej.action.Action
 * @author ：wang_yanli
 */
Ext.define('iih.mr.qa.score.action.ScoreItemClickAction', {
	extend:  Xap.ej.action.Action ,
	
	                                      
    
	execute: function(context){  
		
		var defectsInBlock = this.getBlock('bottomcontent');
		
		//获取缺陷一览的GRID
		var ScoreItemGrid = defectsInBlock.down('xapgrid');
		
		var ownerProperty = this.getOwner().ownerProperty;
		
		//设置删除按钮不可编辑
		if(!ownerProperty.completed){
			//ScoreItemGrid.down('xapbutton[action=qaScoreItemDelete]').setDisabled(false);return;
		}
			
	}
	
})
/** 
 * 质控评分页面加载完成后查找到tools上的相关按钮进行事件的监听
 * @extends Xap.ej.action.Action
 * @author ：yao_lijie
 */

Ext.define('iih.mr.qa.score.action.ScorePatientViewreadyAction', {
	extend:  Xap.ej.action.Action ,
	
	requires:[],
	      
	execute: function(context){
		var me = this;
		
	    //获取就诊一览的 block
		var resultBlock = this.getBlock('result');	
		var scoreGrid = resultBlock.down('xapgrid');
		
		//评分按钮
		var score = scoreGrid.down('button[method=score]');
		score.on('click',function(btn){
			context.event.name='click';
			var scoreChain = me.getOwner().getActionChain("score");
			scoreChain.execute(context);
		});
	}
})
Ext.define('iih.mr.qa.score.action.ScoreQAPatientListSearchAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override
	*/
	execute: function(context) {
		if(context.event != undefined && context.event.name=='combochange' && context.event.from.rawValue != ""){
			return;
		}
    	var owner = this.getOwner();
    	this.showLoading();
    	var block = this.getBlock('result');
    	var pageNum ;
    	var pageSize ;
    	if(context.pageSize == undefined){
    		pageSize = context.pageSize;
    		pageNum = context.pageNum;
    	}else{
    		pageNum = context.event.arguments[0]; 
			pageSize = context.event.arguments[1]; 
    	}
		block.pageSize = pageSize;
		var data = {
			pageNum : pageNum,
			pageSize : pageSize,
			curDeptNm :context.curDeptNm
		}
		var owner = this.getOwner();
        var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
        properties.setData({
            parentWindow: context.parentWindow,
            sourceView: context.sourceView,
            pageSize:pageSize,
            pageNum:pageNum
        });
    	var rs = context.rs;
    	this.rs = rs;
    	var operations = context.operations;
    	if(!operations) {
    		return;
    	}
    	this.prepareOperations(operations,data);
    },
    
    prepareOperations: function(operations,data) {
    	var owner = this.getOwner();
    	var typeFlag = owner.typeFlag;
    	var amrStatus;
    	if(typeFlag == '1'){
    		amrStatus = iih.mr.qa.QaStatusGlobal.qaCompleted;//评分  完成终末质控
    	}else if(typeFlag == '2'){
    		amrStatus = iih.mr.qa.QaStatusGlobal.qaDept;//评分  已科室质控
    	}
        var block = this.getBlock('condition');
    	var condition = block.getData();
    	if(data.curDeptNm != undefined){
    		condition.curDeptNm = data.curDeptNm;
    	}
        var url = this.url;
        var pageNum = data.pageNum; 
		var pageSize = data.pageSize;
        if(condition) {
	        var qs = Ext.Object.toQueryString(condition);
	//            alert(qs);
	        if(data.pageSize == undefined || typeof(data.pageSize)=='object'){
        		if(qs) {
        			url += '?' + qs+"&amrStatus=" + amrStatus;
        		}else{
        			url += '?' + "amrStatus=" + amrStatus;
        		}
	    	}else{
	    		if(qs) {
	        		url += '?' + qs+"&amrStatus=" + amrStatus + "&pageNum="+ pageNum +"&pageSize="+ pageSize;
	    		}else{
	    			url +='?' +"amrStatus=" + amrStatus + "&pageNum="+ pageNum +"&pageSize="+ pageSize;
	    		}
	    	}
            /*if(qs) {
                	url += '?' + qs+"&workScreen="+iih.mr.qa.QaStatusGlobal.workScreenWorkTerminal;
            }*/
            console.log(url);
        }
        var mclass = null;
        if(block.getModelClass) {
            mclass = block.getModelClass();
        }
    	var operation = {
            url: url,
    		mclass: mclass,
    		method: 'get',
    		condition: condition,
    		scope: this,
    		success: this.onSuccess
    	};
    	operations.length = 0;
    	operations.push(operation);
    },

    onSuccess: function(operation) {
    	var me=this;
        var block = this.getBlock('result');
        var pageSize = block.pageSize;
        var m = operation.result;
        m.pageSize = pageSize;
        // TODO 数据格式就这样了？
        if(m instanceof Ext.data.Model) {
            block.setData({
                mclass: operation.mclass,
                data: m.getData(true)
            });
        }
        else {
        	block.setData(m);
        	console.log(m);
        }
        
        //判断按钮状态
        var grid = block.down('xapgrid');
        if(grid){
        	var rs = grid.getSelectionModel().getSelection();
		    //评分按钮
			var score = grid.down('button[name=score]');
			if(rs.length > 0){
				score.setDisabled(false);
			}else{
				score.setDisabled(true);
			} 
        }
        /*if(me.rs != undefined){
        	var enPk=me.rs.data.pk;
        	var grid = block.down('xapgrid');
	        var gridData=grid.getData();
	        var rowIndex= 0;
	        for(var i=0;i<gridData.length;i++){
	        	var gridEnPkb=gridData[i].pk;
	        	if(enPk == gridEnPkb){
	        		rowIndex=i;
	        		break;
	        	}
	        }
        	var grid = block.down('xapgrid');
        	grid.getSelectionModel().select(rowIndex);
        	var openTerminal = grid.down('button[name=openTerminal]');
	        var inTerminal = grid.down('button[name=inTerminal]')
	        openTerminal.setDisabled(true);
	        inTerminal.setDisabled(false);
        }*/
    }
});

/** 
 * 评分工作页面加载完成后查找到tools上的相关按钮进行事件的监听
 * @extends Xap.ej.action.Action
 * @author ：wang_yanli
 */

Ext.define('iih.mr.qa.score.action.ScoreViewreadyAction', {

	extend:  Xap.ej.action.Action ,
	
	requires:[],
	      
	execute: function(context){
		var me = this;
		
		var owner = this.getOwner();
		var ownerProperty = this.getOwner().ownerProperty;
		ownerProperty.completed = false;
		//扣分项目 block
		var bottomBlock = this.getBlock('bottom');		
		var dropItemGrid = bottomBlock.down('xapgrid');	
		
		
		//扣分项目-增加-按钮
		var qaScoreItemAdd = bottomBlock.down('button[action=qaScoreItemAdd]');
		qaScoreItemAdd.on('click',function(btn){
			var qaScoreItemAddChain = me.getOwner().getActionChain("qaScoreItemAdd");
			qaScoreItemAddChain.execute(context);
		});
		
		/*//扣分项目-删除-按钮
		var qaScoreItemDelete = bottomBlock.down('xapactioncolumn[name=qaScoreItemDelete]');
		qaScoreItemDelete.on('clickEvent',function(btn){
			XapMessageBox.confirm2(
					'确认删除？',
	   				function(btn){
						if(btn=="yes"){
							var qaScoreItemDeleteChain = me.getOwner().getActionChain("qaScoreItemDelete");
							qaScoreItemDeleteChain.execute(context);
						}
				});
			
		});*/
		
		//扣分项目-完成质控评分-按钮
		var qaScoreComplete = bottomBlock.down('button[action=qaScoreComplete]');
		qaScoreComplete.on('click',function(btn){
			var qaScoreCompleteChain = me.getOwner().getActionChain("qaScoreComplete");
			qaScoreCompleteChain.execute(context);
	    });
	}
})
Ext.define('iih.mr.qa.score.block.ScoreItemListBlock',{
	extend :  Xap.ej.block.Block ,


	alias:'widget.scoreitemListblock',

	layout: 'fit',

	modCount: 0,//gird修改次数
	
	canEdit: 1,//判断当前缺陷是否可编辑，从病案一览赋值
	
	canSave: false,
	items: [{
		xtype: 'xapgridblock',
		title: '扣分项目',
		autoScroll:true,
		plugins : [Ext.create('Xap.ej.element.grid.plugin.CellEditing', {
			clicksToEdit : 1
		})],
		tools:[{
				xtype: 'xapbutton',
				text: '增加',
				action: 'qaScoreItemAdd'
			}/*,{
				xtype: 'xapbutton',
				text: '删除',
				action: 'qaScoreItemDelete',
				disabled: true
			}*/,{
				xtype: 'tbspacer',
				width: 5
			},{
				xtype: 'xapbutton',
				text: '完成评分',
				action: 'qaScoreComplete'
			}
		],
		CM_JR_Record: [
					{
						header : '扣分项目表主键',
						name: 'qaDivideCd',
						dataIndex : 'qaDivideCd',
						hidden:true
					},
					{
						header : '质控项目主键',
						name: 'qaItmPk',
						dataIndex : 'qaItmPk',
						hidden:true
					},
		 
                   { header: '就诊序号', dataIndex: 'enSn', hidden: true},
                   {
           			text : '操作',
           			name: 'qaScoreItemDelete',
           			xtype:'xapactioncolumn',
           			width:50,
           			items : [{
           				text : '删除',
           				isDisabled : function(view,rowIndex,colIndex,item ,record) {
           					var scoreworkview = this.up('scoreworkview');
							if(scoreworkview.ownerProperty.completed){
								return true;
							}else{
								return false;
							}
						},
	           			/*getClass : function(v,m,record) { 
	           				  var scoreworkview = this.up('scoreworkview');
	                          if(scoreworkview.ownerProperty.completed){
	                              return 'x-hidden';
	                          }                           
	                    },*/
           				handler : function(view, rowIndex, cellIndex, e,item, record) {
           					var me = this;
           					XapMessageBox.confirm2('确认删除？', function(button) {
           			            if (button == "yes") {
           			            	
           			            	me.fireEvent('clickEvent',record,rowIndex,cellIndex);
           			            }
           			        });
           					
           				}
           			}]
           			
           		   },
                   { header: '质控类别', dataIndex: 'itemFirstNM', width:160},
                   { header: '评分项目', dataIndex: 'req', width:400,flex:1},
                   { header: '评分标准', dataIndex: 'deductDes', width:150},
                   { header: '质控医师', dataIndex: 'sbmtUserNm', width:150}
		]
	}],

	setData: function(data) {
		
		var grid = this.down('xapgridblock');
		if(data.dataList){
			grid.setData(data.dataList);
		}else{
			grid.setData([]);
		}
		/*if(data){
			var resultList = [];
			for(var i in data){
				var qaDefectModel = Ext.create('iih.mr.model.QADefectModel',data[i]);
				resultList.push(qaDefectModel);
			}
			grid.setData(resultList);
			//grid.setData(data);
		}else{
			grid.setData([]);
		}*/
	},
	buttonEnable: function(config){
		var defectSave = this.down('xapgrid xapbutton[action=defectSave]');
		var completeQaScore = this.down('xapgrid xapbutton[action=completeQaScore]');
		if(config.defectSave){
			defectSave.setDisabled(false);
		}else{
			defectSave.setDisabled(true);
		}
		if(config.completeQaScore){
			completeQaScore.setDisabled(false);
		}else{
			completeQaScore.setDisabled(true);
		}
		
	}
})
Ext.define('iih.mr.qa.score.view.ScoreWorkView',{
	extend :  Xap.ej.stl.view.TopBottomContainerTemplate ,

	           
	                                             
	                                
                                        
                                        
                                       
                                     
                                                 
                                                  
	                                      
	                             
	                                           
	                                               
	                                                  
	                                                       
	                                                 
	                                                   
	                                                      
	                                                 
	    
	  

	alias:'widget.scoreworkview',
	
	ownerProperty:{completed:false},
 
	xapConfig: {
		blocks: {
		    'top': {
                xclass: 'iih.mr.qa.score.block.ScoreFormBlock',
                height: 60
            },
			'bottom': {
				xclass: 'iih.mr.qa.score.block.ScoreItemListBlock'
				
			}
		},

		actions: {
			'init': {
				xclass: 'iih.mr.qa.score.action.ScoreItemListSearchAction',
				url: 'qacustom/dropScoreItems',
				blocks: {
					top: 'top',
					bottom: 'bottom'
				}
			},
			'scoreViewready': {
				xclass: 'iih.mr.qa.score.action.ScoreViewreadyAction',
				blocks: {
					top: 'top',
					bottom: 'bottom'
				}
			},
			'qaScoreItemAdd': {
				xclass: 'iih.mr.qa.score.action.PopupScoreItemViewAction',
				blocks: {
					top: "top",
					bottom: 'bottom'
				}
			},
			'qaScoreItemDelete': {
				xclass: 'iih.mr.qa.score.action.QaScoreDeleteAction',
				url:'qacustom/dropScoreItem',
				blocks: {
					top: "top",
					bottom: 'bottom'
				}
			},
			'qaScoreComplete': {
				xclass: 'iih.mr.qa.score.action.QaScoreCompleteAction',
				url:'qacustom/completeScore',
				blocks: {
					top: "top",
					bottom: 'bottom'
				}
			},
			'qaScoreSearch': {
				xclass: 'iih.mr.qa.score.action.QaScoreSearchAction',
				url: 'qacustom/amrScore',
				//url: 'http://172.18.73.65:8083/scored/amr',
				blocks: {
					condition: 'properties',
					result: 'top'
				}
			},
			'itemClickAction':{
				xclass: 'iih.mr.qa.score.action.ScoreItemClickAction',
				blocks: {
					bottomcontent: 'bottom',
					topcontent:'top'	
				}
			}
			/*'qaScoreComplete': {
				xclass: 'iih.mr.qa.score.action.QaScoreCompleteAction',
				//url:'mr/qaCompleted/amr',
				blocks: {
					top: "top",
					bottom: 'bottom'
				}
			},
			'qaScoreSearch': {
				xclass: 'iih.mr.qa.score.action.QaScoreSearchAction',
				url: 'scored/amr',
				//url: 'http://172.18.73.65:8083/scored/amr',
				blocks: {
					condition: 'properties',
					result: 'top'
				}
			},
			'QaScoreDelete': {
				xclass: 'iih.mr.qa.score.action.QaScoreDeleteAction',
				url: 'qa/fault',
				blocks: {
					top: 'top',
					bottom: 'bottom'
				}
			}*/
		},

		chains: {
			'init':['init'],
			'qaScoreItemAdd':['qaScoreItemAdd'],
			'qaScoreItemDelete':['qaScoreItemDelete'],
			'qaScoreComplete':['qaScoreComplete'],
			'qaScoreSearch':['qaScoreSearch'],
			'itemClickAction':['itemClickAction'],
			'scoreViewready':['scoreViewready']
			
		},

		connections: {
			'top': [/*{
				event: 'afterrender',
				chain: 'init'
			},*/
			],
			'bottom': [{
				event: 'afterrender',
				chain: 'init'
			},{
				selector: 'xapgrid',
				event: 'viewready',
				chain: 'scoreViewready'
			},
			{
				selector : 'xapgrid',
				event: 'itemclick',
				chain: 'itemClickAction'
			},
			{
				selector : 'xapactioncolumn[name=qaScoreItemDelete]',
				event: 'clickEvent',
				chain: 'qaScoreItemDelete'
			}
			
			]
		}
	}
})
/** 
 * 进入评分工作页面
 * @author ：yao_lijie
 */
Ext.define('iih.mr.qa.score.action.TerminalScoreAction', {
extend:  Xap.ej.action.Action ,
	
	                                                 
	
	/*
	* @Override
	*/
	execute: function(context) {
		
		 var me = this;
		 
		 var owner = this.owner;
		 
		 var typeFlag = owner.typeFlag;
		 
		 if(typeFlag == '3'){
		 	return;
		 }
		 var topBlock = this.getBlock('result');
	        
	     var enGrid = topBlock.down('xapgrid');
	     
	     var selModel = enGrid.getSelectionModel();
	        
	     var record = selModel.getSelection()[0];
	     
	     //todo 判断是科室评分还是终末评分
	     var typeFlag = owner.typeFlag;
	     var workScreen = '';
	     var pageTitle = '';
	     if(typeFlag == '1'){
	    	 workScreen = iih.mr.qa.QaStatusGlobal.workScreenScore;
		     pageTitle = '终末评分';
	     }else if(typeFlag == '2'){
	    	 workScreen = iih.mr.qa.QaStatusGlobal.workScreenScoreDept;
		     pageTitle = '科室终末评分';
	     }
	     
	     if(record == undefined){
	    	 XapMessageBox.info('请选择患者');
         }else{
		     var viewConfig = {		    		
					patientRecord: record.data,
					workScreen:workScreen
		     }
		    var event = context.event;
	        if(event) {
	            var config = {
	                    pageCode: 'scoreworkview',
	                    pageTitle: pageTitle,
	                    viewConfig:  viewConfig
	                };
	            var canvas = Xap.getCanvas();
	            canvas.fireEvent("updatePatient",{patient:record.data});  // top患者信息刷新
	            canvas.fireEvent("addWorkPage",config);
	        };
         }
    }
});
Ext.define('iih.mr.qa.score.block.ScoreQAPatientListBlock',{
	extend :  Xap.ej.block.FormBlock ,

	alias:'widget.scoreqapatientlistblock',

	requires: [],
		   	
	border: 0,
	items: [{
		xtype: 'xapform',
	
	layout: {
		type: 'table',
		columns: 3,
		//width: 1024,
		tableAttrs: {
            border: 0,
            cellpadding: 0,
            cellspacing: 1,
            width: '100%',
            height:56
        },
        tdAttrs: {
            valign: 'left'
        }
	},
	items:[{
			xtype:'comboxgrid',
			margin:'10 0 10 0',
			name:'curDeptNm',
			method:'curDeptNm',
			url: 'organization/keyword',//科室查询的url
			fieldLabel:'科室',
			labelAlign : 'right',
			labelWidth : 50,
			listWidth:230,    //gird的宽度
			width:210,        //combo的宽度
			valueField : 'code',//科室编码的字段名
			displayField: 'name',//科室名称的字段名
			columns: [{              //grid的column配置
			   text: '科室编码',
			   dataIndex: 'code',
			   width:80
			},{
			   text: '科室',
			   flex:1,
			   dataIndex: 'name'
			}],
			callback:function(newValue,oldValue,record){  //在grid选择记录后的回调函数
				var view = this.up('scoreqapatientlistview');
				var initChain = view.getActionChain('search');
				initChain.execute({
					curDeptNm:newValue
				});
			    console.log(newValue);     //本次选择的科室编码
			    console.log(oldValue);     //上次选择的科室编码
			    console.log(record);       //本次选择的科室完整记录
			}
	},{
		xtype:'xaptextfield',
//		width:140,
        name:'amrNo',
//        labelWidth:60,
        labelAlign:'right',
        fieldLabel:'住院号',
        listeners:{
        	specialkey : function(field, e) {  
                if (e.getKey() == Ext.EventObject.ENTER) {  
                    var view = this.up('scoreqapatientlistview');
					var initChain = view.getActionChain('search');
					initChain.execute({}); 
                }  
            }
        }
	},{
		xtype:'xaptextfield',
//		width:140,
        name:'patientName',
//        labelWidth:60,
        labelAlign:'right',
        fieldLabel:'患者姓名',
        listeners:{
        	specialkey : function(field, e) {  
                if (e.getKey() == Ext.EventObject.ENTER) {  
                    var view = this.up('scoreqapatientlistview');
					var initChain = view.getActionChain('search');
					initChain.execute({}); 
                }  
            }
        }
	}/*,{
		xtype: 'xapradiogroup',
		border: 1,
		style: {
    		borderStyle: 'dashed'
		},
		method:'changeTime',
//		width:370,
		items: [
			{boxLabel: '入院24小时内', name: 'rcvTime', width:130, inputValue: '1'},
			{boxLabel: '入院7天内', name: 'rcvTime',width:110,  inputValue: '2'},
			{boxLabel: '全部', name: 'rcvTime', width:50, inputValue: '3', checked: true}
		]
	}*/]
	}]
})
var widthRate = 1
Ext.define('iih.mr.qa.score.block.ScoreQAPatientListGridBlock',{
	extend :  Xap.ej.block.FormBlock ,
	
	requires: [],

	alias:'widget.scoreqapatientlistgridblock',
	
	layout: 'fit',
    border: 0,
//    height:520,
    items:  [{
        xtype: 'xapgrid',
        ifSelect : true,
        selectBy: 'pk',
		tools:[{
           xtype:'button',
           margin:'0 10 0 0',
           name:'score',
           text:'评分',
           method:'score',
           disabled : true
       }],
		autoScroll:true,
       	pageSize : 25,
		pageShow : true,
  CM_JR_Record: [   
  				{ header: '就诊外键', dataIndex: 'pk',field: 'textfield',type: 'string',flex:1 ,hidden:true},
  				{  dataIndex: 'patientId',field: 'textfield',type: 'string',flex:1 ,hidden:true},
  				{ header: '床位号', dataIndex: 'currentBedCode',field: 'textfield',type: 'string',flex:1,hidden:true},
  				{  dataIndex: 'curMainDiNm',field: 'textfield',type: 'string',flex:1 ,hidden:true},
  				{  dataIndex: 'currentDeptIntoTime',field: 'textfield',type: 'string',flex:1 ,hidden:true},
  				{  header: '当前科室编码', dataIndex: 'currentDeptCode',field: 'textfield',type: 'string',flex:1 ,hidden:true},
  				{  header: '当前科室名称', dataIndex: 'currentDeptName',field: 'textfield',type: 'string',flex:1 ,hidden:true},
  				{  header: '主管医生编码', dataIndex: 'currentManageDoctorId',field: 'textfield',type: 'string',flex:1 ,hidden:true},
  				{  header: '主管医生名称', dataIndex: 'currentManageDoctorName',field: 'textfield',type: 'string',flex:1 ,hidden:true},
  				{ header:'病案状态编码', dataIndex: 'statusCode',field: 'textfield',type: 'string',flex:1,hidden:true},
                { header: '科室名称', dataIndex: 'currentDeptName',field: 'textfield',type: 'string',width:110  },
                { header: '住院号', dataIndex: 'amrNo',field: 'textfield',type: 'string',width:90},
                { header: '患者姓名', dataIndex: 'patientName',field: 'textfield',type: 'string',width:90},
                { header: '性别', dataIndex: 'sexName',field: 'textfield',type: 'string',width:70 },
                { header: '年龄', dataIndex: 'age',field: 'textfield',type: 'string',width:70},
                { header: '诊断', dataIndex: 'currentMainDiagnosisName',field: 'textfield',type: 'string',flex:1 },
                { header: '入院时间', dataIndex: 'receiveTime', flex:1,
					field: {
						xtype: 'datetimefield'
					},
					renderer: function(v){
						if(v){
							v = new Date(v);
							return Ext.util.Format.date(v, 'Y-m-d H:i');
						}
						return v;
					}
				 },
                { header: '出院时间', dataIndex: 'finishTime', flex:1 ,
					field: {
						xtype: 'datetimefield'
					},
					renderer: function(v){
						if(v){
							v = new Date(v);
							return Ext.util.Format.date(v, 'Y-m-d H:i');
						}
						return v;
					}
				 },
				
                
                { header: '经治医生', dataIndex: 'currentManageDoctorName',field: 'textfield',type: 'string',width:90  }
        ]
    }],  
    setData: function(data) {
    	var grid = this.down('xapgrid');
    	var dataList = data.dataList;
    	if(grid){
    		if(dataList){
	        	var totalList = {"total":data.total,"dataList":dataList};
	        	var pageSize = data.pageSize;
	        	if(pageSize == undefined || typeof(data.pageSize) == 'object'){
	        		grid.setPageData(totalList);
		    	}else{
		    		grid.setData(dataList);
		    	}
	        }else{
	        	var totalList = {"total":data.total,"dataList":dataList};
	        	grid.setPageData(totalList);
	        }
    	}
    }
})
Ext.define('iih.mr.qa.score.view.ScoreQAPatientListView',{
	extend :  Xap.ej.template.BaseTemplate ,

	alias:'widget.scoreqapatientlistview',

	          
		                           
	   	                                  
		                                
		                                       
		                                             
		                           
		                           
		                                                
		                                                    
		                                                        
		                                                     
		                                        
		                                            
	  

	layout: {
        type : 'vbox',
        align : 'stretch'
    },
	
	xapConfig: {
		blocks: {
			'condition':{
				xclass: 'iih.mr.qa.score.block.ScoreQAPatientListBlock',
				height:56
			},
			'toolbar': {
				xclass: 'Xap.ej.block.ToolbarBlock',
				items: [{
					xtype: 'button',
					iconCls: 'icon-Search',
					text: '查询',
					action: 'search'
				}]
			},
			'result':{
				xclass: 'iih.mr.qa.score.block.ScoreQAPatientListGridBlock',
				flex:1
			}
		},
		actions: {
			'search': {
				xclass: 'iih.mr.qa.score.action.ScoreQAPatientListSearchAction',
				url:'qa/terminal/amrs',
				blocks: {
					condition: 'condition',
					result: 'result'
				}
			},
			'judgeBtn':{
				xclass: 'iih.mr.qa.score.action.JudgeBtnAction',
				blocks: {
				    result: 'result'
				}
			},
			'scoreViewready': {
				xclass: 'iih.mr.qa.score.action.ScorePatientViewreadyAction',
				blocks: {
					condition: 'condition',
					result: 'result'
				}
			},
			'score': {//评分
				xclass: 'iih.mr.qa.score.action.TerminalScoreAction',
				blocks: {
					condition: 'condition',
					result: 'result'
				}
			}
		},

		chains: {
			'search': ['search'],
			'score':['score'],
			'judgeBtn':['judgeBtn'],
			'scoreViewready':['scoreViewready']
		},

		connections: {
			'condition':[{
                selector: 'comboxgrid[method=curDeptNm]',
                event: 'combochange',
                chain: 'search'
			},{
                selector: 'xaptextfield[name=amrNo]',
                event: 'blur',
                chain: 'search'
			},{
                selector: 'xaptextfield[name=patientName]',
                event: 'blur',
                chain: 'search'
			}],
			'result': [/*{
				event: 'afterrender',
				chain: 'search'
			},*/{
				selector: 'xapgrid',
				event: 'viewready',
				chain: 'scoreViewready'
			},{
				selector: 'xapgrid',
				event : 'itemclick',
				chain: 'judgeBtn'
			},{
				selector: 'xapgrid',
				event: 'itemdblclick',
				chain: 'score'
			},{//翻页操作
				selector: 'xapgrid',
				event: 'turnpage',
				chain: 'search'
			}],
			'toolbar': [{
				selector: 'button[action=search]',
				event: 'click',
				chain: 'search'
			}]
		}
	},
		
	initComponent : function() {
			this.callParent();
			this.addEvents("pageRefresh");//为视图添加刷新事件
			this.addListener('pageRefresh', function(){//添加监听事件
				 var properties = this.getLayer(Xap.ej.block.Layer.PROPERTIES);
		        var chain = this.getActionChain('search');
		        var block = this.getBlock('result');
//		        var pageSize = block.pageSize;
		        if(properties.data == undefined){
		        	 if(chain) {
		            chain.execute({});
		        	}
		        }else{
		        	var pageSize = properties.data.pageSize;
			        var pageNum = properties.data.pageNum;
			        if(chain) {
			            chain.execute({
			            	pageSize:pageSize,
			            	pageNum:pageNum
			            });
			        }
		        }
			});
		}
})
/** 
 * 点击记录，判断按钮状态
 * @author ：yao_lijie
 */
Ext.define('iih.mr.qa.terminal_qa_patient.action.JudgeAlreadyBtnAction', {
	extend:  Xap.ej.action.Action ,
	
	execute: function(context) {
		var block = this.getBlock('result');
		var grid = block.down('xapgrid[name=alreadySignGrid]');
		//终末质控进入终末质控按钮
		var inTerminal = grid.down('button[method=inTerminal]');
		inTerminal.setDisabled(false);
		var back = grid.down('button[name=back]');
		back.setDisabled(false);
	}
});

/** 
 * 点击记录，判断按钮状态
 * @author ：yao_lijie
 */
Ext.define('iih.mr.qa.terminal_qa_patient.action.JudgeBtnAction', {
	extend:  Xap.ej.action.Action ,
	
	execute: function(context) {
		var block = this.getBlock('result');
		var grid = block.down('xapgrid[name=waitSignGrid]');
		//终末审签按钮
		var sign = grid.down('button[method=sign]');
		sign.setDisabled(false);
	}
});

Ext.define('iih.mr.qa.terminal_qa_patient.action.JudgeStateAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	doExecute: function(context) {
	        this.prepareOperations(context);
	 },
	 prepareOperations: function(context) {
		var rb = this.getBlock('result');
		var eventNm = context.event.name;
		var grid;
		var qaTypeCode;
		if(eventNm == 'select'){
			grid = rb.down('xapgrid');
			qaTypeCode = iih.mr.qa.QaStatusGlobal.qaTypeCodeDept; //质控类型为科室质控
		}else if(eventNm == 'itemclick'){
			grid = rb.down('xapgrid[name=alreadySignGrid]');
			qaTypeCode = iih.mr.qa.QaStatusGlobal.qaTypeCodeTerminal; //质控类型为终末质控
		}
		rb.eventNm = eventNm;
		 var rs=grid.getSelectionModel().getSelection();
         var pk = rs[0].data.pk;    //就诊外键
         var statusCode = rs[0].data.statusCode;    //病案状态
		 var operations = context.operations;
		 var url = this.url;
//		 url += '/'+pk;
		 url += '?' + "pk=" + pk + "&qaTypeCode="+ qaTypeCode;
		 var METHODS = this.getInvocationMethods();
         var mclass = null;
		 var operation = {
			url: url,
    		mclass: null,
    		method: 'get',
    		scope: this,
    		success: this.onSuccess
		};
		operations.length = 0;
		operations.push(operation);
	},
	onSuccess : function(operation) {
		var block = this.getBlock('result');
		var eventNm = block.eventNm;
		var grid;
		var finishBtn;
		var inBtn;
		if(eventNm == 'select'){		//判断是科室质控的单击还是终末质控的单击
			grid = block.down('xapgrid');
			inBtn = grid.down('button[name=inDept]');
			finishBtn = grid.down('button[name=finishDept]');
		}else if(eventNm == 'itemclick'){
			grid = block.down('xapgrid[name=alreadySignGrid]');
			inBtn = grid.down('button[name=inTerminal]');
			finishBtn = grid.down('button[name=finishTerminal]');
		}
		var back = grid.down('button[name=back]');
        var m = operation.result;
        if(m=="1"){
        	back.setDisabled(false);
        	finishBtn.setDisabled(true);
        	inBtn.setDisabled(false);
        }else{
        	back.setDisabled(false);
        	finishBtn.setDisabled(false);
        	inBtn.setDisabled(false);
        } 
	}     
});

Ext.define('iih.mr.qa.terminal_qa_patient.action.TerminalQAPatientListSearchAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override
	*/
	execute: function(context) {
		if(context.event != undefined && context.event.name=='combochange' && context.event.from.rawValue != ""){
			return;
		}
    	var owner = this.getOwner();
    	this.showLoading();
    	var block = this.getBlock('result');
        var tabpanel = block.down('xaptabpanel');
        var grid = tabpanel.getActiveTab();
        var groupType = grid.groupType;
        
        if(groupType == '2'){
        	//打回按钮
			var back = grid.down('button[method=back]');
			back.on('click',function(btn){
			XapMessageBox.confirm2 (
			'确认打回？',
			function(btn){
				if(btn == 'yes'){
					if(context.event == undefined){
						context.name = 'terminalclick'; //点击完成本次质控后，点击完成
					}else{
						context.event.name='terminalclick';
					}
					var backChain = owner.getActionChain("back");
					backChain.execute(context);
					}
				});
			});
		
			//进入终末质控按钮
			var inTerminal = grid.down('button[method=inTerminal]');
			inTerminal.on('click',function(btn){
				var inTerminalChain = owner.getActionChain("inTerminal");
				inTerminalChain.execute(context);
			});
        	
        	/*//完成终末质控按钮
			var finishTerminal = grid.down('button[name=finishTerminal]');
			finishTerminal.on('click',function(btn){
				context.event.name='finishTerminalClick';
				var finishTerminalChain = owner.getActionChain("finishTerminal");
				finishTerminalChain.execute(context);
			});*/
        }
	
    	var pageNum ;
    	var pageSize ;
    	if(context.pageSize == undefined){
    		pageSize = context.pageSize;
    		pageNum = context.pageNum;
    	}else{
    		pageNum = context.event.arguments[0]; 
			pageSize = context.event.arguments[1]; 
    	}
		block.pageSize = pageSize;
		block.groupType = groupType;
		var data = {
			pageNum : pageNum,
			pageSize : pageSize,
			groupType : groupType,
			curDeptNm : context.curDeptNm
		}
		
		var owner = this.getOwner();
        var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
        properties.setData({
            parentWindow: context.parentWindow,
            sourceView: context.sourceView,
            pageSize:pageSize,
            pageNum:pageNum,
            groupType:groupType
        });
    	var rs = context.rs;
    	this.rs = rs;
    	var operations = context.operations;
    	if(!operations) {
    		return;
    	}
    	this.prepareOperations(operations,data);
    },
    
    prepareOperations: function(operations,data) {
    	var block = this.getBlock('result');
        var tabpanel = block.down('xaptabpanel');
        var grid = tabpanel.getActiveTab();
//        var curDeptNm = grid.down('comboxgrid[method=curDeptNm]')
//        var value = curDeptNm.value;
        var curDeptNm;
        if(data.curDeptNm != undefined){
    		curDeptNm = data.curDeptNm;
    	}else{
    		curDeptNm = grid.down('xapform').getData().curDeptNm;
    	}
    	var amrNo = grid.down('xapform').getData().amrNo;
    	var patientName = grid.down('xapform').getData().patientName;
    	var owner = this.getOwner();
    	var typeFlag = owner.typeFlag;
    	var amrStatus;
    	if(typeFlag == '2' && data.groupType == '1'){
    		amrStatus = iih.mr.qa.QaStatusGlobal.qaDeptScored;//待审签 暂时不做科室质控，病案状态为已科室评分
    	}else if(typeFlag == '2' && data.groupType == '2'){
    		amrStatus = iih.mr.qa.QaStatusGlobal.qaStarted;//已审签
    	}
    	var qaTypeCode = iih.mr.qa.QaStatusGlobal.qaTypeCodeTerminal; //质控类型为终末质控
//        var block = this.getBlock('condition');
//    	var condition = block.getData();
        var url = this.url;
        var pageNum = data.pageNum; 
		var pageSize = data.pageSize;
//        if(condition) {
//	        var qs = Ext.Object.toQueryString(condition);
	        if(data.pageSize == undefined || typeof(data.pageSize)=='object'){
        		if(curDeptNm) {
        			url += '?curDeptNm=' + curDeptNm + "&amrNo=" + amrNo+ "&patientName=" + patientName +"&amrStatus=" + amrStatus+"&qaTypeCode=" +qaTypeCode;
        		}else{
        			url += '?' + "amrStatus=" + amrStatus+"&qaTypeCode=" +qaTypeCode + "&amrNo=" + amrNo+ "&patientName=" + patientName;
        		}
	    	}else{
	    		if(curDeptNm) {
	        		url += '?curDeptNm=' + curDeptNm + "&amrNo=" + amrNo+ "&patientName=" + patientName +"&amrStatus=" + amrStatus +"&qaTypeCode=" +qaTypeCode + "&pageNum="+ pageNum +"&pageSize="+ pageSize;
	    		}else{
	    			url +='?' +"amrStatus=" + amrStatus +"&qaTypeCode=" + qaTypeCode + "&amrNo=" + amrNo+ "&patientName=" + patientName + "&pageNum="+ pageNum +"&pageSize="+ pageSize;
	    		}
	    	}
            /*if(qs) {
                	url += '?' + qs+"&workScreen="+iih.mr.qa.QaStatusGlobal.workScreenWorkTerminal;
            }*/
            console.log(url);
//        }
        var mclass = null;
        /*if(block.getModelClass) {
            mclass = block.getModelClass();
        }*/
    	var operation = {
            url: url,
    		mclass: mclass,
    		method: 'get',
//    		condition: condition,
    		scope: this,
    		success: this.onSuccess
    	};
    	operations.length = 0;
    	operations.push(operation);
    },

    onSuccess: function(operation) {
    	var me=this;
    	var view = this.getOwner();
        var block = this.getBlock('result');
        var pageSize = block.pageSize;
        var groupType = block.groupType;
        var m = operation.result;
        m.pageSize = pageSize;
        m.groupType = groupType;
        // TODO 数据格式就这样了？
        if(m instanceof Ext.data.Model) {
            block.setData({
                mclass: operation.mclass,
                data: m.getData(true)
            });
        }
        else {
        	block.setData(m);
        	console.log(m);
        }
        
        //判断按钮状态
        var grid;
        var rs;
        if(groupType == '1'){
        	grid = block.down('xapgrid[name=waitSignGrid]');
        	if(grid){
        		rs = grid.getSelectionModel().getSelection();
		    	//终末审签按钮
				var sign = grid.down('button[method=sign]');
		    	if(rs.length > 0){
					sign.setDisabled(false);
				}else{
					sign.setDisabled(true);
				} 
        	}
        }else if(groupType == '2'){
        	grid = block.down('xapgrid[name=alreadySignGrid]');
        	if(grid){
        		rs = grid.getSelectionModel().getSelection();
		    	var back = grid.down('button[name=back]');
		    	var inBtn = grid.down('button[name=inTerminal]');
//				var finishBtn = grid.down('button[name=finishTerminal]');
		    	if(rs.length > 0){
					back.setDisabled(false);
					inBtn.setDisabled(false);
//					finishBtn.setDisabled(false);
					/*var judgeStateChain = view.getActionChain('judgeState');
					var event = {name:'itemclick'};
					judgeStateChain.execute({
						event:event
					});*/
				}else{
					back.setDisabled(true);
					inBtn.setDisabled(true);
//					finishBtn.setDisabled(true);
				} 
        	}
        }
        /*if(me.rs != undefined){
        	var enPk=me.rs.data.pk;
        	var grid = block.down('xapgrid');
	        var gridData=grid.getData();
	        var rowIndex= 0;
	        for(var i=0;i<gridData.length;i++){
	        	var gridEnPkb=gridData[i].pk;
	        	if(enPk == gridEnPkb){
	        		rowIndex=i;
	        		break;
	        	}
	        }
        	var grid = block.down('xapgrid');
        	grid.getSelectionModel().select(rowIndex);
        	var openTerminal = grid.down('button[name=openTerminal]');
	        var inTerminal = grid.down('button[name=inTerminal]')
	        openTerminal.setDisabled(true);
	        inTerminal.setDisabled(false);
        }*/
    }
});

Ext.define('iih.mr.qa.terminal_qa_patient.action.TerminalSignAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override
	*/
	execute: function(context) {
        var rb = this.getBlock('result');
		var grid = rb.down('xapgrid[name=waitSignGrid]');
		var rs = grid.getSelectionModel().getSelection();
        var select = [];
        if (rs.length > 0) {
            for (i = 0; i < rs.length; i++) {
            	select[i] = rs[i].data;
            }
            var data = {'datas':select};
            var operations = context.operations;
	    	if(!operations) {
	    		return;
	    	}
	    	operations.length = 0;
	    	
	    	this.prepareOperations(operations,data);
        }else{
            XapMessageBox.info("请选择患者！");
        };
	},
	
	prepareOperations: function(operations,data) {
        var url = this.url;
        var METHODS = this.getInvocationMethods();
        var mclass = null;
    	var operation = {
            url: url,
            method: 'put',
    		data:data,
    		scope: this,
    		success: this.onSuccess
    	};
    	operations.push(operation);
    },
	onSuccess : function(operation) {
		var view = this.getOwner();
		var block = this.getBlock('result');
		var grid = block.down('xapgrid[name=waitSignGrid]');
		var rs = grid.getSelectionModel().getSelection()[0];
		var pageSize = block.pageSize;
		var initChain = view.getActionChain('search');
		initChain.execute({
			rs:rs,
			pageSize:pageSize
		});
	}     
});

/** 
 * 终末质控页面加载完成后查找到tools上的相关按钮进行事件的监听
 * @extends Xap.ej.action.Action
 * @author ：yao_lijie
 */

Ext.define('iih.mr.qa.terminal_qa_patient.action.TerminalViewreadyAction', {
	extend:  Xap.ej.action.Action ,
	
	requires:[],
	      
	execute: function(context){
		var me = this;
		
	    var owner = this.getOwner();
	    
	    var typeFlag = owner.typeFlag;
	    
	    //获取就诊一览的 block
		var resultBlock = this.getBlock('result');	
		var waitSignGrid = resultBlock.down('xapgrid[name=waitSignGrid]');
		//var alreadySignGrid = resultBlock.down('xapgrid[name=alreadySignGrid]');
		
		//签收按钮
		var sign = waitSignGrid.down('button[method=sign]');
		sign.on('click',function(btn){
			context.event.name='click';
			var signChain = me.getOwner().getActionChain("sign");
			signChain.execute(context);
		});
		
		/*//打回按钮
		var back = waitSignGrid.down('button[method=back]');
		back.on('click',function(btn){
			context.event.name='click';
			var backChain = me.getOwner().getActionChain("back");
			backChain.execute(context);
		});
		
		//进入终末质控按钮
		var inTerminal = resultBlock.down('button[method=inTerminal]');
		inTerminal.on('click',function(btn){
			context.event.name='click';
			var inTerminalChain = me.getOwner().getActionChain("inTerminal");
			inTerminalChain.execute(context);
		});*/

/*		//完成终末质控按钮
		var finishTerminal = alreadySignGrid.down('button[name=finishTerminal]');
		finishTerminal.on('click',function(btn){
			context.event.name='click';
			var finishTerminalChain = me.getOwner().getActionChain("finishTerminal");
			finishTerminalChain.execute(context);
		});*/
		
		/*if(typeFlag == '2'){
			sign.setVisible(false); 
			back.setVisible(true); 
			inTerminal.setVisible(true); 
			finishTerminal.setVisible(true); 
			//terminalGrid.getView().checkboxShow = false;
			terminalGrid.refresh();
		}else if(typeFlag == '3'){
			sign.setVisible(true); 
			back.setVisible(false); 
			inTerminal.setVisible(false); 
			finishTerminal.setVisible(false); 
			//terminalGrid.checkboxShow=true;
			terminalGrid.refresh();
		}*/
	}
	
})
Ext.define('iih.mr.qa.terminal_qa_patient.block.TerminalQAPatientListBlock',{
	extend :  Xap.ej.block.FormBlock ,

	alias:'widget.terminalqapatientlistblock',

	                                        
		   	
	layout: 'fit',

	border: 0,
	items: [{
        xtype:'xaptabpanel',
//        layout: '',
        border:false, 
        items:[{
            title:'待签收患者一览',
            groupType:1,
            name:'waitSign',
            xtype:'xappanel',
           layout: {
			    type : 'vbox',
			    align : 'stretch'
			},
            items:[{
            xtype:'xapform',
            height:76,
            layout: {
				type: 'table',
				columns: 3,
				//width: 1024,
				tableAttrs: {
		            border: 0,
		            cellpadding: 0,
		            cellspacing: 1,
		            width: '100%',
		            height:56
		        },
		        tdAttrs: {
		            valign: 'left'
		        }
			},
            items:[{
			xtype:'comboxgrid',
			margin:'10 0 10 0',
			name:'curDeptNm',
			method:'curDeptNmWait',
			url: 'organization/keyword',//科室查询的url
			fieldLabel:'科室',
			labelAlign : 'right',
			labelWidth : 50,
			listWidth:230,    //gird的宽度
			width:210,        //combo的宽度
			valueField : 'code',//科室编码的字段名
			displayField: 'name',//科室名称的字段名
			columns: [{              //grid的column配置
			   text: '科室编码',
			   dataIndex: 'code',
			   width:80
			},{
			   text: '科室',
			   flex:1,
			   dataIndex: 'name'
			}],
			callback:function(newValue,oldValue,record){  //在grid选择记录后的回调函数
				var view = this.up('terminalqapatientlistview');
				var initChain = view.getActionChain('search');
				initChain.execute({
					curDeptNm:newValue
				});
			    console.log(newValue);     //本次选择的科室编码
			    console.log(oldValue);     //上次选择的科室编码
			    console.log(record);       //本次选择的科室完整记录
			}
            },{
				xtype:'xaptextfield',
		        name:'amrNo',
		        method:'amrNoWait',
		        labelWidth:60,
		        labelAlign:'right',
		        fieldLabel:'住院号',
		        listeners:{
		        	specialkey : function(field, e) {  
		                if (e.getKey() == Ext.EventObject.ENTER) {  
		                    var view = this.up('terminalqapatientlistview');
							var initChain = view.getActionChain('search');
							initChain.execute({}); 
		                }  
		            }
		        }
			},{
				xtype:'xaptextfield',
		        name:'patientName',
		        method:'patientNameWait',
		        labelWidth:60,
		        labelAlign:'right',
		        fieldLabel:'患者姓名',
		        listeners:{
		        	specialkey : function(field, e) {  
		                if (e.getKey() == Ext.EventObject.ENTER) {  
		                    var view = this.up('terminalqapatientlistview');
							var initChain = view.getActionChain('search');
							initChain.execute({}); 
		                }  
		            }
		        }
			},{
				xtype:'xaptoolbarblock',
				method:'searchWait',
				colspan:3,
				items: [{
					xtype: 'button',
					text: '查询',
					iconCls: 'icon-Search',
					action: 'searchWait'
				}]
			}]
            
			},{
			    xtype: 'xapgrid',
			    name:'waitSignGrid',
			    border: 0,
			    ifSelect : true,
			    selectBy: 'pk',
			    flex:1,
				tools:[{
			       xtype:'button',
			       name:'sign',
			       text:'签收',
			       method:'sign',
           		   disabled : true
			   },{
				   xtype: 'label',		              
			       width:10
			   }],
			    selType:'checkboxmodel',
				autoScroll:true,
			   	pageSize : 25,
				pageShow : true
			}]
        },{
            title:'已签收患者一览',
            name:'alreadySign',
            xtype:'xappanel',
            groupType:2,
            layout: {
			    type : 'vbox',
			    align : 'stretch'
			},
            items:[{
            xtype:'xapform',
            height:76,
            layout: {
				type: 'table',
				columns: 3,
				//width: 1024,
				tableAttrs: {
		            border: 0,
		            cellpadding: 0,
		            cellspacing: 1,
		            width: '100%',
		            height:56
		        },
		        tdAttrs: {
		            valign: 'left'
		        }
			},
            items:[{
			xtype:'comboxgrid',
			margin:'10 0 10 0',
			name:'curDeptNm',
			method:'curDeptNmAlready',
			url: 'organization/keyword',//科室查询的url
			fieldLabel:'科室',
			labelAlign : 'right',
			labelWidth : 50,
			listWidth:230,    //gird的宽度
			width:210,        //combo的宽度
			valueField : 'code',//科室编码的字段名
			displayField: 'name',//科室名称的字段名
			columns: [{              //grid的column配置
			   text: '科室编码',
			   dataIndex: 'code',
			   width:80
			},{
			   text: '科室',
			   flex:1,
			   dataIndex: 'name'
			}],
			callback:function(newValue,oldValue,record){  //在grid选择记录后的回调函数
				var view = this.up('terminalqapatientlistview');
				var initChain = view.getActionChain('search');
				initChain.execute({
					curDeptNm:newValue
				});
			    console.log(newValue);     //本次选择的科室编码
			    console.log(oldValue);     //上次选择的科室编码
			    console.log(record);       //本次选择的科室完整记录
			}
			},{
				xtype:'xaptextfield',
		        name:'amrNo',
		        method:'amrNoAlready',
		        labelWidth:60,
		        labelAlign:'right',
		        fieldLabel:'住院号',
		        listeners:{
		        	specialkey : function(field, e) {  
		                if (e.getKey() == Ext.EventObject.ENTER) {  
		                    var view = this.up('terminalqapatientlistview');
							var initChain = view.getActionChain('search');
							initChain.execute({}); 
		                }  
		            }
		        }
			},{
				xtype:'xaptextfield',
		        name:'patientName',
		        method:'patientNameAlready',
		        labelWidth:60,
		        labelAlign:'right',
		        fieldLabel:'患者姓名',
		        listeners:{
		        	specialkey : function(field, e) {  
		                if (e.getKey() == Ext.EventObject.ENTER) {  
		                    var view = this.up('terminalqapatientlistview');
							var initChain = view.getActionChain('search');
							initChain.execute({}); 
		                }  
		            }
		        }
		        },{
				xtype:'xaptoolbarblock',
				colspan:3,
				items: [{
					xtype: 'button',
					text: '查询',
					iconCls: 'icon-Search',
					action: 'searchAlready'
				}]
			}]
			},{
			    xtype: 'xapgrid',
			    name:'alreadySignGrid',
			    border: 0,
			    ifSelect : true,
			    selectBy: 'pk',
			    flex:1,
//			    height:520,
				tools:[{
		           xtype:'button',
		           name:'back',
		           text:'打回',
		           method:'back',
           		   disabled : true
       			},{
				   xtype: 'label',		              
			       width:10
			   },{
			       xtype:'button',
			       name:'inTerminal',
			       iconCls: 'icon-inTerminal',
			       text:'进入终末质控',
			       method:'inTerminal',
           		   disabled : true
			   }/*,{
				   xtype: 'label',		              
			       width:10
			   },{
			       xtype:'button',
			       name:'finishTerminal',
			       iconCls: 'icon-Open',
			       text:'完成终末质控',
			       method:'finishTerminal',
           		   disabled : true
       		}*/],
				autoScroll:true,
			   	pageSize : 25,
				pageShow : true
			}]
        }]
    }],
    
     initComponent: function() {
        var tabItems = this.items[0].items;
        tabItems[0].items[1].CM_JR_Record = this.createWaitGridColumn();
        tabItems[1].items[1].CM_JR_Record = this.createGridColumn();
        this.callParent();
    },
    
    createWaitGridColumn: function() {
        var columnConfig = [   
  				{ header: '就诊外键', dataIndex: 'pk',field: 'textfield',type: 'string',flex:1 ,hidden:true},
  				{  dataIndex: 'patientId',field: 'textfield',type: 'string',flex:1 ,hidden:true},
  				{ header: '床位号', dataIndex: 'currentBedCode',field: 'textfield',type: 'string',flex:1,hidden:true},
  				{  dataIndex: 'curMainDiNm',field: 'textfield',type: 'string',flex:1 ,hidden:true},
  				{  dataIndex: 'currentDeptIntoTime',field: 'textfield',type: 'string',flex:1 ,hidden:true},
  				{  header: '当前科室编码', dataIndex: 'currentDeptCode',field: 'textfield',type: 'string',flex:1 ,hidden:true},
  				{  header: '当前科室名称', dataIndex: 'currentDeptName',field: 'textfield',type: 'string',flex:1 ,hidden:true},
  				{  header: '主管医生编码', dataIndex: 'currentManageDoctorId',field: 'textfield',type: 'string',flex:1 ,hidden:true},
  				{  header: '主管医生名称', dataIndex: 'currentManageDoctorName',field: 'textfield',type: 'string',flex:1 ,hidden:true},
  				{ header:'病案状态编码', dataIndex: 'statusCode',field: 'textfield',type: 'string',flex:1,hidden:true},
                { header: '住院号', dataIndex: 'amrNo',field: 'textfield',type: 'string',width:100},
                { header: '患者姓名', dataIndex: 'patientName',field: 'textfield',type: 'string',width:100},
                { header: '性别', dataIndex: 'sexName',field: 'textfield',type: 'string',width:70 },
                { header: '年龄', dataIndex: 'age',field: 'textfield',type: 'string',width:70},
                { header: '住院科室', dataIndex: 'currentDeptName',field: 'textfield',type: 'string',width:110  },
                { header: '入院时间', dataIndex: 'receiveTime',xtype: 'xapdatecolumn',flex:1},
                { header: '出院时间', dataIndex: 'finishTime',xtype: 'xapdatecolumn',flex:1},
				{ header: '主诊断', dataIndex: 'currentMainDiagnosisName',field: 'textfield',type: 'string',flex:1 },
                { header: '手术标识', dataIndex: 'surgeryFlag',name: 'surgeryFlag',width:80 ,
					renderer:function(value,metaData,record){
			        if(value == 1){
			        	return "<div style='text-align:center'><label style='align:center'>√</label></div>";
			        }else{
			        	return null;
			        	}
					}
				}
        ];
        return columnConfig;
    },
    
    createGridColumn: function() {
        var columnConfig = [   
        		{xtype:'xapactioncolumn',text:'操作',width : 60,
				items: [
					/*{text:'打回',
						handler: function(view,rowIndex,colIndex,e,item ,record) {
							var owner = this.up('terminalqapatientlistview');
							XapMessageBox.confirm2 (
							'确认打回？',
							function(btn){
								if(btn == 'yes'){
									var backChain = owner.getActionChain("back");
									backChain.execute({
										record:record
									});
								}
							});
						}	
					},*/
					{text:'完成',
						isDisabled : function(view,rowIndex,colIndex,item ,record) {
							var btnFlag = record.data.btnFlag;
							if(btnFlag == '1'){
								return true;
							}else{
								return false
							}
						},
						handler: function(view,rowIndex,colIndex,e,item ,record) {
							var owner = this.up('terminalqapatientlistview');
							var finishDeptChain = owner.getActionChain("finishTerminal");
							finishDeptChain.execute({
								record:record,
								eventNm:'finishTerminalClick'
							});
						}	
					}
				]
			},
			{ header : '按钮状态',dataIndex : 'btnFlag', field: 'textfield',type: 'string',hidden:true },
			{ header: '就诊外键', dataIndex: 'pk',field: 'textfield',type: 'string',flex:1 ,hidden:true},
			{  dataIndex: 'patientId',field: 'textfield',type: 'string',flex:1 ,hidden:true},
			{ header: '床位号', dataIndex: 'currentBedCode',field: 'textfield',type: 'string',flex:1,hidden:true},
			{  dataIndex: 'curMainDiNm',field: 'textfield',type: 'string',flex:1 ,hidden:true},
			{  dataIndex: 'currentDeptIntoTime',field: 'textfield',type: 'string',flex:1 ,hidden:true},
			{  header: '当前科室编码', dataIndex: 'currentDeptCode',field: 'textfield',type: 'string',flex:1 ,hidden:true},
			{  header: '当前科室名称', dataIndex: 'currentDeptName',field: 'textfield',type: 'string',flex:1 ,hidden:true},
			{  header: '主管医生编码', dataIndex: 'currentManageDoctorId',field: 'textfield',type: 'string',flex:1 ,hidden:true},
			{  header: '主管医生名称', dataIndex: 'currentManageDoctorName',field: 'textfield',type: 'string',flex:1 ,hidden:true},
			{ header:'病案状态编码', dataIndex: 'statusCode',field: 'textfield',type: 'string',flex:1,hidden:true},
            {  header: '标记', dataIndex: 'qaFlag',name: 'qaFlag',width:50,
			renderer:function(value,metaData,record){
		        if(value == 1){
		        	return "<label>★</label>";
		        }else{
		        	return null;
		        	}
				}
			},
            { header: '住院号', dataIndex: 'amrNo',field: 'textfield',type: 'string',width:100},
            { header: '患者姓名', dataIndex: 'patientName',field: 'textfield',type: 'string',width:100},
            { header: '性别', dataIndex: 'sexName',field: 'textfield',type: 'string',width:70 },
            { header: '年龄', dataIndex: 'age',field: 'textfield',type: 'string',width:70},
            { header: '住院科室', dataIndex: 'currentDeptName',field: 'textfield',type: 'string',width:110  },
            { header: '入院时间', dataIndex: 'receiveTime',xtype: 'xapdatecolumn',flex:1},
            { header: '出院时间', dataIndex: 'finishTime',xtype: 'xapdatecolumn',flex:1},
			{ header: '主诊断', dataIndex: 'currentMainDiagnosisName',field: 'textfield',type: 'string',flex:1 },
            { header: '手术标识', dataIndex: 'surgeryFlag',name: 'surgeryFlag',width:80 ,
				renderer:function(value,metaData,record){
		        if(value == 1){
		        	return "<div style='text-align:center'><label style='align:center'>√</label></div>";
		        }else{
		        	return null;
		        	}
				}
			},
            { header: '缺陷数', dataIndex: 'faultTotal',field: 'textfield',type: 'int',width:60  }
        ];
        return columnConfig;
    },
    
    setData : function(data) {
    	var grid;
    	if(data.groupType == '1'){
    		 grid = this.down('xapgrid[name=waitSignGrid]');
    	}else if(data.groupType == '2'){
    		 grid = this.down('xapgrid[name=alreadySignGrid]');
    	}
    	var dataList = data.dataList;
    	if(grid){
    		if(dataList){
        	var totalList = {"total":data.total,"dataList":dataList};
        	var pageSize = data.pageSize;
        	if(pageSize == undefined || typeof(data.pageSize) == 'object'){
        		grid.setPageData(totalList);
	    	}else{
	    		grid.setData(dataList);
	    	}
        }else{
        	var totalList = {"total":data.total,"dataList":dataList};
        	grid.setPageData(totalList);
        }
    	}
    }
})
Ext.define('iih.mr.qa.terminal_qa_patient.view.TerminalQAPatientListView',{
	extend :  Xap.ej.template.BaseTemplate ,

	alias:'widget.terminalqapatientlistview',

	          
		                           
	   	                                  
		                                
		                                       
		                                             
		                           
		                           
		                                                                 
		                                                               
		                                                                         
		                                                      
		                                                        
		                                                          
		                                                          
		                                                     
		                                                           
	  

	layout: {
        type : 'fit'
    },
	
	xapConfig: {
		blocks: {
			/*'condition':{
				xclass: 'iih.mr.qa.terminal_qa_patient.block.TerminalQAPatientListBlock'
			},
			'result':{
				xclass: 'iih.mr.qa.terminal_qa_patient.block.TerminalQAPatientListGridBlock'
			}*/
			'result': {
                xclass: 'iih.mr.qa.terminal_qa_patient.block.TerminalQAPatientListBlock',
                flex:1
            }
		},
		actions: {
			'search': {
				xclass: 'iih.mr.qa.terminal_qa_patient.action.TerminalQAPatientListSearchAction',
				url:'qa/terminal/amrs',
				blocks: {
					condition: 'condition',
					result: 'result'
				}
			},
			'terminalViewready': {
				xclass: 'iih.mr.qa.terminal_qa_patient.action.TerminalViewreadyAction',
				blocks: {
					condition: 'condition',
					result: 'result'
				}
			},
			/*'judgeState': { //判断表格中按钮的状态
				xclass: 'iih.mr.qa.terminal_qa_patient.action.JudgeStateAction',
				url:'qa/judgeState/amr',
				blocks: {
					condition: 'condition',
					result: 'result'
				}
			},*/
			'sign': {//签收
				xclass: 'iih.mr.qa.terminal_qa_patient.action.TerminalSignAction',
				url:'qa/qaStarted/amr',
				blocks: {
					condition: 'condition',
					result: 'result'
				}
			},
			'inTerminal': {
				xclass: 'iih.mr.qa.process_qa_work.action.ProcessWorkAction',
				blocks: {
					condition: 'condition',
					result: 'result'
				}
			},
			'judgeBtn':{//判断签收按钮状态
				xclass: 'iih.mr.qa.terminal_qa_patient.action.JudgeBtnAction',
				blocks: {
				    result: 'result'
				}
			},
			'judgeAlreadyBtn': { //判断进入终末质控按钮的状态
				xclass: 'iih.mr.qa.terminal_qa_patient.action.JudgeAlreadyBtnAction',
				blocks: {
					condition: 'condition',
					result: 'result'
				}
			},
			'back': {//打回
				xclass: 'iih.mr.qa.terminal_qa_patient.action.TerminalBackAction',
				url:'qa/back/amr',
				blocks: {
					condition: 'condition',
					result: 'result'
				}
			},
			'inTerminal': { //进入终末质控
				xclass: 'iih.mr.qa.process_qa_work.action.ProcessWorkAction',
				blocks: {
					condition: 'condition',
					result: 'result'
				}
			},
			'finishTerminal': {//完成终末质控
				xclass: 'iih.mr.qa.terminal_qa_patient.action.TerminalFinishAction',
				url:'qa/qaCompleted/amr',
				blocks: {
					condition: 'condition',
					result: 'result'
				}
			}
		},

		chains: {
			'search': ['search'],
			'judgeBtn': ['judgeBtn'],
			'judgeAlreadyBtn':['judgeAlreadyBtn'],
//			'judgeState': ['judgeState'],
			'sign':['sign'],
			'back':['back'],
			'inTerminal':['inTerminal'],
			'finishTerminal':['finishTerminal'],
			'terminalViewready':['terminalViewready']
		},

		connections: {
			'result': [/*{
				event: 'afterrender',
				chain: 'search'
			},*/{
                selector: 'comboxgrid[method=curDeptNmWait]',
                event: 'combochange',
                chain: 'search'
			},{
                selector: 'button[action=searchWait]',
                event: 'click',
                chain: 'search'
			},{
                selector: 'comboxgrid[method=curDeptNmAlready]',
                event: 'combochange',
                chain: 'search'
			},{
                selector: 'button[action=searchAlready]',
                event: 'click',
                chain: 'search'
			},{
				selector: 'xapgrid',
				event: 'viewready',
				chain: 'terminalViewready'
			},{
				selector: 'xapgrid[name=waitSignGrid]',
				event: 'itemclick',
				chain: 'judgeBtn'
			},{
				selector: 'xapgrid[name=alreadySignGrid]',
				event: 'itemclick',
				chain: 'judgeAlreadyBtn'
			},{
				selector: 'xapgrid[name=alreadySignGrid]',
				event: 'itemdblclick',
				chain: 'inTerminal'
			},{//翻页操作
				selector: 'xapgrid',
				event: 'turnpage',
				chain: 'search'
			},{
                selector: 'xaptabpanel',
                event: 'tabchange',
                chain: 'search'
            }]
		}
	},
		
	initComponent : function() {
			this.callParent();
			this.addEvents("pageRefresh");//为视图添加刷新事件
			this.addListener('pageRefresh', function(){//添加监听事件
				 var properties = this.getLayer(Xap.ej.block.Layer.PROPERTIES);
		        var chain = this.getActionChain('search');
		        var block = this.getBlock('result');
//		        var pageSize = block.pageSize;
		        if(properties.data == undefined){
		        	 if(chain) {
		            chain.execute({});
		        	}
		        }else{
		        	var pageSize = properties.data.pageSize;
			        var pageNum = properties.data.pageNum;
			        if(chain) {
			            chain.execute({
			            	pageSize:pageSize,
			            	pageNum:pageNum
			            });
			        }
		        }
			});
		}
})
Ext.define('iih.mr.tm.bas.action.ActivatedBasTemplateListAction', {
    extend:  Xap.ej.action.ServiceInvocation ,  
    
    doExecute: function(context) {
    	console.log('--------------------- ActivatedBasTemplateListAction -----------------------------------');
        var grid = this.getBlock('result');//.down('bastemplatelistblock');
        var rb = grid.getSelectionModel().getSelection();         
        //模板id//rb instanceof Array
        if(rb.length == 0){
            var message = '请选模板进行启用~~~';
            XapMessageBox.info(message);
        }else{
            var code =rb[0].data.code;
            console.log(rb);
            var length = rb.length;
            var dataList =[];
            for(var i=0;i<length;i++){
            	dataList.push(rb[i].data.code);
            }
            //参照接口文件，多条记录启用
            var data ={"ids":dataList};
            this.prepareOperations(context.operations,data);
        }
    },

    prepareOperations: function(operations,data) {       
        var url = this.url;
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_CREATE,
            condition: null,
            data:data,
            scope: this,
            success: this.onSuccess
            // fail: this.onFail
        };
        operations.push(operation);
    },
    
    onSuccess: function(operation) {
        var owner = this.getOwner();
        var chain = owner.getActionChain('init');
        if(!chain) {
            //如果没找到chain执行结果
            console.log("faile");
            console.log(chain);            
            //chain = owner.getActionChain('init');
        }
        if(chain) {
            chain.execute();
        }
    }
});

Ext.define('iih.mr.tm.bas.action.BasTemplateBtnStatusAction', {
        extend:  Xap.ej.action.Action ,

	execute: function(context) {
		//按钮状态值
		var activatestatus = context.activatestatus;
		if(!activatestatus){//默认值设置
	        var btnUpgradeStatus = false ; //升级
	        var btnOpenStatus = false ;//打开
	        var btnPropertyStatus = false ;//属性
	        var btnDeleteStatus = false ;//删除
	        var btnActivateStatus = false ;//启用
	        var btnDeactivateStatus = false ;//停用
	        activatestatus = {
	        		'btnUpgradeStatus':btnUpgradeStatus,
	        		'btnOpenStatus':btnOpenStatus,
	        		'btnPropertyStatus':btnPropertyStatus,
	        		'btnDeleteStatus':btnDeleteStatus,
	        		'btnActivateStatus':btnActivateStatus,
	        		'btnDeactivateStatus':btnDeactivateStatus
	        };
		}
		this.setbuttonsstatus(activatestatus);
    },
    setbuttonsstatus:function(activatestatus){ //根据值设置按钮状态
		var gridBlock = this.getBlock('result');
//	    var gridBlock = block.down('bastemplatelistblock');
	    var btndelete = gridBlock.down('button[method=delete]');
	    this.setbuttion(btndelete,activatestatus.btnDeleteStatus)
	    
//	    var btnupgrade = gridBlock.down('button[method=upgrade]');
//	    this.setbuttion(btnupgrade,activatestatus.btnUpgradeStatus)
	    
	    var btnopen = gridBlock.down('button[method=open]');
	    this.setbuttion(btnopen,activatestatus.btnOpenStatus)
	    
	    var btnproperty = gridBlock.down('button[method=property]');
	    this.setbuttion(btnproperty,activatestatus.btnPropertyStatus)
	    	    
	    var btnactivated = gridBlock.down('button[method=activated]');
	    this.setbuttion(btnactivated,activatestatus.btnActivateStatus)
	    
	    var btnstopped = gridBlock.down('button[method=stopped]');
	    this.setbuttion(btnstopped,activatestatus.btnDeactivateStatus)
    },
    setbuttion:function(btn,status){
    	 btn.setDisabled(!status);
    }
});

Ext.define('iih.mr.tm.bas.action.BasTemplateEditAction', {
	extend:  iih.mr.action.editor.EmrEditorOperatorAction ,
	
	/*
	* @Override
	*/
	execute: function(context) {
		console.log('------------------------ BasTemplateEditAction -------------------------------');
    	var operations = context.operations;
    	if(!operations) {
            return;
        }
    	console.log(this.getOwner());
    	var opType = this.getOwner().opType;
    	var rs = this.getBlock('content');   
    	this.addEditorEvent(rs);
    	if(opType!=undefined){
    		this.showProgress();
            if(opType=='new'){
                this.addPrepareOperations();
            }else if(opType=='open'){
                this.openPrepareOperations(operations, this.getOwner().filePk);
            }
        }
    },
    openPrepareOperations: function(operations, filePk) {    	
//    	filePk = '0A3FA5841F3FA776E050007F01006EAB';
    	var url = this.url+'/'+filePk;
        console.log(url);
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            method: METHODS.METHOD_GET,
            scope: this,
            success: this.onOpenSuccess
        };
        operations.push(operation);
    },
    onOpenSuccess: function(operation) {
        var self = this;
        var basTemplateEditPage = self.getOwner();
        var params={
                'objectId':'iemrEditor',
                'sstream':operation.result.data.odtFile,
                'mr_mode':2,
                'readonly':basTemplateEditPage.readonly,
                'callBackAction':'editorCallBackAction'//编辑器加载完成后要执行的回调Action
        };
        this.insertWriter(basTemplateEditPage,params);
        this.closeProgress();
    },
    addPrepareOperations: function() {
        var self = this;
        var basTemplateEditPage = self.getOwner();
        var params={
                'objectId':'iemrEditor',
//                'sstream':'',
                'mr_mode':2,
                'readonly':false,
                'callBackAction':'editorCallBackAction'
        };
        this.insertWriter(basTemplateEditPage,params);
        this.closeProgress();
    }
});

Ext.define('iih.mr.tm.bas.action.BasTemplateListSearchAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	                                 

	doExecute: function(context) {
		this.showLoading();
	    this.callParent();
	    var pageNum ,pageSize; 
		if(context.event != undefined){
			pageNum = context.event.arguments[0];
			pageSize = context.event.arguments[1];
		}else{
			pageNum = context.pageNum;
			pageSize = context.pageSize;
		}
	    var data = {
				pageNum : pageNum,
				pageSize : pageSize
		}
        var operations = context.operations;      
        this.prepareOperations(operations,data);  
	},  
	 prepareOperations: function(operations,data) { 
		var pageNum = data.pageNum; 
		var pageSize = data.pageSize;   
        var url = this.url;    
        url +='?' + "&pageNum="+ pageNum +"&pageSize="+ pageSize;
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_GET,
            condition: null,
            data:null,
            scope: this,
            success: this.onSuccess,
            fail: this.onFail
        };
        operations.push(operation);	    
	 },
	 
	 onFail: function(operation) {  
		 alert("查询失败");
	 },  
     onSuccess: function(operation) {
        //alert("success");
        var gridBlock = this.getBlock('result');
//        var gridBlock = block.down('bastemplatelistblock')
        var m = operation.result;
        // TODO 数据格式就这样了？
        if(m instanceof Ext.data.Model) {
        	gridBlock.setData({
                mclass: operation.mclass,
                data: m.getData(true)
            });
        }
        else {        
        	gridBlock.setGridData(m);
        }
    
    }    
});

Ext.define('iih.mr.tm.bas.action.BasTemplatePropertyInitAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	                                 

	doExecute: function(context) {
	    this.callParent();
	    console.log('------------------------ BasTemplatePropertyInitAction ----------------------------------');
        var operations = context.operations;
        var owner = this.getOwner();
        var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
        properties.setData({
            customerData: context.customerData,   
            code:context.code, 
            filePk:context.filePk,
            sourceView:context.sourceView,  
            block:context.block
        });
        console.log(context.customerData);
        console.log(context.sourceView);
        if(context.customerData=='new'){
        	/*新建页面初始化
            var block = this.getBlock('result');
            var ownerTypeCd = owner.down('[name = ownerTypeCd]');
            //新建页面初始化,带过来选中的，全院，科室等信息
            if(ownerTypeCd!=null){
                ownerTypeCd.setValue(context.treeSelected);
            }
            return*/
        }else if((context.customerData=='edit')||(context.customerData=='upgrade')){
        	//编辑页面初始化
            if(!operations) {
                return;
            }
            this.prepareOperations(operations,context.code);
        }
	},  
	 prepareOperations: function(operations,data) {
        var url = this.url +'/'+data;    
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_GET,
            condition: null,
            data:null,
            scope: this,
            success:this.onSuccess,
            //fail: this.onFail
        };
        operations.push(operation);	    
	 },
	    
    onSuccess: function(operation) {
        var block = this.getBlock('result');
        var m = operation.result.data;
        // TODO 数据格式就这样了？
        if(m instanceof Ext.data.Model) {
            block.setData({
                mclass: operation.mclass,
                data: m.getData(true)
            });
        }
        else {
            //分布赋值
            block.setData(m);
        }
    }    
});

/**
 * Created by guo_zhongbao on 2015/1/20.
 * datagrid表的行点击，选择或取消选择一行时触发事件
 */
Ext.define('iih.mr.tm.bas.action.BasTemplateRowclickAction', {
    extend:  Xap.ej.action.Action ,
    execute: function (context) {
        var datagrid = this.getBlock('result');//.down('bastemplatelistblock');
        var checkmodel = datagrid.getSelectionModel();
        var count1 = checkmodel.getCount();
        var selectedItemArr = datagrid.getSelectionModel().getSelection();
        var count = selectedItemArr.length ;
        var btnUpgradeStatus = false ; //升级
        var btnOpenStatus = false ;//打开
        var btnPropertyStatus = false ;//属性
        var btnDeleteStatus = false ;//删除
        var btnActivateStatus = false ;//启用
        var btnDeactivateStatus = false ;//停用
        if(count == 0){
        	
        }else{
            if(count == 1){
            	var item = selectedItemArr[0].raw;
            	if(item.canUpgrade){
            		btnUpgradeStatus = true ;//升级
            	}
            	if(item.canDelete){
            		btnDeleteStatus = true ;//升级
            	}
            	if(item.canActivated){
            		btnActivateStatus = true ;//升级
            	}
            	if(item.canStop){
            		btnDeactivateStatus = true ;//升级
            	}
                btnOpenStatus = true ;//打开
                btnPropertyStatus = true ;//属性
            }else{
                btnDeleteStatus = true ;//删除
                btnActivateStatus = true ;//启用
                btnDeactivateStatus = true ;//停用
                for(var i = 0 ; i < count ; i++ ){
                    var item = selectedItemArr[i].raw ;
                	if( btnDeleteStatus && ('0' == item.canDelete)){
                		btnDeleteStatus = false ;//删除
                	}
                	if( btnActivateStatus && ('0' == item.canActivated)){
                		btnActivateStatus = false ;//启用
                	}
                	if( btnDeactivateStatus && ('0' == item.canStop)){
                		btnDeactivateStatus = false ;//停用
                	}
                }
            }
        }
        var activatestatus = {
        		'btnUpgradeStatus':btnUpgradeStatus,
        		'btnOpenStatus':btnOpenStatus,
        		'btnPropertyStatus':btnPropertyStatus,
        		'btnDeleteStatus':btnDeleteStatus,
        		'btnActivateStatus':btnActivateStatus,
        		'btnDeactivateStatus':btnDeactivateStatus
        };
        var defectinAndmreditview = this.getOwner(); 	
        var chain = defectinAndmreditview.getActionChain('btnstatus');
        if(chain) {
                chain.execute({'activatestatus':activatestatus});
        }
    }
});

/** 
 *
 * 带查询图标的单文本编辑框
 * @extends Ext.form.field.Trigger
 * @author：yaolijie
 * 
 *
 */
 
 Ext.define('Xap.ej.element.field.CustomTrigger', {
    extend:  Ext.form.field.Trigger ,
    alias: 'widget.xaptrigger',
	triggerBaseCls :'x-text-trigger',
    // override onTriggerClick
    onTriggerClick: function() {
		this.fireEvent("onTriggerClick",this,this.getValue());
    }
});

Ext.define('iih.po.com.block.ResourceSearchBlock', {
    extend :  Xap.ej.block.FormBlock ,

                                                     

    alias:'widget.resourcesearchblock',

    layout: {
        type: 'vbox',
        align: 'stretch'
    },
    
    border: 0,
    
    padding: '3 3 3 3',

    items: [{
        xtype: 'xaptrigger',
        name: 'keyword',
        onTriggerClick: function() {
            var view = this.up('resourcenavigationview');
            var chain = view.getActionChain('init');
            chain.execute({
                objcd:view.objcd
            });
        },
        emptyText: ''
    }],
    
    initComponent: function() {
        this.callParent();
    }
})
Ext.define('iih.po.com.block.ResourceTreeBlock', {
    extend :  Xap.ej.block.FormBlock ,

                                           

    alias:'widget.resourcetreeblock',

    layout: 'card',
    
    border: 0,

    items: [{
        xtype: 'xaptree',
        name:'basTree',
        border: 0,
        rootVisible: false
    },{
        xtype: 'xaptree',
        name:'mrTree',
        border: 0,
        rootVisible: false
    },{
        xtype: 'xaptree',
        name:'grpTree',
        border: 0,
        rootVisible: false
    }],
    
    initComponent: function() {
        this.callParent();
    }
})
Ext.define('iih.po.com.action.ResourceTreeInitAction', {
    extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override
	*/
	doExecute: function(context) {
	    this.callParent();
	    this.objcd = context.objcd;
    	var operations = context.operations;
    	var url = this.url;
        var condition = {};
    	var METHODS = this.getInvocationMethods();
    	var method = METHODS.METHOD_GET;
    	if(context.objcd == IMER_CONSTANT.BASE_TPL){//基础模板
    	    url = 'mr/tpl/tree/baseTemplate';
    	}
    	else if(context.objcd == IMER_CONSTANT.MR_TPL){//病历模板
            url = 'mr/tpl/tree/notlazy';
        }
    	else if(context.objcd == IMER_CONSTANT.GROUP_ELEMENT){//组合元素
            url = 'mr/tpl/tree/groupElement';
            condition = Ext.apply(condition,{typeCode:'MRM11.01'});
        }
    	var mclass = null;
    	var form = this.getOwner().getBlock('top');
    	condition = Ext.apply(condition,form.getData());
    	var qs = Ext.Object.toQueryString(condition);
    	url += '?' + qs;
    	var operation = {
    	    url: url,
    	    mclass: mclass,
    	    method: method,
    	    condition: null,
            scope: this,
            success: this.onSuccess
    	};
    	operations.push(operation);
    },
    
    onSuccess: function(operation) {
        var block = this.getBlock('tree');
        var tree;
        var m = operation.result;
		if(m){
		    if(this.objcd == IMER_CONSTANT.BASE_TPL){//基础模板
	            tree = block.down('xaptree[name=basTree]');
	            tree.setData(m.data);
	        }
	        else if(this.objcd == IMER_CONSTANT.MR_TPL){//病历模板
	            tree = block.down('xaptree[name=mrTree]');
                tree.setData(m.root);
	        }
	        else if(this.objcd == IMER_CONSTANT.GROUP_ELEMENT){//组合元素
	            tree = block.down('xaptree[name=grpTree]');
	            tree.setData(m.root);
	        }
		}
    }
});
Ext.define('iih.po.com.action.ResourceClickAction', {
	extend:  Xap.ej.action.Action ,
	
	requires: [],
	
	/*
	* @Override
	*/
	execute: function(context) {
	    var event = context.event;
        if(event) {
            var args = event.arguments;
            var data = args[1].raw;
            var owner = this.getOwner();
            var worktab = Ext.getCmp('workareapageview');
            var tabId;
            if(owner.objcd == IMER_CONSTANT.BASE_TPL)
                tabId = IMER_CONSTANT.BASE_TPL_MGR;
            else if(owner.objcd == IMER_CONSTANT.MR_TPL)
                tabId = IMER_CONSTANT.MR_TPL_MGR;
            else if(owner.objcd == IMER_CONSTANT.GROUP_ELEMENT)
                tabId = IMER_CONSTANT.GROUP_ELEMENT_MGR;
            var view = worktab.getMainPage(tabId);
            if(view){
                view.fireEvent("treeItemClick",data);
            }
        };
    }
});
Ext.define('iih.po.com.action.ResourceExpandAction', {
    extend:  Xap.ej.action.ServiceInvocation ,
    
    /*
    * @Override
    */
    doExecute: function(context) {
        this.callParent();
        var view = this.getOwner();
        var event = context.event;
        if(event){
            this.node = event.arguments[0];
            var nodeData = event.arguments[0].raw.data;
            var operations = context.operations;
            var url = this.url;
            var METHODS = this.getInvocationMethods();
            var method = METHODS.METHOD_GET;
            if(view.objcd == IMER_CONSTANT.BASE_TPL){
                return;
            }
            else if(view.objcd == IMER_CONSTANT.MR_TPL){
                url = 'app/mr/tpl/tree';
                method = METHODS.METHOD_CREATE;
            }
            else if(view.objcd == IMER_CONSTANT.GROUP_ELEMENT){
                return;
            }
            /*var condition = {
                objcd: view.objcd    
            };
            var form = this.getOwner().getBlock('top');
            condition = Ext.apply(condition,form.getData());
            var qs = Ext.Object.toQueryString(condition);
            url += '?' + qs;*/
            var mclass = null;
            var operation = {
                url: url,
                mclass: mclass,
                method: method,
                data:nodeData,
                condition: null,
                scope: this,
                success: this.onSuccess
            };
            operations.push(operation);
        }
    },
    
    onSuccess: function(operation) {
        var block = this.getBlock('tree');
        var tree = block.down('xaptree[name=mrTree]');
        var m = operation.result;
        if(m){
            var data = m.root.children;
            Ext.Array.forEach(data,function(node,index,array){ 
                if(!node.leaf){
                    node.children = null;
                }
            });
            var treeData = [];
            for(var i in data){
                treeData.push(data[i]);
            }
            this.node.appendChild(treeData);
        }
    }
});
Ext.define('iih.po.com.action.CreateMenuAction', {
    extend:  Xap.ej.action.Action ,
    
    requires: [],
    
    /*
    * @Override
    */
    execute: function(context) {
        var event = context.event;
        var view = this.getOwner();
        if(event) {
            var args = event.arguments;
            var e = args[4];
            e.preventDefault();  
            e.stopEvent();  
            var record = args[1];
            var data = record.raw.data;
            if(!data)
                data = record.raw;
            //console.log(data);
            //病历文书父节点
            if(data.code == 'XAPM07.05' || data.nodeType == IMER_CONSTANT.MENU_MR_CATEGORY)
            {
                var nodemenu = new Ext.menu.Menu({  
                    floating : true,  
                    items : [{  
                        text : "新建",
                        handler : function() {  
                            var custCategoryCode = data.custCategoryCode;
                            var chain = view.getActionChain('createMr');
                            chain.execute({
                                custCategoryCode:custCategoryCode
                            });
                        } 
                    }]
                });
                nodemenu.showAt(e.getXY());
            }
            //病历文书
            else if(data.nodeType == IMER_CONSTANT.MENU_MR_DOC)
            {
                var nodemenu = new Ext.menu.Menu({  
                    floating : true,  
                    items : [{  
                        text : "打开",
                        handler : function() {  
                            var mrPk = data.code;
                            var chain = view.getActionChain('openMr');
                            chain.execute({
                                mrPk:mrPk
                            });
                        }
                    },{  
                        text : "属性",
                        handler : function() {  
                            var mrPk = data.code;
                            var chain = view.getActionChain('mrProperty');
                            chain.execute({
                                mrPk:mrPk
                            });
                        } 
                    }]
                });
                nodemenu.showAt(e.getXY());
            }
        };
    }
});
Ext.define('iih.po.com.view.ResourceNavigationView', {
    extend :  Xap.ej.stl.view.TopBottomContainerTemplate ,

                                           

    alias:'widget.resourcenavigationview',

    title: '资源',
    
    border: 0,

    xapConfig: {
        blocks: {
            'top': {
                xclass: 'iih.po.com.block.ResourceSearchBlock',
                height: 30,
                border: 0
            },
            'bottom': {
                xclass: 'iih.po.com.block.ResourceTreeBlock',
                border: 0
            }
        },

        actions: {
            'init': {
                xclass: 'iih.po.com.action.ResourceTreeInitAction',
                blocks: {
                    tree: 'bottom'
                }
            },
            'resourceClick': {
                xclass: 'iih.po.com.action.ResourceClickAction',
                blocks: {
                    tree: 'bottom'
                }
            },
            'resourceExpand': {
                xclass: 'iih.po.com.action.ResourceExpandAction',
                blocks: {
                    tree: 'bottom'
                }
            },
            'createMenu': {
                xclass: 'iih.po.com.action.CreateMenuAction',
                blocks: {
                    tree: 'bottom'
                }
            }
        },

        chains: {
            'init': ['init'],
            'resourceClick': ['resourceClick'],
            'createMenu': ['createMenu'],
            'resourceExpand': ['resourceExpand']
        },

        connections: {
            'bottom': [{
                selector: 'xaptree[name=basTree]',
                event: 'itemclick',
                chain: 'resourceClick'
            },{
                selector: 'xaptree[name=mrTree]',
                event: 'itemclick',
                chain: 'resourceClick'
            },{
                selector: 'xaptree[name=grpTree]',
                event: 'itemclick',
                chain: 'resourceClick'
            },{
                selector: 'xaptree[name=basTree]',
                event: 'itemcontextmenu',
                chain: 'createMenu'
            },{
                selector: 'xaptree[name=mrTree]',
                event: 'itemcontextmenu',
                chain: 'createMenu'
            },{
                selector: 'xaptree[name=grpTree]',
                event: 'itemcontextmenu',
                chain: 'createMenu'
            },{
                //selector: 'xaptree[name=mrTree]',
                //event: 'treeitemexpand',
                chain: 'resourceExpand'
            }]
            
        }
    },
    
    initComponent : function() {
        var me = this;
        this.callParent();
        this.addEvents("resourceRefresh");//为视图添加事件
        this.addListener('resourceRefresh', function() {//添加监听事件
            var chain = me.getActionChain('init');
            chain.execute({
                objcd:me.objcd
            });
        });
    }
})
Ext.define('iih.mr.tm.bas.action.BasTemplateSaveAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	                                                     
	/*
	 * @Override
	 */
	execute: function(context) {
	    var operations = context.operations;
        if(!operations) {
            return;
        }
	    var plugin = document.getElementById('iemrEditor');
	    plugin.tagName = 'ext';
	    var owner = this.getOwner();
	    var opType = owner.opType;
	    var data = {'odtFile':plugin.SaveToString()};
	    console.log(data);
	    if(opType!=undefined){
	    	this.showSubmitProgressBar();
            if(opType=='new' || opType=='upgrade'){
            	data.name = owner.title;
            	data.description = owner.description;
            	data.paperTypeCode = owner.paperTypeCode;
                this.addPrepareOperations(operations,data);
            }else if(opType=='open'){
            	data.code = this.getOwner().code;
            	data.filePk = this.getOwner().filePk;
                this.openPrepareOperations(operations, data);
            }
        }
    },
    
    addPrepareOperations: function(operations,data) {    
        var METHODS = this.getInvocationMethods();       
        var url = this.url;
        console.log(url);
        var operation = {
            url: url,
            method: METHODS.METHOD_CREATE,
            data:data,
            scope: this,
            success: this.onAddSuccess,
            fail: this.onFail
        };
        operations.push(operation);
    },
    
    openPrepareOperations: function(operations,data) {
    	var code = data.code;
    	console.log(data);
        var METHODS = this.getInvocationMethods();
        var url = this.url+"/"+code;
        var operation = {
            url: url,
            method: METHODS.METHOD_UPDATE,
            data:data,
            scope: this,
            success: this.onOpenSuccess,
            fail: this.onFail
        };
        operations.push(operation);
    },
    onOpenSuccess: function(operation) {
        //Ext.Msg.alert('提示','保存成功!');
    },
    onAddSuccess: function(returnData) {
    	var mrTemplateEditPage = this.getOwner();
    	mrTemplateEditPage.opType = 'open';
    	mrTemplateEditPage.filePk = returnData.result.data.filePk;
    	mrTemplateEditPage.code = returnData.result.data.code;
//    	var properties = this.getOwner().getLayer(Xap.ej.block.Layer.PROPERTIES);
//    	properties.owner.opType = 'open';
//    	properties.owner.filePk = returnData
        //Ext.Msg.alert('提示','保存成功!');
    },
    onFail: function(operation) {
        Ext.Msg.alert('提示','保存失败!');
    }
        
});

Ext.define('iih.mr.tm.bas.action.BasTemplateSerchAction', {
	extend:  Xap.ej.action.ServiceInvocation ,

	doExecute: function(context) {  
        var operations = context.operations;
        var keyword =context.event.arguments[1];
        this.prepareOperations(operations,keyword);  
    }, 
    prepareOperations: function(operations,keyword) {
        var url = this.url+'?keyWord='+keyword;//+'?keyword='+'test'
        var mclass = null;        
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: mclass,
            method: METHODS.METHOD_GET,
            condition: null,
            scope: this,
            success: this.onSuccess,
        };
        operations.push(operation);
    },
    onSuccess: function(operation) {
        var block = this.getBlock('result');
        var m = operation; 
        //console.log(operation.result.root);
        // TODO 数据格式就这样了？
        if(m instanceof Ext.data.Model) {
        	block.setData({
				mclass: operation.mclass,
				data: m.getData(true)
			});
        }
        else {
        	block.setData(m.result.data);
        }
    }    

});

Ext.define('iih.mr.tm.bas.action.BastemplateActivateAction', {
	extend:  iih.mr.action.editor.EmrEditorOperatorAction ,
	

	execute: function(context) {
	    var operations = context.operations;
    	if(!operations) {
            return;
        }
    	var block = this.getBlock('result');         
    	var rs =block.down('bastemplateeditview');
    	var properties = rs.getLayer(Xap.ej.block.Layer.PROPERTIES);
    	//打开类型
    	var opType=properties.data.opType;
    	//var code = properties.data.code;
    	this.addEditorEvent(rs);
    	if(opType!=undefined){
            if(opType=='new'){
                this.addPrepareOperations();
            }else if((opType=='upgrade')||(opType=='open')){
            	//filePk为odt文件的主键
            	var filePk = properties.data.filePk;  
                this.openPrepareOperations(operations,filePk);
            }else {
                console.log("error"+"没有打开类型")
            }
        }
    },
    openPrepareOperations: function(operations, filePk) {    	
        var url = this.url+'/'+filePk;
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            method: METHODS.METHOD_GET,
            scope: this,
            success: this.onOpenSuccess
        };
        operations.push(operation);
    },
    onOpenSuccess: function(operation) {
        var self=this;
        var block = this.getBlock('result');         
        var rs =block.down('bastemplateeditview');
        var params={
                'objectId':'iemrEditor',
                'sstream':operation.result.data.odtFile,
                'mr_mode':2,
                'readonly':"readly"
        };
        var plugin = document.getElementById('iemrEditor');/*
    	var plugin = Ext.get('iemrEditor');*/
    	if(plugin!=null){
    		var objectView =rs.down('objectview');
            rs.remove(objectView);
            //保留直接换掉String
    		//plugin.OpenFromString(operation.result.data.odtFile,1);
         }
    	 this.insertWriter(rs,params);
    	 /*
         //保留直接换掉String
         	else{
         	//更改，闪-objectView的openFromString()编辑器的方法
             this.insertWriter(rs,params);
         }*/
    	 //更改，闪-objectView的openFromString()编辑器的方法
    },
    addPrepareOperations: function() {
        var self=this;
        var block = this.getBlock('result');         
        var rs =block.down('bastemplateeditview');
        var params={
                'objectId':'iemrEditor',
                'sstream':'',
                'mr_mode':2,
                'readonly':'false'
        };
        var plugin = document.getElementById('iemrEditor');
        if(plugin!=null){
        	
    		var objectView =rs.down('objectview');
            rs.remove(objectView);
            //保留直接换掉String
    		//plugin.OpenFromString(operation.result.data.odtFile,1);
         }
        this.insertWriter(rs,params);
    }
});

Ext.define('iih.mr.tm.bas.action.CancelBasTemplatePropertyEditAction', {
	extend:  Xap.ej.action.Action ,
	
	/*
	* @Override
	*/
	execute: function(context) {
       //关闭窗口
       var owner = this.getOwner().ownerCt;  
       owner.close();
    }
});

Ext.define('iih.mr.tm.bas.action.CheckBasTemplatePropertyEditAction', {
extend:  Xap.ej.action.ServiceInvocation ,
	doExecute: function(context) {
		this.callParent();
		var operations = context.operations;
       	var rs = this.getBlock('result').ownerCt;      
       	//console.log(rs); 
       	//向后台发送form表单   
       	var form = this.getBlock('result').getForm();
       	//拿到的form的value有问题       
//       console.log(this.getBlock('result').getForm().getValues());
       	var data =this.getBlock('result').getForm().getValues();
       	if((data!=undefined)||(data!=null)){
          	data = this.getBlock('result').getForm().getValues();
       	}else{
           	data = null;
       	}
       	var properties = this.getOwner().getLayer(Xap.ej.block.Layer.PROPERTIES);
       	//数据存储在properties对象
      	properties.data.paperTypeCode = data.paperTypeCode;
  		properties.data.name = data.name;
  		properties.data.description = data.description;
  		properties.data.filePk = data.filePk;
  		properties.data.code = data.code;
  		var view = this.getOwner();
  		var msgInfo = view.down('xapdisplayfield[name=msgInfo]');
  		var params={},errorText;
  		if(data.name!=undefined && !Ext.isEmpty(data.name,false)){
  			if(data.paperTypeCode!=undefined && !Ext.isEmpty(data.paperTypeCode,false)){
  				if(properties.data.customerData=='new'){
  		  			params = {name:data.name};
  		  		}else if(properties.data.customerData=='edit'){	          
  		  			params = {code:data.code,name:data.name};
  		  		}/*else if(properties.data.customerData=='upgrade'){
  		    	   	//升级操作方式更改2014-12-14
  		    	   	var layout = properties.data.block.getLayout();
  		    	   	var paperTypeCode = data.paperTypeCode;
  		           	var name = data.name;
  		           	var description =data.description;
  		           	var code = data.code;
  		           	var filePk= data.filePk;
  		           	var owner = properties.data.sourceView;
  		           	var block = properties.data.block;
  		           	var gridBlock =block.down('bastemplateeditview');               
  		           	var chain = owner.getActionChain('beforeActivate');               
  		           	var properties = gridBlock.getLayer(Xap.ej.block.Layer.PROPERTIES);	 
  		            properties.setData({
  		            	opType: 'upgrade',  
  		            	code:code,
  		            	filePk:filePk,
  		            	name:name,
  		            	description:description,
  		            	paperTypeCode:paperTypeCode
  		            });	  
  		           	chain.execute(); 
  		    	   	layout.setActiveItem(1);	    	   
  		       	}*/
  		  		this.checkOperations(operations, params);
  	  		}else{
	  	  		errorText = '纸张类型不能为空，请选择！';
	       		msgInfo.setValue('<font color=red>' + errorText + '</font>');
	       		return;
  	  		}
  		}else{
  			errorText = '名称不能为空，请输入！';
       		msgInfo.setValue('<font color=red>' + errorText + '</font>');
       		return;
  		}
	},    
    checkOperations: function(operations,params) {
        var url = this.url;
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_GET,
            condition: null,
            params:params,
            scope: this,
            success: this.onSuccess,
            fail: this.onFail
        };
        operations.push(operation);
    },
    onSuccess: function(returnData) {
    	var view = this.getOwner();
    	var chain = view.getActionChain('confim');
    	var isexist = returnData.result.data;
    	if(!isexist){
    		chain.execute();
    	}else{
    		var msg = '基础模板名称重复，请重新输入!!!';
    		XapMessageBox.info(msg);
    	}
    },
    onFail: function(operation) {
    	var msg = '验证失败!!!';
    	XapMessageBox.info(msg);
    }     
});

Ext.define('iih.mr.tm.bas.action.ConfimBasTemplatePropertyEditAction', {
extend:  Xap.ej.action.ServiceInvocation ,
	doExecute: function(context) {
	   this.callParent();
	   var operations = context.operations;		 
	   var view = this.getOwner();
	   var properties = view.getLayer(Xap.ej.block.Layer.PROPERTIES);
	   var data = {};
       data.paperTypeCode = properties.data.paperTypeCode;//医疗记录基础模板编码
       data.name = properties.data.name;
       data.description = properties.data.description;//文件主键
       data.code = properties.data.code;
       this.getOwner().ownerCt.close();
       if(properties.data.customerData=='new'){
    	   //新建操作方式更改2014-12-14
    	   var layout = properties.data.block.getLayout();
    	   var paperTypeCode = data.paperTypeCode;
           var name = data.name;
           var description = data.description;
           var owner = properties.data.sourceView;
           var block = properties.data.block;
           
           var canvas = Xap.getCanvas();
           var config = {
                   xclass: 'iih.mr.tm.bas.view.BasTemplateEditView',
                   pageTitle: name,
                   pageCode:'mrbastpleditview',
                   viewConfig:{
                       opType:'new',
                       paperTypeCode:paperTypeCode,
                       description:description
                   }
           };
           canvas.fireEvent("addWorkPage",config);
       }else if(properties.data.customerData=='edit'){
    	   this.prepareOperations(operations,data);
       }/*else if(properties.data.customerData=='upgrade'){
    	   //升级操作方式更改2014-12-14
    	   var layout = properties.data.block.getLayout();
    	   var paperTypeCode = data.paperTypeCode;
           var name = data.name;
           var description = data.description;
           var code = data.code;
           var filePk= data.filePk;
           var owner = properties.data.sourceView;
           var block = properties.data.block;
           var gridBlock =block.down('bastemplateeditview');               
           var chain = owner.getActionChain('beforeActivate');               
           var properties = gridBlock.getLayer(Xap.ej.block.Layer.PROPERTIES);	 
            properties.setData({
            	opType: 'upgrade',  
            	code:code,
            	filePk:filePk,
            	name:name,
            	description:description,
            	paperTypeCode:paperTypeCode
            });	  
           chain.execute(); 
    	   layout.setActiveItem(1);	    	   
       }*/
	},    
    addOperations: function(operations,data,view) {
        var condition = data;
        var url = this.url;
        /*var qs = Ext.Object.toQueryString(condition);   
        console.log(qs);*/
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_CREATE,
            condition: null,
            data:condition,
            scope: this,
            success: this.onSuccess,
            fail: this.onFail
        };
        operations.push(operation);
    },
    onSuccess: function() {
        //调用模板列表刷新页面
        var properties = this.getOwner().getLayer(Xap.ej.block.Layer.PROPERTIES);
        var view = properties.data.sourceView;
        var chain = view.getActionChain('init');
        if(!chain) {
            //如果没找到chain执行结果
            console.log("faile");   
        }
        if(chain) {
            chain.execute();
        }
    },
    onFail: function(operation) {
        Ext.MessageBox.show({
            title:'提示',
            msg:'新增失败!!!'
        });
    },    
    prepareOperations: function(operations,data) {
    	//修改属性，改属性的值
    	var code =data.code;
        var url = this.url+"/"+code;        
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_UPDATE,
            condition: null,
            data:data,
            scope: this,
            success: this.onSuccess
        };
        operations.push(operation);
    }        
});

Ext.define('Xap.ej.stl.action.SimpleSaveAction', {
	extend:  Xap.ej.action.ServiceInvocation ,

	           
                               
      

    doExecute: function(context) {
        if(!this.doValid()) {
            // TODO
            return false;
        }
        if(!this.doSave(context))
            return false;
        return true;
    },

    doValid: function() {
        var content = this.getBlock('content');
        if(content) {
            return content.isValid();
        }
        return true;
    },

    doSave: function(context) {
        var data = this.getData(context);
        if(!data) {
            return false;
        }
        var METHODS = this.getInvocationMethods();
        var o = {};
        o.data = data;
        o.url = this.url;
        // TODO 根据条件判断是创建还是更新，目前是更新
        o.method = this.getMethod(context) || METHODS.METHOD_UPDATE;
        context.operations.push(o);
        return true;
    },

    getData: function(context) {
        var data = context.data;
        if(!data) {
            var content = this.getBlock('content');
            if(content) {
                data = content.getData();
            }
        }
        return data;
    },

    getMethod: Ext.emptyFn
});

/**
 * @author wujunhui<wu.junhui@founder.com>
 * @docauthor wujunhui<wu.junhui@founder.com>
 * 该模板用于单条记录的编辑。
 */
Ext.define('Xap.ej.stl.view.SingleRecordEditTemplate', {
	extend :  Xap.ej.template.BaseTemplate ,

	            
		                                   
		                            
		                                       
		                                    
	  

	alias : 'widget.xapsinglerecordedittemplate',

	border : 0,

	layout : {
		type: 'vbox',
		align : 'stretch'
	},

	defaultXapConfig: {
		blocks: {
			'content': {
				xclass: 'Xap.ej.stl.view.PlaceHolderBlock',
				flex: 1
			},

			'toolbar': {
				xclass: 'Xap.ej.block.ToolbarBlock',
				items: [{
					xtype: 'button',
					text: '保存',
					action: 'save'
				}, {
					xtype: 'button',
					text: '取消',
					action: 'cancel'
				}]
			}
		},

		actions: {
			'search': {
				xclass: 'Xap.ej.stl.action.SimpleSearchAction',
				blocks: {
					condition: 'content',
					result: 'content'
				}
			}, 
			'save': {
				xclass: 'Xap.ej.stl.action.SimpleSaveAction',
				blocks: {
					content: 'content'
				}
			}
		},

		chains: {
			'init': ['search'],
			'save': ['save']
		},

		connections: {
			/*
			'content': [{
				// 如果selector为空，则取block本身为事件对象
				event: 'afterrender',
				chain: 'init'
			}], 
			*/

			'toolbar': [{
				selector: 'button[action=save]',
				event: 'click',
				chain: 'save'
			}]
		}
	},

	doCheckXapConfig: function() {
		// TODO 必须包括的Action等等...
	},

	getContentBlock : function() {
		return this.getBlock('content');
	},
	
	getToolbarBlock : function() {
		return this.getBlock('toolbar');
	}
});

Ext.define('iih.mr.tm.bas.block.BasTemplatePropertyEditViewBlock',{
	extend :  Xap.ej.block.FormBlock ,

	           
                                        
                                            
                                         
                                       
	  

	alias:'widget.bastemplatepropertyeditviewblock',

	layout: {
        type: 'table',
        columns: 1,
        tableAttrs: {
            border: 0,
            cellpadding: 5,
            cellspacing: 1,
            width: '100%'
        },
        tdAttrs: {
            valign: 'left'
        }
    },
    buttons:[{
        xtype: "button",
        name: 'confim',
        method:'confim',
        text: '确认',
    },{
        xtype: "button",
        name: 'cancel',
        method:'cancel',
        text: '取消'    
    }],
	items: [   
                {
                	xtype:'xaptextfield',
                    name:'name',
                    fieldLabel:'名称:',
                    labelAlign:'right'
                },{
		            xtype:'xapcombobox',
		            name :'paperTypeCode',
		            fieldLabel:'纸张类型:',
	                allOptions:false,  
	                editable: false,    
		            dictionary:'MDM07',
                    labelAlign:'right' 
                },{
                	xtype:'xaptextarea',
	            	height:40,
	                name :'description',
	                fieldLabel:'描述:',
                    labelAlign:'right'
                },{
                	xtype: 'xapdisplayfield',
        			fieldLabel: '',
        			vertical: true,
        			name:'msgInfo',
        			value: '',
        			margin:'-10 0 0 0'
                },{           
	                xtype: "xaptextfield",
	                name: 'code',
	                hidden:true
                },{           
	                xtype: "xaptextfield",
	                name: 'filePk',
	                hidden:true
                }
         ],

	setData: function(data) {
	    this.callParent(arguments);
	},
    getData: function() {
        this.callParent(arguments);
    }
    
})
Ext.define('iih.mr.tm.bas.view.BasTemplatePropertyEditView',{
	extend :  Xap.ej.stl.view.SingleRecordEditTemplate ,

	           
	                                                                  
	                                                                      
	                                                                      
	                                                                    
	             
	alias:'widget.bastemplatepropertyeditview',
	
	layout: 'fit',
	
	xapConfig: {
		blocks: {
			'content': {
				xclass: 'iih.mr.tm.bas.block.BasTemplatePropertyEditViewBlock'
			}
		},

		actions: {
			'create': { 
				xclass: 'iih.mr.tm.bas.action.BasTemplatePropertyInitAction',
				url: 'mr/tpl/baseTemplate',
				blocks: {
                    result:'content'
                }
			},
			'confim': {
                xclass: 'iih.mr.tm.bas.action.ConfimBasTemplatePropertyEditAction',
                url:'mr/tpl/baseTemplate',
                blocks: {
                    result: 'content'
                }
            },
            'cancel': {
                xclass: 'iih.mr.tm.bas.action.CancelBasTemplatePropertyEditAction',
                blocks: {
                    result: 'content'
                }
            },
            'check': {
                xclass: 'iih.mr.tm.bas.action.CheckBasTemplatePropertyEditAction',
                url:'mr/tpl/baseTemplate/HasDuplicationOfName',
                blocks: {
                    result: 'content'
                }
            }
			
		},

		chains: {
			'init': ['create'],
            'confim': ['confim'],
            'cancel': ['cancel'],
            'check': ['check']
		},

		connections: {
			'content': [{    
			    //加载数据
                event: 'afterrender',
                chain: 'init'
            },{    
                //确认按钮
                selector: 'button[method=confim]',
                event: 'click',
                chain: 'check'
            },{    
                //取消按钮
                selector: 'button[method=cancel]',
                event: 'click',
                chain: 'cancel'
            }]
		}
	},
	initComponent : function() {
		this.callParent();
		this.addEvents("pageRefresh");//为视图添加刷新事件
		this.addListener('pageRefresh', function(){//添加监听事件
	        var gridBlock = this.down('mrtemplatelistblock');
	        var pageNum = gridBlock.currentPage;
	        var chain = this.getActionChain('init');
	        if(chain) {
	        	chain.execute({
	        		pageNum:pageNum,
	            	pageSize:'25'
	        	});
	        }
		});
	}
})
Ext.define('iih.mr.tm.bas.action.CreateBasTemplateAction', {
	extend:  Xap.ej.action.PopAction ,
	
	                                                             
	/*
	* @Override
	*/
	execute: function(context) {
	   //新建模板
		console.log('---------------- CreateBasTemplateAction --------------------');
	    var view =this.getOwner();	
	    var block = this.getBlock('result');
        var config = {         
            modal: true,            
            height: 220,
            width: 300,
            title :'新建基础模板',
            contentConfig: {
            	//新建模板页面
                xtype: 'bastemplatepropertyeditview', 
                initChain: {
                    name: 'init',
                    context: {
                        customerData: 'new',
                        sourceView: view,
                        block:block
                    }
                }
            }
        };
        this.callParent([config]);    
    }
});

Ext.define('iih.mr.tm.bas.action.DeleteBasTemplateListAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override  点击发布按钮，更新模板状态url：basTemplate,发送方式 put
	*/
    doExecute: function(context) {
    	var grid = this.getBlock('result');//.down('bastemplatelistblock');
        var rb = grid.getSelectionModel().getSelection();      
        if(rb.length == 0){
            var message = '请选模板进行删除~~~';
            XapMessageBox.info(message);
        }else{
        	 var code =rb[0].data.code;
             var length = rb.length;
             var dataList =[];
             for(var i=0;i<length;i++){
             	dataList.push(rb[i].data.code);
             }
             //参照接口文件，多条记录启用
             var data ={"ids":dataList};
             this.prepareOperations(context.operations,data);
        }
    },

    prepareOperations: function(operations,data) {       
        var url = this.url;     
        var mclass = null;       
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: mclass,
            method: METHODS.METHOD_DELETE,
            data:data,
            condition: null,
            scope: this,
            success: this.onSuccess
        };
        operations.push(operation);
    },
    
    onSuccess: function(operation) {
        var owner = this.getOwner();
        var chain = owner.getActionChain('init');
        var message = operation.result.data.message;
        var gridBlock = owner.down('bastemplatelistblock');
        var pageNum = gridBlock.currentPage;
//        XapMessageBox.info(message);
        if(!chain) {
            //如果没找到chain执行结果
            console.log(chain);            
        }
        if(chain) {
            chain.execute({
            	pageNum:pageNum,
            	pageSize:'25'
            });
        }
    }
});

Ext.define('iih.mr.tm.bas.action.DisabledOfficeToolBarAction', {
    extend:  Xap.ej.action.ServiceInvocation ,
    
    /*
     * @Override
     */
    doExecute: function(context) {
        var operations = context.operations;
        if(!operations) {
            return;
        }
        var me = this;
        var emrSave = 'com.founder.iemr.editor.toolbar:emrSave';//保存
        var emrSaveAs = 'com.founder.iemr.editor.toolbar:emrSaveAs';//保存
        var emrRelease = 'com.founder.iemr.editor.toolbar:emrRelease';//保存
        var emrSubmit = 'com.founder.iemr.editor.toolbar:emrSubmit';//提交
        var emrRevoke = 'com.founder.iemr.editor.toolbar:emrRevoke';//撤销
        var emrStartApprove ='com.founder.iemr.editor.toolbar:emrStartApprove';//开始审签
        var emrApprove ='com.founder.iemr.editor.toolbar:emrApprove';//审签
        var emrAuditRevoke ='com.founder.iemr.editor.toolbar:emrAuditRevoke';//审签撤回
        var emrReject = 'com.founder.iemr.editor.toolbar:emrReject';//驳回
        var emrDocDelete = 'com.founder.iemr.editor.toolbar:emrDocDelete';//删除
        var emrRefreshMacro = 'com.founder.iemr.editor.toolbar:emrRefreshMacro';//刷新宏元素
        var emrRefreshDiagnosis = 'com.founder.iemr.editor.toolbar:emrRefreshDiagnosis';//刷新诊断
        var emrImageLibraries = 'com.founder.iemr.editor.toolbar:emrImageLibraries';//插入图片
        var emrContinuePrint = 'com.founder.iemr.editor.toolbar:emrContinuePrint';//续打
        var emrSelectContinuePrint = 'com.founder.iemr.editor.toolbar:emrSelectContinuePrint';//选页打印
        var emrSaveAsTemplate = 'com.founder.iemr.editor.toolbar:emrSaveAsTemplate';//病历另存为模板
        var emrRefreshDiagnosis = 'com.founder.iemr.editor.toolbar:emrRefreshDiagnosis';//病历另存为模板
        var emrRefreshOutpatientDisposal = 'com.founder.iemr.editor.toolbar:emrRefreshOutpatientDisposal';//病历另存为模板
        var emrUpdateTempl = 'com.founder.iemr.editor.toolbar:emrUpdateTempl';//病历另存为模板
        var emrChangeBaseTempl = 'com.founder.iemr.editor.toolbar:emrChangeBaseTempl';//病历另存为模板
//        var emrSelectContinuePrint = 'com.founder.iemr.editor.toolbar:emrSelectContinuePrint';//选页续打
//        var emrContinuePrint = 'com.founder.iemr.editor.toolbar:emrContinuePrint';//病历另存为模板
//        var iddMedocalHistory = '';//月经史公式编辑
        var readonly = me.getOwner().readonly;
        var release = me.getOwner().release;
        var plugin = document.getElementById('iemrEditor');
        setTimeout(function() {
        	plugin.SetCommandVisible(emrStartApprove,false);
        	plugin.SetCommandVisible(emrSaveAsTemplate,false);
        	plugin.SetCommandVisible(emrSaveAs,false);
        	plugin.SetCommandVisible(emrRefreshOutpatientDisposal,false);
        	plugin.SetCommandVisible(emrRefreshDiagnosis,false);
        	plugin.SetCommandVisible(emrUpdateTempl,false);
        	plugin.SetCommandVisible(emrChangeBaseTempl,false);
        	if(me.getOwner().opType=='open'){
        		if(readonly){
        			plugin.SetCommandEnable(emrSave,!readonly);
        			plugin.SetCommandEnable(emrRelease,release);
        		}else{
        			plugin.SetCommandEnable(emrSave,true);
        			plugin.SetCommandEnable(emrRelease,release);
        		}
            }else{
            }
        	plugin.UpdateToolbar();
        },350);
    }
});

Ext.define('iih.mr.tm.bas.action.EditorCallBackAction', {
    extend:  Xap.ej.action.ServiceInvocation ,
    
    /*
    * @Override
    */
    execute: function(context) {
    	var self = this;
    	var opType = this.getOwner().opType;
    	var plugin = document.getElementById('iemrEditor');
    	if('new'==opType || 'saveAs'==opType){
    		//设置编辑器按钮状态
    		var disabledOfficeToolBarAction = self.getOwner().getActionChain("disabledOfficeToolBarAction");
    		disabledOfficeToolBarAction.execute();
    		
    		//设置newF为1，则刷新宏元素后会自动刷新引用元素
    		this.getOwner().newF=1;
    	}else if ('open'==opType){
    		var operations = context.operations;
            if(!operations) {
                return;
            }
            //设置编辑器按钮状态
    		var disabledOfficeToolBarAction=self.getOwner().getActionChain("disabledOfficeToolBarAction");
    		disabledOfficeToolBarAction.execute();
    	}
		plugin.GotoSection('主诉',true);
		plugin.SetModified(false);
    }
});

Ext.define('iih.mr.tm.bas.action.IssueBasTemplateListAction', {
    extend:  Xap.ej.action.ServiceInvocation ,  
    
    doExecute: function(context) {
        var grid = this.getBlock('result');      
        var rb = grid.getSelectionModel().getSelection();         
        //模板id
        //rb instanceof Array
        if(rb.length == 0){
            Ext.MessageBox.show({
                title:'提示',
                msg:'请选模板进行发布~~~'
            });
        }else{
            var verBaseTplKc =rb[0].data.verBaseTplKc;
            console.log(rb);
            var data ={key:verBaseTplKc,type:'issue'}
            this.prepareOperations(context.operations,data);
        }
    },

    prepareOperations: function(operations,data) {       
        var url = this.url;
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_UPDATE,
            condition: null,
            data:data,
            scope: this,
            success: this.onSuccess
            // fail: this.onFail
        };
        operations.push(operation);
    },
    
    onSuccess: function(operation) {
        var owner = this.getOwner();
        var chain = owner.getActionChain('init');
        if(!chain) {
            //如果没找到chain执行结果
            console.log("faile");
            console.log(chain);            
            //chain = owner.getActionChain('init');
        }
        if(chain) {
            chain.execute();
        }
    }
});

Ext.define('iih.mr.tm.bas.action.OpenBasTemplateFileAction', {
	extend:  Xap.ej.action.Action ,
	
	/*
	* @Override
	*/
	execute: function(context,data) {
       this.callParent();    	   
       var grid = this.getBlock('result');
//       var layout = block.getLayout();
//       var grid = block.down('bastemplatelistblock');  
       var rb = grid.getSelectionModel().getSelection();     
       if(rb.length == 0){
    	   var message = '请选模板进行打开~~~';
           XapMessageBox.info(message);
       }else if(rb.length >  1){
    	   var message = '请选模板进行打开~~~';
           XapMessageBox.info(message);
       }else{
    	   /*var gridBlock =block.down('bastemplateeditview')
    	   var code =rb[0].data.code;           
    	   var filePk = rb[0].data.filePk;
    	   var properties = gridBlock.getLayer(Xap.ej.block.Layer.PROPERTIES);
           properties.setData({
	           	opType: 'open',  
	           	filePk:filePk,
	            code:code
           });
           //先remove掉编译器打开的odt
           //gridBlock  insert
           var owner = this.getOwner();
           var chain = owner.getActionChain('beforeActivate');
           chain.execute();
           layout.setActiveItem(1);*/
    	   var codePk =rb[0].data.code;           
    	   var pk = rb[0].data.filePk;
    	   var name = rb[0].data.name;
    	   var view = this.getOwner().ownerCt;
    	   var readonly = true;
    	   var release = false;
    	   var canUpdate = rb[0].raw.canUpdate;
    	   if(rb[0].raw.canUpdate=='1'){
    		   readonly = false;
    	   }
    	   if(rb[0].raw.canActivated=='1' || '1' == rb[0].raw.canSubmit){
    		   release = true;
    	   }
    	   var workpageview = view.items.items[1];
           if(workpageview){
	           	var mrSn = workpageview.filePk;
	           	if(mrSn!=pk){
	           		view.remove(workpageview);
	           	}
           }
    	   var canvas = Xap.getCanvas();
           var config = {
                   pageCode: 'mrbastpleditview',
                   xclass: 'iih.mr.tm.bas.view.BasTemplateEditView',
                   pageTitle: name,
                   viewConfig:{
                	   code:codePk,
                	   filePk:pk,
                       opType:'open',
                       readonly:readonly,
                       release:release
                   }
           };       
           canvas.fireEvent("addWorkPage",config);
    	}     
    }
});

Ext.define('iih.mr.tm.bas.action.PropertyBasTemplateListAction', {
	extend:  Xap.ej.action.PopAction ,
	
	                                                             
	/*
	* @Override
	*/
	execute: function(context) {
	    var gridPage = this.getOwner();
    	var grid = this.getBlock('result');//.down('bastemplatelistblock'); 
	    var rb = grid.getSelectionModel().getSelection();         
        if(rb.length == 0){
            Ext.MessageBox.show({
                title:'提示',
                msg:'请选模板进行属性编辑~~~'
            });
        }else if(rb.length >  1){
    	   Ext.MessageBox.show({
               title:'提示',
               msg:'请选一条模板编辑属性~~~'
           });
       }else{
            //模板id
        	var code =rb[0].data.code;
            //var name =rb[0].data.name;
            var config = {         
                    modal: true,            
                    height: 200,
                    width:300,
                    title :'属性编辑',
                    contentConfig: {
                        xtype: 'bastemplatepropertyeditview',  
                        initChain: {
                            name: 'init',//bastemplatepropertyeditview
                            context: {
                                customerData: 'edit',
                                code :code,
                                sourceView: this.getOwner()
                            }
                        }
                    }
            };
          this.callParent([config]); 
        }	       
    }
});

Ext.define('iih.mr.tm.bas.action.ReleaseBasTemplateEditAction', {
    extend:  Xap.ej.action.ServiceInvocation ,  
    
    doExecute: function(context) {
    	console.log('--------------------- ReleaseBasTemplateEditAction -----------------------------------');
    	var operations = context.operations;
    	var owner = this.getOwner();
        //模板id//rb instanceof Array
        var dataList =[];
        var code = owner.code;
        var opType = owner.opType;
        var plugin = document.getElementById('iemrEditor');
	    plugin.tagName = 'ext';
        var data = {};
        if(opType=='new'){
        	data.name = owner.title;
        	data.description = owner.description;
        	data.paperTypeCode = owner.paperTypeCode;
        	data.odtFile = plugin.SaveToString();
        	data.statusCode ='release';
        	this.addPrepareOperations(operations,data);
        }else if(opType=='open'){
        	dataList.push(code);
        	data ={"ids":dataList};
            this.prepareOperations(operations,data);
        }
    },

    prepareOperations: function(operations,data) {       
        var url = this.url;
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_CREATE,
            condition: null,
            data:data,
            scope: this,
            success: this.onOpenSuccess
            // fail: this.onFail
        };
        operations.push(operation);
    },
    
    onOpenSuccess: function(operation) {
		var plugin = document.getElementById('iemrEditor');
		var emrSave = 'com.founder.iemr.editor.toolbar:emrSave';//保存
        var emrRelease = 'com.founder.iemr.editor.toolbar:emrRelease';//保存
		plugin.SetCommandEnable(emrSave,false);
		plugin.SetCommandEnable(emrRelease,false);
		plugin.UpdateToolbar();
		var msg = '启用成功!!!';
		XapMessageBox.info(msg);
        /*var owner = this.getOwner();
        var listView = owner.ownerCt.down('basicTemplateListView');
        var grid = listView.down('bastemplatelistblock');
        var pageNum = grid.currentPage;
        var chain = listView.getActionChain('init');
        if(!chain) {
            //如果没找到chain执行结果
            console.log("faile");
            console.log(chain);            
            //chain = owner.getActionChain('init');
        }
        if(chain) {
            chain.execute({
            	pageNum:pageNum,
            	pageSize:'25'
            });
        }*/
    },
    
    addPrepareOperations: function(operations,data) {
        var METHODS = this.getInvocationMethods();
        var url = 'mr/tpl/baseTemplate';
        console.log(url);
        var operation = {
            url: url,
            method: METHODS.METHOD_CREATE,
            data:data,
            scope: this,
            success: this.onAddSuccess,
            fail: this.onFail
        };
        operations.push(operation);
    },
    
    onAddSuccess: function(returnData) {
    	var editBasTem = this.getOwner();
    	editBasTem.opType='open';
    	var plugin = document.getElementById('iemrEditor');
    	editBasTem.code = returnData.result.data.code;
    	var emrSave = 'com.founder.iemr.editor.toolbar:emrSave';//保存
        var emrRelease = 'com.founder.iemr.editor.toolbar:emrRelease';//保存
		plugin.SetCommandEnable(emrSave,false);
		plugin.SetCommandEnable(emrRelease,false);
		plugin.UpdateToolbar();
        var msg = '启用成功!!!';
		XapMessageBox.info(msg);
    },
    onFail: function(operation) {
    	var msg = '启用成功!!!';
		XapMessageBox.info(msg);
    }
});

Ext.define('iih.mr.tm.bas.action.StoppedBasTemplateListAction', {
    extend:  Xap.ej.action.ServiceInvocation ,  
    
    doExecute: function(context) {
    	var grid = this.getBlock('result');//.down('bastemplatelistblock');  
        var rb = grid.getSelectionModel().getSelection();         
        //模板id//rb instanceof Array
        if(rb.length == 0){
            Ext.MessageBox.show({
                title:'提示',
                msg:'请选模板进行停用~~~'
            });
        }else{
            var code =rb[0].data.code;
            var length = rb.length;
            var dataList =[];
            for(var i=0;i<length;i++){
            	dataList.push(rb[i].data.code);
            }
            //参照接口文件，多条记录启用
            var data ={"ids":dataList};
            this.prepareOperations(context.operations,data);
        }
    },

    prepareOperations: function(operations,data) {       
        var url = this.url;
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_CREATE,
            condition: null,
            data:data,
            scope: this,
            success: this.onSuccess
            // fail: this.onFail
        };
        operations.push(operation);
    },
    
    onSuccess: function(operation) {
        var owner = this.getOwner();
        var chain = owner.getActionChain('init');
        if(!chain) {
            //如果没找到chain执行结果
            console.log("faile");
            console.log(chain);            
            //chain = owner.getActionChain('init');
        }
        if(chain) {
            chain.execute();
        }
    }
});

Ext.define('iih.mr.tm.bas.action.UpgradeBasTemplateListAction', {
	extend:  Xap.ej.action.PopAction ,
	
	/*
	* @Override
	*/
	execute: function(context) {
	    var gridPage = this.getOwner();
	    var grid = this.getBlock('result');//.down('bastemplatelistblock');       
	    var rb = grid.getSelectionModel().getSelection();         
        if(rb.length == 0){
            Ext.MessageBox.show({
                title:'提示',
                msg:'请选基础模板进行升级~~~'
            });
        }else if(rb.length > 1){
            Ext.MessageBox.show({
                title:'提示',
                msg:'只能选择一条基础模板进行升级！！！'
            });
        }else{
            //模板id
        	var code =rb[0].data.code;
        	var filePk =rb[0].data.filePk;
        	var name =rb[0].data.name;
        	var paperType =rb[0].data.paperType;
        	var view =this.getOwner();	
        	var block = this.getBlock('result');
            var config = {         
                    modal: true,            
                    height: 200,
                    width:300,
                    title :'属性编辑',
                    contentConfig: {
                        xtype: 'bastemplatepropertyeditview',  
                        initChain: {
                            name: 'init',
                            context: {
                                customerData: 'upgrade',
                                filePk:filePk,
                                code :code,
                                name:name,
                                paperType:paperType,
                                sourceView: view,
                                block:block
                            }
                        }
                    }
            };
          this.callParent([config]); 
        }	       
    }
});


/** 
 *
 * 流程grid
 * @class Xap.ej.element.grid.FlowGrid
 * @extends Xap.ej.element.grid.Grid
 * @author ：chenyajie<chen_yajie@founder.com>
 *
 *## example flowgrid
 *
 *     @example 
 *     Ext.onReady(function() {							
 *     	Ext.create('Ext.panel.Panel', {						
 *     		title: 'Panel',					
 *     		items: [{					
 *     			xtype: 'flowgrid',				
 *     			title: 'flowgrid',				
 *     			//url: 'MyGrid.json',				
 *     			processInfo: [				
 *     				{xtype: "button",text: '新建',method: 'create',handler: function() {console.log('click create');}},			
 *     				{xtype: "button",text: '保存',process: true,method: 'save'},			
 *     				{xtype: "button",text: '提交',process: true,method: 'submit'}			
 *     			],				
 *     			CM_JR_Record: [				
 *     				{ header: '姓名',  dataIndex: 'name', field: 'textfield' ,     type: 'string'},			
 *     				{ header: 'Email', dataIndex: 'email', flex: 1,     type: 'string'},			
 *     				{ header: '编号', dataIndex: 'personNumber',     type: 'string' }			
 *     			],				
 *     			gridData : {'results':[				
 *     				{ 'name': 'Lisa',  "email":"lisa@simpsons.com",  "personNumber":"555-111-1"  ,			
 *     					processTask:{		
 *     						processId:'',	
 *     						executingTask:[	
 *     							{name:'',method:'save',id:''}
 *     						]	
 *     					}		
 *     				},			
 *     				{ 'name': 'Bart',  "email":"bart@simpsons.com",  "personNumber":"555-222-2" },			
 *     				{ 'name': 'Homer', "email":"home@simpsons.com",  "personNumber":"555-222-3"  ,			
 *     					processTask:{		
 *     						processId:'',	
 *     						executingTask:[	
 *     							{name:'',method:'save',id:''},{name:'',method:'submit',id:''}
 *     						]	
 *     					}		
 *     				},			
 *     				{ 'name': 'Lisa',  "email":"lisa@simpsons.com",  "personNumber":"555-111-1"  ,			
 *     					processTask:{		
 *     						processId:'',	
 *     						executingTask:[	
 *     							{name:'',method:'submit',id:''}
 *     						]	
 *     					}		
 *     				},			
 *     				{ 'name': 'Bart',  "email":"bart@simpsons.com",  "personNumber":"555-222-2" },			
 *     				{ 'name': 'Marge', "email":"marge@simpsons.com", "personNumber":"555-222-4"  }			
 *     			]},				
 *     							
 *     			height: 300,				
 *     			width: 900				
 *     		}],					
 *     		renderTo: Ext.getBody()					
 *     	});						
 *     });							

 * 
 * 
 **/


Ext.define('Xap.ej.element.grid.FlowGrid', {
    extend:  Xap.ej.element.grid.Grid ,
    alias: 'widget.flowgrid',
	          
		                                         
	  
	/**
	 * @cfg {String} xapId
	 * 为该grid指定id
	 */
	xapId : 'xapFilterGridId',
	/** 
     * @cfg {boolean} 是否显示复选框
     */ 
	checkboxShow : true,
	/**
	 * @cfg {Number} 
	 * 为该grid指定列按钮总宽度
	 */
	buttonWidth : null,
	
	/**
	 * @cfg {boolean} 
	 * 列按钮默认不显示
	 */
	isColButtonShow : false,
	
	/**
	 * @cfg {object} processInfo
	 * 配置流程按钮
	 * exp：
	 * [
	 *	 	{text: '新建',method: 'create'},
	 *		{text: '保存',process: true,method: 'save'},
	 *		{text: '修改',process: true,method: 'edit',columnHidden:true},
	 *		{text: '提交',process: true,method: 'submit'}
	 *	]
	 *  text: 按钮名称 ,process: 标示是否流程控制 ,method: 要执行的方法名称,columnHidden:true 在按钮列隐藏
	 */
	processInfo : null,
	
	
	/** 
     * 
	 * 点击流程task按钮，触发tasksubmit事件
     */ 
	fireTasksubmit:function(method,record){
	    var taskObj = {};
	    var ptask = record.processTask;
	    if(record instanceof Ext.data.Model) {
	    	ptask = record.get('processTask');
	    }
		if(ptask){
			taskObj.processId = ptask.processId;
			//遍历task
			Ext.Array.forEach(ptask.executingTask,function(task,index,array){ 
				if(method==task.method){
					Ext.apply(taskObj,task);
				}
			})
		}
		this.fireEvent('tasksubmit',method,record,taskObj);
    },
	/**     
	* 给该grid赋新值  
	* @param {object} [{},{}] 
	*/
	setData:function(data){
    	this.callParent(arguments);
    	this.disableTbarTask();
    },
	/**     
	* 把所有流程按钮置灰
	*  
	*/
	disableTbarTask:function(){
    	//得到tbar
		var toolbar = this.getTopToolbar();
		//task按钮全不可用
		var taskButtons = toolbar.query("[process=true]");
		Ext.each(taskButtons, function (button, index)
		{
			button.setDisabled( true );
		});
    },
	/**     
	* 行点击事件
	* @param {data} [{},{}] 
	*/
	onItemClick:function( view, record, item, index, e, eOpts ){
    	var me = this;
		//取消全选
		this.getSelectionModel().deselectAll( );
		//选中当前点击行
		this.getSelectionModel().select( index );
		//重置tbar button按钮可用性
		this.resetTbar(me,record);
    },
	/**     
	* 
	*  重置tbar button按钮可用性
	* @param {me} this
	* @param {record} record
	* 
	*/
	resetTbar:function(me,record){
		//把所有流程按钮置灰
		this.disableTbarTask();
    	//得到tbar
		var toolbar = me.getTopToolbar();
		//根据选择的列 让task可用
		if(record.get('processTask')){
			//遍历task
			Ext.Array.forEach(record.get('processTask').executingTask,function(task,index,array){ 
				toolbar.query("[method="+task.method+"]")[0].setDisabled( false );
			})
		}
    },
	
	/**     
	* 初始化tbar
	*/
	init_tbar:function(colButton){
		var me = this;
		var tbar = [];
		Ext.Array.forEach(this.processInfo,function(button,index,array){ //单纯的遍历数组 
			if(button.process){//task流程控制按钮
				tbar.push({
					xtype: button.xtype,
					text: button.text,
					process: button.process,//标示是否流程控制
					disabled: button.process,
					method: button.method,//执行的方法名称
					handler: function() {
						me.fireTasksubmit(button.method,me.getSelectionModel().getSelection( )[0].getData());
					}
				});
			}else{
				tbar.push({
					xtype: button.xtype,
					text: button.text,
					method: button.method,//执行的方法名称
					handler: button.handler
				});
			}
			//组建列按钮
			if(button.process&&!button.columnHidden){
				colButton.push({
					text: button.text,
					method: button.method,//执行的方法名称
					isDisabled  : function(v, rowIndex ,colIndex ,item , record) {
					
						if(record.get('processTask')){
							var disabled = true;
							//遍历task
							Ext.Array.forEach(record.get('processTask').executingTask,function(task,index,array){ 
								if(task.method==button.method){
									disabled = false;
								}
							})
							return disabled;
						}else{
							return true;
						}
					},
					handler: function(view,rowIndex,colIndex,e,item ,record) {
						me.fireTasksubmit(button.method,record);
					}
				});
			}
		});
		this.tbar = tbar;
	
    },
	/**     
	* 初始化列按钮及组件新CM
	*/
	init_ColumnButton:function(colButton){
		//初始化列按钮及组件新CM
		if(colButton.length > 0){
			//如果没有指定列宽，自动计算
			if(!this.buttonWidth){
				var length = 0;
				Ext.Array.forEach(colButton,function(button,index,array){
					length += button.text.length;
				});
				this.buttonWidth = 25 * length;
			}
			var xapactioncolumn = {  
				xtype:'xapactioncolumn',
				width:this.buttonWidth,
				text:'操作',
				items: colButton
			};
			var CM_JR_Record_new = [];
			CM_JR_Record_new.push(xapactioncolumn);
			Ext.Array.forEach(this.CM_JR_Record,function(record,index,array){ 
				CM_JR_Record_new.push(record);
			});
			this.CM_JR_Record= CM_JR_Record_new;
		}
    },
	
	initComponent: function() {
		var me = this;
		//增加task隐藏列
		this.CM_JR_Record.push({ header: 'processTask',  dataIndex: 'processTask' ,hidden:true});
		//grid加入列按钮
		var colButton  = [];
		//初始化tbar
		if (this.processInfo) {
			this.init_tbar(colButton);
		};
		//初始化列按钮及组件新CM
		if (this.isColButtonShow) {
			this.init_ColumnButton(colButton);
		};
		
		
        this.callParent(arguments);
        //监听行点击事件
		this.on("itemclick", this.onItemClick, this);
    }
        
});

Ext.define('iih.mr.tm.bas.block.BasTemplateListBlock',{
	extend :  Xap.ej.element.grid.Grid ,

	           	           
			                            
			                                 
			                                         
	  
	
	alias:'widget.bastemplatelistblock',
	
	mixins : [ Xap.ej.block.LayeredBlock ],
	initComponent: function() {
		this.callParent();
		this.initBlock();
	},
	layout: 'fit',
	//checkboxShow : true,
	//simple点击行起作用，multi点击checkbox起作用
	mode: 'simple',
	//title: '基础模板列表',
	autoScroll:true,
	pageSize : 25,
	pageShow : true,
	ifSelect:true,
	selectBy: 'code' ,//主键dataIndex名称（默认是id）
	name: 'basTemplateListBlock',
	
	//processInfo: [
	tbar:[
		{text: '新建',method: 'create',iconCls: 'icon-Create'},
		//{text: '升级',method: 'upgrade'},
		{text: '打开',method: 'open',iconCls: 'icon-Open'},
		{text: '删除',method: 'delete',iconCls: 'icon-Delete'},
		{text: '属性',method: 'property',iconCls: 'icon-Property'},	
		{text: '停用',method: 'stopped',iconCls: 'icon-disable'},
        {text: '启用',method: 'activated',iconCls: 'icon-enable'}/*,
		{text: '应用',method: 'yingyong',disabled:true}*/
	],


	CM_JR_Record: [
	               
	               {header: '名称',dataIndex: 'name',width:200},//基础模板
	               {header: '纸张类型',dataIndex: 'paperTypeName',width:60},
	               {header: '状态',dataIndex: 'statusName',width:60},
	               {header: '创建人',dataIndex: 'createUserName',width:100},
	               {header: '创建时间',dataIndex: 'crtTime',xtype: 'xapdatecolumn',width:150},
	               {header: '最后更新人',dataIndex: 'lastUpdateUserName',width:100},
	               {header: '最后更新时间',dataIndex: 'lastUpdateTime',xtype: 'xapdatecolumn',width:150},
	               {header: '描述',dataIndex: 'description',flex:1},
	              // {header: '应用标志',dataIndex: 'applyFlag',width:60},
	               {header: '状态编码',dataIndex: 'statusCode'/*,dictionary: 'MRM06'*/,hidden:true},
	               {header: '基础模板id',dataIndex: 'code',hidden:true},
				   {header: '文件主键',dataIndex: 'filePk',hidden:true},
				 //  {header: '版本号',dataIndex: 'versionNo',flex:1},
	               {header: '纸张类型',dataIndex: 'paperTypeCode',hidden:true}
	],
	setGridData: function(data) {
	 	var dataList = data;
	 	if( null == data.dataList ){
	 		var totalList = {"total":0,"dataList":null};
	 		this.setPageData(totalList);
	 	}
	 	if(dataList){
		    	var totalList = {"total":data.total,"dataList":data.dataList};
		    	var pageNum = data.pageNum;
		    	if(pageNum == '1'){
			 		//console.log(totalList);
		    		this.setPageData(totalList);	//初始化赋值
		    	}else{
		    		//console.log("翻页");
		    		this.setData(data.dataList);	//翻页时赋值
		    	}
	 	}else{
	 		var totalList = {"total":data.total,"dataList":data.dataList};
	 		this.setPageData(totalList);
	 	}
	}

})
Ext.define('iih.mr.tm.bas.view.BasTemplateEditView', {
    extend:  Xap.ej.template.BaseTemplate ,

                                                     
                                                             
                                                             
                                                            
                                                              
                                                           
                                                                   

    alias: 'widget.bastemplateeditview',
    layout: 'fit',

    xapConfig: {
        blocks: {
            'content': {
                xclass: 'iih.mr.block.editor.MrDocEditBlock',
                flex: 1
            }
        },

        actions: {
            'init': {
                xclass: 'iih.mr.tm.bas.action.BasTemplateEditAction',
                url: 'mr/basefile',
                blocks: {
                    content: 'content'
                }
            },
            'emrCmdDispatch': {
                xclass: 'iih.mr.action.editor.EmrCmdDispatchAction',
                blocks: {
                    content: 'content'
                }
            },
            'emrSave': {
            	//http://guozhongbao:8081/
                xclass: 'iih.mr.tm.bas.action.BasTemplateSaveAction',
                url: 'mr/tpl/baseTemplate',
                blocks: {
                    content: 'content'
                }
            },
            'emrEditorOperator': {
                xclass: 'iih.mr.action.editor.EmrEditorOperatorAction'
            },
            'emrRelease': {//模板进行启用
                xclass: 'iih.mr.tm.bas.action.ReleaseBasTemplateEditAction',
                url:'mr/tpl/activated/baseTemplate',
                blocks: {
                	content: 'content'
                }                
            },
            'editorCallBackAction': {
                xclass: 'iih.mr.tm.bas.action.EditorCallBackAction',
                blocks: {
                    content: 'content'
                }
            },
            'disabledOfficeToolBarAction': {
                xclass: 'iih.mr.tm.bas.action.DisabledOfficeToolBarAction',
                blocks: {
                    content: 'content'
                }
            }
        },

        chains: {
            'init': ['init'],
            'emrCmdDispatch': ['emrCmdDispatch'],
            'emrSave': ['emrSave'],
            'emrRelease': ['emrRelease'],
            'doSave': ['emrSave'],
            'editorCallBackAction':['editorCallBackAction'],
            'disabledOfficeToolBarAction':['disabledOfficeToolBarAction']
        },

        connections: {
            'content': [{
                selector: 'button[method=editorEvent]',
                event: 'editorEvent',
                chain: 'emrCmdDispatch'
            }, {
                event: 'afterrender',
                chain: 'init'
            }]
        }
    },
    
    hasEdit: function() {
        var plugin = document.getElementById('iemrEditor');
        if (plugin != undefined &&plugin.valid&&plugin.IsModified()) {
            return true;
        } else {
            return false;
        }
    }

})
Ext.define('iih.mr.tm.bas.view.BasTemplateListView',{
	extend :  Xap.ej.template.BaseTemplate ,

	           
	                                             
	                                                      	           
	                                                            
	                                                              
	                                                                
	                                                                 
	                                                               
	                                                         
	            
	
	alias:'widget.basicTemplateListView',	
	
	layout:'fit',

	xapConfig: {
		
		blocks: {
            'right': {
                xclass: 'iih.mr.tm.bas.block.BasTemplateListBlock'
            }
		},

		actions: {
            //查询列表
           'search': {
				xclass: 'iih.mr.tm.bas.action.BasTemplateListSearchAction',
				url:'mr/tpl/baseTemplate',
				blocks: {
					result: 'right'
				}
			},
			'openBasTemplate': {//打开模板
                xclass: 'iih.mr.tm.bas.action.OpenBasTemplateFileAction',
                blocks: {
                	result: 'right'
                }                
            },
			'delete': {//删除
                url:'mr/tpl/baseTemplate',
                xclass: 'iih.mr.tm.bas.action.DeleteBasTemplateListAction',
                blocks: {
                    result: 'right'
                }                
            },
			'property': {//属性编辑
                xclass: 'iih.mr.tm.bas.action.PropertyBasTemplateListAction',
                blocks: {
                    result: 'right'
                }                    
            },
			'activatedbastemplate': {//模板进行启用
                xclass: 'iih.mr.tm.bas.action.ActivatedBasTemplateListAction',
                url:'mr/tpl/activated/baseTemplate',
                blocks: {
                    result: 'right'
                }                
            }, 
            'stoppedbastemplate': {//模板进行停用
                url:'mr/tpl/stopped/baseTemplate',
                xclass: 'iih.mr.tm.bas.action.StoppedBasTemplateListAction',
                blocks: {
                    result: 'right'
                }                
            },
            'createBasTemplate': {//新建基础模板
				xclass: 'iih.mr.tm.bas.action.CreateBasTemplateAction',
				blocks: {
                    result: 'right'
                }      
			},
            'selectionchange':{
                xclass: 'iih.mr.tm.bas.action.BasTemplateRowclickAction',
                blocks: {
                    result: 'right'
                }
            } ,
            'btnstatus':{
                xclass: 'iih.mr.tm.bas.action.BasTemplateBtnStatusAction',
                blocks: {
                    result: 'right'
                }
            }
			},

		chains: {		
			'init': ['search','btnstatus'],
			'openBasTemplate': ['openBasTemplate'],		
			'delete': ['delete'],
			'property': ['property'],
			'activatedbastemplate': ['activatedbastemplate'],
			'stoppedbastemplate': ['stoppedbastemplate'],		 
			'create': ['createBasTemplate'],		
            'selectionchange':['selectionchange'],
            'btnstatus':['btnstatus']
		},

		connections: {	
		'right': [
	            {	//翻页操作
						event: 'turnpage',
						chain: 'init'
				 },{
	                selector: 'button[method=open]',
	                event: 'click',
	                chain: 'openBasTemplate'
	            }/*,{
	                //删除按钮，更新模板状态删除状态
	                selector: 'button[method=delete]',
	                event: 'click',
	                chain: 'delete'
	            }*/,{	//只能修改新建的属性
	                selector: 'button[method=property]',
	                event: 'click',
	                chain: 'property'
	            },{
	                selector: 'button[method=activated]',
	                event: 'click',
	                chain: 'activatedbastemplate'
	            },{
	                selector: 'button[method=stopped]',
	                event: 'click',
	                chain: 'stoppedbastemplate'
	            },{
					selector: 'button[method=create]',
					event: 'click',
					chain: 'create'
				},{
	                event: 'celldblclick',
	                chain: 'openBasTemplate'
	            },{//行点击时，触发判断操作按钮的有效无效
                    event: 'selectionchange',
                    chain: 'selectionchange'
                }
			]	
           }
	},
	
	initComponent : function() {
		this.callParent();
		var self = this;
        var gridBlock = this.down('bastemplatelistblock');
        var pageNum = gridBlock.currentPage;
		this.addEvents("pageRefresh");//为视图添加刷新事件
		this.addListener('pageRefresh', function(){//添加监听事件
	        var chain = this.getActionChain('init');
	        if(chain) {
	        	chain.execute({
        			pageNum:pageNum,
                	pageSize:'25'
	        	});
	        }
		});
		var delBtn = gridBlock.down('button[method=delete]');
		var msg = '确认删除？';
		delBtn.on('click',function(btn){
			XapMessageBox.confirm2(msg, function(btn){
        		if(btn=='yes'){
        			var chainDel = self.getActionChain('delete');
        			chainDel.execute();
        		}
        	});
		});
	}
})

Ext.define('iih.mr.tm.fr.action.DisabledOfficeToolBarAction', {
    extend:  Xap.ej.action.ServiceInvocation ,
    
    /*
     * @Override
     */
    doExecute: function(context) {
        var operations = context.operations;
        if(!operations) {
            return;
        }
        var me = this;
        var emrSave = 'com.founder.iemr.editor.toolbar:emrSave';//保存
        var emrSaveAs = 'com.founder.iemr.editor.toolbar:emrSaveAs';//保存
        var emrRelease = 'com.founder.iemr.editor.toolbar:emrRelease';//保存
        var emrSubmit = 'com.founder.iemr.editor.toolbar:emrSubmit';//提交
        var emrRevoke = 'com.founder.iemr.editor.toolbar:emrRevoke';//撤销
        var emrStartApprove ='com.founder.iemr.editor.toolbar:emrStartApprove';//开始审签
        var emrApprove ='com.founder.iemr.editor.toolbar:emrApprove';//审签
        var emrAuditRevoke ='com.founder.iemr.editor.toolbar:emrAuditRevoke';//审签撤回
        var emrReject = 'com.founder.iemr.editor.toolbar:emrReject';//驳回
        var emrDocDelete = 'com.founder.iemr.editor.toolbar:emrDocDelete';//删除
        var emrRefreshMacro = 'com.founder.iemr.editor.toolbar:emrRefreshMacro';//刷新宏元素
        var emrRefreshDiagnosis = 'com.founder.iemr.editor.toolbar:emrRefreshDiagnosis';//刷新诊断
        var emrImageLibraries = 'com.founder.iemr.editor.toolbar:emrImageLibraries';//插入图片
        var emrContinuePrint = 'com.founder.iemr.editor.toolbar:emrContinuePrint';//续打
        var emrSelectContinuePrint = 'com.founder.iemr.editor.toolbar:emrSelectContinuePrint';//选页打印
        var emrSaveAsTemplate = 'com.founder.iemr.editor.toolbar:emrSaveAsTemplate';//病历另存为模板
//        var emrSelectContinuePrint = 'com.founder.iemr.editor.toolbar:emrSelectContinuePrint';//选页续打
//        var emrContinuePrint = 'com.founder.iemr.editor.toolbar:emrContinuePrint';//病历另存为模板
//        var iddMedocalHistory = '';//月经史公式编辑
        var readonly = me.getOwner().readonly;
        var release = me.getOwner().release;
        var plugin = document.getElementById('iemrEditor');
        setTimeout(function() {
        	plugin.SetCommandVisible(emrStartApprove,false);
        	plugin.SetCommandVisible(emrSaveAsTemplate,false);
        	plugin.SetCommandVisible(emrSaveAs,false);
        	if(me.getOwner().opType=='open'){
        		if(readonly){
        			plugin.SetCommandEnable(emrSave,!readonly);
        			plugin.SetCommandEnable(emrRelease,release);
        		}else{
        			plugin.SetCommandEnable(emrSave,true);
        			plugin.SetCommandEnable(emrRelease,release);
        		}
            }else{
            }
        	plugin.UpdateToolbar();
        },350);
    }
});

Ext.define('iih.mr.tm.fr.action.EditorCallBackAction', {
    extend:  Xap.ej.action.ServiceInvocation ,
    
    /*
    * @Override
    */
    execute: function(context) {
    	var self = this;
    	var opType = this.getOwner().opType;
    	var plugin = document.getElementById('iemrEditor');
    	if('new'==opType || 'saveAs'==opType){
    		//设置编辑器按钮状态
    		var disabledOfficeToolBarAction = self.getOwner().getActionChain("disabledOfficeToolBarAction");
    		disabledOfficeToolBarAction.execute();
    		
    		//设置newF为1，则刷新宏元素后会自动刷新引用元素
    		this.getOwner().newF=1;
    	}else if ('open'==opType){
    		var operations = context.operations;
            if(!operations) {
                return;
            }
            //设置编辑器按钮状态
    		var disabledOfficeToolBarAction=self.getOwner().getActionChain("disabledOfficeToolBarAction");
    		disabledOfficeToolBarAction.execute();
    	}
		plugin.GotoSection('主诉',true);
		plugin.SetModified(false);
    }
});

Ext.define('iih.mr.tm.fr.action.FrTplActivatedAction', {
    extend:  Xap.ej.action.ServiceInvocation ,  
    
    doExecute: function(context) {
    	console.log('--------------------- FrTplActivatedAction -----------------------------------');
        var grid = this.getBlock('result');
        var rb = grid.getSelectionModel().getSelection();         
        if(rb.length == 0){
            var message = '请选模板进行启用~~~';
            XapMessageBox.info(message);
        }else{
            var mrFrTplCd =rb[0].data.mrFrTplCd;
            var length = rb.length;
            var dataList =[];
            for(var i=0;i<length;i++){
            	dataList.push(rb[i].data.mrFrTplCd);
            }
            //参照接口文件，多条记录启用
            var data ={"ids":dataList};
            this.prepareOperations(context.operations,data);
        }
    },

    prepareOperations: function(operations,data) {       
        var url = this.url;
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_CREATE,
            condition: null,
            data:data,
            scope: this,
            success: this.onSuccess
            // fail: this.onFail
        };
        operations.push(operation);
    },
    
    onSuccess: function(operation) {
        var owner = this.getOwner();
        var chain = owner.getActionChain('init');
        if(!chain) {
            //如果没找到chain执行结果
            console.log("faile");
            console.log(chain);            
            //chain = owner.getActionChain('init');
        }
        if(chain) {
            chain.execute();
        }
    }
});

Ext.define('iih.mr.tm.fr.action.FrTplBtnStatusAction', {
        extend:  Xap.ej.action.Action ,

	execute: function(context) {
		//按钮状态值
		var activatestatus = context.activatestatus;
		if(!activatestatus){//默认值设置
	        var btnUpgradeStatus = false ; //升级
	        var btnOpenStatus = false ;//打开
	        var btnPropertyStatus = false ;//属性
	        var btnDeleteStatus = false ;//删除
	        var btnActivateStatus = false ;//启用
	        var btnDeactivateStatus = false ;//停用
	        activatestatus = {
	        		'btnUpgradeStatus':btnUpgradeStatus,
	        		'btnOpenStatus':btnOpenStatus,
	        		'btnPropertyStatus':btnPropertyStatus,
	        		'btnDeleteStatus':btnDeleteStatus,
	        		'btnActivateStatus':btnActivateStatus,
	        		'btnDeactivateStatus':btnDeactivateStatus
	        };
		}
		this.setbuttonsstatus(activatestatus);
    },
    setbuttonsstatus:function(activatestatus){ //根据值设置按钮状态
		var gridBlock = this.getBlock('result');
//	    var gridBlock = block.down('bastemplatelistblock');
	    var btndelete = gridBlock.down('button[method=delete]');
	    this.setbuttion(btndelete,activatestatus.btnDeleteStatus)
	    
//	    var btnupgrade = gridBlock.down('button[method=upgrade]');
//	    this.setbuttion(btnupgrade,activatestatus.btnUpgradeStatus)
	    
	    var btnopen = gridBlock.down('button[method=open]');
	    this.setbuttion(btnopen,activatestatus.btnOpenStatus)
	    
	    var btnproperty = gridBlock.down('button[method=property]');
	    this.setbuttion(btnproperty,activatestatus.btnPropertyStatus)
	    	    
	    var btnactivated = gridBlock.down('button[method=activated]');
	    this.setbuttion(btnactivated,activatestatus.btnActivateStatus)
	    
	    var btnstopped = gridBlock.down('button[method=stopped]');
	    this.setbuttion(btnstopped,activatestatus.btnDeactivateStatus)
    },
    setbuttion:function(btn,status){
    	 btn.setDisabled(!status);
    }
});

Ext.define('iih.mr.tm.fr.block.FrTplProEditBlock',{
	extend :  Xap.ej.block.FormBlock ,

	           
                                        
                                            
                                         
                                       
	  

	alias:'widget.frtplproeditblock',

	layout: {
        type: 'table',
        columns: 1,
        tableAttrs: {
            border: 0,
            cellpadding: 5,
            cellspacing: 1,
            width: '100%'
        },
        tdAttrs: {
            valign: 'left'
        }
    },
    buttons:[{
        xtype: "button",
        name: 'confim',
        method:'confim',
        text: '确认',
    },{
        xtype: "button",
        name: 'cancel',
        method:'cancel',
        text: '取消'    
    }],
	items: [   
                {
                	xtype:'xaptextfield',
                    name:'nm',
                    fieldLabel:'名称:',
                    labelAlign:'right'
                },{
		            xtype:'xapcombobox',
		            name :'mrFrTplTpCd',
		            fieldLabel:'模板类型:',
	                allOptions:false,  
	                editable: false,    
		            dictionary:'MRM12',
                    labelAlign:'right' 
                },{
                	xtype:'xaptextarea',
	            	height:40,
	                name :'memo',
	                fieldLabel:'描述:',
                    labelAlign:'right'
                },{
                	xtype: 'xapdisplayfield',
        			fieldLabel: '',
        			vertical: true,
        			name:'msgInfo',
        			value: '',
        			margin:'-10 0 0 0'
                },{           
	                xtype: "xaptextfield",
	                name: 'mrFrTplCd',
	                hidden:true
                },{           
	                xtype: "xaptextfield",
	                name: 'filePk',
	                hidden:true
                }
         ],

	setData: function(data) {
	    this.callParent(arguments);
	},
    getData: function() {
        this.callParent(arguments);
    }
    
})
Ext.define('iih.mr.tm.fr.action.FrTplProEditConfimAction', {
extend:  Xap.ej.action.ServiceInvocation ,
	doExecute: function(context) {
	   this.callParent();
	   var operations = context.operations;		 
	   var view = this.getOwner();
	   var properties = view.getLayer(Xap.ej.block.Layer.PROPERTIES);
	   var data = {};
       data.mrFrTplTpCd = properties.data.mrFrTplTpCd;//医疗记录基础模板编码
       data.nm = properties.data.nm;
       data.memo = properties.data.memo;//文件主键
       data.mrFrTplCd = properties.data.mrFrTplCd;
       this.getOwner().ownerCt.close();
       if(properties.data.customerData=='new'){
    	   //新建操作方式更改2014-12-14
    	   var layout = properties.data.block.getLayout();
    	   var mrFrTplTpCd = data.mrFrTplTpCd;
           var nm = data.nm;
           var memo = data.memo;
           var owner = properties.data.sourceView;
           var block = properties.data.block;
           
           var canvas = Xap.getCanvas();
           var config = {
                   xclass: 'iih.mr.tm.fr.view.FrTplEditView',
                   pageTitle: nm,
                   pageCode:'frtpleditview',
                   viewConfig:{
                       opType:'new',
                       mrFrTplTpCd:mrFrTplTpCd,
                       memo:memo
                   }
           };
           canvas.fireEvent("addWorkPage",config);
       }else if(properties.data.customerData=='edit'){
    	   this.prepareOperations(operations,data);
       }
	},    
    addOperations: function(operations,data,view) {
        var condition = data;
        var url = this.url;
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_CREATE,
            condition: null,
            data:condition,
            scope: this,
            success: this.onSuccess,
            fail: this.onFail
        };
        operations.push(operation);
    },
    onSuccess: function() {
        //调用模板列表刷新页面
        var properties = this.getOwner().getLayer(Xap.ej.block.Layer.PROPERTIES);
        var view = properties.data.sourceView;
        var chain = view.getActionChain('init');
        if(!chain) {
            //如果没找到chain执行结果
            console.log("faile");   
        }
        if(chain) {
            chain.execute();
        }
    },
    onFail: function(operation) {
        Ext.MessageBox.show({
            title:'提示',
            msg:'新增失败!!!'
        });
    },    
    prepareOperations: function(operations,data) {
    	//修改属性，改属性的值
    	var mrFrTplCd = data.mrFrTplCd;
        var url = this.url+"/"+mrFrTplCd;        
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_UPDATE,
            condition: null,
            data:data,
            scope: this,
            success: this.onSuccess
        };
        operations.push(operation);
    }        
});

Ext.define('iih.mr.tm.fr.action.FrTplProEditCancelAction', {
	extend:  Xap.ej.action.Action ,
	
	/*
	* @Override
	*/
	execute: function(context) {
       //关闭窗口
       var owner = this.getOwner().ownerCt;  
       owner.close();
    }
});

Ext.define('iih.mr.tm.fr.action.FrTplProEditCheckAction', {
extend:  Xap.ej.action.ServiceInvocation ,
	doExecute: function(context) {
		this.callParent();
		var operations = context.operations;
       	var rs = this.getBlock('result').ownerCt;      
       	//console.log(rs); 
       	//向后台发送form表单   
       	var form = this.getBlock('result').getForm();
       	//拿到的form的value有问题       
//       console.log(this.getBlock('result').getForm().getValues());
       	var data =this.getBlock('result').getForm().getValues();
       	if((data!=undefined)||(data!=null)){
          	data = this.getBlock('result').getForm().getValues();
       	}else{
           	data = null;
       	}
       	var properties = this.getOwner().getLayer(Xap.ej.block.Layer.PROPERTIES);
       	//数据存储在properties对象
      	properties.data.mrFrTplTpCd = data.mrFrTplTpCd;
  		properties.data.nm = data.nm;
  		properties.data.memo = data.memo;
  		properties.data.filePk = data.filePk;
  		properties.data.mrFrTplCd = data.mrFrTplCd;
  		var view = this.getOwner();
  		var msgInfo = view.down('xapdisplayfield[name=msgInfo]');
  		var params={},errorText;
  		if(data.nm!=undefined && !Ext.isEmpty(data.nm,false)){
  			if(data.mrFrTplTpCd!=undefined && !Ext.isEmpty(data.mrFrTplTpCd,false)){
  				if(properties.data.customerData=='new'){
  		  			params = {name:data.nm};
  		  		}else if(properties.data.customerData=='edit'){	          
  		  			params = {code:data.mrFrTplCd,name:data.nm};
  		  		}
  		  		this.checkOperations(operations, params);
  	  		}else{
	  	  		errorText = '模板类型不能为空，请选择！';
	       		msgInfo.setValue('<font color=red>' + errorText + '</font>');
	       		return;
  	  		}
  		}else{
  			errorText = '名称不能为空，请输入！';
       		msgInfo.setValue('<font color=red>' + errorText + '</font>');
       		return;
  		}
	},    
    checkOperations: function(operations,params) {
        var url = this.url;
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_GET,
            condition: null,
            params:params,
            scope: this,
            success: this.onSuccess,
            fail: this.onFail
        };
        operations.push(operation);
    },
    onSuccess: function(returnData) {
    	var view = this.getOwner();
    	var chain = view.getActionChain('confim');
    	var isexist = returnData.result.data;
    	if(!isexist){
    		chain.execute();
    	}else{
    		var msg = '模板名称重复，请重新输入!!!';
    		XapMessageBox.info(msg);
    	}
    },
    onFail: function(operation) {
    	var msg = '验证失败!!!';
    	XapMessageBox.info(msg);
    }     
});

Ext.define('iih.mr.tm.fr.action.FrTplProInitAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	                                 

	doExecute: function(context) {
	    this.callParent();
	    console.log('------------------------ FrTplProInitAction ----------------------------------');
        var operations = context.operations;
        var owner = this.getOwner();
        var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
        properties.setData({
            customerData: context.customerData,   
            mrFrTplCd:context.mrFrTplCd, 
            filePk:context.filePk,
            sourceView:context.sourceView,  
            block:context.block
        });
        console.log(context.customerData);
        console.log(context.sourceView);
        if(context.customerData=='new'){
        }else if(context.customerData=='edit'){
        	//编辑页面初始化
            if(!operations) {
                return;
            }
            this.prepareOperations(operations,context.mrFrTplCd);
        }
	},  
	 prepareOperations: function(operations,data) {
        var url = this.url +'/'+data;    
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_GET,
            condition: null,
            data:null,
            scope: this,
            success:this.onSuccess,
            //fail: this.onFail
        };
        operations.push(operation);	    
	 },
	    
    onSuccess: function(operation) {
        var block = this.getBlock('result');
        var m = operation.result.data;
        // TODO 数据格式就这样了？
        if(m instanceof Ext.data.Model) {
            block.setData({
                mclass: operation.mclass,
                data: m.getData(true)
            });
        }
        else {
            //分布赋值
            block.setData(m);
        }
    }    
});

Ext.define('iih.mr.tm.fr.view.FrTplProEditView',{
	extend :  Xap.ej.stl.view.SingleRecordEditTemplate ,

	           
	                                                  
	                                                          
	                                                          
	                                                        
	             
	alias:'widget.frtplproeditview',
	
	layout: 'fit',
	
	xapConfig: {
		blocks: {
			'content': {
				xclass: 'iih.mr.tm.fr.block.FrTplProEditBlock'
			}
		},

		actions: {
			'create': { 
				xclass: 'iih.mr.tm.fr.action.FrTplProInitAction',
				url: 'mr/tpl/frtpl',
				blocks: {
                    result:'content'
                }
			},
			'confim': {
                xclass: 'iih.mr.tm.fr.action.FrTplProEditConfimAction',
                url:'mr/tpl/frtpl',
                blocks: {
                    result: 'content'
                }
            },
            'cancel': {
                xclass: 'iih.mr.tm.fr.action.FrTplProEditCancelAction',
                blocks: {
                    result: 'content'
                }
            },
            'check': {
                xclass: 'iih.mr.tm.fr.action.FrTplProEditCheckAction',
                url:'mr/tpl/frtpl/check',
                blocks: {
                    result: 'content'
                }
            }
			
		},

		chains: {
			'init': ['create'],
            'confim': ['confim'],
            'cancel': ['cancel'],
            'check': ['check']
		},

		connections: {
			'content': [{    
			    //加载数据
                event: 'afterrender',
                chain: 'init'
            },{    
                //确认按钮
                selector: 'button[method=confim]',
                event: 'click',
                chain: 'check'
            },{    
                //取消按钮
                selector: 'button[method=cancel]',
                event: 'click',
                chain: 'cancel'
            }]
		}
	},
	initComponent : function() {
		this.callParent();
		this.addEvents("pageRefresh");//为视图添加刷新事件
		this.addListener('pageRefresh', function(){//添加监听事件
	        var gridBlock = this.down('frtpllistblock');
	        var pageNum = gridBlock.currentPage;
	        var chain = this.getActionChain('init');
	        if(chain) {
	        	chain.execute({
	        		pageNum:pageNum,
	            	pageSize:'25'
	        	});
	        }
		});
	}
})
Ext.define('iih.mr.tm.fr.action.FrTplCreateAction', {
	extend:  Xap.ej.action.PopAction ,
	
	                                                 
	/*
	* @Override
	*/
	execute: function(context) {
	   //新建模板
		console.log('---------------- FrTplCreateAction --------------------');
	    var view =this.getOwner();	
	    var block = this.getBlock('result');
        var config = {         
            modal: true,            
            height: 220,
            width: 300,
            title :'新建基础模板',
            contentConfig: {
            	//新建模板页面
                xtype: 'frtplproeditview', 
                initChain: {
                    name: 'init',
                    context: {
                        customerData: 'new',
                        sourceView: view,
                        block:block
                    }
                }
            }
        };
        this.callParent([config]);    
    }
});

Ext.define('iih.mr.tm.fr.action.FrTplDelAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override  点击发布按钮，更新模板状态url：basTemplate,发送方式 put
	*/
    doExecute: function(context) {
    	var grid = this.getBlock('result');
        var rb = grid.getSelectionModel().getSelection();      
        if(rb.length == 0){
            var message = '请选模板进行删除~~~';
            XapMessageBox.info(message);
        }else{
        	 var mrFrTplCd =rb[0].data.mrFrTplCd;
             var length = rb.length;
             var dataList =[];
             for(var i=0;i<length;i++){
             	dataList.push(rb[i].data.mrFrTplCd);
             }
             //参照接口文件，多条记录启用
             var data ={"ids":dataList};
             this.prepareOperations(context.operations,data);
        }
    },

    prepareOperations: function(operations,data) {       
        var url = this.url;     
        var mclass = null;       
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: mclass,
            method: METHODS.METHOD_DELETE,
            data:data,
            condition: null,
            scope: this,
            success: this.onSuccess
        };
        operations.push(operation);
    },
    
    onSuccess: function(operation) {
        var owner = this.getOwner();
        var chain = owner.getActionChain('init');
        var message = operation.result.data.message;
        var gridBlock = owner.down('frtpllistblock');
        var pageNum = gridBlock.currentPage;
        if(!chain) {
            //如果没找到chain执行结果
            console.log(chain);            
        }
        if(chain) {
            chain.execute({
            	pageNum:pageNum,
            	pageSize:'25'
            });
        }
    }
});

Ext.define('iih.mr.tm.fr.action.FrTplEditAction', {
	extend:  iih.mr.action.editor.EmrEditorOperatorAction ,
	
	/*
	* @Override
	*/
	execute: function(context) {
		console.log('------------------------ FrTplEditAction -------------------------------');
    	var operations = context.operations;
    	if(!operations) {
            return;
        }
    	console.log(this.getOwner());
    	var opType = this.getOwner().opType;
    	var rs = this.getBlock('content');   
    	this.addEditorEvent(rs);
    	if(opType!=undefined){
    		this.showProgress();
            if(opType=='new'){
                this.addPrepareOperations();
            }else if(opType=='open'){
                this.openPrepareOperations(operations, this.getOwner().filePk);
            }
        }
    },
    openPrepareOperations: function(operations, filePk) {    	
//    	filePk = '0A3FA5841F3FA776E050007F01006EAB';
    	var url = this.url+'/'+filePk;
        console.log(url);
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            method: METHODS.METHOD_GET,
            scope: this,
            success: this.onOpenSuccess
        };
        operations.push(operation);
    },
    onOpenSuccess: function(operation) {
        var self = this;
        var basTemplateEditPage = self.getOwner();
        var params={
                'objectId':'iemrEditor',
                'sstream':operation.result.data.odtFile,
                'mr_mode':2,
                'readonly':basTemplateEditPage.readonly,
                'callBackAction':'editorCallBackAction'//编辑器加载完成后要执行的回调Action
        };
        this.insertWriter(basTemplateEditPage,params);
        this.closeProgress();
    },
    addPrepareOperations: function() {
        var self = this;
        var basTemplateEditPage = self.getOwner();
        var params={
                'objectId':'iemrEditor',
//                'sstream':'',
                'mr_mode':2,
                'readonly':false,
                'callBackAction':'editorCallBackAction'
        };
        this.insertWriter(basTemplateEditPage,params);
        this.closeProgress();
    }
});

Ext.define('iih.mr.tm.fr.action.FrTplEditReleaseAction', {
    extend:  Xap.ej.action.ServiceInvocation ,  
    
    doExecute: function(context) {
    	console.log('--------------------- FrTplEditReleaseAction -----------------------------------');
    	var operations = context.operations;
    	var owner = this.getOwner();
        //模板id//rb instanceof Array
        var dataList =[];
        var mrFrTplCd = owner.mrFrTplCd;
        var opType = owner.opType;
        var plugin = document.getElementById('iemrEditor');
	    plugin.tagName = 'ext';
        var data = {};
        if(opType=='new'){
        	data.nm = owner.title;
        	data.memo = owner.memo;
        	data.mrFrTplTpCd = owner.mrFrTplTpCd;
        	data.odtFile = plugin.SaveToString();
        	data.statusCode ='release';
        	this.addPrepareOperations(operations,data);
        }else if(opType=='open'){
        	dataList.push(mrFrTplCd);
        	data ={"ids":dataList};
            this.prepareOperations(operations,data);
        }
    },

    prepareOperations: function(operations,data) {       
        var url = this.url;
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_CREATE,
            condition: null,
            data:data,
            scope: this,
            success: this.onOpenSuccess
            // fail: this.onFail
        };
        operations.push(operation);
    },
    
    onOpenSuccess: function(operation) {
		var plugin = document.getElementById('iemrEditor');
		var emrSave = 'com.founder.iemr.editor.toolbar:emrSave';//保存
        var emrRelease = 'com.founder.iemr.editor.toolbar:emrRelease';//保存
		plugin.SetCommandEnable(emrSave,false);
		plugin.SetCommandEnable(emrRelease,false);
		plugin.UpdateToolbar();
		var msg = '启用成功!!!';
		XapMessageBox.info(msg);
        /*var owner = this.getOwner();
        var listView = owner.ownerCt.down('basicTemplateListView');
        var grid = listView.down('bastemplatelistblock');
        var pageNum = grid.currentPage;
        var chain = listView.getActionChain('init');
        if(!chain) {
            //如果没找到chain执行结果
            console.log("faile");
            console.log(chain);            
            //chain = owner.getActionChain('init');
        }
        if(chain) {
            chain.execute({
            	pageNum:pageNum,
            	pageSize:'25'
            });
        }*/
    },
    
    addPrepareOperations: function(operations,data) {
        var METHODS = this.getInvocationMethods();
        var url = 'mr/tpl/frtpl';
        console.log(url);
        var operation = {
            url: url,
            method: METHODS.METHOD_CREATE,
            data:data,
            scope: this,
            success: this.onAddSuccess,
            fail: this.onFail
        };
        operations.push(operation);
    },
    
    onAddSuccess: function(returnData) {
    	var editBasTem = this.getOwner();
    	editBasTem.opType='open';
    	var plugin = document.getElementById('iemrEditor');
    	editBasTem.code = returnData.result.data.code;
    	var emrSave = 'com.founder.iemr.editor.toolbar:emrSave';//保存
        var emrRelease = 'com.founder.iemr.editor.toolbar:emrRelease';//保存
		plugin.SetCommandEnable(emrSave,false);
		plugin.SetCommandEnable(emrRelease,false);
		plugin.UpdateToolbar();
        var msg = '启用成功!!!';
		XapMessageBox.info(msg);
    },
    onFail: function(operation) {
    	var msg = '启用成功!!!';
		XapMessageBox.info(msg);
    }
});

Ext.define('iih.mr.tm.fr.action.FrTplFileOpenAction', {
	extend:  Xap.ej.action.Action ,
	
	/*
	* @Override
	*/
	execute: function(context,data) {
       this.callParent();    	   
       var grid = this.getBlock('result');
       var rb = grid.getSelectionModel().getSelection();     
       if(rb.length == 0){
    	   var message = '请选模板进行打开~~~';
           XapMessageBox.info(message);
       }else if(rb.length >  1){
    	   var message = '请选模板进行打开~~~';
           XapMessageBox.info(message);
       }else{
    	   var mrFrTplCd =rb[0].data.mrFrTplCd;           
    	   var pk = rb[0].data.filePk;
    	   var nm = rb[0].data.nm;
    	   var view = this.getOwner().ownerCt;
    	   var readonly = true;
    	   var release = false;
    	   var canUpdate = rb[0].raw.canUpdate;
    	   if(rb[0].raw.canUpdate=='1'){
    		   readonly = false;
    	   }
    	   if(rb[0].raw.canActivated=='1' || '1' == rb[0].raw.canSubmit){
    		   release = true;
    	   }
    	   var workpageview = view.items.items[1];
           if(workpageview){
	           	var mrSn = workpageview.filePk;
	           	if(mrSn!=pk){
	           		view.remove(workpageview);
	           	}
           }
    	   var canvas = Xap.getCanvas();
           var config = {
                   pageCode: 'frtpleditview',
                   xclass: 'iih.mr.tm.fr.view.FrTplEditView',
                   pageTitle: nm,
                   viewConfig:{
                	   mrFrTplCd:mrFrTplCd,
                	   filePk:pk,
                       opType:'open',
                       readonly:readonly,
                       release:release
                   }
           };       
           canvas.fireEvent("addWorkPage",config);
    	}     
    }
});

Ext.define('iih.mr.tm.fr.action.FrTplListSearchAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	                                 

	doExecute: function(context) {
		this.showLoading();
	    this.callParent();
	    var pageNum ,pageSize; 
		if(context.event != undefined){
			pageNum = context.event.arguments[0];
			pageSize = context.event.arguments[1];
		}else{
			pageNum = context.pageNum;
			pageSize = context.pageSize;
		}
	    var data = {
				pageNum : pageNum,
				pageSize : pageSize
		}
        var operations = context.operations;      
        this.prepareOperations(operations,data);  
	},  
	 prepareOperations: function(operations,data) { 
		var pageNum = data.pageNum; 
		var pageSize = data.pageSize;   
        var url = this.url;    
        url +='?' + "&pageNum="+ pageNum +"&pageSize="+ pageSize;
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_GET,
            condition: null,
            data:null,
            scope: this,
            success: this.onSuccess,
            fail: this.onFail
        };
        operations.push(operation);	    
	 },
	 
	 onFail: function(operation) {  
		 alert("查询失败");
	 },  
     onSuccess: function(operation) {
        //alert("success");
        var gridBlock = this.getBlock('result');
//        var gridBlock = block.down('bastemplatelistblock')
        var m = operation.result;
        // TODO 数据格式就这样了？
        if(m instanceof Ext.data.Model) {
        	gridBlock.setData({
                mclass: operation.mclass,
                data: m.getData(true)
            });
        }
        else {        
        	gridBlock.setGridData(m);
        }
    
    }    
});

Ext.define('iih.mr.tm.fr.action.FrTplProAction', {
	extend:  Xap.ej.action.PopAction ,
	
	                                                 
	/*
	* @Override
	*/
	execute: function(context) {
	    var gridPage = this.getOwner();
    	var grid = this.getBlock('result');
	    var rb = grid.getSelectionModel().getSelection();         
        if(rb.length == 0){
            Ext.MessageBox.show({
                title:'提示',
                msg:'请选模板进行属性编辑~~~'
            });
        }else if(rb.length >  1){
    	   Ext.MessageBox.show({
               title:'提示',
               msg:'请选一条模板编辑属性~~~'
           });
       }else{
            //模板id
        	var mrFrTplCd =rb[0].data.mrFrTplCd;
            //var name =rb[0].data.name;
            var config = {         
                    modal: true,            
                    height: 200,
                    width:300,
                    title :'属性编辑',
                    contentConfig: {
                        xtype: 'frtplproeditview',  
                        initChain: {
                            name: 'init',
                            context: {
                                customerData: 'edit',
                                mrFrTplCd :mrFrTplCd,
                                sourceView: this.getOwner()
                            }
                        }
                    }
            };
          this.callParent([config]); 
        }	       
    }
});

/**
 * Created by guo_zhongbao on 2015/1/20.
 * datagrid表的行点击，选择或取消选择一行时触发事件
 */
Ext.define('iih.mr.tm.fr.action.FrTplRowclickAction', {
    extend:  Xap.ej.action.Action ,
    execute: function (context) {
        var datagrid = this.getBlock('result');
        var checkmodel = datagrid.getSelectionModel();
        var count1 = checkmodel.getCount();
        var selectedItemArr = datagrid.getSelectionModel().getSelection();
        var count = selectedItemArr.length ;
        var btnUpgradeStatus = false ; //升级
        var btnOpenStatus = false ;//打开
        var btnPropertyStatus = false ;//属性
        var btnDeleteStatus = false ;//删除
        var btnActivateStatus = false ;//启用
        var btnDeactivateStatus = false ;//停用
        if(count == 0){
        	
        }else{
            if(count == 1){
            	var item = selectedItemArr[0].raw;
            	if(item.canUpgrade){
            		btnUpgradeStatus = true ;//升级
            	}
            	if(item.canDelete){
            		btnDeleteStatus = true ;//升级
            	}
            	if(item.canActivated){
            		btnActivateStatus = true ;//升级
            	}
            	if(item.canStop){
            		btnDeactivateStatus = true ;//升级
            	}
                btnOpenStatus = true ;//打开
                btnPropertyStatus = true ;//属性
            }else{
                btnDeleteStatus = true ;//删除
                btnActivateStatus = true ;//启用
                btnDeactivateStatus = true ;//停用
                for(var i = 0 ; i < count ; i++ ){
                    var item = selectedItemArr[i].raw ;
                	if( btnDeleteStatus && ('0' == item.canDelete)){
                		btnDeleteStatus = false ;//删除
                	}
                	if( btnActivateStatus && ('0' == item.canActivated)){
                		btnActivateStatus = false ;//启用
                	}
                	if( btnDeactivateStatus && ('0' == item.canStop)){
                		btnDeactivateStatus = false ;//停用
                	}
                }
            }
        }
        var activatestatus = {
        		'btnUpgradeStatus':btnUpgradeStatus,
        		'btnOpenStatus':btnOpenStatus,
        		'btnPropertyStatus':btnPropertyStatus,
        		'btnDeleteStatus':btnDeleteStatus,
        		'btnActivateStatus':btnActivateStatus,
        		'btnDeactivateStatus':btnDeactivateStatus
        };
        var defectinAndmreditview = this.getOwner(); 	
        var chain = defectinAndmreditview.getActionChain('btnstatus');
        if(chain) {
                chain.execute({'activatestatus':activatestatus});
        }
    }
});

Ext.define('iih.mr.tm.fr.action.FrTplSaveAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	                                                     
	/*
	 * @Override
	 */
	execute: function(context) {
	    var operations = context.operations;
        if(!operations) {
            return;
        }
	    var plugin = document.getElementById('iemrEditor');
	    plugin.tagName = 'ext';
	    var owner = this.getOwner();
	    var opType = owner.opType;
	    var data = {'odtFile':plugin.SaveToString(),'contentText':plugin.ExportText()};
	    console.log(data);
	    if(opType!=undefined){
	    	this.showSubmitProgressBar();
            if(opType=='new'){
            	data.nm = owner.title;
            	data.memo = owner.memo;
            	data.mrFrTplTpCd = owner.mrFrTplTpCd;
                this.addPrepareOperations(operations,data);
            }else if(opType=='open'){
            	data.mrFrTplCd = this.getOwner().mrFrTplCd;
            	data.filePk = this.getOwner().filePk;
                this.openPrepareOperations(operations, data);
            }
        }
    },
    
    addPrepareOperations: function(operations,data) {    
        var METHODS = this.getInvocationMethods();       
        var url = this.url;
        console.log(url);
        var operation = {
            url: url,
            method: METHODS.METHOD_CREATE,
            data:data,
            scope: this,
            success: this.onAddSuccess,
            fail: this.onFail
        };
        operations.push(operation);
    },
    
    openPrepareOperations: function(operations,data) {
    	var code = data.code;
        var METHODS = this.getInvocationMethods();
        var url = this.url+"/"+code;
        var operation = {
            url: url,
            method: METHODS.METHOD_UPDATE,
            data:data,
            scope: this,
            success: this.onOpenSuccess,
            fail: this.onFail
        };
        operations.push(operation);
    },
    onOpenSuccess: function(operation) {
        //Ext.Msg.alert('提示','保存成功!');
    },
    onAddSuccess: function(returnData) {
    	var mrTemplateEditPage = this.getOwner();
    	mrTemplateEditPage.opType = 'open';
    	mrTemplateEditPage.filePk = returnData.result.data.filePk;
    	mrTemplateEditPage.mrFrTplCd = returnData.result.data.mrFrTplCd;
    },
    onFail: function(operation) {
        Ext.Msg.alert('提示','保存失败!');
    }
        
});

Ext.define('iih.mr.tm.fr.action.FrTplSerchAction', {
	extend:  Xap.ej.action.ServiceInvocation ,

	doExecute: function(context) {  
        var operations = context.operations;
        var keyword =context.event.arguments[1];
        this.prepareOperations(operations,keyword);  
    }, 
    prepareOperations: function(operations,keyword) {
        var url = this.url+'?keyWord='+keyword;//+'?keyword='+'test'
        var mclass = null;        
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: mclass,
            method: METHODS.METHOD_GET,
            condition: null,
            scope: this,
            success: this.onSuccess,
        };
        operations.push(operation);
    },
    onSuccess: function(operation) {
        var block = this.getBlock('result');
        var m = operation; 
        //console.log(operation.result.root);
        // TODO 数据格式就这样了？
        if(m instanceof Ext.data.Model) {
        	block.setData({
				mclass: operation.mclass,
				data: m.getData(true)
			});
        }
        else {
        	block.setData(m.result.data);
        }
    }    

});

Ext.define('iih.mr.tm.fr.action.FrTplStoppedAction', {
    extend:  Xap.ej.action.ServiceInvocation ,  
    
    doExecute: function(context) {
    	var grid = this.getBlock('result');
        var rb = grid.getSelectionModel().getSelection();         
        if(rb.length == 0){
            Ext.MessageBox.show({
                title:'提示',
                msg:'请选模板进行停用~~~'
            });
        }else{
            var mrFrTplCd = rb[0].data.mrFrTplCd;
            var length = rb.length;
            var dataList =[];
            for(var i=0;i<length;i++){
            	dataList.push(rb[i].data.mrFrTplCd);
            }
            //参照接口文件，多条记录启用
            var data ={"ids":dataList};
            this.prepareOperations(context.operations,data);
        }
    },

    prepareOperations: function(operations,data) {       
        var url = this.url;
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_CREATE,
            condition: null,
            data:data,
            scope: this,
            success: this.onSuccess
            // fail: this.onFail
        };
        operations.push(operation);
    },
    
    onSuccess: function(operation) {
        var owner = this.getOwner();
        var chain = owner.getActionChain('init');
        if(!chain) {
            //如果没找到chain执行结果
            console.log("faile");
            console.log(chain);            
            //chain = owner.getActionChain('init');
        }
        if(chain) {
            chain.execute();
        }
    }
});

Ext.define('iih.mr.tm.fr.action.FrTplTextRebackAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	execute: function(context) {
		var view = this.getOwner();
		var bottom = view.down('frtpltextareablock');
        //写回病历
        var hisDocPlugin = document.getElementById('iemrEditor');
        
        if(!hisDocPlugin.IsReadOnly()){
            var textArea,area;
            textArea = bottom.down('xaptextarea[name=contentText]');
            area = textArea.value;
            if(!Ext.isEmpty(area,false)){
            	hisDocPlugin.InsertText(area);
            }
        }
	}
});

Ext.define('iih.mr.tm.fr.action.FrTplTreeInitAction', {
	extend:  Xap.ej.action.ServiceInvocation ,

	doExecute: function(context) {
		this.showLoading();
        var operations = context.operations;
        var view = this.getBlock('result').ownerCt;
        var data = {};
        var keyword = view.ownerCt.down('[name=keyword]').value;
        condition = {keyword:keyword};
        data.condition = condition;
        this.prepareOperations(operations,data);    
    }, 
    prepareOperations: function(operations,data) {
    	var condition = data.condition;
        var url = this.url;
        if(Ext.Object.getSize(condition) > 0 ){
	        var queryString = Ext.Object.toQueryString(condition);
	        url = url + '?'+queryString;
        }

        var mclass = null;        
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: mclass,
            method:METHODS.METHOD_GET,
            condition: null,
            scope: this,
            success: this.onSuccessTree
        };
        operations.push(operation);
    },
       
    onSuccessTree: function(operation) {
        var block = this.getBlock('top');
        var noTree = block.down('xaptree');
        var m = operation; 
        if(m instanceof Ext.data.Model) {
        	gridBlock.setData({
                mclass: operation.mclass,
                data: m.getData(true)
            });
        }else {
        	console.log(operation.result);
        	if(operation.result.data.children){
//        		var store = noTree.getStore();
        		block.setData(operation.result.data.children);
        	}else{
        		block.setData(null);
        	}
        }
        noTree.collapseAll();
        /*var ownerCode;
        if(operation.result.data.children && operation.result.data.children.length>0){
        	ownerCode = operation.result.data.children[0].data.ownerCode;
        }*/
        var view = this.getBlock('result').ownerCt;
        var properties = view.getLayer(Xap.ej.block.Layer.PROPERTIES);
    }
});

Ext.define('iih.mr.tm.fr.action.FrTplTreeNodeAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
    doExecute: function(context) {
    	
        var operations = context.operations; 
        var view = this.getOwner();
        var treeBlock = view.down('frtpltreeblock');
        console.log('------------------- FrTplTreeNodeAction ------------------------');
        var data = {},fragmentTplCd='',treeNode;
        var keyword = view.ownerCt.down('[name=keyword]').value;
        if(context.fragmentTplCd!=undefined && !Ext.isEmpty(context.fragmentTplCd,false)){
        	fragmentTplCd = context.fragmentTplCd;
        }else{
        	treeNode = context.event.arguments[1];
        	if(!Ext.isEmpty(treeNode.data.leaf,false)){
            	if(treeNode.data.leaf){
            		fragmentTplCd = treeNode.data.id;
            	}
            }
        }
        data.fragmentTplCd = fragmentTplCd;
        if(!Ext.isEmpty(data.fragmentTplCd,false)){
        	this.showLoading();
        	this.prepareOperations(operations,data);
        }
    }, 
    prepareOperations: function(operations,data) { 
    	var fragmentTplCd = data.fragmentTplCd;
        var url = this.url+"/"+fragmentTplCd;
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_GET,
            params: data,
            data:null,
            scope: this,
            success: this.onSuccess,
        };
        operations.push(operation);	    
	 },
	    
	 onSuccess: function(operation) {
     	var block = this.getBlock('result');
        var areaText =block.down('[name=contentText]');
       	        
        var m = operation.result.data;
        // TODO 数据格式就这样了？
        areaText.setValue(m.contentText);
	 }     
});

Ext.define('iih.mr.tm.fr.action.FrTplTreeRebackAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	execute: function(context) {
		var view = this.getOwner();
		var bottom = view.down('frtpltextareablock');
        //写回病历
        var hisDocPlugin = document.getElementById('iemrEditor');
        var treeNode = context.event.arguments[1];
        if(!Ext.isEmpty(treeNode.data.leaf,false)){
        	if(treeNode.data.leaf){
        		if(!hisDocPlugin.IsReadOnly()){
                    var textArea,area;
                    textArea = bottom.down('xaptextarea[name=contentText]');
                    area = textArea.value;
                    if(!Ext.isEmpty(area,false)){
                    	hisDocPlugin.InsertText(area);
                    }
                }
        	}
        }
        
	}
});

Ext.define('iih.mr.tm.fr.action.FrTplTreeSearchAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	execute: function(context) {
		var view = this.getOwner();
		var bottom = view.down('frtplsidebarview');
		var chain =  bottom.getActionChain('init');
        chain.execute({
        });
	}
});

Ext.define('iih.mr.tm.fr.block.FrTplListBlock',{
	extend :  Xap.ej.element.grid.Grid ,

	           	           
			                            
			                                 
			                                         
	  
	
	alias:'widget.frtpllistblock',
	
	mixins : [ Xap.ej.block.LayeredBlock ],
	initComponent: function() {
		this.callParent();
		this.initBlock();
	},
	layout: 'fit',
	//checkboxShow : true,
	//simple点击行起作用，multi点击checkbox起作用
	mode: 'simple',
	//title: '基础模板列表',
	autoScroll:true,
	pageSize : 25,
	pageShow : true,
	ifSelect:true,
	selectBy: 'code' ,//主键dataIndex名称（默认是id）
	name: 'frTplListBlock',
	
	tbar:[
		{text: '新建',method: 'create',iconCls: 'icon-Create'},
		{text: '打开',method: 'open',iconCls: 'icon-Open'},
		{text: '删除',method: 'delete',iconCls: 'icon-Delete'},
		{text: '属性',method: 'property',iconCls: 'icon-Property'},	
		{text: '停用',method: 'stopped',iconCls: 'icon-disable'},
        {text: '启用',method: 'activated',iconCls: 'icon-enable'}
	],


	CM_JR_Record: [
	               {header: '名称',dataIndex: 'nm',width:200},//基础模板
	               {header: '类型',dataIndex: 'mrFrTplTpNm',width:60},
	               {header: '状态',dataIndex: 'statusName',width:60},
	               {header: '创建人',dataIndex: 'crtUserName',width:100},
	               {header: '创建时间',dataIndex: 'crtTime',xtype: 'xapdatecolumn',width:150},
	               {header: '最后更新人',dataIndex: 'lastUpdUserName',width:100},
	               {header: '最后更新时间',dataIndex: 'lastUpdTime',xtype: 'xapdatecolumn',width:150},
	               {header: '描述',dataIndex: 'memo',flex:1},
	               {header: '状态编码',dataIndex: 'status',hidden:true},
	               {header: 'id',dataIndex: 'mrFrTplCd',hidden:true},
				   {header: '文件主键',dataIndex: 'filePk',hidden:true}
	],
	setGridData: function(data) {
	 	var dataList = data;
	 	if( null == data.dataList ){
	 		var totalList = {"total":0,"dataList":null};
	 		this.setPageData(totalList);
	 	}
	 	if(dataList){
		    	var totalList = {"total":data.total,"dataList":data.dataList};
		    	var pageNum = data.pageNum;
		    	if(pageNum == '1'){
		    		this.setPageData(totalList);	//初始化赋值
		    	}else{
		    		this.setData(data.dataList);	//翻页时赋值
		    	}
	 	}else{
	 		var totalList = {"total":data.total,"dataList":data.dataList};
	 		this.setPageData(totalList);
	 	}
	}

})
Ext.define('iih.po.com.action.KnowledgeSearchAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	execute: function(context) {
		var view = this.getOwner();
		var bottom = view.down('knowledgesidebarview');
		var chain =  bottom.getActionChain('init');
        chain.execute({
        	
        });
	}
});

Ext.define('iih.mr.tm.fr.block.FrTplTreeBlock',{
	extend :  Xap.ej.block.FormBlock ,

	           
	                                     
	             
	
	alias:'widget.frtpltreeblock',
	layout: 'fit',
	items:[{
            xtype:'xapformblock',
            layout: {
    		    type: 'vbox',
    		    align: 'stretch'
    		},
            items:[{
 	           xtype:'xaptree',
	           name:'frTplTree',
	           flex: 1,
	           ifSelect:true,
	           rootVisible: false
	       }]
    }],

	setData: function(data) {
	    var tree = this.down('xaptree');
	    var myobj=eval(data);  
	    tree.setData(myobj);
	},
    getData: function() {
        return null;
    }	
    
})
Ext.define('iih.mr.tm.fr.block.FrTplTextAreaBlock',{
	extend :  Xap.ej.block.FormBlock ,

	           
		                               
	  

	alias:'widget.frtpltextareablock',

	layout:{
		type: 'vbox',
        align: 'stretch',
	},
	
	autoScroll : true,
	
	items: [{
			xtype: 'xaptextarea',
			name: 'contentText',
			readOnly:true,
			enableKeyEvents :true,
			margin:'5 10 5 5',
			rows:15,
			renderer : function(value) {
				if(value)
					return '<textarea name=\"FrTplArea\" id=\"contentText1\" rows=\"12\" cols=\"25\" ></textarea>';
			},
			listeners:{
				focus : function(area, The, eOpts) {
					var center = this.up('frtpltextareablock');
					if(center.selectedCmp){
						center.selectedCmp.setFieldStyle({'background-image': 'url("images/form/text-bg.gif")','background-color': 'white'});
						center.selectedCmp=null;
					}
					area.setFieldStyle({'background-image': 'none','background-color': '#D9D9D9'});
					center.selectedCmp = area;
                }
            }
		}],

	setData: function(data) {
	    this.callParent(arguments);
	},
    getData: function() {
        this.callParent(arguments);
    }
})
Ext.define('iih.mr.tm.fr.view.FrTplSidebarView', {
    extend:  Xap.ej.stl.view.TopBottomContainerTemplate ,
    
               
               	                                          
               	                                          
               	                                            
               	                                           
                 
    
    alias: 'widget.frtplsidebarview',
    
    border: 0,

    xapConfig: {
        blocks: {
            'top': {
                xclass: 'iih.mr.tm.fr.block.FrTplTreeBlock',
                height:300
                
            },
            'bottom': {
                xclass: 'iih.mr.tm.fr.block.FrTplTextAreaBlock',
                flex:1
            }
        },

        actions: {
        	'init': {
				xclass: 'iih.mr.tm.fr.action.FrTplTreeInitAction',
				url:'mr/tpl/tree/frtpl',
				blocks: {
					top: 'top',
					result: 'bottom'
				}
			},
			'treeClick': {
                xclass: 'iih.mr.tm.fr.action.FrTplTreeNodeAction',
                url:'knowledge',
                blocks: {
                	top: 'top',
					result: 'bottom'
                }
            },
			'treeReback': {
                xclass: 'iih.mr.tm.fr.action.FrTplTreeRebackAction',
                blocks: {
                	top: 'top',
					result: 'bottom'
                }
            },
			'textReback': {
                xclass: 'iih.mr.tm.fr.action.FrTplTextRebackAction',
                blocks: {
                	top: 'top',
					result: 'bottom'
                }
            }
		},

        chains: {
        	'init':['init'],
        	'treeClick':['treeClick'],
        	'treeReback':['treeReback'],
        	'textReback':['textReback']
        },

        connections: {
            'bottom': [],
            'top': [{
                	event: 'afterrender',
                	chain: 'init'
            	}]
        	}
    },
    
    initComponent : function() {
        this.callParent();
        var me = this,clickNtime,clickOtime,ctime,textArea,area,content;
        me.clicktime = '';
        var tree = me.down('[name=frTplTree]');
        tree.addListener('itemclick', function(v,r,it,i,e,eOpts){
    		var chain = me.getActionChain('treeClick');
    		var mrFrTplCd = r.raw.id,leaf = r.raw.leaf;
    		var bottom = me.down('frtpltextareablock');
    		clickNtime = new Date();
        	if(!Ext.isEmpty(me.clicktime,false)){
        		clickOtime = me.clicktime;
        		ctime = clickNtime-clickOtime;
        		me.clicktime = clickNtime;
        		//ctime = Math.round(ctime/1000);
        		if(ctime>500){
        			if(leaf){
        				content = r.raw.content;
                        textArea = bottom.down('xaptextarea[name=contentText]');
                        textArea.setValue(content);
                        me.oldTreeCd = mrFrTplCd;
            		}
        		}else{
        			if(leaf){
        				var hisDocPlugin = document.getElementById('iemrEditor'),content,odtFile,temp;
        				if(!Ext.isEmpty(me.oldTreeCd,false)){
            				if(me.oldTreeCd==mrFrTplCd){
            					if(!hisDocPlugin.IsReadOnly()){
            						odtFile = r.raw.odtFile;
                        			if(!Ext.isEmpty(odtFile,false)){
                        				/*temp = hisDocPlugin.SaveToString();
                        				hisDocPlugin.OpenFromString(odtFile,2);
                        				hisDocPlugin.InsertFromString(temp,0);*/
                        				hisDocPlugin.InsertFromString(odtFile,0);
                                    }
                                }
            				}else{
            					me.oldTreeCd = mrFrTplCd;
            					content = r.raw.content;
                                textArea = bottom.down('xaptextarea[name=contentText]');
                                textArea.setValue(content);
            				}
            			}else{
            				me.oldTreeCd = mrFrTplCd;
                    		if(!hisDocPlugin.IsReadOnly()){
                    			odtFile = r.raw.odtFile;
                    			if(!Ext.isEmpty(odtFile,false)){
                    				/*temp = hisDocPlugin.SaveToString();
                    				hisDocPlugin.OpenFromString(odtFile,2);
                    				hisDocPlugin.InsertFromString(temp,0);*/
                    				hisDocPlugin.InsertFromString(odtFile,0);
                                }
                            }
            			}
                	}
        		}
        	}else{
        		me.clicktime = clickNtime;
    			if(leaf){
        			content = r.raw.content;
                    textArea = bottom.down('xaptextarea[name=contentText]');
                    textArea.setValue(content);
                    me.oldTreeCd = mrFrTplCd;
        		}
        	}
        });
    }
});
Ext.define('iih.mr.tm.fr.view.FrTplView', {
    extend:  Xap.ej.stl.view.TopBottomContainerTemplate ,
    
                                                          
    
    alias: 'widget.frtplview',
    
    border: 0,

    xapConfig: {
        blocks: {
            'top': {
                xclass: 'iih.mr.tm.fr.block.FrTplSearchBlock',
                height:25
                
            },
            'bottom': {
                xclass: 'iih.mr.tm.fr.view.FrTplSidebarView',
                flex:1
            }
        },

        actions: {
            'search': {
                xclass: 'iih.mr.tm.fr.action.FrTplTreeSearchAction',
                //url: 'knowledges',
                blocks: {
                    condition: 'top',
                    result: 'bottom'
                }
            }
        },

        chains: {
            'search': ['search']
        },

        connections: {
            'bottom': [{
                event: 'afterrender',
                chain: 'search'
            }],
            'top': [{
                selector: 'tool[itemId=refresh]',
                event: 'click',
                chain: 'search'
            }]
        }
    },
    
    initComponent : function() {
        this.callParent();
        var me = this;
    }
});
Ext.define('iih.mr.tm.fr.block.FrTplSearchBlock',{
	extend :  Xap.ej.block.FormBlock ,

	                                           
	                                                
	                                          
	           
	alias:'widget.frtplsearchblock',
	
	header:false,
	
	border:0,
	    
	items:[{		 
    	xtype:'panel',
    	name:'searchblock',
    	tbar:[{           
	            xtype: "textfield",
	            name: 'keyword',
	            width:220,
	            margin: '0 2 0 2',
	            emptyText: "输入关键字按回车检索",
	            listeners:{
	                specialkey : function(field, e) {  
	                    if (e.getKey() == Ext.EventObject.ENTER) {  
	                        var view = this.up('frtplview');
	                        var chain = view.getActionChain('search');
	                        chain.execute({}); 
	                    }  
	                }
	            }
		    },{
	            itemId: 'refresh',
	            xtype: 'tool',
	            type: 'refresh'
		    }
    	]
	}]  
});
Ext.define('iih.mr.tm.fr.view.FrTplEditView', {
    extend:  Xap.ej.template.BaseTemplate ,

                                                     
                                                      
                                                      
                                                            
                                                              
                                                          
                                                                  

    alias: 'widget.frtpleditview',
    layout: 'fit',

    xapConfig: {
        blocks: {
            'content': {
                xclass: 'iih.mr.block.editor.MrDocEditBlock',
                flex: 1
            }
        },

        actions: {
            'init': {
                xclass: 'iih.mr.tm.fr.action.FrTplEditAction',
                url: 'mr/basefile',
                blocks: {
                    content: 'content'
                }
            },
            'emrCmdDispatch': {
                xclass: 'iih.mr.action.editor.EmrCmdDispatchAction',
                blocks: {
                    content: 'content'
                }
            },
            'emrSave': {
                xclass: 'iih.mr.tm.fr.action.FrTplSaveAction',
                url: 'mr/tpl/frtpl',
                blocks: {
                    content: 'content'
                }
            },
            'emrEditorOperator': {
                xclass: 'iih.mr.action.editor.EmrEditorOperatorAction'
            },
            'emrRelease': {//模板进行启用
                xclass: 'iih.mr.tm.fr.action.FrTplEditReleaseAction',
                url:'mr/tpl/activated/frtpl',
                blocks: {
                	content: 'content'
                }                
            },
            'editorCallBackAction': {
                xclass: 'iih.mr.tm.bas.action.EditorCallBackAction',
                blocks: {
                    content: 'content'
                }
            },
            'disabledOfficeToolBarAction': {
                xclass: 'iih.mr.tm.bas.action.DisabledOfficeToolBarAction',
                blocks: {
                    content: 'content'
                }
            }
        },

        chains: {
            'init': ['init'],
            'emrCmdDispatch': ['emrCmdDispatch'],
            'emrSave': ['emrSave'],
            'emrRelease': ['emrRelease'],
            'doSave': ['emrSave'],
            'editorCallBackAction':['editorCallBackAction'],
            'disabledOfficeToolBarAction':['disabledOfficeToolBarAction']
        },

        connections: {
            'content': [{
                selector: 'button[method=editorEvent]',
                event: 'editorEvent',
                chain: 'emrCmdDispatch'
            }, {
                event: 'afterrender',
                chain: 'init'
            }]
        }
    },
    
    hasEdit: function() {
        var plugin = document.getElementById('iemrEditor');
        if (plugin != undefined &&plugin.valid&&plugin.IsModified()) {
            return true;
        } else {
            return false;
        }
    }

})
Ext.define('iih.mr.tm.fr.view.FrTplListView',{
	extend :  Xap.ej.template.BaseTemplate ,

	           
	                                             
	                                               	           
	                                                     
	                                                
	                                                
	                                                      
	                                                    
	                                                   
	                                                     
	                                                     
	            
	
	alias:'widget.frtpllistview',	
	
	layout:'fit',

	xapConfig: {
		
		blocks: {
            'right': {
                xclass: 'iih.mr.tm.fr.block.FrTplListBlock'
            }
		},

		actions: {
            //查询列表
           'search': {
				xclass: 'iih.mr.tm.fr.action.FrTplListSearchAction',
				url:'mr/tpl/frtpl',
				blocks: {
					result: 'right'
				}
			},
			'frtplopen': {//打开模板
                xclass: 'iih.mr.tm.fr.action.FrTplFileOpenAction',
                blocks: {
                	result: 'right'
                }                
            },
			'delete': {//删除
                url:'mr/tpl/frtpl',
                xclass: 'iih.mr.tm.fr.action.FrTplDelAction',
                blocks: {
                    result: 'right'
                }                
            },
			'property': {//属性编辑
                xclass: 'iih.mr.tm.fr.action.FrTplProAction',
                blocks: {
                    result: 'right'
                }                    
            },
			'activated': {//模板进行启用
                xclass: 'iih.mr.tm.fr.action.FrTplActivatedAction',
                url:'mr/tpl/activated/frtpl',
                blocks: {
                    result: 'right'
                }                
            }, 
            'stopped': {//模板进行停用
                url:'mr/tpl/stopped/frtpl',
                xclass: 'iih.mr.tm.fr.action.FrTplStoppedAction',
                blocks: {
                    result: 'right'
                }                
            },
            'create': {//新建基础模板
				xclass: 'iih.mr.tm.fr.action.FrTplCreateAction',
				blocks: {
                    result: 'right'
                }      
			},
            'selectionchange':{
                xclass: 'iih.mr.tm.fr.action.FrTplRowclickAction',
                blocks: {
                    result: 'right'
                }
            } ,
            'btnstatus':{
                xclass: 'iih.mr.tm.fr.action.FrTplBtnStatusAction',
                blocks: {
                    result: 'right'
                }
            }
		},

		chains: {		
			'init': ['search','btnstatus'],
			'frtplopen': ['frtplopen'],		
			'delete': ['delete'],
			'property': ['property'],
			'activated': ['activated'],
			'stopped': ['stopped'],		 
			'create': ['create'],		
            'selectionchange':['selectionchange'],
            'btnstatus':['btnstatus']
		},

		connections: {	
		'right': [
	            {	//翻页操作
						event: 'turnpage',
						chain: 'init'
				 },{
	                selector: 'button[method=open]',
	                event: 'click',
	                chain: 'frtplopen'
	            },{	//只能修改新建的属性
	                selector: 'button[method=property]',
	                event: 'click',
	                chain: 'property'
	            },{
	                selector: 'button[method=activated]',
	                event: 'click',
	                chain: 'activated'
	            },{
	                selector: 'button[method=stopped]',
	                event: 'click',
	                chain: 'stopped'
	            },{
					selector: 'button[method=create]',
					event: 'click',
					chain: 'create'
				},{
	                event: 'celldblclick',
	                chain: 'frtplopen'
	            },{//行点击时，触发判断操作按钮的有效无效
                    event: 'selectionchange',
                    chain: 'selectionchange'
                }
			]	
           }
	},
	
	initComponent : function() {
		this.callParent();
		var self = this;
        var gridBlock = this.down('frtpllistblock');
        var pageNum = gridBlock.currentPage;
		this.addEvents("pageRefresh");//为视图添加刷新事件
		this.addListener('pageRefresh', function(){//添加监听事件
	        var chain = this.getActionChain('init');
	        if(chain) {
	        	chain.execute({
        			pageNum:pageNum,
                	pageSize:'25'
	        	});
	        }
		});
		var delBtn = gridBlock.down('button[method=delete]');
		var msg = '确认删除？';
		delBtn.on('click',function(btn){
			XapMessageBox.confirm2(msg, function(btn){
        		if(btn=='yes'){
        			var chainDel = self.getActionChain('delete');
        			chainDel.execute();
        		}
        	});
		});
	}
})

Ext.define('iih.mr.tm.gro.action.CancelGroupElementPropertyEditAction', {
	extend:  Xap.ej.action.Action ,
	
	/*
	* @Override
	*/
	execute: function(context) {
       //关闭窗口
       var owner = this.getOwner().ownerCt;  
       owner.close();
    }
});

Ext.define('iih.mr.tm.gro.action.ChooseTreeNodeChangeAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
    doExecute: function(context) {
    	console.log('---------------------- ChooseTreeNodeChangeAction ---------------------------');
        this.operations = context.operations;
        var block = this.getBlock('bottom');
        var page = this.getOwner().ownerCt.ownerCt;
        var right = page.down('groupelementchooseblock');
        var layout = right.getLayout();
        if(context.event.arguments[1].raw.leaf){
        	var gridBlock = page.down('groupelementchooseeditview');
        	var code = context.event.arguments[1].raw.data.code;
        	this.getFilePk(this.operations, code);
        }else{
        	//点击非叶子结点，对树进行查询
        	//按条件查询，修改列表显示
            var data = context.event.arguments[1].raw.data;
            this.prepareOperations(this.operations,data);
        	layout.setActiveItem(0);
        }
    },
    getFilePk:function(operations,code){
    	var url = this.url + '/' + code;
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_GET,
            condition: null,
            data:null,
            scope: this,
            success: this.onFileSuccess,
        };
        operations.push(operation);	
    },
    onFileSuccess: function(operation) {
    	var m = operation.result;
    	var page = this.getOwner().ownerCt.ownerCt;
    	var view = page.down('groupelementchooseview');
    	var block = page.down('groupelementchooseblock');
    	var layout = block.getLayout();
    	if(!Ext.isEmpty(m, false)){
    		var filePk = m.data.filePk;
    		var code = m.data.code;
    		//filePk = '0A3FA5841D2BA776E050007F01006EAB';
    		var gridBlock = block.down('groupelementchooseeditview')
      	   	var properties = gridBlock.getLayer(Xap.ej.block.Layer.PROPERTIES);
             properties.setData({
  	           	opType: 'open',  
  	           	filePk:filePk,
  	            code:code
             });
             var chain = view.getActionChain('beforeClickActivate');
             chain.execute();
             layout.setActiveItem(1);
    	}
    },
    prepareOperations: function(operations,data) { 
    	var typeCode = data.ownerTypeCode;
    	var customCategoryCode = data.customCategoryCode;
    	var ownerTypeCode = data.ownerTypeCode;
    	var ownerCode = data.ownerCode;
        var url = this.url +'?typeCode=MRM11.01'+'&ownerTypeCode='+ownerTypeCode+'&customCategoryCode='+customCategoryCode+'&ownerCode='+ownerCode;    
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_GET,
            condition: null,
            data:null,
            scope: this,
            success: this.onSuccess,
            //fail: this.onFail
        };
        operations.push(operation);	    
	 },
	    
	 onSuccess: function(operation) {
        var page = this.getOwner().ownerCt.ownerCt;
        var gridBlock = page.down('groupelementchooselistblock');
        var m = operation.result;
        // TODO 数据格式就这样了？
        if(m instanceof Ext.data.Model) {
        	gridBlock.setData({
                mclass: operation.mclass,
                data: m.getData(true)
            });
        }
        else {        
        	gridBlock.setData(m.dataList);
        }
	 }     
});

Ext.define('iih.mr.tm.gro.action.ChooseTreeNodeClickAction', {
	extend:  iih.mr.action.editor.EmrEditorOperatorAction ,
	
	/*
	* @Override
	*/
	execute: function(context) {
		console.log('-------------------------- ChooseTreeNodeClickAction ------------------------------');
    	var operations = context.operations;
    	if(!operations) {
            return;
        }
    	var page = this.getOwner().ownerCt;
    	var rs = page.down('groupelementchooseeditview');
    	var properties = rs.getLayer(Xap.ej.block.Layer.PROPERTIES);
    	var filePk = properties.data.filePk;
		if(!Ext.isEmpty(filePk, false)){
	        this.openPrepareOperations(operations, filePk);
		}
    },
    openPrepareOperations: function(operations, filePk) {
        var url = this.url+'/'+filePk;
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            method: METHODS.METHOD_GET,
            scope: this,
            success: this.onOpenSuccess
        };
        operations.push(operation);
    },
    onOpenSuccess: function(operation) {
        var self = this;
        var page = this.getOwner().ownerCt;
        var rs = page.down('mreditorblock');
        page.odtFile = operation.result.data.odtFile;
        var params={
                'objectId':'iemrEditorChoose',
                'sstream':operation.result.data.odtFile,
                'mr_mode':3,
                'readonly':true
        };
        var plugin = document.getElementById('iemrEditorChoose');
    	if(plugin!=null){
    		var objectView =rs.down('objectview');
            rs.remove(objectView);
         }
        this.insertWriter(rs,params);
        var block = page.down('groupelementchooseblock');
        var layout = block.getLayout();
	    layout.setActiveItem(1);
    }
});

Ext.define('iih.mr.tm.gro.action.ConfimGroupElementPropertyEditAction', {
extend:  Xap.ej.action.ServiceInvocation ,
	doExecute: function(context) {
	    this.callParent();    
	       var rs = this.getBlock('result').ownerCt;   
	       //向后台发送form表单   
	       var form= this.getBlock('result').getForm();
	       //拿到的form的value有问题       
	       var data =form.getValues();
	       if((data!=undefined)||(data!=null)){
	           data = this.getBlock('result').getForm().getValues();
	       }else{
	           data = null;
	       }
	       var properties = this.getOwner().getLayer(Xap.ej.block.Layer.PROPERTIES);
	       if(properties.data.customerData=='new'){
	    	   //新建操作方式更改2014-12-14
	    	   var layout = properties.data.block.getLayout();
	    	   var paperTypeCode =data.paperTypeCode;
               var name =data.name;
               var description =data.description;
               var owner = properties.data.sourceView;
               var block = properties.data.block;
               var gridBlock =block.down('groupelementeditview');               
            
               var chain = owner.getActionChain('beforeActivate');
               var properties = gridBlock.getLayer(Xap.ej.block.Layer.PROPERTIES);
	           properties.setData({
	            	opType: 'new',  
	            	name:name,
	            	//新建的属性
	            	
	            });
	           chain.execute();    /**/
	    	   layout.setActiveItem(1);	    	   
	       }  /* if(properties.data.customerData=='upgrade'){
	    	   //升级操作方式更改2014-12-14
	    	   var layout = properties.data.block.getLayout();
	    	   var paperTypeCode =data.paperTypeCode;
               var name =data.name;
               var description =data.description;
               var code =data.code;
               var filePk=data.filePk;
               var owner = properties.data.sourceView;
               var block = properties.data.block;
               var gridBlock =block.down('bastemplateeditview');               
               var chain = owner.getActionChain('beforeActivate');               
               var properties = gridBlock.getLayer(Xap.ej.block.Layer.PROPERTIES);	 
	            properties.setData({
	            	opType: 'upgrade',  
	            	code:code,
	            	filePk:filePk,
	            	name:name,
	            	description:description,
	            	paperTypeCode:paperTypeCode
	            });	  
	           chain.execute(); 
	    	   layout.setActiveItem(1);	    	   
	       }else if(properties.data.customerData=='edit'){	          
	           var operations = context.operations;		          
	           this.prepareOperations(operations,data);
	       }*/
	       this.getOwner().ownerCt.close();
	},    
    addOperations: function(operations,data,view) {
        var condition = data;
        var url = this.url;
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_CREATE,
            condition: null,
            data:condition,
            scope: this,
            success: this.onSuccess,
            fail: this.onFail
        };
        operations.push(operation);
    },
    onSuccess: function() {
        //调用模板列表刷新页面
        var properties = this.getOwner().getLayer(Xap.ej.block.Layer.PROPERTIES);
        var view  =  properties.data.sourceView;
        var chain = view.getActionChain('init');
        if(!chain) {
            //如果没找到chain执行结果
            console.log("faile");   
        }
        if(chain) {
            chain.execute();
        }
        
    },
    onFail: function(operation) {
        Ext.MessageBox.show({
            title:'提示',
            msg:'新增失败!!!'
        });
    },    
    prepareOperations: function(operations,data) {
    	var code =data.code;
        var url = this.url+"/"+code;        
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_UPDATE,
            condition: null,
            data:data,
            scope: this,
            success: this.onSuccess
            // fail: this.onFail
        };
        operations.push(operation);
    }        
});

Ext.define('iih.mr.tm.gro.block.GroupElementPropertyEditViewBlock',{
	extend :  Xap.ej.block.FormBlock ,

	           
	                                           
	                                               
	                                            
	                                          
	  

	alias:'widget.groupelementpropertyeditviewblock',

	layout: {
        type: 'table',
        columns: 2,
        tableAttrs: {
            border: 0,
            cellpadding: 5,
            cellspacing: 1,
            width: '100%'
        },
        tdAttrs: {
            valign: 'right'
        }
    },
    buttons:[{
        xtype: "button",
        name: 'confim',
        method:'confim',
        text: '确认',
        iconCls: 'icon-OK'
    },{
        xtype: "button",
        name: 'cancel',
        method:'cancel',
        text: '取消',
        iconCls: 'icon-cancel'
    }],
	items: [   
       		{           
                xtype: "xaptextfield",
                name: 'code',
                hidden:true
       		},{           
                xtype: "xaptextfield",
                name: 'filePk',
                hidden:true
       		},{
                xtype:'xaptextfield',
                name:'name',
                fieldLabel:'组合元素名称:'
        	},{
                xtype:'xapcombobox',
                name:'typeCode',
                fieldLabel:'组合元素分类:',   
                editable: false/*,    
                dictionary:'BCM001'*/             
        	},{
        		xtype:'xaptextfield',
                name:'typeCode',
                fieldLabel:'组合元素所属类型:'
            },{
        		xtype:'xaptextfield',
                name:'typeCode',
                fieldLabel:'组合元素所属:'
            },{
            	xtype:'xaptextarea',
            	height:40,
                labelAlign:'left',
                name :'description',
                fieldLabel:'描述:',
                width:255
            }
     ],
	setData: function(data) {
	    this.callParent(arguments);
	},
    getData: function() {
        this.callParent(arguments);
    }
})
Ext.define('iih.mr.tm.gro.action.GroupElementPropertyInitAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	                                 

	doExecute: function(context) {
	    this.callParent();
        var operations = context.operations;
        var owner = this.getOwner();
        var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
        properties.setData({
            customerData: context.customerData,   
            code:context.code, 
            filePk:context.filePk, 
            sourceView:context.sourceView,   
            block:context.block
        });
        if(context.customerData=='new'){
            return
        } /*else if(context.customerData=='edit'){
            if(!operations) {
                return;
            }
            console.log(context.sourceView);
            this.prepareOperations(operations,context.verMrTplKc);
        }*/
	},  
	 prepareOperations: function(operations,data) {
        var condition = data;
        var url = this.url +'?verMrTplKc='+data;      
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_GET,
            condition: null,
            data:condition,
            scope: this,
            success:this.onSuccess,
            //fail: this.onFail
        };
        operations.push(operation);	    
	 },
	    
    onSuccess: function(operation) {
        //alert("success");
        var block = this.getBlock('result');
        var m = operation.result;
		if(m){
			// TODO 数据格式就这样了？
			if(m instanceof Ext.data.Model) {
				block.setData({
					mclass: operation.mclass,
					data: m.getData(true)
				});
			}
			else {
				//分布赋值
				//block.setData(m);
				
				var owner = this.getOwner();
				
				var verMrTplKc = owner.down('[name=verMrTplKc]');
				var TypeCd = owner.down('[name=mrTypeCd]');
				var BaseTplKc = owner.down(' [name=verBaseTplKc]');
				var TplNm = owner.down('[name=mrTplNm]');
				var ownerTypeCd = owner.down('[name=ownerTypeCd]');
				var diagnosisCd = owner.down('[name=diagnosisCd]');
				var ownerCd = owner.down('[name=ownerCd]');
				
				verMrTplKc.setValue(m.verMrTplKc);
				TypeCd.setValue(m.mrTypeCd);
				BaseTplKc.setValue(m.verBaseTplKc);
				TplNm.setValue(m.mrTplNm);
				ownerTypeCd.setValue(m.ownerTypeCd);
				
				//辅助录入设置值 需要后端，grid存name不只是code
				
			   /*  diagnosisCd.setRecordData({code:deptCd,dept:deptNm});
				
				ownerCd.setRecordData({code:deptCd,dept:deptNm});*/
				
				/*
				console.log("++++++++++++++++++++++++");
				console.log(properties.sourceView);
				console.log(block.down('flowgrid'));*/
				
			}
		}
    }    
});

Ext.define('iih.mr.tm.gro.view.GroupElementAttributeView',{
	extend :  Xap.ej.stl.view.SingleRecordEditTemplate ,

	           
	                                                                   
	                                                                 
	                                                                       
	                                                                      
	             
	alias:'widget.groupelementattributeview',
	
	layout: 'fit',

	xapConfig: {
		blocks: {
			'content': {
				xclass: 'iih.mr.tm.gro.block.GroupElementPropertyEditViewBlock'
			}
		},

		actions: {
			'create': { 
			    url:'template_property',
				xclass: 'iih.mr.tm.gro.action.GroupElementPropertyInitAction',
				blocks: {
                    result:'content'
                }
			},
			'confim': {
                xclass: 'iih.mr.tm.gro.action.ConfimGroupElementPropertyEditAction',
                url:'mr/tpl/baseTemplate',
                blocks: {
                    result: 'content'
                }
            },
            'cancel': {
                xclass: 'iih.mr.tm.gro.action.CancelGroupElementPropertyEditAction',
                blocks: {
                    result: 'content'
                }
            }			
		},

		chains: {
			'init': ['create'],
            'confim': ['confim'],
            'cancel': ['cancel'],
		},

		connections: {
			'content': [{    
			    //加载数据
                event: 'afterrender',
                chain: 'init'
            },{    
                //确认按钮
                selector: 'button[method=confim]',
                event: 'click',
                chain: 'confim'
            },{    
                //取消按钮
                selector: 'button[method=cancel]',
                event: 'click',
                chain: 'cancel'
            }]
		}
	}
})
Ext.define('iih.mr.tm.gro.action.CreateGroupElementAction', {
	extend:  Xap.ej.action.PopAction ,
	
	                                                           
	/*
	* @Override
	*/
	execute: function(context) {
	   //新建模板
	    var view =this.getOwner();	
	    var block = this.getBlock('result');
        var config = {         
            modal: true,            
            height: 210,
            width: 550,
            title :'新建组合元素',
            contentConfig: {
            	//新建模板页面
                xtype: 'groupelementattributeview', 
                initChain: {
                    name: 'init',
                    context: {
                        customerData: 'new',
                        sourceView: view,
                        block:block
                    }
                }
            }
        };
        this.callParent([config]);    
    }
});

Ext.define('iih.mr.tm.gro.action.GroupChooseClickAction', {
	extend:  Xap.ej.action.Action ,
	
	execute: function(context) {
		//点击grid上选中的行，对操作权限进行修改
		console.log('--------------------------- GroupChooseClickAction ---------------------------------------');
		var grid = this.getBlock('result').down('groupelementchooselistblock');  
		var rb = grid.getSelectionModel().getSelection();  

		var enabledFlag=null;
        //打开按钮
        var open =grid.down('button[method=open]');
        //插入按钮
        var through =grid.down('button[method=through]');
		
		//将选中的这一条对应的可用的标志位可用
		/*var canOpen 		= rb[0].data.canOpen;
		var canThrough 		= rb[0].data.canThrough;
	    
	    //打开1可用  0为停用
	    if(canOpen=='1'){
	    	open.setDisabled(false);  
	    }else  if(canOpen=='0'){
	    	open.setDisabled(true);  
	    }
	    //插入 1可用  0为停用
	    if(canThrough=='1'){
	    	through.setDisabled(false);  
	    }else  if(canThrough=='0'){
	    	through.setDisabled(true);  
	    }*/
    }
});

Ext.define('iih.mr.tm.gro.action.GroupChooseCloseAction', {
	extend:  Xap.ej.action.Action ,
	
	execute: function(context) {
		//点击grid上选中的行，对操作权限进行修改
		console.log('--------------------------- GroupChooseCloseAction ---------------------------------------');
		var owner = this.getOwner().ownerCt;  
	    owner.close();
    }
});

Ext.define('iih.mr.tm.gro.action.GroupChooseEditCancelBtnAction', {
	extend:  Xap.ej.action.Action ,
	
	execute: function(context) {
		//点击grid上选中的行，对操作权限进行修改
		console.log('--------------------------- GroupChooseEditCancelBtnAction ---------------------------------------');
		var owner = this.getOwner().ownerCt;
		var layout = owner.getLayout();
	    layout.setActiveItem(0);
    }
});

Ext.define('iih.mr.tm.gro.action.GroupChooseEditThroughAction', {
	extend:  Xap.ej.action.Action ,
	
	execute: function(context) {
		//点击grid上选中的行，对操作权限进行修改
		console.log('--------------------------- GroupChooseEditThroughAction ---------------------------------------');
		var operations = context.operations;
		var owner = this.getOwner().ownerCt.ownerCt.ownerCt;
		var mrDocOdtFile = owner.odtFile;
        var plugin = document.getElementById('iemrEditor');
		plugin.InsertFromString(mrDocOdtFile,0);
		owner.close();
    }
});

Ext.define('iih.mr.tm.gro.action.GroupChooseThroughAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	doExecute: function(context) {
		//点击grid上选中的行，对操作权限进行修改
		console.log('--------------------------- GroupChooseThroughAction ---------------------------------------');
		var operations = context.operations;
		var grid =  this.getBlock('result').down('groupelementchooselistblock'); 
		var records = grid.getSelectionModel().getSelection();
		if(records.length>0){
			var filePk = records[0].data.filePk;
			this.openPrepareOperations(operations, filePk);
		}
    },
    openPrepareOperations: function(operations, filePk) {  
    	//filePk = '0A3FA5841D2BA776E050007F01006EAB';
        var url = this.url +'/'+filePk;
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            method: METHODS.METHOD_GET,
            scope: this,
            success: this.onOpenSuccess
        };
        operations.push(operation);
    },
    onOpenSuccess: function(operation) {
        var self = this;
        var m = operation.result.data;
        var mrDocOdtFile = m.odtFile;
        var owner = this.getOwner().ownerCt;  
        var plugin = document.getElementById('iemrEditor');
		plugin.InsertFromString(mrDocOdtFile,0);
		owner.close();
    }  
});

Ext.define('iih.mr.tm.gro.action.GroupElementActivateAction', {
	extend:  iih.mr.action.editor.EmrEditorOperatorAction ,
	

	execute: function(context) {
	    var operations = context.operations;
    	if(!operations) {
            return;
        }
    	var block = this.getBlock('result');         
    	var rs =block.down('groupelementeditview');
    	var properties = rs.getLayer(Xap.ej.block.Layer.PROPERTIES);
    	//打开类型
    	var opType=properties.data.opType;
    	alert(opType);
    	this.addEditorEvent(rs);
    	if(opType!=undefined){
            if(opType=='new'){
            	console.log(properties.data);
                this.addPrepareOperations();
            }else if((opType=='upgrade')||(opType=='open')){
            	//filePk为odt文件的主键
            	var filePk = properties.data.filePk;  
                this.openPrepareOperations(operations,filePk);
            }else {
                console.log("error"+"没有打开类型")
            }
        }
    },
    openPrepareOperations: function(operations, filePk) {    	
        var url = this.url+'/'+filePk;
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            method: METHODS.METHOD_GET,
            scope: this,
            success: this.onOpenSuccess
        };
        operations.push(operation);
    },
    onOpenSuccess: function(operation) {
        var self=this;
        var block = this.getBlock('result');         
        var rs =block.down('bastemplateeditview');
        var params={
                'objectId':'iemrEditor',
                'sstream':operation.result.data.odtFile,
                'mr_mode':2,
                'readonly':"readly"
        };
        var plugin = document.getElementById('iemrEditor');/*
    	var plugin = Ext.get('iemrEditor');*/
    	if(plugin!=null){
    		var objectView =rs.down('objectview');
            rs.remove(objectView);
            //保留直接换掉String
    		//plugin.OpenFromString(operation.result.data.odtFile,1);
         }
    	 this.insertWriter(rs,params);
    },
    addPrepareOperations: function() {
        var self=this;
        alert(123);
        var block = this.getBlock('result');         
        var rs =block.down('groupelementeditview');
        var params={
                'objectId':'iemrEditor',
                'sstream':'',
                'mr_mode':2,
                'readonly':'false'
        };
        this.insertWriter(rs,params);
    }
});

Ext.define('iih.mr.tm.gro.action.GroupElementChooseEditAction', {
	extend:  iih.mr.action.editor.EmrEditorOperatorAction ,
	
	/*
	* @Override
	*/
	execute: function(context) {
		console.log('-------------------------- GroupElementChooseEditAction ------------------------------');
    	var operations = context.operations;
    	if(!operations) {
            return;
        }
    	var page = this.getOwner().ownerCt;
    	var grid =  page.down('groupelementchooselistblock'); 
		var records = grid.getSelectionModel().getSelection();
		if(records.length>0){
			var filePk = records[0].data.filePk;
	    	var opType=this.getOwner().opType;
	        this.openPrepareOperations(operations, filePk);
		}
    },
    openPrepareOperations: function(operations, filePk) {    
    	//filePk = '0A3FA5841D2BA776E050007F01006EAB';
        var url = this.url+'/'+filePk;
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            method: METHODS.METHOD_GET,
            scope: this,
            success: this.onOpenSuccess
        };
        operations.push(operation);
    },
    onOpenSuccess: function(operation) {
        var self=this;
        var page = this.getOwner().ownerCt;
        var rs = page.down('mreditorblock');
        page.odtFile = operation.result.data.odtFile;
        var params={
                'objectId':'iemrEditorChoose',
                'sstream':operation.result.data.odtFile,
                'mr_mode':3,
                'readonly':true
        };
        var plugin = document.getElementById('iemrEditorChoose');
    	if(plugin!=null){
    		var objectView =rs.down('objectview');
            rs.remove(objectView);
         }
        this.insertWriter(rs,params);
        var block = page.down('groupelementchooseblock');
        var layout = block.getLayout();
	    layout.setActiveItem(1);
    }
});

Ext.define('iih.mr.tm.gro.action.GroupElementChooseListAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	                                 

	doExecute: function(context) {
		console.log('---------------------------- GroupElementChooseListAction -------------------------------------');
	    this.callParent();
        var operations = context.operations;      
        this.prepareOperations(operations);  
	},  
	 prepareOperations: function(operations) { 
		var condition = {};
        condition = Ext.apply(condition,{typeCode:'MRM11.01'});
        var page = this.getOwner().ownerCt;
    	var view = page.down('groupelementchoosetreeview');
    	var form = view.getBlock('top');
    	condition = Ext.apply(condition,form.getData());
    	var qs = Ext.Object.toQueryString(condition);
        var url = this.url+'?' + qs;
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_GET,
            condition: null,//{typeCode:'MRM11.01'},
            data:null,
            scope: this,
            success: this.onSuccess,
            fail: this.onFail
        };
        operations.push(operation);	    
	 },
	 
	 onFail: function(operation) {  
		 alert("fail");
	 },  
     onSuccess: function(operation) {
    	//alert("success");
        var block = this.getBlock('result');
        var gridBlock =block.down('groupelementchooselistblock');
        var m = operation.result;
        // TODO 数据格式就这样了？
        if(m instanceof Ext.data.Model) {
        	gridBlock.setData({
                mclass: operation.mclass,
                data: m.getData(true)
            });
        }
        else {
        	gridBlock.setData(m.dataList);
        }
    
    }    
});

Ext.define('iih.mr.tm.gro.action.GroupElementClickAction', {
	extend:  Xap.ej.action.Action ,
	
	execute: function(context) {
		//点击grid上选中的行，对操作权限进行修改
		var grid = this.getBlock('result').down('groupelementsearchlistblock');  
		var rb = grid.getSelectionModel().getSelection();  
		/*if(rb.length > 1){
			//选择多条组合元素
		}else{
	    	
	    }*/

		var enabledFlag=null;
        //升级按钮
        var upgrade =grid.down('button[method=upgrade]');
        /*//打开
        var open =grid.down('button[method=open]');
        //属性按钮
        var property =grid.down('button[method=property]');*/
        //删除按钮
        var deleteBt =grid.down('button[method=delete]');
        //提交
        var submit =grid.down('button[method=submit]');              
        //审核通过
        var verify =grid.down('button[method=verify]');
     	//驳回
        var reject =grid.down('button[method=reject]');        
        //停用
        var disable =grid.down('button[method=disable]');
        //启用
        var enable =grid.down('button[method=enable]');
		
		//将选中的这一条对应的可用的标志位可用
		var canUpdate 		= rb[0].data.canUpdate;
		var canDelete 		= rb[0].data.canDelete;
		var canSubmit 		= rb[0].data.canSubmit;
	    var canReview 		= rb[0].data.canReview;
		var canReject 		= rb[0].data.canReject;
		var canStop 		= rb[0].data.canStop;
		var canActivated 	= rb[0].data.canActivated;
		var canUpgrade		= rb[0].data.canUpgrade;
	    
	    //升级 1可用  0为停用
	    if(canUpgrade=='1'){
	    	upgrade.setDisabled(false);  
	    }else  if(canUpgrade=='0'){
	    	upgrade.setDisabled(true);  
	    }
	    //删除 1可用  0为停用
	    if(canDelete=='1'){
	    	deleteBt.setDisabled(false);  
	    }else  if(canDelete=='0'){
	    	deleteBt.setDisabled(true);  
	    }
	    //提交 1可用  0为停用
	    if(canSubmit=='1'){
	    	submit.setDisabled(false);  
	    }else  if(canSubmit=='0'){
	    	submit.setDisabled(true);  
	    }
	    //canReview通过  1可用  0为停用
	    //alert(canReview);
	    //不要给我返回除了1和0以外的值
	    if(canReview=='1'){
	    	verify.setDisabled(false);  
	    }else  if(canReview=='0'){
	    	verify.setDisabled(true);  
	    }else{
	    	verify.setDisabled(true);  
	    }
	    
	    //驳回 1可用  0为停用
	    if(canReject=='1'){
	    	reject.setDisabled(false);  
	    }else  if(canReject=='0'){
	    	reject.setDisabled(true);  
	    }
	    //停用 1可用  0为停用
	    if(canStop=='1'){
	    	disable.setDisabled(false);  
	    }else  if(canStop=='0'){
	    	disable.setDisabled(true);  
	    }
	    //启用 1可用  0为停用
	    if(canActivated=='1'){
	    	enable.setDisabled(false);  
	    }else  if(canActivated=='0'){
	    	enable.setDisabled(true);  
	    }
	    /*//应用 1可用  0为停用
	    if(canUpgrade=='1'){
	    	//可用升级
	    	deleteBt.setDisabled(false);  
	    }else  if(canUpgrade=='0'){
	    	//可用升级
	    	deleteBt.setDisabled(true);  
	    }*/
	    
		
    }, 
        
});

Ext.define('iih.mr.tm.gro.action.GroupElementEditAction', {
	extend:  iih.mr.action.editor.EmrEditorOperatorAction ,
	
	/*
	* @Override
	*/
	execute: function(context) {
    	var operations = context.operations;
    	if(!operations) {
            return;
        }
    	var opType=this.getOwner().opType;
    	var rs = this.getBlock('content');   
    	this.addEditorEvent(rs);
    	if(opType!=undefined){
            if(opType=='new'){
                this.addPrepareOperations();
            }else if(opType=='upgrade'){
                this.addPrepareOperations();
            }else if(opType=='open'){
                this.openPrepareOperations(operations, this.getOwner().verBaseTplKc);
            }
        }
    },
    openPrepareOperations: function(operations, strmFileSn) {    	
        var url = this.url+'/'+strmFileSn;
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            method: METHODS.METHOD_GET,
            scope: this,
            success: this.onOpenSuccess
        };
        operations.push(operation);
    },
    onOpenSuccess: function(operation) {
        var self=this;
        var mrTemplateEditPage=this.getOwner();
        var params={
                'objectId':'iemrEditor',
                'sstream':operation.result.odtFile,
                'mr_mode':2,
                'readonly':operation.result.readonly
        };
        this.insertWriter(mrTemplateEditPage,params);
    },
    addPrepareOperations: function() {
        var self=this;
        var mrTemplateEditPage=this.getOwner();
        var params={
                'objectId':'iemrEditor',
                'sstream':'',
                'mr_mode':2,
                'readonly':'false'
        };
        this.insertWriter(mrTemplateEditPage,params);
    }
});

Ext.define('iih.mr.tm.gro.action.GroupElementListSearchAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	                                 

	doExecute: function(context) {
	    this.callParent();
        var operations = context.operations;      
        this.prepareOperations(operations);  
	},  
	 prepareOperations: function(operations) { 
        var url = this.url+'?typeCode='+'MRM11.01';
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_GET,
            condition: null,//{typeCode:'MRM11.01'},
            data:null,
            scope: this,
            success: this.onSuccess,
            fail: this.onFail
        };
        operations.push(operation);	    
	 },
	 
	 onFail: function(operation) {  
		 alert("fail");
	 },  
     onSuccess: function(operation) {
    	//alert("success");
        var block = this.getBlock('result');
        var gridBlock =block.down('groupelementsearchlistblock')
        var m = operation.result;
        // TODO 数据格式就这样了？
        if(m instanceof Ext.data.Model) {
        	gridBlock.setData({
                mclass: operation.mclass,
                data: m.getData(true)
            });
        }
        else {        
        	gridBlock.setData(m.dataList);
        }
    
    }    
});

Ext.define('iih.mr.tm.gro.action.GroupElementLoadTreeDataAction', {
	extend:  Xap.ej.action.ServiceInvocation ,

	doExecute: function(context) {  
        var operations = context.operations;        
        this.prepareOperations(operations);    
    }, 
    prepareOperations: function(operations) {
    	var encounterCode = IMER_GLOBAL.encounterSn;
        var url = this.url+'?typeCode='+'MRM11.01';//+'?keyword='+'test'+'&'
        console.log(url);
        var mclass = null;        
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: mclass,
            method: METHODS.METHOD_GET,
            condition: null,
            scope: this,
            success: this.onSuccess
        };
        operations.push(operation);
    },
        
    onSuccess: function(operation) {
        var block = this.getBlock('result');
        var m = operation; 
        // TODO 数据格式就这样了？
        if(m instanceof Ext.data.Model) {
        	block.setData({
				mclass: operation.mclass,
				data: m.getData(true)
			});
        }
        else {
        	block.setData(m.result.root);
        }
    }    

});

Ext.define('iih.mr.tm.gro.action.GroupElementStatCdChangeAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	                                 

	doExecute: function(context) {
	    this.callParent();
	    var groupElementStatCd =context.event.arguments[0].value;
        var operations = context.operations;      
        this.prepareOperations(operations,groupElementStatCd);  
	},  
	 prepareOperations: function(operations,groupElementStatCd) { 
		//当所选为全部 
		if(groupElementStatCd=='ALL'){
			 var url = this.url+'?typeCode='+'MRM11.01'
		}else{
			 var url = this.url+'?typeCode='+'MRM11.01'+'&'+'statusCode='+groupElementStatCd;
		}
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_GET,
            condition: null,//{typeCode:'MRM11.01'},
            data:null,
            scope: this,
            success: this.onSuccess,
            fail: this.onFail
        };
        operations.push(operation);	    
	 },
	 
	 onFail: function(operation) {  
		 alert("fail");
	 },  
     onSuccess: function(operation) {
    	//alert("success");
        var block = this.getBlock('result');
        var gridBlock =block.down('groupelementsearchlistblock')
        var m = operation.result;
        // TODO 数据格式就这样了？
        if(m instanceof Ext.data.Model) {
        	gridBlock.setData({
                mclass: operation.mclass,
                data: m.getData(true)
            });
        }
        else {        
        	if(m.dataList==null){
        		var empty ={};
        		gridBlock.setData(empty);
        	}else{
            	gridBlock.setData(m.dataList);
        	}
        }
    
    }    
});

Ext.define('iih.mr.tm.gro.action.GroupElementTreeInitAction', {
    extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override
	*/
	doExecute: function(context) {
		console.log('---------------------------- GroupElementTreeInitAction ---------------------------------');
	    this.callParent();
    	var operations = context.operations;
    	var url = this.url;
        var condition = {};
    	var METHODS = this.getInvocationMethods();
    	var method = METHODS.METHOD_GET;
        condition = Ext.apply(condition,{typeCode:'MRM11.01'});
    	var mclass = null;
    	var form = this.getOwner().getBlock('top');
    	condition = Ext.apply(condition,form.getData());
    	var qs = Ext.Object.toQueryString(condition);
    	url += '?' + qs;
    	console.log(url);
    	var operation = {
    	    url: url,
    	    mclass: mclass,
    	    method: method,
    	    condition: null,
            scope: this,
            success: this.onSuccess
    	};
    	operations.push(operation);
    },
    
    onSuccess: function(operation) {
        var block = this.getBlock('bottom');
        var tree;
        var m = operation.result;
        console.log(m);
		if(m){//组合元素
			tree = block.down('xaptree[name=grpTree]');
            tree.setData(m.root);
        }
    }
});
Ext.define('iih.mr.tm.gro.action.GroupElementTreeSerchAction', {
	extend:  Xap.ej.action.ServiceInvocation ,

	doExecute: function(context) {  
        var operations = context.operations;   
        var keyword =context.event.arguments[1];
        this.prepareOperations(operations,keyword);    
    }, 
    prepareOperations: function(operations,keyword) {
        var url = this.url+'?typeCode='+'MRM11.01'+'&'+'keyword='+keyword;//+'?keyword='+'test'
        var mclass = null;        
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: mclass,
            method: METHODS.METHOD_GET,
            condition: null,
            scope: this,
            success: this.onSuccess
        };
        operations.push(operation);
    },
        
    onSuccess: function(operation) {
        var block = this.getBlock('result');
        var m = operation; 
        //console.log(operation.result.root);
        // TODO 数据格式就这样了？
        if(m instanceof Ext.data.Model) {
        	block.setData({
				mclass: operation.mclass,
				data: m.getData(true)
			});
        }
        else {
        	block.setData(m.result.root);
        }
    }    

});

Ext.define('iih.mr.tm.gro.block.GroupChooseBottomBlock', {
	extend:  Xap.ej.block.FormBlock ,

	           
	                                                       
	             

	alias:'widget.groupelementchooseblock',
	
	id:'groupchoosebottomblock',
	
	border: 1,
	
	layout: {
        type : 'vbox',
        align : 'stretch'
    },
	
	items: [{
			html:'组合元素实例化属性:',
			border:0,
			margin:'0 0 0 5'
		},{
			xtype: 'xapcheckboxgroup',
			vertical: true,
			name:'throughCheck',
			margin:'0 0 0 15',
			items: [
				{ boxLabel: '不可删除', name: 'throughCheck1', inputValue: '1' },
				{ boxLabel: '不显示外框', name: 'throughCheck2', inputValue: '2' },
				{ boxLabel: '不可打印', name: 'throughCheck3', inputValue: '3' }
			]
		}],
		bbar: [
			'->',
			{
				xtype: 'button',
				name:'throughBtn',
				method:'throughBtn',
				text:'插入'
			},{
				xtype: 'button',
				name:'cancelBtn',
				method:'cancelBtn',
				text:'取消'
			}],

	setData: function(data) {
	    this.callParent(arguments);
	},
	getData: function() {
	    this.callParent(arguments);
	}
})
Ext.define('iih.mr.tm.gro.block.GroupChooseTreeBlock',{
	extend :  Xap.ej.block.FormBlock ,

	           
	                                      
                                                    
	                                           
	                                           
                                              
	  
	alias:'widget.groupchoosetreeblock',
	

	//layout: 'fit',
	items:[ { 
	            xtype:'xapformblock',
	            width:200,
		        layout: 'fit',
	            items:[{           
                    xtype: "xaptrigger",
                    name: 'basTemplateTrigger',
                    triggerBaseCls :'x-text-trigger', 
                    emptyText: "按模板名称检索"//,医疗记录类型                        
                }]
	    
	        },
	       {
		        xtype:'panel',
		        layout: 'fit',
		        items:[{
			        	xtype:'xaptree',
			        	name:'basTemplate',
			        	ifSelect:true,
			        	rootVisible: false
			    }]
	       }
	],

	setData: function(data) {
	    var tree = this.down('xaptree');
	    var myobj=eval(data);  
	    tree.setData(myobj);
	},
    getData: function() {
        return null;
    }
    
})
Ext.define('iih.mr.tm.gro.block.GroupElementChooseListBlock',{
	extend :  Xap.ej.element.grid.Grid ,
	           	           
		                              
	                                             
	  
	
	alias:'widget.groupelementchooselistblock',	
	
	mixins : [ Xap.ej.block.LayeredBlock ],
	
	initComponent: function() {
		this.callParent();
		this.initBlock();
	},
	
	layout: 'fit',
	checkboxShow : true,
	mode: 'single',//simple点击行起作用，multi点击checkbox起作用
	//title: '组合元素一览',
	ifSelect:true,
	
	tbar:[
		{text: '打开',method: 'open',iconCls: 'icon-Open'},
		{text: '插入',method: 'through'},
		{text: '取消',method: 'cancel'},
	],

	CM_JR_Record: [
				   /*{dataIndex: 'canOpen',hidden:true},
				   {dataIndex: 'canThrough',hidden:true},*/
	               
	               {header: '组合元素id',dataIndex: 'code',hidden:true},
	               {header: '组合元素文件id',dataIndex: 'filePk',hidden:true},
				   {header: '分类',dataIndex: 'typeName',width:150},
				   {header: '名称',dataIndex: 'name',width:150},
				   {header: '版本号',dataIndex: 'versionNo',width:50},
				   
				   {header: '状态id',dataIndex: 'typeCode',hidden:true},			   
				   {header: '状态',dataIndex: 'statusName',width:150},				   
                   //{header: '类型',dataIndex: 'mrTypeName',dictionary: 'MRM003',flex:1},
	               {header: '所属',dataIndex: 'ownerTypeName',width:150},
	               
	               {header: '创建人',dataIndex: 'crtByNm',width:50},
	               {header: '创建时间',dataIndex: 'crtTime',width:150},
	               {header: '发布人',dataIndex: 'pubEmpNm',width:50},
	               {header: '发布时间',dataIndex: 'pubTime',width:150},
	               {header: '描述',dataIndex: 'description',width:150} 
	]
})
Ext.define('iih.mr.tm.gro.view.GroupElementChooseEditView', {
    extend:  Xap.ej.template.BaseTemplate ,

               
                                                     
                                                                   
                                                                     
                                                                      
                                                            
                                                               
                 

    alias: 'widget.groupelementchooseeditview',
    
    layout: {
        type : 'vbox',
        align : 'stretch'
    },

    xapConfig: {
        blocks: {
            'top': {
                xclass: 'iih.mr.block.editor.MrDocEditBlock',
                layout: 'fit',
                border: false,
                padding: '1 1 1 1',
                flex:1
            },
            'bottom':{
            	xclass: 'iih.mr.tm.gro.block.GroupChooseBottomBlock',
//            	layout: 'fit',
                border: 0,
                padding: '1 1 1 1',
                header: false,
                height:80
            }
        },


        actions: {
           'init': {
                xclass: 'iih.mr.tm.gro.action.GroupElementChooseEditAction',
                url: 'mr/basefile',
                blocks: {
                	top: 'top'
                }
            },
            'throughBtn': {
                xclass: 'iih.mr.tm.gro.action.GroupChooseEditThroughAction',
                url: 'mr/basefile',
                blocks: {
                	bottom: 'bottom'
                }
            },
            'cancelBtn': {
                xclass: 'iih.mr.tm.gro.action.GroupChooseEditCancelBtnAction',
                //url: 'mr/basefile',
                blocks: {
                	bottom: 'bottom'
                }
            }
            /*, 
            'emrCmdDispatch': {
                xclass: 'iih.mr.action.editor.EmrCmdDispatchAction',
                blocks: {
                	top: 'top'
                }
            },
            'emrEditorOperator': {
                xclass: 'iih.mr.action.editor.EmrEditorOperatorAction'
            }*/
        },

        chains: {
            'init': ['init'],
            'throughBtn': ['throughBtn'],
            'cancelBtn': ['cancelBtn']/*,
            'emrCmdDispatch': ['emrCmdDispatch'],*/
        },

        connections: {
            'top': [/*{
                selector: 'button[method=editorEvent]',
                event: 'editorEvent',
                chain: 'emrCmdDispatch'
            },*/ {
                event: 'afterrender',
                chain: 'init'
            }],
            'bottom':[{
	            	selector: 'button[method=throughBtn]',
	                event: 'click',
	                chain: 'throughBtn'
             	},{
             		selector: 'button[method=cancelBtn]',
	                event: 'click',
	                chain: 'cancelBtn'
             }]
        }
    }
})
Ext.define('iih.mr.tm.gro.block.GroupElementChooseBlock', {
	extend:  Xap.ej.block.Block ,

	           
	                                                             
	                                                          
	             

	alias:'widget.groupelementchooseblock',
	
	id:'groupelementchooseblock',
	
	border: 0,
	
	layout:'card',
	
	items: [{
        id: 'groupelementchooselistblock',
        name:'groupelementchooselistblock',
        xtype: 'groupelementchooselistblock'
    },{
        id: 'groupelementchooseeditview',
        name:'groupelementchooseeditview',
        xtype: 'groupelementchooseeditview'
    }],
    
    initComponent: function() {
    	this.callParent();
    },
})
Ext.define('iih.mr.tm.gro.block.GroupElementChooseSearchBlock', {
    extend :  Xap.ej.block.FormBlock ,

                                                     

    alias:'widget.groupelementchoosesearchblock',

    layout: {
        type: 'vbox',
        align: 'stretch'
    },
    
    border: 0,
    
    padding: '3 3 3 3',

    items: [{
        xtype: 'xaptrigger',
        name: 'keyword',
        onTriggerClick: function() {
            var view = this.up('groupelementchoosetreeview');
            var chain = view.getActionChain('init');
            chain.execute();
            var choose = this.up('groupelementchooseview');
            var right = choose.getActionChain('search');
            right.execute();
        },
        emptyText: ''
    }],
    
    initComponent: function() {
        this.callParent();
    }
})
Ext.define('iih.mr.tm.gro.block.GroupElementChooseTreeBlock', {
    extend :  Xap.ej.block.FormBlock ,

                                           

    alias:'widget.groupelementchoosetreeblock',

    border: 0,
    
    layout:'fit',

    items: [{
        xtype: 'xaptree',
        name:'grpTree',
        border: 0,
        expanded:true,
        rootVisible: false
    }],
    
    initComponent: function() {
        this.callParent();
    }
})
Ext.define('iih.mr.tm.gro.block.GroupElementSearchListBlock',{
	extend :  Xap.ej.element.grid.Grid ,
	           	           
		                              
	                                             
	  
	
	alias:'widget.groupelementsearchlistblock',	
	
	mixins : [ Xap.ej.block.LayeredBlock ],
	
	initComponent: function() {
		this.callParent();
		this.initBlock();
	},
	layout: 'fit',
	
	checkboxShow : true,
	
	//simple点击行起作用，multi点击checkbox起作用
	mode: 'simple',

	//title: '组合元素列表',

	ifSelect:true,
	
	tbar:[
	      { 
	        xtype: "xapcombobox",
	        name: 'groupElementStatCd',
	        allOptions:true,
	        editable: false,
	        fieldLabel: '',
	        dictionary:'MRM05',
	        emptyText: "状态查询"
        },
		{text: '新建',method: 'create',iconCls: 'icon-Create'},
		{text: '升级',method: 'upgrade'},
		{text: '打开',method: 'open',iconCls: 'icon-Open'},
		{text: '删除',method: 'delete',iconCls: 'icon-Delete'},
		{text: '属性',method: 'property',iconCls: 'icon-Property'},	
		{text: '提交',method: 'submit',iconCls: 'icon-Submit'},
		{text: '审核通过',method: 'verify'},
		{text: '驳回',method: 'reject'},
		{text: '停用',method: 'disable',iconCls: 'icon-disable'},
        {text: '启用',method: 'enable',iconCls: 'icon-enable'}
	],

	CM_JR_Record: [

	    		   {dataIndex: 'canUpdate',hidden:true},
	               {dataIndex: 'canDelete',hidden:true},
	    		   {dataIndex: 'canSubmit',hidden:true},
	    		   {dataIndex: 'canUpgrade',hidden:true},
	    		   {dataIndex: 'canReject',hidden:true},
	    		   {dataIndex: 'canStop',hidden:true},
	    		   {dataIndex: 'canActivated',hidden:true},
	    		   {dataIndex: 'canReview',hidden:true},
	    		   
	               {header: '组合元素id',dataIndex: 'code',hidden:true},
	               {header: '组合元素文件id',dataIndex: 'filePk',hidden:true},
				   {header: '分类',dataIndex: 'typeName',width:150},
				   {header: '名称',dataIndex: 'name',width:150},
				   {header: '版本号',dataIndex: 'versionNo',width:50},
				   
				   {header: '状态id',dataIndex: 'typeCode',hidden:true},			   
				   {header: '状态',dataIndex: 'statusName',width:150},				   
                   //{header: '类型',dataIndex: 'mrTypeName',dictionary: 'MRM003',flex:1},
	               {header: '所属',dataIndex: 'ownerTypeName',width:150},
	               
	               {header: '创建人',dataIndex: 'crtByNm',width:50},
	               {header: '创建时间',dataIndex: 'crtTime',width:150},
	               {header: '发布人',dataIndex: 'pubEmpNm',width:50},
	               {header: '发布时间',dataIndex: 'pubTime',width:150},
	               {header: '描述',dataIndex: 'description',width:150} 
	]
})
Ext.define('iih.mr.tm.gro.block.GroupElementSearchTreeBlock',{
	extend :  Xap.ej.block.FormBlock ,

	           
	                                      
                                                    
	                                           
	  
	alias:'widget.groupelementsearchtreeblock',
	
	items: [{
		xtype:'xapformblock',
		layout: {
		    type: 'vbox',
		    align: 'left'
		},
		items:[{          
                	xtype: "xaptrigger",
                	name: 'groupElementTrigger',
                	triggerBaseCls :'x-text-trigger', 
                	emptyText: "按组合元素名称检索"//,医疗记录类型                        
				},{
					xtype:'xaptree',
					name:'groupElement',
					ifSelect:true,
					rootVisible: false
				}
		]
	}],

	setData: function(data) {
	    var tree = this.down('xaptree');
	    var myobj=eval(data);  
	    tree.setData(myobj);
	},
    getData: function() {
        return null;
    }    
})
Ext.define('iih.mr.tm.gro.view.GroupElementEditView', {
    extend:  Xap.ej.template.BaseTemplate ,

               
                                                     
                                                              
                                                                   
                                                            
                                                             
                 

    alias: 'widget.groupelementeditview',
    layout: 'fit',

    xapConfig: {
        blocks: {
            'content': {
                xclass: 'iih.mr.block.editor.MrDocEditBlock',
                flex: 1
            }
        },


        actions: {
           'init': {
                xclass: 'iih.mr.tm.gro.action.GroupElementEditAction',
                url: 'mr/tpl/groupElement',
                blocks: {
                    content: 'content'
                }
            }, 
            /* 'emrSave': {
            	//http://guozhongbao:8081/
                xclass: 'iih.mr.tm.bas.action.GroupElementSaveAction',
                url: 'mr/tpl/baseTemplate',
                blocks: {
                    content: 'content'
                }
            },*/
            'emrCmdDispatch': {
                xclass: 'iih.mr.action.editor.EmrCmdDispatchAction',
                blocks: {
                    content: 'content'
                }
            },
           
            'emrEditorOperator': {
                xclass: 'iih.mr.action.editor.EmrEditorOperatorAction'
            }
        },

        chains: {
            'init': ['init'],
            /*'emrSave': ['emrSave'],*/
            'emrCmdDispatch': ['emrCmdDispatch'],
        },

        connections: {
            'content': [{
                selector: 'button[method=editorEvent]',
                event: 'editorEvent',
                chain: 'emrCmdDispatch'
            }/**/, {
                event: 'afterrender',
                chain: 'init'
            }]
        }
    }
})
Ext.define('iih.mr.tm.gro.block.GroupElementWorkBlock', {
	extend:  Xap.ej.block.Block ,

	           
	                                                             
	                                                    
	             

	alias:'widget.groupelementworkblock',
	
	id:'groupelementworkblock',
	
	border: 0,
	
	layout:'card',
	
	items: [{
        id: 'groupelementsearchlistblock',
        name:'groupelementsearchlistblock',
        xtype: 'groupelementsearchlistblock'
    },{
        id: 'groupelementeditview',
        name:'groupelementeditview',
        xtype: 'groupelementeditview'
    }],
    
    initComponent: function() {
    	this.callParent();
    },
})
Ext.define('iih.mr.tm.gro.view.GroupElementChooseTreeView', {
    extend:  Xap.ej.template.BaseTemplate ,

               
                                                                 
                                                                  
                 

    alias: 'widget.groupelementchoosetreeview',
    
    layout: {
        type : 'vbox',
        align : 'stretch'
    },

    xapConfig: {
        blocks: {
            'top': {
            	xclass: 'iih.mr.tm.gro.block.GroupElementChooseSearchBlock',
                border: 0,
                height:30
            },
            'bottom':{
            	xclass: 'iih.mr.tm.gro.block.GroupElementChooseTreeBlock',
            	border: 0,
            	flex:1
            }
        },


        actions: {
           'init': {
                xclass: 'iih.mr.tm.gro.action.GroupElementTreeInitAction',
                url: 'dm-mr/mr/tpl/tree/groupElement',
                blocks: {
                	bottom: 'bottom'
                }
            },
            'treeClick': {
                xclass: 'iih.mr.tm.gro.action.ChooseTreeNodeChangeAction',
                url: 'dm-mr/mr/tpl/groupElement',
                blocks: {
                	bottom: 'bottom'
                }
            }
        },

        chains: {
            'init': ['init'],
            'treeClick': ['treeClick']
        },

        connections: {
            'bottom':[{
	                event: 'afterrender',
	                chain: 'init'
            	},{
	                 selector: 'xaptree',
	                 event: 'itemclick',
	                 chain: 'treeClick'
            	}]
        }
    }
})
Ext.define('iih.mr.tm.gro.view.GroupElementChooseView', {
    extend:  Xap.ej.stl.view.LeftRightContainerTemplate ,

               
	                                                      
	                                                                 
	                                                              
	                                                               
	                                                         
	                                                           
	                                                              
                 

    alias: 'widget.groupelementchooseview',

    xapConfig: {
		blocks: {
            'left': {
                xclass: 'iih.mr.tm.gro.block.GroupChooseTreeBlock',
                width:200
            },
            'right': {
                xclass: 'iih.mr.tm.gro.block.GroupElementChooseBlock',
                flex:1
            }
		},

		actions: {
			'refreshTree': {
                url:'mr/tpl/tree/groupElement',
                xclass: 'iih.mr.tm.gro.action.GroupElementLoadTreeDataAction',
                blocks: {
                    result: 'left',
                }
			},
			'groupElementActivate': {
				url:'/mr/tpl/groupElement',
                xclass: 'iih.mr.tm.gro.action.GroupElementActivateAction',
                blocks: {
                    result: 'right',
                }
			},
			'groupElementTreeSerch': {
				xclass: 'iih.mr.tm.gro.action.GroupElementTreeSerchAction',
				url:'mr/tpl/tree/groupElement',
				blocks: {
					result: 'left'
				}
			},
			'searchGroupElementList': {
				xclass: 'iih.mr.tm.gro.action.GroupElementChooseListAction',
				url:'mr/tpl/groupElement',
				blocks: {
					result: 'right'
				}
			},
			'groupElementClick': {
				xclass: 'iih.mr.tm.gro.action.GroupChooseClickAction',
				url:'mr/tpl/groupElement',
				blocks: {
					result: 'right'
				}
			},
			'groupCloseClick': {
				xclass: 'iih.mr.tm.gro.action.GroupChooseCloseAction',
				blocks: {
					result: 'right'
				}
			},
			'groupThroughClick': {
				xclass: 'iih.mr.tm.gro.action.GroupChooseThroughAction',
				url:'mr/basefile',
				blocks: {
					result: 'right'
				}
			},
			'groupOpenClick': {
				xclass: 'iih.mr.tm.gro.action.GroupElementChooseEditAction',
                url: 'mr/basefile',
                blocks: {
                	result: 'right'
                }
			}
		},

		chains: {
			'initTree': ['refreshTree'],
			'beforeActivate': ['groupElementActivate'],	
			'groupElementTreeSerch': ['groupElementTreeSerch'],		
			'search': ['searchGroupElementList'],		
			'groupElementClick': ['groupElementClick'],
			'groupCloseClick': ['groupCloseClick'],
			'groupThroughClick': ['groupThroughClick'],
			'groupOpenClick': ['groupOpenClick']			
		},

		connections: {
			 'left': [ {
                 selector: 'xaptree',//[name=groupElement]名字加不上
                 event: 'afterrender',
                 chain: 'initTree'
	            },	            
	            {
                    selector: 'xaptrigger',
                    event: 'onTriggerClick',
                    chain: 'groupElementTreeSerch'
	            }
			 ],
			 'right': [{    
					 selector: 'groupelementchooselistblock',
	                 event: 'afterrender',
	                 chain: 'search'
					},
					{
					 selector: 'grid',
	                 event: 'cellclick',
	                 chain: 'groupElementClick'
					},
					{
					 selector: 'button[method=cancel]',
	                 event: 'click',
	                 chain: 'groupCloseClick'
					},
					{
					 selector: 'button[method=through]',
	                 event: 'click',
	                 chain: 'groupThroughClick'
					},
					{
					 selector: 'button[method=open]',
	                 event: 'click',
	                 chain: 'groupOpenClick'
					}
			   ]
		}
	}
})
Ext.define('iih.mr.tm.gro.view.GroupElementSearchView',{
	extend :  Xap.ej.template.BaseTemplate ,
	
	           
	                                                                 
	                                                              
	                                                               
	                                                          
	                                                          
	            
	
	alias:'widget.groupelementsearchview',	
	
	layout:'fit',

	xapConfig: {
		
		blocks: {
            /*'left': {
                xclass: 'iih.mr.tm.bas.block.BasTemplateTreeBlock',
                width:200
            },*/
            'right': {
                xclass: 'iih.mr.tm.gro.block.GroupElementWorkBlock'/*,
                flex:1*/
            }
		},

		actions: {
			/*'refreshTree': {
                url:'mr/tpl/tree/groupElement',
                xclass: 'iih.mr.tm.gro.action.GroupElementLoadTreeDataAction',
                blocks: {
                    result: 'left',
                }
			},
			'groupElementTreeSerch': {
				xclass: 'iih.mr.tm.gro.action.GroupElementTreeSerchAction',
				url:'mr/tpl/tree/groupElement',
				blocks: {
					result: 'left'
				}
			},*/
			'groupElementActivate': {
				url:'/mr/tpl/groupElement',
                xclass: 'iih.mr.tm.gro.action.GroupElementActivateAction',
                blocks: {
                    result: 'right',
                }
			},
			
			'searchGroupElementList': {
				xclass: 'iih.mr.tm.gro.action.GroupElementListSearchAction',
				url:'mr/tpl/groupElement',
				blocks: {
					result: 'right'
				}
			},
			'groupElementClick': {
				xclass: 'iih.mr.tm.gro.action.GroupElementClickAction',
				url:'mr/tpl/groupElement',
				blocks: {
					result: 'right'
				}
			},
			'groupElementStatCdChange': {
				xclass: 'iih.mr.tm.gro.action.GroupElementStatCdChangeAction',
				url:'mr/tpl/groupElement',
				blocks: {
					result: 'right'
				}
			},
            'createGroupElement': {
				xclass: 'iih.mr.tm.gro.action.CreateGroupElementAction',
				blocks: {
                    result: 'right'
                }      
			}
		},

		chains: {
			/*'initTree': ['refreshTree'],
			'groupElementTreeSerch': ['groupElementTreeSerch'],	*/
			'beforeActivate': ['groupElementActivate'],			
			'search': ['searchGroupElementList'],		
			'groupElementClick': ['groupElementClick'],
			'groupElementStatCdChange': ['groupElementStatCdChange'],
			'createGroupElement': ['createGroupElement']
			
		},

		connections: {
			 /*'left': [ {
                 selector: 'xaptree',//[name=groupElement]名字加不上
                 event: 'afterrender',
                 chain: 'initTree'
	            },	            
	            {
                    selector: 'xaptrigger',
                    event: 'onTriggerClick',
                    chain: 'groupElementTreeSerch'
	            }
			 ],*/
			 'right': [{    
					 selector: 'groupelementsearchlistblock',
	                 event: 'afterrender',
	                 chain: 'search'
					},
					{  
					 selector: 'grid',
	                 event: 'cellclick',
	                 chain: 'groupElementClick'
					},
					{ 
					 selector: '[name=groupElementStatCd]',
	                 event: 'change',
	                 chain: 'groupElementStatCdChange'
					},
					{ 
					 selector: 'button[method=create]',
	                 event: 'click',
	                 chain: 'createGroupElement'
					}
			   ]
		}
	}
})

Ext.define('iih.mr.tm.mr.action.BasTemplateResetInitAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	                                 

	doExecute: function(context) {
		this.showLoading();
	    this.callParent();
	    var pageNum ,pageSize,properties;
	    properties = this.getOwner().getLayer(Xap.ej.block.Layer.PROPERTIES);
	    properties.setData({
            sourceView:context.sourceView
        });
		if(context.event != undefined){
			pageNum = context.event.arguments[0];
			pageSize = context.event.arguments[1];
		}else{
			pageNum = context.pageNum;
			pageSize = context.pageSize;
		}
	    var data = {
				pageNum : pageNum,
				pageSize : pageSize
		}
        var operations = context.operations; 
        this.prepareOperations(operations,data);  
	},  
	 prepareOperations: function(operations,data) { 
		var pageNum = data.pageNum; 
		var pageSize = data.pageSize;   
        var url = this.url;
        var statusCode = 'MRM06.02';
        url +='?' + "&pageNum="+ pageNum +"&pageSize="+ pageSize+"&statusCode="+ statusCode;
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_GET,
            condition: null,
            data:null,
            scope: this,
            success: this.onSuccess,
            fail: this.onFail
        };
        operations.push(operation);	    
	 },
	 
	 onFail: function(operation) {  
		 alert("查询失败");
	 },  
     onSuccess: function(operation) {
        var gridBlock = this.getBlock('result');
        var m = operation.result;
        // TODO 数据格式就这样了？
        if(m instanceof Ext.data.Model) {
        	gridBlock.setData({
                mclass: operation.mclass,
                data: m.getData(true)
            });
        }
        else {        
        	gridBlock.setGridData(m);
        }
    
    }    
});

Ext.define('iih.mr.tm.mr.action.BaseTplInitAction', {
	extend:  Xap.ej.action.ServiceInvocation ,

	doExecute: function(context) {
	    this.callParent();
        var operations = context.operations;
        var view = this.getOwner();
        this.prepareOperations(operations);        
	},  
	 prepareOperations: function(operations) {
		//查询已经启用的基础模板
        var condition = '?statusCode='+'MRM06.02';    
        var url = this.url + condition;    
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_GET,
            condition: null,
            data:condition,
            scope: this,
            success: this.onSuccess,
            //fail: this.onFail
        };
        operations.push(operation);	    
	 },
	    
    onSuccess: function(operation) {
        var block = this.getBlock('result').down('[name=baseTemplateCode]');      
        var m = operation.result;
        //console.log(m.dataList);
		if(m){
			// TODO 数据格式就这样了？
			if(m instanceof Ext.data.Model) {
				block.setData({
					mclass: operation.mclass,
					data: m.getData(true)
				});
			}else {
				//遍历结果,重新赋值，对于不对应的dataIndex
				var data =m.dataList
				if(data){
					Ext.Array.forEach(data,function(node,index,array){ 
						node.baseTemplateCode = node.name;
					});
					block.setData(m.dataList);
					//console.log(m.dataList);
				}
			}
			//树数据加载完毕后，设置该编辑页面的数据
			var properties = this.getOwner().getLayer(Xap.ej.block.Layer.PROPERTIES);
			var baseTemplateCodeValue;
			var view = properties.data.sourceView ;
			if(properties.data.customerData=='edit'){
	    	   	var grid = view.down('mrtemplatelistblock');
	    	   	var selectedItemArr,item;
	    	   	if(grid){
	    	   		selectedItemArr = grid.getSelectionModel().getSelection();
		    	   	item = selectedItemArr[0].raw;
		    	   	baseTemplateCodeValue = item.baseTemplateCode ;
	    	   	}else{
	    	   		baseTemplateCodeValue = properties.data.baseTemplateCode;
	    	   	}
	    	   	block.select(baseTemplateCodeValue,false,true);
			}else if(properties.data.customerData=='saveAs'){
				baseTemplateCodeValue = properties.data.baseTemplateCode;
	    	   	block.select(baseTemplateCodeValue,false,true);
			}
		}
    }    
});


Ext.define('iih.mr.tm.mr.action.CancelTemplatePropertyEditAction', {
	extend:  Xap.ej.action.Action ,
	
	/*
	* @Override
	*/
	execute: function(context) {
	   /*先找到block，然后找到他的父层节点 关闭窗口
       var rs = this.getBlock('result').ownerCt.ownerCt; 
       //点击取消关闭窗口
       rs.close();
       */
       //关闭窗口
       var owner = this.getOwner().ownerCt;  
       owner.close();
    }
});

Ext.define('iih.mr.tm.mr.action.CancleVerifyTemplateAction', {
    extend:  Xap.ej.action.ServiceInvocation ,  
    
    doExecute: function(context) {
    	var grid = this.getBlock('result').down('mrtemplatelistblock');  
        var rb = grid.getSelectionModel().getSelection();         
        //模板id//rb instanceof Array
        if(rb.length == 0){
            Ext.MessageBox.show({
                title:'提示',
                msg:'请选模板进行提交~~~'
            });
        }else{
            var code =rb[0].data.code;
            var length = rb.length;
            var dataList =[];
            for(var i=0;i<length;i++){
            	dataList.push(rb[i].data.code);
            }
            //参照接口文件，多条记录启用
            var data ={"ids":dataList};
            this.prepareOperations(context.operations,data);
        }
    },

    prepareOperations: function(operations,data) {       
        var url = this.url;
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_CREATE,
            condition: null,
            data:data,
            scope: this,
            success: this.onSuccess
            // fail: this.onFail
        };
        operations.push(operation);
    },
    
    onSuccess: function(operation) {
        var owner = this.getOwner();
        var chain = owner.getActionChain('init');
        if(!chain) {
            //如果没找到chain执行结果
            console.log("faile");
            console.log(chain);            
        }
        if(chain) {
            chain.execute();
        }
    }
});

Ext.define('iih.mr.tm.mr.action.ChangeTemplatePropertyEditAction', {
	extend:  Xap.ej.action.Action ,
	
	/*
	* @Override
	*/
	execute: function(context) {
	 //console.log(context);
	 var rs = this.getBlock('result');   
	 //console.log(context.event.arguments[0].rawValue);
	 //找到combox的框值
	 var text =context.event.arguments[0].rawValue
	 //将值放到模板名称中
	 rs.down('[name=mrTemplateNm]').setValue(text);       
	 //console.log(rs);
    }
});

Ext.define('iih.mr.tm.mr.action.CheckTemplateNameAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	doExecute: function(context) {
		this.callParent();
	   	var operations = context.operations;
	   	var view = this.getOwner();
	   	var rs = this.getBlock('result').ownerCt;      
       	//向后台发送form表单   
       	var form = this.getBlock('result').getForm();
       	//拿到的form的value有问题       
       	var data = this.getBlock('result').getForm().getValues();
       	if((data!=undefined)||(data!=null)){
           data = this.getBlock('result').getForm().getValues();
       	}else{
           data = null;
       	}
       	var msgInfo = view.down('xapdisplayfield[name=msgInfo]');
       	//基础模板文件主键
       	var comboboxBaseTemplateCode,properties,errorText;
       	if(data.mrTypeCd!=undefined && !Ext.isEmpty(data.mrTypeCd,false)){//判断病历文书类型不能为空
       		if(data.baseTemplateCode!=undefined && !Ext.isEmpty(data.baseTemplateCode,false)){//判断基础摸板不能为空
       			if(data.mrTplNm!=undefined && !Ext.isEmpty(data.mrTplNm,false)){//判断模板名称不能为空
       				//if(data.diCds!=undefined && !Ext.isEmpty(data.diCds,false)){//判断适应病种不能为空
       					if(data.ownerTypeCode!=undefined && !Ext.isEmpty(data.ownerTypeCode,false)){//判断模板所属类别不能为空
       						if(data.deptCode!=undefined && !Ext.isEmpty(data.deptCode,false)){//判断模板所属不能为空
       							if(data.signLevelCode!=undefined && !Ext.isEmpty(data.signLevelCode,false)){//判断审签级别不能为空
       								comboboxBaseTemplateCode =  this.getOwner().getBlock('content').down('[name=baseTemplateCode]') ;
       						   	   	properties = this.getOwner().getLayer(Xap.ej.block.Layer.PROPERTIES);
       						       	if(properties.data.customerData=='new'){
       						       		data.basetemplatefilePk = comboboxBaseTemplateCode.lastSelection[0].raw.filePk ;
       						       	}else if(properties.data.customerData == 'saveAs'){
       						       		data.basetemplatefilePk = properties.data.sourceView.filePk;
       						       	}else if(properties.data.customerData == 'mrSaveAs'){
       						       		data.basetemplatefilePk = properties.data.sourceView.medicalRecord.filePk;
       						       	}
       						       	//数据存储在properties对象
       						       	properties.data.baseTemplateCode = data.baseTemplateCode;
       						   		properties.data.basetemplatefilePk = data.basetemplatefilePk;
       						   		properties.data.deptCode = data.deptCode;
       						   		properties.data.description = data.description;
       						   		properties.data.enTypeCode = data.enTypeCode;
       						   		properties.data.mrTplNm = data.mrTplNm;
       						   		properties.data.mrTypeCd = data.mrTypeCd;
       						   		properties.data.ownDeptCd = data.ownDeptCd;
       						   		properties.data.ownerTypeCd = data.ownerTypeCd;
       						   		properties.data.ownerTypeCode = data.ownerTypeCode;
       						   		properties.data.signLevelCode = data.signLevelCode;
       						   		properties.data.verMrTplKc = data.verMrTplKc;
       						   		properties.data.diCds = data.diCds;
       						   		var params={};
       						   		if(properties.data.customerData=='edit'){
       						   			params = {code:data.verMrTplKc,name:data.mrTplNm,ownDeptCd:data.deptCode};
       						   		}else{
       						   			params = {name:data.mrTplNm,ownDeptCd:data.deptCode};
       						   		}
       						   		this.CheckTemplateName(operations, params);
       	           	       		}else{
       	           	       			errorText = '审签级别不能为空，请选择！';
       	           	           		msgInfo.setValue('<font color=red>' + errorText + '</font>');
       	           	           		return;
       	           	           	}
               	       		}else{
               	       			errorText = '模板所属不能为空，请选择！';
               	           		msgInfo.setValue('<font color=red>' + errorText + '</font>');
               	           		return;
               	           	}
           	       		}else{
           	       			errorText = '模板所属类别不能为空，请选择！';
           	           		msgInfo.setValue('<font color=red>' + errorText + '</font>');
           	           		return;
           	           	}
       	       		/*}else{
       	       			errorText = '适应病种不能为空，请选择！';
       	           		msgInfo.setValue('<font color=red>' + errorText + '</font>');
       	           		return;
       	           	}*/
           		}else{
           			errorText = '模板名称不能为空，请输入！';
               		msgInfo.setValue('<font color=red>' + errorText + '</font>');
               		return;
               	}
       		}else{
       			errorText = '基础模板不能为空，请选择！';
           		msgInfo.setValue('<font color=red>' + errorText + '</font>');
           		return;
           	}
       	}else{
       		errorText = '病历文书类型不能为空，请选择！';
       		msgInfo.setValue('<font color=red>' + errorText + '</font>');
       		return;
       	}
	},
    CheckTemplateName: function(operations,params) {
        var url = this.url;
//        console.log(url);
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_GET,
            params: params,
            scope: this,
            success: this.onTemplateSuccess,
            fail: this.onFail
        };
        operations.push(operation);
    },
    onTemplateSuccess: function(returnData) {
    	var view = this.getOwner();
    	var chain = view.getActionChain('check');
    	var isexist = returnData.result.data;
    	if(!isexist){
    		chain.execute();
    	}else{
    		var msg = '病历模板名称重复，请重新输入!!!';
    		XapMessageBox.info(msg);
    	}
    },
    onFail: function(operation) {
    	var msg = '验证失败!!!';
    	XapMessageBox.info(msg);
    }
});

Ext.define('iih.mr.tm.mr.action.CheckTemplateRoleAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	doExecute: function(context) {
	   this.callParent();
	   var operations = context.operations;
	   var view = this.getOwner();
	   var properties = view.getLayer(Xap.ej.block.Layer.PROPERTIES);
	   var data = {};
       data.baseTemplateCode = properties.data.baseTemplateCode;//医疗记录基础模板编码
       data.basetemplatefilePk = properties.data.basetemplatefilePk;
       data.filePk = properties.data.basetemplatefilePk;//文件主键
       data.deptCode = properties.data.deptCode;
       data.description = properties.data.description;//描述
       data.mrTplNm = properties.data.mrTplNm;
       data.mrTypeCd = properties.data.mrTypeCd;
       data.ownDeptCd = properties.data.ownDeptCd;
       data.ownerTypeCd = properties.data.ownerTypeCd;
       data.ownerTypeCode = properties.data.ownerTypeCode;//所属类型编码
       data.signLevelCode = properties.data.signLevelCode;
       data.verMrTplKc = properties.data.verMrTplKc;
       data.enTypeCode = properties.data.enTypeCode;
       data.ownerCode = properties.data.ownerCode;
       data.diCds = properties.data.diCds;
       //修改内容
       data.code = data.verMrTplKc;//医疗记录模板编码
       data.name = data.mrTplNm;//名称
       data.mrTypeCode = data.mrTypeCd;//医疗记录类型编码
       data.baseFile = data.basetemplatefilePk;//文件流对象
       var owner = properties.data.sourceView;
       data.enTypeCode = owner.enTypeCode;
       var chain = view.getActionChain('confim');
       if(properties.data.customerData=='new' || properties.data.customerData=='saveAs'){
      		this.CheckOperations(operations,data);
		}else if(properties.data.customerData=='mrSaveAs'){
			this.getOwner().ownerCt.close();
			var plugin = document.getElementById('iemrEditor');
			var allMacroIds = plugin.GetAllMacro();
			//设置可编辑
			plugin.EditDocument();
			//清空红元素
			plugin.ClearMacroValue(allMacroIds);                                        
			data.odtFile = plugin.SaveToString();  
			//设置只读
			plugin.SetReadOnly(); 
           
	       	data.baseTemplateCode = properties.data.baseTemplateCode;
	       	data.name = properties.data.mrTplNm;//"新建";
	       	data.description = properties.data.description;
	       	if((properties.data.ownerTypeCode==null)||("" ==properties.data.ownerTypeCode)){
	       		data.ownerTypeCode ="MDM08.01";//"MDM08.01";全院
	       	}else{
	       		data.ownerTypeCode = properties.data.ownerTypeCode;
	       	}
	       	if(data.ownerTypeCode == 'MDM08.01'){
	       		data.tplUseTypeCode ="MDM12.01";
	       	}
	       	if(data.ownerTypeCode == 'MDM08.02'){
	       		data.tplUseTypeCode ="MDM12.02";
	       	}
	       	if(data.ownerTypeCode == 'MDM08.03'){
	       		data.tplUseTypeCode ="MDM12.03";
	       	}
	       	data.deptCode = IMER_GLOBAL.user.code;
	       	data.ownDeptCd = data.deptCode ;
	       	data.tplUseCode = data.ownDeptCd ;
	       	data.signLevel = properties.data.signLevelCode;
	       	
	       	if((properties.data.mrTypeCd==null)||("" ==properties.data.mrTypeCd)){
	       		//alert(properties.owner.data.mrTypeCd);
	       		data.mrTypeCode ="MRM16.13";;//"MRM01.02";全院
	       	}else{
	       		//alert(properties.owner.data.mrTypeCd);
	               data.mrTypeCode = properties.data.mrTypeCd//"MRM01.02";
	       	}
	       	if((properties.data.diCds==null)||("" ==properties.data.diCds)){
	       		//alert(properties.owner.data.mrTypeCd);
	       		data.diCds ="N93.801";;//"N93.801"
	       	}else{
	               data.diCds =properties.data.diCds
	       	}
	       	data.statusCode = 'MRM07.05';
			this.MrSaveAsOperations(operations,data);
		}else{
			this.CheckPropertyOperations(operations,data);
		}
	},
    MrSaveAsOperations: function(operations,data) {
        var url = 'mr/tpl/template';
//      console.log(url);
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_CREATE,
            data: data,
            scope: this,
            success: this.onSuccessSaveAs,
            fail: this.onFailSaveAs
        };
        operations.push(operation);
    },
    onSuccessSaveAs: function(returnData) {
    	var properties = this.getOwner().getLayer(Xap.ej.block.Layer.PROPERTIES);
    	var sourceView = properties.data.sourceView;
    	var pk = sourceView.medicalRecord.mrPk;
    	var name = sourceView.medicalRecord.name;
 	    var workpageview = sourceView.ownerCt.ownerCt;
        if(workpageview){
        	workpageview.ownerCt.remove(workpageview);
        }
        var canvas = Xap.getCanvas();
        var config = {
                pageCode: 'mrdoceditview',
                xclass: 'iih.mr.wr.mr.view.MrDocEditView',
                pageTitle: name,
                viewConfig:{
                    mrSn:pk,
                    opType:'open'
                },
                assistantConfig:{
                    tgtObCd: 'MRB02',
                    tgtObPk: pk
                }
        };       
        canvas.fireEvent("addWorkPage",config);
    },
    onFailSaveAs: function(returnData) {
    	var msg = '模板另存失败!!!';
		XapMessageBox.info(msg);
    },
    CheckOperations: function(operations,data) {
        var ownerTypeCode = data.ownerTypeCode;
        var ownDeptCd = data.deptCode;
        var url = this.url+'?ownerTypeCode='+ownerTypeCode+'&ownDeptCd='+ownDeptCd;
//        console.log(url);
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_GET,
            condition: null,
            scope: this,
            success: this.onSuccess,
            fail: this.onFail
        };
        operations.push(operation);
    },
    onSuccess: function(returnData) {
    	var properties = this.getOwner().getLayer(Xap.ej.block.Layer.PROPERTIES);
    	var view = this.getOwner();
    	var chain = view.getActionChain('confim');
    	var isexist = returnData.result.data;
    	if(isexist){
    		this.getOwner().ownerCt.close();
    		chain.execute();
    	}else{
    		var ownerTypeCode = properties.data.ownerTypeCode;
    		var msg;
    		if(ownerTypeCode == 'MDM08.01'){
    			msg = '没有权限创建全院病历模板!!!';
    		}else if(ownerTypeCode == 'MDM08.02'){
    			msg = '没有权限创建科室病历模板!!!';
    		}else{
    			msg = '没有权限创建病历模板!!!';
    		}
    		XapMessageBox.info(msg);
    	}
    },
    CheckPropertyOperations: function(operations,data) {
        var ownerTypeCode = data.ownerTypeCode;
        var ownDeptCd = data.deptCode;
        var url = this.url+'?ownerTypeCode='+ownerTypeCode+'&ownDeptCd='+ownDeptCd;
//        console.log(url);
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_GET,
            condition: null,
            scope: this,
            success: this.onSuccessProperty,
            fail: this.onFail
        };
        operations.push(operation);
    },
    onSuccessProperty: function(returnData) {
    	var properties = this.getOwner().getLayer(Xap.ej.block.Layer.PROPERTIES);
    	var view = this.getOwner();
    	var chain = view.getActionChain('confim');
    	var isexist = returnData.result.data;
    	if(isexist){
    		this.getOwner().ownerCt.close();
    		chain.execute();
    	}else{
    		var ownerTypeCode = properties.data.ownerTypeCode;
    		var msg;
    		if(ownerTypeCode == 'MDM08.01'){
    			msg = '没有权限修改模板所属类型为全院!!!';
    		}else if(ownerTypeCode == 'MDM08.02'){
    			msg = '没有权限修改模板所属类型为科室!!!';
    		}else{
    			msg = '没有权限修改病历模板属性!!!';
    		}
    		XapMessageBox.info(msg);
    	}
    },
    onFail: function(operation) {
    	var msg = '验证失败!!!';
    	XapMessageBox.info(msg);
    }
});

Ext.define('iih.mr.tm.mr.action.ConfimTemplatePropertyEditAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	doExecute: function(context) {
	   this.callParent();
	   console.log('--------------------- ConfimTemplatePropertyEditAction -----------------------------');
	   var operations = context.operations;
       var properties = this.getOwner().getLayer(Xap.ej.block.Layer.PROPERTIES);
       console.log(properties);
       var data = {};
       data.baseTemplateCode = properties.data.baseTemplateCode;//医疗记录基础模板编码
       data.basetemplatefilePk = properties.data.basetemplatefilePk;
       data.filePk = properties.data.basetemplatefilePk;//文件主键
       data.deptCode = properties.data.deptCode;
       data.description = properties.data.description;//描述
       data.mrTplNm = properties.data.mrTplNm;
       data.mrTypeCd = properties.data.mrTypeCd;
       data.ownDeptCd = properties.data.ownDeptCd;
       data.ownerTypeCd = properties.data.ownerTypeCd;
       data.ownerTypeCode = properties.data.ownerTypeCode;//所属类型编码
       data.signLevelCode = properties.data.signLevelCode;
       data.verMrTplKc = properties.data.verMrTplKc;
       data.enTypeCode = properties.data.enTypeCode;
       data.diCds = properties.data.diCds;
       
       //修改内容
       data.code = data.verMrTplKc;//医疗记录模板编码
       data.name = data.mrTplNm;//名称
       data.mrTypeCode = data.mrTypeCd;//医疗记录类型编码
       data.baseFile = data.basetemplatefilePk;//文件流对象
       var view = this.getOwner();
       var owner = properties.data.sourceView;
       if(typeof(data.enTypeCode)==undefined && Ext.isEmpty(data.enTypeCode,false)){
    	   data.enTypeCode = owner.enTypeCode;
       }
       if(properties.data.customerData=='new' || properties.data.customerData=='saveAs'){
    	   var page = owner.ownerCt;
    	   var workpageview = page.items.items[1];
           if(workpageview){
	           	var mrSn = workpageview.filePk;
	           	var pk = data.basetemplatefilePk;
	           	if(properties.data.customerData=='new'){
	           		if(mrSn!=pk){
		           		page.remove(workpageview);
		           	}
	           	}else if(properties.data.customerData=='saveAs'){
	           		page.remove(workpageview);
	           	}
           }
           var canvas = Xap.getCanvas();            
           var config = {
        		   pageCode:'mrtpleditview',
                   xclass: 'iih.mr.tm.mr.view.MrTemplateEditView',
                   pageTitle: data.mrTplNm,
                   viewConfig:{
                       opType:properties.data.customerData,
                       data:data
                   }
           };       
           canvas.fireEvent("addWorkPage",config);
           //this.addOperations(operations,data);
       } else if(properties.data.customerData=='edit'){
    	   if((data.ownerTypeCode==null)||("" ==data.ownerTypeCode)){
	       		data.ownerTypeCode ="MDM08.01";//"MDM08.01";全院
	       }
	       if(data.ownerTypeCode == 'MDM08.01'){
	    	   data.tplUseTypeCode ="MDM12.01";
	       }
	       if(data.ownerTypeCode == 'MDM08.02'){
	       		data.tplUseTypeCode ="MDM12.02";
	       }
	       if(data.ownerTypeCode == 'MDM08.03'){
	       		data.tplUseTypeCode ="MDM12.03";
	       }
	       data.ownDeptCd = data.deptCode;
	       data.tplUseCode = data.ownDeptCd;
	       data.signLevel = data.signLevelCode;
           this.prepareOperations(operations,data);
       }
	},
    addOperations: function(operations,data) {
        var condition = data;
        var url = this.url;
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_CREATE,
            condition: null,
            data:condition,
            scope: this,
            success: this.onSuccess,
            fail: this.onFail
        };
        operations.push(operation);
    },
    onSuccess: function() {
        //调用模板列表刷新页面
        var properties = this.getOwner().getLayer(Xap.ej.block.Layer.PROPERTIES);
        var view = properties.data.sourceView;
        if(view.tabId!='mrtpleditview'){
        	var chain = view.getActionChain('init');
            var treeBlock = view.down('mrtemplateTreeBlock');
            var mrTplCCat = treeBlock.down('xapcombobox[name=mrTplCCat]');
     		var mrTplTypeCd = treeBlock.down('xapcombobox[name=mrTplTypeCd]');
     		var mrTplStatCd = treeBlock.down('xapcombobox[name=mrTplStatCd]');
     		var mrTemplateTrigger = treeBlock.down('xaptrigger[name=mrTemplateTrigger]');
     		var mrTplCCatValue = mrTplCCat.value;
     		var mrTplTypeCdValue = mrTplTypeCd.value;
     		var mrTplStatCdValue = mrTplStatCd.value;
     		var mrTemplateTriggerValue = mrTemplateTrigger.value;
             var gridBlock = view.down('mrtemplatelistblock');
             var pageNum = gridBlock.currentPage;
             if(!chain) {
                 //如果没找到chain执行结果
                 console.log("faile");   
             }
             console.log(chain);
             if(chain) {
                 chain.execute({
                 	pageNum:pageNum,
                 	pageSize:'25',
             		statusCode :mrTplStatCdValue,
     				mrCategoryCode :mrTplCCatValue,
     				typeCode :mrTplTypeCdValue,
     				name:mrTemplateTriggerValue
                 });
             }
        }
    },
    onFail: function(operation) {
        var message = '新增失败!!!';
        XapMessageBox.info(message);
    },    
    prepareOperations: function(operations,data) {
    	console.log(data);
        var url = this.url+'/'+data.verMrTplKc;
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_UPDATE,
            condition: null,
            data:data,
            scope: this,
            success: this.onSuccess
            // fail: this.onFail
        };
        operations.push(operation);
    }        
});

Ext.define('iih.mr.tm.mr.block.MrTemplatePropertyEditViewBlock',{
	extend :  Xap.ej.block.FormBlock ,

	           
                                        
                                            
                                         
                                       
	  

	alias:'widget.mrtemplatepropertyeditviewblock',

	layout: {
        type: 'table',
        columns: 2,
        tableAttrs: {
            border: 0,
            cellpadding: 5,
            cellspacing: 1,
            width: '100%'
        },
        tdAttrs: {
            valign: 'left'
        }
    },
    buttons:[{
        xtype: "button",
        name: 'confim',
        method:'confim',
        text: '确认',
        iconCls: 'icon-OK'
    },{
        xtype: "button",
        name: 'cancel',
        method:'cancel',
        text: '取消',
        iconCls: 'icon-cancel'
    }],
	items: [   
            {           
                xtype: "xaptextfield",
                name: 'enTypeCode',
                hidden:true
            },{           
                xtype: "xaptextfield",
                name: 'verMrTplKc',
                hidden:true
            },{           
	            xtype: "xapcombobox",
                labelWidth:90,
                labelAlign:'right',
	            name: 'mrTypeCd',
                allOptions:false,
                //editable: false,	            
	            fieldLabel: '病历文书类型',
	            displayField: 'name',		            
	            valueField: 'code'/*,
	            listeners :{
                    'beforerender':function(){
                    	var view = this.ownerCt.ownerCt;
                    	var initChain = view.getActionChain('mrTypeCdInit');
   						initChain.execute();
                    }
	            }*/
	            //dictionary:'MRM16'            
            },{
	            xtype:'xapcombobox',
                labelWidth:60,
                labelAlign:'right',
                name:'baseTemplateCode',
	            fieldLabel:'基础模板:',
                allOptions:false,
                editable: false,    
	            displayField: 'name',		            
	            valueField: 'code',
	            listeners :{
                    'beforerender':function(){
                    	var view = this.ownerCt.ownerCt;
                    	 var initChain = view.getActionChain('baseTplInit');
   						 initChain.execute();
   						//debugger;
                    }
	            }
            },{
                xtype:'xaptextfield',
                labelWidth:90,
                labelAlign:'right',
                name:'mrTplNm',
                fieldLabel:'模板名称:'
            },{
            	xtype:'comboxgrid',
                labelWidth:60,
                labelAlign:'right',
                anchor: "90%",
                width:220,
                name:'diCds', 
                method:'dept',
                fieldLabel:'适用病种:',
                valueField : 'value',
                searchParam :['keyword'],
                columns: [{
                    text: '科室编码',
                    dataIndex: 'value',
                    hidden:true
                },{
                    text: '适用病种编码',
                    flex:1,
                    dataIndex: 'text'
                }],
                displayField: 'text',
                dictionary:'diagnosisCdLoad',
                parentXtype:'mrtemplatepropertyeditviewblock',
                callback:function(newValue,oldValue,record){
                	//this.setRecordData({keyword:record.text,code:record.value});
                }
            },{
                xtype:'xapcombobox',
                labelWidth:90,
                labelAlign:'right',
                name:'ownerTypeCode',
                fieldLabel:'模板所属类别:',   
                //editable: false,    
                comboData : [
 		                    {"ownerTypeCode":"MDM08.01", "name":"全院"},
 		                    {"ownerTypeCode":"MDM08.02", "name":"科室"},
 		                    {"ownerTypeCode":"MDM08.03", "name":"个人"}
 	            ],
 		        displayField: 'name',
 		        valueField: 'ownerTypeCode'/*
                dictionary:'MDM08'  */           
            },{
                xtype:'comboxgrid',
                url: 'organization/keyword',//科室查询的url
                fieldLabel:'模板所属:',
                labelWidth:60,
                labelAlign:'right',
                listWidth:320,    //gird的宽度
                name:'deptCode', 
                width:220,        //combo的宽度
                valueField : 'code',//科室编码的字段名
                displayField: 'name',//科室名称的字段名
                columns: [{              //grid的column配置
                   text: '科室编码',
                   dataIndex: 'code',
                   width:150
                },{
                   text: '科室',
                   flex:1,
                   dataIndex: 'name'
                }],
                callback:function(newValue,oldValue,record){  //在grid选择记录后的回调函数
                    console.log(newValue);     //本次选择的科室编码
                    console.log(oldValue);     //上次选择的科室编码
                    console.log(record);       //本次选择的科室完整记录
                }
        	},{
	            xtype:'xapcombobox',
                labelWidth:90,
                labelAlign:'right',
                name:'signLevelCode',
	            fieldLabel:'审签级别:',
	            comboData : [
	 		                    {"signLevelCode":"MRM02.01", "name":"无需审签"},
	 		                    {"signLevelCode":"MRM02.02", "name":"一级审签"},
	 		                    {"signLevelCode":"MRM02.03", "name":"二级审签"},
	 		                    {"signLevelCode":"MRM02.04", "name":"三级审签"}
	 	            ],
                allOptions:false,
                editable: false,    
	            displayField: 'name',		            
	            valueField: 'signLevelCode'
            },{
            	xtype:'xaptextarea',
            	labelWidth:60,
            	height:40,
                labelAlign:'right',
                name :'description',
                fieldLabel:'描述:',
                width:250
        },{
        	xtype: 'xapdisplayfield',
			fieldLabel: '',
			colspan:2,
			vertical: true,
			name:'msgInfo',
			value: '',
			margin:'0 0 0 0'
    }],
            
	setData: function(data) {
	    this.callParent(arguments);
	},
    getData: function() {
        this.callParent(arguments);
    }
    
})
Ext.define('iih.mr.tm.mr.action.TemplatePropertyInitAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	                                 

	doExecute: function(context) {
	    this.callParent();
	    console.log('----------------------------- TemplatePropertyInitAction ------------------------------');
        var operations = context.operations;
        var owner = this.getOwner();
        var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
        properties.setData({
            customerData: context.customerData,   
            verMrTplKc:context.verMrTplKc, 
            sourceView:context.sourceView, 
            //增加
            name:context.name,
            block:context.block
        });
        var sourceView = context.sourceView;
		var initChain = owner.getActionChain('mrTypeCdInit');
		initChain.execute({
			enTypeCode:sourceView.enTypeCode
		});
        if(context.customerData=='new'){
        	var enTypeCode = owner.down('[name=enTypeCode]');
    		enTypeCode.setValue(sourceView.enTypeCode);
        }else if(context.customerData=='edit'){
            if(!operations) {
                return;
            }
            this.prepareOperations(operations,context.verMrTplKc);
        }else if(context.customerData=='saveAs'){
        	if(!operations) {
                return;
            }
            this.prepareOperationsSaveAs(operations,context.verMrTplKc);
        }else if(context.customerData=='mrSaveAs'){
        	if(!operations) {
                return;
            }
        	this.prepareOperationsMrSaveAs(operations,context.verMrTplKc);
        }else if(context.customerData=='readOnly'){
        	if(!operations) {
                return;
            }
        	this.prepareOperationsReadOnly(operations,context.verMrTplKc);
        }
	},  
	 prepareOperations: function(operations,data) {
        var condition = data;
        var url = this.url +'/'+data;      
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_GET,
            condition: null,
            data:condition,
            scope: this,
            success:this.onSuccess,
            //fail: this.onFail
        };
        operations.push(operation);	    
	 },
	    
    onSuccess: function(operation) {
        //alert("success");
        var block = this.getBlock('result');
        var n = operation.result;
        var m  ;
        if( n ){
        	m = n.data ;
        }
		if(m){
			// TODO 数据格式就这样了？
			if(m instanceof Ext.data.Model) {
				block.setData({
					mclass: operation.mclass,
					data: m.getData(true)
				});
			}else {
				//分布赋值
				//block.setData(m);
				var owner = this.getOwner();
				var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
				properties.data.baseTemplateCode = m.baseTemplateCode;
				properties.data.mrTypeCode = m.mrTypeCode;
				var enTypeCode = owner.down('[name=enTypeCode]');
				var verMrTplKc = owner.down('[name=verMrTplKc]');
				var TypeCd = owner.down('[name=mrTypeCd]');
				var BaseTplKc = owner.down(' [name=baseTemplateCode]');
				var TplNm = owner.down('[name=mrTplNm]');
				var ownerTypeCd = owner.down('[name=ownerTypeCode]');
				var diagnosisCd = owner.down('[name=diCds]');
				var ownerCd = owner.down('[name=deptCode]');
				var signLevelCode = owner.down('[name=signLevelCode]');
				var description = owner.down('[name=description]');
				enTypeCode.setValue(m.enTypeCode);
				verMrTplKc.setValue(m.code);
//				TypeCd.setValue(m.mrTypeCode);
//				TypeCd.setRawValue(m.mrTypeName);
//				BaseTplKc.setValue(m.baseTemplateCode);
//				BaseTplKc.setRawValue(m.baseTemplateName);
				if(!Ext.isEmpty(m.baseTemplateCode,false)){
					BaseTplKc.select(m.baseTemplateCode,false,true);
				}
				TplNm.setValue(m.name);
				signLevelCode.setValue(m.signLevelCode);//审签级别
				description.setValue(m.description);
				ownerTypeCd.select(m.ownerTypeCode,false,true);//设置所属类型，且不触发select事件
	            var deptCd = m.ownerCode;
	            var deptNm = m.ownerName;
		        ownerCd.setRecordData({code:deptCd,name:deptNm});
			
				var diCdArr = m.diCodes;
				var diNmArr = m.diNames;
				diagnosisCd.setRecordData({value:diCdArr,text:diNmArr}); //设置适应病种
			}
		}
    },
    prepareOperationsReadOnly: function(operations,data) {
        var condition = data;
        var url = this.url +'/'+data;      
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_GET,
            condition: null,
            data:condition,
            scope: this,
            success:this.onSuccessReadOnly,
            //fail: this.onFail
        };
        operations.push(operation);	    
	 },
	    
	 onSuccessReadOnly: function(operation) {
        //alert("success");
        var block = this.getBlock('result');
        var n = operation.result;
        var m  ;
        if( n ){
        	m = n.data ;
        }
		if(m){
			// TODO 数据格式就这样了？
			if(m instanceof Ext.data.Model) {
				block.setData({
					mclass: operation.mclass,
					data: m.getData(true)
				});
			}else {
				//分布赋值
				//block.setData(m);
				var owner = this.getOwner();
				var enTypeCode = owner.down('[name=enTypeCode]');
				var verMrTplKc = owner.down('[name=verMrTplKc]');
				var TypeCd = owner.down('[name=mrTypeCd]');
				var BaseTplKc = owner.down(' [name=baseTemplateCode]');
				var TplNm = owner.down('[name=mrTplNm]');
				var ownerTypeCd = owner.down('[name=ownerTypeCode]');
				var diagnosisCd = owner.down('[name=diCds]');
				var ownerCd = owner.down('[name=deptCode]');
				var signLevelCode = owner.down('[name=signLevelCode]');
				var description = owner.down('[name=description]');
				TypeCd.setDisabled(true);
				BaseTplKc.setDisabled(true);
				TplNm.setDisabled(true);
				ownerTypeCd.setDisabled(true);
				diagnosisCd.setDisabled(true);
				ownerCd.setDisabled(true);
				signLevelCode.setDisabled(true);
				description.setDisabled(true);
				enTypeCode.setValue(m.enTypeCode);
				verMrTplKc.setValue(m.code);
				BaseTplKc.select(m.baseTemplateName,false,true);
				TypeCd.setValue(m.mrTypeName);
				TypeCd.setRawValue(m.mrTypeName);
//				BaseTplKc.setValue(m.baseTemplateCode);
//				BaseTplKc.setRawValue(m.baseTemplateName);
				TplNm.setValue(m.name);
				signLevelCode.setValue(m.signLevelCode);//审签级别
				description.setValue(m.description);
				ownerTypeCd.select(m.ownerTypeCode,false,true);//设置所属类型，且不触发select事件
	            var deptCd = m.ownerCode;
	            var deptNm = m.ownerName;
		        ownerCd.setRecordData({code:deptCd,name:deptNm});
			
				var diCdArr = m.diCodes;
				var diNmArr = m.diNames;
				diagnosisCd.setRecordData({value:diCdArr,text:diNmArr}); //设置适应病种
				//按钮控制
				var cancel = owner.down('button[name=cancel]');
				var confim = owner.down('button[name=confim]');
				cancel.setText('关闭');
				cancel.setIconCls('icon-close');
				confim.setVisible(false);
			}
		}
    },  
	 prepareOperationsSaveAs: function(operations,data) {
        var condition = data;
        var url = this.url +'/'+data;      
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_GET,
            condition: null,
            data:condition,
            scope: this,
            success:this.onSuccessSaveAs
            //fail: this.onFail
        };
        operations.push(operation);	    
	 },
	    
	 onSuccessSaveAs: function(operation) {
        //alert("success");
        var block = this.getBlock('result');
        var n = operation.result;
        var m  ;
        if( n ){
        	m = n.data ;
        }
		if(m){
			// TODO 数据格式就这样了？
			if(m instanceof Ext.data.Model) {
				block.setData({
					mclass: operation.mclass,
					data: m.getData(true)
				});
			}else {
				//分布赋值
				var owner = this.getOwner();
				var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
				properties.data.baseTemplateCode = m.baseTemplateCode;
				var enTypeCode = owner.down('[name=enTypeCode]');
				var TypeCd = owner.down('[name=mrTypeCd]');
				var BaseTplKc = owner.down('[name=baseTemplateCode]');
				var TplNm = owner.down('[name=mrTplNm]');
				var ownerTypeCd = owner.down('[name=ownerTypeCode]');
				var diagnosisCd = owner.down('[name=diCds]');
				var ownerCd = owner.down('[name=deptCode]');
				var signLevelCode = owner.down('[name=signLevelCode]');
				var description = owner.down('[name=description]');
				BaseTplKc.select(m.baseTemplateCode,false,true);
				enTypeCode.setValue(m.enTypeCode);
				TplNm.setValue(m.name);
				signLevelCode.setValue(m.signLevelCode);//审签级别
				description.setValue(m.description);
				ownerTypeCd.select(m.ownerTypeCode,false,true);//设置所属类型，且不触发select事件
	            var deptCd = m.ownerCode;
	            var deptNm = m.ownerName;
		        ownerCd.setRecordData({code:deptCd,name:deptNm});
			
				var diCdArr = m.diCodes;
				var diNmArr = m.diNames;
				diagnosisCd.setRecordData({value:diCdArr,text:diNmArr}); //设置适应病种
			}
		}
    },  
    prepareOperationsMrSaveAs: function(operations,data) {
        var condition = data;
        var url = this.url +'/'+data;      
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_GET,
            condition: null,
            data:condition,
            scope: this,
            success:this.onSuccessMrSaveAs,
            //fail: this.onFail
        };
        operations.push(operation);	    
	 },
	 onSuccessMrSaveAs: function(operation) {
        //alert("success");
        var block = this.getBlock('result');
        var n = operation.result;
        var m  ;
        if( n ){
        	m = n.data ;
        }
		if(m){
			// TODO 数据格式就这样了？
			if(m instanceof Ext.data.Model) {
				block.setData({
					mclass: operation.mclass,
					data: m.getData(true)
				});
			}else {
				//分布赋值
				//block.setData(m);
				var owner = this.getOwner();
				var enTypeCode = owner.down('[name=enTypeCode]');
				var verMrTplKc = owner.down('[name=verMrTplKc]');
				var TypeCd = owner.down('[name=mrTypeCd]');
				var BaseTplKc = owner.down(' [name=baseTemplateCode]');
				var TplNm = owner.down('[name=mrTplNm]');
				var ownerTypeCd = owner.down('[name=ownerTypeCode]');
				var diagnosisCd = owner.down('[name=diCds]');
				var ownerCd = owner.down('[name=deptCode]');
				var signLevelCode = owner.down('[name=signLevelCode]');
				var description = owner.down('[name=description]');
				enTypeCode.setValue(m.enTypeCode);
				verMrTplKc.setValue(m.code);
//				TypeCd.setValue(m.mrTypeCode);
//				TypeCd.setRawValue(m.mrTypeName);
				BaseTplKc.select(m.baseTemplateCode,false,true);
				//BaseTplKc.setRawValue(m.baseTemplateName);
//				BaseTplKc.setDisabled(true);
				TplNm.setValue(m.name);
				signLevelCode.setValue(m.signLevelCode);//审签级别
				description.setValue(m.description);
				ownerTypeCd.select('MDM08.03',true,true);//设置所属类型，且不触发select事件
				ownerTypeCd.setReadOnly(true);
	            var deptCd = IMER_GLOBAL.user.code;
	            var deptNm = IMER_GLOBAL.user.name;
		        ownerCd.setRecordData({code:deptCd,name:deptNm});
		        ownerCd.setReadOnly(true);
				var diCdArr = m.diCodes;
				var diNmArr = m.diNames;
				diagnosisCd.setRecordData({value:diCdArr,text:diNmArr}); //设置适应病种
			}
		}
    }   
});

Ext.define('iih.mr.tm.mr.action.MrTypeCdChangeAction', {
	extend:  Xap.ej.action.Action ,
	
	/*
	* @Override
	*/
	execute: function(context) {
	// console.log('---------------MrTypeCdChangeAction-----------------');
	 var rs = this.getBlock('result');   
	 //找到combox的框值
	 var text = context.event.arguments[0].rawValue;
	 var singlevelcode = context.event.arguments[0].getValue();
	 
	 //将值放到模板名称中
	 //console.log(text);
	// console.log( 'context.event.arguments[0].getStore().count:'+context.event.arguments[0].getStore().getCount() );
	 if(context.event.arguments[0].getStore().getCount() > 0){
		// console.log(context.event.arguments[0].getStore().data.items[0].raw );
		// console.log(context.event.arguments[0] );
		// console.log(context.event.arguments[0].lastSelection[0].raw);
		if( context.event.arguments[0].lastSelection.length > 0 ){
			 var comsignLevelCode = rs.down('[name=signLevelCode]');
			 var singlevelcode = context.event.arguments[0].lastSelection[0].raw.signLevelCode ;
			 comsignLevelCode.setValue(singlevelcode);
			 var mrTplNm  = rs.down('[name=mrTplNm]') ;
			 var properties = this.getOwner().getLayer(Xap.ej.block.Layer.PROPERTIES);
			 //console.log('------' + properties.data.customerData ) ;
			  if(properties.data.customerData=='new'){
			  //病历模板页面为新建时，设置病历模板名称
		    	mrTplNm.setValue( context.event.arguments[0].lastSelection[0].raw.name);
			  }
			  if(properties.data.customerData=='edit'){
			  }
		}
	 }

    }
});

Ext.define('iih.mr.tm.mr.action.OwnerTypeCdChangeAction', {
	extend:  Xap.ej.action.Action ,
	
	/*
	* @Override
	*/
	execute: function(context) {
	    var rs = this.getBlock('result');   
	     //找到combox的框值
	    var newValue = context.event.arguments[0].value
	    var ownerCd  = rs.down('[name=deptCode]'); 
	    var deptCd,deptNm;
        if(newValue=='MDM08.03'){
            ownerCd.removeCls("readOnlyCss"); 
            ownerCd.setReadOnly(true);
            deptCd = IMER_GLOBAL.user.code;
            deptNm = IMER_GLOBAL.user.name;
            ownerCd.setRecordData({code:deptCd,name:deptNm});
        }else if(newValue=='MDM08.02'){
            ownerCd.setReadOnly(false); 
//        	ownerCd.setRecordData({code:null,name:null});
        	deptCd = IMER_GLOBAL.department.code;
            deptNm = IMER_GLOBAL.department.name;
            ownerCd.setRecordData({code:deptCd,name:deptNm});
        }else if(newValue=='MDM08.01'){
            ownerCd.setReadOnly(true); 
            ownerCd.addCls("readOnlyCss");
            deptCd = IMER_GLOBAL.hospitalArea.code;
            deptNm = IMER_GLOBAL.hospitalArea.name;
            ownerCd.setRecordData({code:deptCd,name:deptNm});
        }else{
            return
        }
    
    }
});

Ext.define('iih.mr.tm.mr.action.MrTypeCdInitAction', {
	extend:  Xap.ej.action.ServiceInvocation ,

	doExecute: function(context) {
	    this.callParent();
	    console.log('------------------ MrTypeCdInitAction -----------------------');
	    var view = this.getOwner();
	    var enTypeCode = context.enTypeCode;
	    var properties = view.getLayer(Xap.ej.block.Layer.PROPERTIES);
	    var sourceView = properties.data.sourceView;
	    if(enTypeCode==undefined){
	    	if(sourceView){
	    		enTypeCode = sourceView.data.enTypeCode;
	    	}
	    }
        var operations = context.operations;
        this.prepareOperations(operations,enTypeCode);        
	},  
	 prepareOperations: function(operations,enTypeCode) {
		//查询已经启用的基础模板
        //var condition = '?statusCode='+'MRM06.02';
        var url = this.url+'?enTypeCode='+enTypeCode;   
        console.log(url);
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_GET,
            condition: null,
            data:null,
            scope: this,
            success: this.onSuccess,
            //fail: this.onFail
        };
        operations.push(operation);	    
	 },
	    
    onSuccess: function(operation) {
    	var create = this.getBlock('result');
        var block = this.getBlock('result').down('[name=mrTypeCd]');
        var signLevelCode = this.getBlock('result').down('[name=signLevelCode]');
        var mrTplNm = this.getBlock('result').down('[name=mrTplNm]'); 
        var m = operation.result;
		if(m){
			// TODO 数据格式就这样了？
			if(m instanceof Ext.data.Model) {
				block.setData({
					mclass: operation.mclass,
					data: m.getData(true)
				});
			}else{
				//遍历结果,重新赋值，对于不对应的dataIndex
				var data = m.dataList
				Ext.Array.forEach(data,function(node,index,array){
					node.mrTypeCd = node.name;
				});
				block.setData(m.dataList);
			}
			//树数据加载完毕后，设置该编辑页面的数据
			var properties = this.getOwner().getLayer(Xap.ej.block.Layer.PROPERTIES);
			var view = properties.data.sourceView;
			var mrTypeCodeCodeValue,xtree,grid,deptCd,deptNm,signLelCd,typeName='',nodeId;
	       //console.log(properties.data.customerData ) ;
			if(properties.data.customerData=='new'){
				xtree = view.down('xaptree[name=mrTemplate]');
				mrTypeCodeCodeValue = view.typeCode;
				block.select(mrTypeCodeCodeValue,false,true);
				for(var i=0;i<data.length;i++){
					if(data[i].code==mrTypeCodeCodeValue){
						signLelCd = data[i].signLevelCode;
						typeName = data[i].name;
					}
				}
				mrTplNm.setValue(typeName);
				signLevelCode.select(signLelCd,false,true);
				var ownerCode = view.ownerCode;
				var mrCategoryCode = view.mrCategoryCode;
				var ownerTypeCode = create.down('[name=ownerTypeCode]');
				var deptCode = create.down('[name=deptCode]');
	    	   	nodeId = view.nodeId;
	    	   	if(typeof(ownerCode)!=undefined && ownerCode!=null && ownerCode!=''){
	    	   		deptCd = ownerCode;
	    	   		node = xtree.getStore().getNodeById(nodeId);
	    	   		if(ownerCode==IMER_GLOBAL.hospitalArea.code){
	    	   			ownerTypeCode.select(IMER_CONSTANT.OWNERTYPE_HOS,false,true);
	    	   			deptNm = node.raw.data.ownerName;
	    	   			deptCode.setRecordData({code:deptCd,name:deptNm});
	    	   			deptCode.setReadOnly(true);
	    	   		}else if(ownerCode==IMER_GLOBAL.user.code){
	    	   			ownerTypeCode.select(IMER_CONSTANT.OWNERTYPE_PERSON,false,true);
	    	   			deptCd = IMER_GLOBAL.user.code;
	    	   			deptNm = IMER_GLOBAL.user.name;
	    	   			deptCode.setRecordData({code:deptCd,name:deptNm});
	    	   			deptCode.setReadOnly(true);
	    	   		}else{
	    	   			ownerTypeCode.select(IMER_CONSTANT.OWNERTYPE_DEPT,false,true);
	    	   			deptNm = node.raw.data.ownerName;
	    	   			deptCode.setRecordData({code:deptCd,name:deptNm});
	    	   		}
	    	   	}
			}else if(properties.data.customerData=='edit'){
	    	   var grid = view.down('mrtemplatelistblock');
	    	   var selectedItemArr,item;
	    	   if(grid){
	    	   		selectedItemArr = grid.getSelectionModel().getSelection();
		    	   	item = selectedItemArr[0].raw;
		    	   	mrTypeCodeCodeValue = item.mrTypeCode ;
	    	   	}else{
	    	   		mrTypeCodeCodeValue = properties.data.mrTypeCode;
	    	   	}
	    	   block.select(mrTypeCodeCodeValue,false,true) ;
	       }else if(properties.data.customerData=='saveAs'){
	    	   if(view.opType=='open'){
	    		   mrTypeCodeCodeValue = view.mrTypeCode;
	    	   }else if(view.opType=='new'){
	    		   mrTypeCodeCodeValue = view.data.mrTypeCode;
	    	   }
	    	   block.select(mrTypeCodeCodeValue,false,true);
	       }else if(properties.data.customerData=='mrSaveAs'){
	    	   mrTypeCodeCodeValue = view.medicalRecord.typeCode;
	    	   block.select(mrTypeCodeCodeValue,false,true);
	       }else if(properties.data.customerData=='readOnly'){
	    	   if(view.mrDocEditView!=undefined){
	    		   mrTypeCodeCodeValue = view.mrDocEditView.medicalRecord.typeCode;
	    	   }else{
	    		   mrTypeCodeCodeValue = view.mr.typeCode;
	    	   }
	    	   block.select(mrTypeCodeCodeValue,false,true);
	       }
		}
    }    
});


Ext.define('iih.mr.tm.mr.view.MrTemplatePropertyEditView',{
	extend :  Xap.ej.stl.view.SingleRecordEditTemplate ,

	           
	                                                                
	                                                   
	                                                            
                                                                      
                                                                      
                                                          
                                                             
				                                              
				                                             
	             
	alias:'widget.mrTemplatePropertyEditView',
	
	layout: 'fit',

	xapConfig: {
		blocks: {
			'content': {
				xclass: 'iih.mr.tm.mr.block.MrTemplatePropertyEditViewBlock'
			}
		},

		actions: {
			'create': { 
			    url:'mr/tpl/template',
				xclass: 'iih.mr.tm.mr.action.TemplatePropertyInitAction',
				blocks: {
                    result:'content'
                }
			},
			'baseTplInit': { 
				xclass: 'iih.mr.tm.mr.action.BaseTplInitAction',
				url:'mr/tpl/baseTemplate',
				blocks: {
                    result:'content'
                }
			},
			'mrTypeCdInit': { 
				xclass: 'iih.mr.tm.mr.action.MrTypeCdInitAction',
				url:'mr/type/tree',
				blocks: {
                    result:'content'
                }
			},
			'confim': {
                xclass: 'iih.mr.tm.mr.action.ConfimTemplatePropertyEditAction',
                url:'mr/tpl/template',
                blocks: {
                    result: 'content'
                }
            },
            'cancel': {
                xclass: 'iih.mr.tm.mr.action.CancelTemplatePropertyEditAction',
                blocks: {
                    result: 'content'
                }
            },
            'mrTypeCdChange': {
                xclass: 'iih.mr.tm.mr.action.MrTypeCdChangeAction',
                blocks: {
                    result: 'content'
                }
            },
            'ownerTypeCdChange': {
                xclass: 'iih.mr.tm.mr.action.OwnerTypeCdChangeAction',
                blocks: {
                    result: 'content'
                }
            },
			'check': {
                xclass: 'iih.mr.tm.mr.action.CheckTemplateRoleAction',
                url:'mr/tpl/template/userRoleCanCreate',
                blocks: {
                    result: 'content'
                }
            },
			'checkName': {
                xclass: 'iih.mr.tm.mr.action.CheckTemplateNameAction',
                url:'mr/tpl/template/HasDuplicationOfName',
                blocks: {
                    result: 'content'
                }
            }
			
		},

		chains: {
			//'init': ['baseTplInit','mrTypeCdInit','create'],
			'init': ['create'],
			'check': ['check'],
			'checkName': ['checkName'],
			'baseTplInit': ['baseTplInit'],
			'mrTypeCdInit': ['mrTypeCdInit'],
            'confim': ['confim'],
            'cancel': ['cancel'],
            'mrTypeCdChange': ['mrTypeCdChange'],
            'ownerTypeCdChange': ['ownerTypeCdChange']
		},

		connections: {
			'content': [/*{    
			    //加载数据
                event: 'afterrender',
                chain: 'init'
            },{    
                //基础模板初始化
                selector: '[name=baseTemplateCode]',
                event: 'afterrender',
                chain: 'baseTplInit'
            },{    
                //文书类型的初始化
                selector: '[name=mrTypeCd]',
                event: 'afterrender',
                chain: 'mrTypeCdInit'
            },*/{    
                //确认按钮
                selector: 'button[method=confim]',
                event: 'click',
                chain: 'checkName'
            },{    
                //取消按钮
                selector: 'button[method=cancel]',
                event: 'click',
                chain: 'cancel'
            },{
                //combox的change时间
                selector: '[name=mrTypeCd]',
                event: 'select',
                chain: 'mrTypeCdChange'
            },{
                //combox的change时间
                selector: '[name=ownerTypeCode]',
                event: 'select',
                chain: 'ownerTypeCdChange'
            }]
		}
	}
})
Ext.define('iih.mr.tm.mr.action.CreateTemplateAction', {
	extend:  Xap.ej.action.PopAction ,
	
	                                                           
	/*
	* @Override
	*/
	execute: function(context) {
	   //新建模板
	    var view = this.getOwner();
	    console.log('-------------------- CreateTemplateAction ---------------------------');
	    console.log(view);
	    var xaptreemrTemplate = view.down('xaptree[name=mrTemplate]');
	    console.log(xaptreemrTemplate)
	    var nodeId = xaptreemrTemplate.nodeId;
	    var ownerCode,mrCategoryCode,typeCode;
	    if(typeof(nodeId)!=undefined && nodeId!=null && nodeId!=''){//如果非空
        	temp = nodeId.split('_');
        	if(temp.length==2){
        		ownerCode = temp[temp.length-1];
        	}else if(temp.length==3){
        		ownerCode = temp[temp.length-2];
        		mrCategoryCode = temp[temp.length-1];
        	}else if(temp.length==4){
        		ownerCode = temp[temp.length-3];
        		mrCategoryCode = temp[temp.length-2];
        		typeCode = temp[temp.length-1];
        	}
        }
	    view.ownerCode = ownerCode;
	    view.mrCategoryCode = mrCategoryCode;
	    view.typeCode = typeCode;
	    view.nodeId = nodeId;
	    var block = this.getBlock('result');	
        var config = {         
            modal: true,
            height: 280,
            width:  530,
            title :'新建模板',
            contentConfig: {
                xtype: 'mrTemplatePropertyEditView',
                initChain: {
                    name: 'init',
                    context: {
                        customerData: 'new',
                        sourceView: view,
                        block:block
                    }
                }
            }
        };
        this.callParent([config]);
    }
});

Ext.define('iih.mr.tm.mr.action.DefaultTemplateAction', {
    extend:  Xap.ej.action.ServiceInvocation ,  
    
    doExecute: function(context) {
    	var grid = this.getBlock('result').down('mrtemplatelistblock');  
        var rb = grid.getSelectionModel().getSelection();         
        //模板id//rb instanceof Array
        if(rb.length == 0){
            var message = '请选模板进行默认设置~~~';
            XapMessageBox.info(message);
        }else{
            var code =rb[0].data.code;
            var length = rb.length;
            var dataList =[];
            for(var i=0;i<length;i++){
            	dataList.push(rb[i].data.code);
            }
            //参照接口文件，多条记录启用
            var data ={"ids":dataList};
            this.prepareOperations(context.operations,data);
        }
    },

    prepareOperations: function(operations,data) {       
        var url = this.url;
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_CREATE,
            condition: null,
            data:data,
            scope: this,
            success: this.onSuccess
            // fail: this.onFail
        };
        operations.push(operation);
    },
    
    onSuccess: function(operation) {
        var owner = this.getOwner();
        console.log(owner);
        var treeBlock = owner.down('mrtemplateTreeBlock');
        var mrTplCCat = treeBlock.down('xapcombobox[name=mrTplCCat]');
		var mrTplTypeCd = treeBlock.down('xapcombobox[name=mrTplTypeCd]');
		var mrTplStatCd = treeBlock.down('xapcombobox[name=mrTplStatCd]');
		var mrTemplateTrigger = treeBlock.down('xaptrigger[name=mrTemplateTrigger]');
		var mrTplCCatValue = mrTplCCat.value;
		var mrTplTypeCdValue = mrTplTypeCd.value;
		var mrTplStatCdValue = mrTplStatCd.value;
		var mrTemplateTriggerValue = mrTemplateTrigger.value;
		var gridBlock = owner.down('mrtemplatelistblock');
        var pageNum = gridBlock.currentPage;
        var chain = owner.getActionChain('init');
        if(!chain) {
            //如果没找到chain执行结果
            console.log("faile");
            console.log(chain);            
        }
        if(chain) {
            chain.execute({
            	pageNum:pageNum,
            	pageSize:'25',
        		statusCode :mrTplStatCdValue,
				mrCategoryCode :mrTplCCatValue,
				typeCode :mrTplTypeCdValue,
				name:mrTemplateTriggerValue
            });
        }
    }
});

Ext.define('iih.mr.tm.mr.action.DeleteMrTemplateListAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override delete
	* 当删除前的列表个数大于等于待删除个数，根据列表grid.store.gridBlock.store.lastOptions 进行查询。树不做操作。
	* 当删除后个数0，按照左上角的条件进行刷新树和列表。
	*/
    doExecute: function(context) {
    	var self = this;
    	var grid = self.getBlock('result').down('mrtemplatelistblock');
        var rb = grid.getSelectionModel().getSelection();      
        if(rb.length == 0){
        	 var message = '请选模板进行删除~~~';
             XapMessageBox.info(message);
        }else{
        	/*var msg = '确认删除？';
        	XapMessageBox.confirm2(msg, function(btn){
        		if(btn=='yes'){
        		}
        	});*/
        	var code =rb[0].data.code;
            var length = rb.length;
            var dataList =[];
            for(var i=0;i<length;i++){
            	dataList.push(rb[i].data.code);
            }
            //参照接口文件，多条记录启用 
            var data ={"ids":dataList};
            self.prepareOperations(context.operations,data);
        }
    },

    prepareOperations: function(operations,data) {       
        var url = this.url;     
        var mclass = null;       
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: mclass,
            method: METHODS.METHOD_DELETE,
            data:data,
            condition: null,
            scope: this,
            success: this.onSuccess
        };
        operations.push(operation);
    },
    
    onSuccess: function(operation) {
    	
        var owner = this.getOwner();
        console.log(owner);
        var treeBlock = owner.down('mrtemplateTreeBlock');
        var mrTplCCat = treeBlock.down('xapcombobox[name=mrTplCCat]');
		var mrTplTypeCd = treeBlock.down('xapcombobox[name=mrTplTypeCd]');
		var mrTplStatCd = treeBlock.down('xapcombobox[name=mrTplStatCd]');
		var mrTemplateTrigger = treeBlock.down('xaptrigger[name=mrTemplateTrigger]');
		var mrTplCCatValue = mrTplCCat.value;
		var mrTplTypeCdValue = mrTplTypeCd.value;
		var mrTplStatCdValue = mrTplStatCd.value;
		var mrTemplateTriggerValue = mrTemplateTrigger.value;
        var gridBlock = owner.down('mrtemplatelistblock');
        var message = operation.result.data.message;
        //XapMessageBox.info(message);
        /*Ext.MessageBox.show({
            title:'提示',
            msg:message
        });*/
        var chainTree = owner.getActionChain('initTree');
        if(!chainTree) {
            //如果没找到chain执行结果
            console.log("faile");
            console.log(chainTree);            
        }
        if(chainTree) {
        	chainTree.execute({
        		statusCode :mrTplStatCdValue,
				mrCategoryCode :mrTplCCatValue,
				typeCode :mrTplTypeCdValue,
				name:mrTemplateTriggerValue
        	});
        }
    }
});

Ext.define('iih.mr.tm.mr.action.DisableTemplateAction', {
    extend:  Xap.ej.action.ServiceInvocation ,  
    
    doExecute: function(context) {
    	var grid = this.getBlock('result').down('mrtemplatelistblock');  
        var rb = grid.getSelectionModel().getSelection();         
        //模板id//rb instanceof Array
        if(rb.length == 0){
            var message = '请选模板进行停用~~~';
            XapMessageBox.info(message);
        }else{
            var code =rb[0].data.code;
            var length = rb.length;
            var dataList =[];
            for(var i=0;i<length;i++){
            	dataList.push(rb[i].data.code);
            }
            //参照接口文件，多条记录启用
            var data ={"ids":dataList};
            this.prepareOperations(context.operations,data);
        }
    },

    prepareOperations: function(operations,data) {       
        var url = this.url;
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_CREATE,
            condition: null,
            data:data,
            scope: this,
            success: this.onSuccess
            // fail: this.onFail
        };
        operations.push(operation);
    },
    
    onSuccess: function(operation) {
        var owner = this.getOwner();
        console.log(owner);
        var treeBlock = owner.down('mrtemplateTreeBlock');
        var mrTplCCat = treeBlock.down('xapcombobox[name=mrTplCCat]');
		var mrTplTypeCd = treeBlock.down('xapcombobox[name=mrTplTypeCd]');
		var mrTplStatCd = treeBlock.down('xapcombobox[name=mrTplStatCd]');
		var mrTemplateTrigger = treeBlock.down('xaptrigger[name=mrTemplateTrigger]');
		var mrTplCCatValue = mrTplCCat.value;
		var mrTplTypeCdValue = mrTplTypeCd.value;
		var mrTplStatCdValue = mrTplStatCd.value;
		var mrTemplateTriggerValue = mrTemplateTrigger.value;
        var gridBlock = owner.down('mrtemplatelistblock');
        var pageNum = gridBlock.currentPage;
        var gridBlock = owner.down('mrtemplatelistblock');
        var pageNum = gridBlock.currentPage;
        var chain = owner.getActionChain('init');
        if(!chain) {
            //如果没找到chain执行结果
            console.log("faile");
            console.log(chain);            
        }
        if(chain) {
            chain.execute({
            	pageNum:pageNum,
            	pageSize:'25',
        		statusCode :mrTplStatCdValue,
				mrCategoryCode :mrTplCCatValue,
				typeCode :mrTplTypeCdValue,
				name:mrTemplateTriggerValue
            });
        }
    }
});

Ext.define('iih.mr.tm.mr.action.DisabledOfficeToolBarAction', {
    extend:  Xap.ej.action.ServiceInvocation ,
    
    /*
     * @Override
     */
    doExecute: function(context) {
        var operations = context.operations;
        if(!operations) {
            return;
        }
        var me = this;
        var emrSave = 'com.founder.iemr.editor.toolbar:emrSave';//保存
        var emrSaveAs = 'com.founder.iemr.editor.toolbar:emrSaveAs';//保存
        var emrRelease = 'com.founder.iemr.editor.toolbar:emrRelease';//保存
        var emrSubmit = 'com.founder.iemr.editor.toolbar:emrSubmit';//提交
        var emrRevoke = 'com.founder.iemr.editor.toolbar:emrRevoke';//撤销
        var emrStartApprove ='com.founder.iemr.editor.toolbar:emrStartApprove';//开始审签
        var emrApprove ='com.founder.iemr.editor.toolbar:emrApprove';//审签
        var emrAuditRevoke ='com.founder.iemr.editor.toolbar:emrAuditRevoke';//审签撤回
        var emrReject = 'com.founder.iemr.editor.toolbar:emrReject';//驳回
        var emrDocDelete = 'com.founder.iemr.editor.toolbar:emrDocDelete';//删除
        var emrRefreshMacro = 'com.founder.iemr.editor.toolbar:emrRefreshMacro';//刷新宏元素
        var emrRefreshDiagnosis = 'com.founder.iemr.editor.toolbar:emrRefreshDiagnosis';//刷新诊断
        var emrImageLibraries = 'com.founder.iemr.editor.toolbar:emrImageLibraries';//插入图片
        var emrContinuePrint = 'com.founder.iemr.editor.toolbar:emrContinuePrint';//续打
        var emrSelectContinuePrint = 'com.founder.iemr.editor.toolbar:emrSelectContinuePrint';//选页打印
        var emrSaveAsTemplate = 'com.founder.iemr.editor.toolbar:emrSaveAsTemplate';//病历另存为模板
        var emrRefreshDiagnosis = 'com.founder.iemr.editor.toolbar:emrRefreshDiagnosis';//病历另存为模板
        var emrRefreshOutpatientDisposal = 'com.founder.iemr.editor.toolbar:emrRefreshOutpatientDisposal';//病历另存为模板
        var emrUpdateTempl = 'com.founder.iemr.editor.toolbar:emrUpdateTempl';//病历另存为模板
        var emrChangeBaseTempl = 'com.founder.iemr.editor.toolbar:emrChangeBaseTempl';//病历另存为模板
        //        var emrSelectContinuePrint = 'com.founder.iemr.editor.toolbar:emrSelectContinuePrint';//选页续打
//        var emrContinuePrint = 'com.founder.iemr.editor.toolbar:emrContinuePrint';//病历另存为模板
//        var iddMedocalHistory = '';//月经史公式编辑
        var readonly = me.getOwner().readonly;
        var release = me.getOwner().release;
        var plugin = document.getElementById('iemrEditor');
        setTimeout(function() {
        	plugin.SetCommandVisible(emrStartApprove,false);
        	plugin.SetCommandVisible(emrRefreshOutpatientDisposal,false);
        	plugin.SetCommandVisible(emrRefreshDiagnosis,false);
        	if(me.getOwner().opType=='open'){
        		if(readonly){
        			plugin.SetCommandEnable(emrSave,!readonly);
        			plugin.SetCommandEnable(emrRelease,release);
        		}else{
        			plugin.SetCommandEnable(emrSave,true);
        			plugin.SetCommandEnable(emrRelease,release);
        		}
            }else if(me.getOwner().opType=='new' || me.getOwner().opType=='saveAs'){
            	plugin.SetCommandEnable(emrSaveAs,false);
            }
        	plugin.UpdateToolbar();
        },350);
    }
});

Ext.define('iih.mr.tm.mr.action.EditorCallBackAction', {
    extend:  Xap.ej.action.ServiceInvocation ,
    
    /*
    * @Override
    */
    execute: function(context) {
//    	Ext.MessageBox.hide();
    	var self = this;
    	var opType = this.getOwner().ownerCt.opType;
    	var plugin = document.getElementById('iemrEditor');
    	if('new'==opType || 'saveAs'==opType){
    		//设置编辑器按钮状态
    		var disabledOfficeToolBarAction = self.getOwner().getActionChain("disabledOfficeToolBarAction");
    		disabledOfficeToolBarAction.execute();
    		
    		//设置newF为1，则刷新宏元素后会自动刷新引用元素
    		this.getOwner().newF=1;
    	}else if ('open'==opType){
    		var operations = context.operations;
            if(!operations) {
                return;
            }
            //设置编辑器按钮状态
    		var disabledOfficeToolBarAction=self.getOwner().getActionChain("disabledOfficeToolBarAction");
    		disabledOfficeToolBarAction.execute();
    	}
		plugin.GotoSection('主诉',true);
		plugin.SetModified(false);
    }
});

Ext.define('iih.mr.tm.mr.action.EnableTemplateAction', {
    extend:  Xap.ej.action.ServiceInvocation ,  
    
    doExecute: function(context) {
    	var grid = this.getBlock('result').down('mrtemplatelistblock');  
        var rb = grid.getSelectionModel().getSelection();         
        //模板id//rb instanceof Array
        if(rb.length == 0){
            var message = '请选模板进行启用~~~';
            XapMessageBox.info(message);
        }else{
            var code =rb[0].data.code;
            var length = rb.length;
            var dataList =[];
            for(var i=0;i<length;i++){
            	dataList.push(rb[i].data.code);
            }
            //参照接口文件，多条记录启用
            var data ={"ids":dataList};
            this.prepareOperations(context.operations,data);
        }
    },

    prepareOperations: function(operations,data) {       
        var url = this.url;
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_CREATE,
            condition: null,
            data:data,
            scope: this,
            success: this.onSuccess
            // fail: this.onFail
        };
        operations.push(operation);
    },
    
    onSuccess: function(operation) {
        var owner = this.getOwner();
        console.log(owner);
        var treeBlock = owner.down('mrtemplateTreeBlock');
        var mrTplCCat = treeBlock.down('xapcombobox[name=mrTplCCat]');
		var mrTplTypeCd = treeBlock.down('xapcombobox[name=mrTplTypeCd]');
		var mrTplStatCd = treeBlock.down('xapcombobox[name=mrTplStatCd]');
		var mrTemplateTrigger = treeBlock.down('xaptrigger[name=mrTemplateTrigger]');
		var mrTplCCatValue = mrTplCCat.value;
		var mrTplTypeCdValue = mrTplTypeCd.value;
		var mrTplStatCdValue = mrTplStatCd.value;
		var mrTemplateTriggerValue = mrTemplateTrigger.value;
		var gridBlock = owner.down('mrtemplatelistblock');
        var pageNum = gridBlock.currentPage;
        var chain = owner.getActionChain('init');
        if(!chain) {
            //如果没找到chain执行结果
            console.log("faile");
            console.log(chain);            
        }
        if(chain) {
            chain.execute({
            	pageNum:pageNum,
            	pageSize:'25',
        		statusCode :mrTplStatCdValue,
				mrCategoryCode :mrTplCCatValue,
				typeCode :mrTplTypeCdValue,
				name:mrTemplateTriggerValue
            });
        }
    }
});

Ext.define('iih.mr.tm.mr.action.GridChangeAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	
    doExecute: function(context) {
    	alert("GridChangeAction");
    }, 
    
    onSuccess: function(operation) {
        var block = this.getBlock('grid');
        var m = operation.result;
		if(m){
			// TODO 数据格式就这样了？
			if(m instanceof Ext.data.Model) {
				block.setData({
					mclass: operation.mclass,
					data: m.getData(true)
				});
			}
			else {
				block.setData(m);
			}
		}
    }    
    
});

Ext.define('iih.mr.tm.mr.action.GroupElementLibAction', {
	extend:  Xap.ej.action.PopAction ,
	
	                                                        
	/*
	* @Override
	*/
	execute: function(context) {
	   //新建模板
	    var view =this.getOwner();
	    var block = this.getBlock('result');	        
        var config = {         
            modal: true,            
            height: 350,
            width:  600,
            title :'组合元素一览',
            contentConfig: {
                xtype: 'groupelementchooseview'
                /*initChain: {
                    name: 'init',
                    context: {
                        customerData: 'new',                        
                        sourceView: view,
                        block:block
                    }
                }*/
            }
        };
        this.callParent([config]);    
    }
});

Ext.define('iih.mr.tm.mr.action.IssueTemplateAction', {
    extend:  Xap.ej.action.ServiceInvocation ,  
    
    doExecute: function(context) {
    	var grid = this.getBlock('result').down('mrtemplatelistblock');  
        var rb = grid.getSelectionModel().getSelection();         
        //模板id//rb instanceof Array
        if(rb.length == 0){
            Ext.MessageBox.show({
                title:'提示',
                msg:'请选模板进行发布~~~'
            });
        }else{
            var code =rb[0].data.code;
            var length = rb.length;
            var dataList =[];
            for(var i=0;i<length;i++){
            	dataList.push(rb[i].data.code);
            }
            //参照接口文件，多条记录启用
            var data ={"ids":dataList};
            this.prepareOperations(context.operations,data);
        }
    },

    prepareOperations: function(operations,data) {       
        var url = this.url;
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_CREATE,
            condition: null,
            data:data,
            scope: this,
            success: this.onSuccess
            // fail: this.onFail
        };
        operations.push(operation);
    },
    
    onSuccess: function(operation) {
        var owner = this.getOwner();
        var chain = owner.getActionChain('init');
        if(!chain) {
            //如果没找到chain执行结果
            console.log("faile");
            console.log(chain);            
        }
        if(chain) {
            chain.execute();
        }
    }
});

Ext.define('iih.mr.tm.mr.action.LoadDataMrTemplateListAction', {
	extend:  Xap.ej.action.Action ,
	
	/*
	* @Override
	*/
	execute: function(context,data) {
       this.callParent();    	
       var data = context.data;
       var rs = this.getBlock('result');
       var grid = rs.down('flowgrid');       
       //console.log(context);
       //console.log(grid);
       //console.log(grid.getSelectionModel());
       var rb=grid.getSelectionModel().getSelection();
       //console.log(rb);
       console.log(rb[0].getData());
       var  jsonData=[rb[0].getData()]
       //jsonData是数组类型
       rs.setData(jsonData); 
    }
});

Ext.define('iih.mr.tm.mr.action.MrCcatCodeChangeAction', {
	extend:  Xap.ej.action.Action ,
	
	/*
	* @Override
	*/
	execute: function(context) {
		var left = this.getBlock('result');
		var view = left.ownerCt;
		//刷新树
		var chainMrTypeCodeInit = view.getActionChain('mrTypeCodeInit');
		chainMrTypeCodeInit.execute();
		
		var chainSearch = view.getActionChain('init');
		chainSearch.execute();
		
	}
});

Ext.define('iih.mr.tm.mr.action.MrCcatCodeInitAction', {
	extend:  Xap.ej.action.ServiceInvocation ,

	doExecute: function(context) {
	    this.callParent();
	    var sourceView = this.getOwner();
	    var enTypeCode = sourceView.enTypeCode;
        var operations = context.operations;
        this.prepareOperations(operations);        
	},  
	 prepareOperations: function(operations) {
		//查询
        //var condition = '?statusCode='+'MRM06.02';
		 var sourceView = this.getOwner();
		 var enTypeCode = sourceView.enTypeCode;
		 
        var url = this.url + '?enTypeCode='+enTypeCode;   
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_GET,
            condition: null,
            data:null,
            scope: this,
            success: this.onSuccess,
            //fail: this.onFail
        };
        operations.push(operation);	    
	 },
	    
    onSuccess: function(operation) {
    	
        var block = this.getBlock('result').down('[name=mrTplCCat]')
        var m = operation.result;
		if(m){
			// TODO 数据格式就这样了？
			if(m instanceof Ext.data.Model) {
				block.setData({
					mclass: operation.mclass,
					data: m.getData(true)
				});
			}
			else {
				//遍历结果,重新赋值，对于不对应的dataIndex
				var data =m.dataList
				Ext.Array.forEach(data,function(node,index,array){ 
						node.mrTypeCd = node.name;
				});
				block.setData(m.dataList);
			}
		
		}
    }    
});


Ext.define('iih.mr.tm.mr.action.MrTemplateActivateAction', {
	extend:  iih.mr.action.editor.EmrEditorOperatorAction ,
	
	/*
	* @Override
	*/
	execute: function(context) {
    	var operations = context.operations;
    	if(!operations) {
            return;
        }
    	var block = this.getBlock('result');         
    	var rs =block.down('mrtemplateeditview');
    	var properties = rs.getLayer(Xap.ej.block.Layer.PROPERTIES);
    	//打开类型
    	var opType=properties.data.opType;
    	this.addEditorEvent(rs);

    	if(opType!=undefined){
            if(opType=='new'){
            	//打开基础模板
            	console.log(properties.data.data);
                var basetemplatefilePk = properties.data.data.basetemplatefilePk;                
                this.addPrepareOperations(operations,basetemplatefilePk);
            }else if(opType=='open'){
                var templatefilePk=properties.data.filePk;
                console.log(properties.data);
                this.openPrepareOperations(operations,templatefilePk);
            }
        }
    },
        
    openPrepareOperations: function(operations, filePk) {
        var url = 'mr/basefile/'+filePk;
		//'mr/tpl/template/{id}
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            method: METHODS.METHOD_GET,
            scope: this,
            success: this.onOpenSuccess
        };
        operations.push(operation);
    },
    onOpenSuccess: function(operation) {
        var self=this;
        var block = this.getBlock('result');         
        var rs =block.down('mrtemplateeditview');
        var params={
                'objectId':'iemrEditor',
                'sstream':operation.result.data.odtFile,
                'mr_mode':2,
                'readonly':operation.result.readonly
        };
        this.insertWriter(rs,params);
    },
    addPrepareOperations: function(operations,baseTemplateCode) {
        var url = this.url+'/'+baseTemplateCode;
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            method: METHODS.METHOD_GET,
            scope: this,
            success: this.onAddSuccess
        };
        operations.push(operation);
    },
    onAddSuccess: function(operation) {
        var self=this;
        var block = this.getBlock('result');         
        var rs =block.down('mrtemplateeditview');
        var params={
                'objectId':'iemrEditor',
                'sstream':operation.result.data.odtFile,
                'mr_mode':2,
                'readonly':'false'
        };
        this.insertWriter(rs,params);
    }
});

Ext.define('iih.mr.tm.mr.action.MrTemplateBtnStatusAction', {
        extend:  Xap.ej.action.Action ,

	execute: function(context) {
		//按钮状态值
		var activatestatus = context.activatestatus;
		if(!activatestatus){//默认值设置	        
	        //var btnupgradeStatus  = false ;//升级
	        //var btnverifyStatus  = false ;//审核通过
	        //var btnrejectStatus  = false ;//驳回
	        //var btncancleVerifyStatus  = false ;// 取消审核
	        //var btnissueStatus  = false ;// 发布
			//var btnsubmitStatus  = false ;//提交
			var btnopenStatus  = false ;//打开
	        var btndeleteStatus  = false ;//删除
	        var btnpropertyStatus  = false ;// 属性
	        var btndisableStatus  = false ;//停用
	        var btnenableStatus  = false ;//启用
	        var btndefaultStatus  = false ;//默认模板
	        activatestatus = {
	        		//'btnupgradeStatus':btnupgradeStatus,
	        		//'btnsubmitStatus':btnsubmitStatus,
	        		//'btnverifyStatus':btnverifyStatus,
	        		//'btnrejectStatus':btnrejectStatus,
	        		//'btncancleVerifyStatus':btncancleVerifyStatus,
	        		//'btnissueStatus':btnissueStatus,
	        		'btnopenStatus':btnopenStatus,
	        		'btndeleteStatus':btndeleteStatus,
	        		'btnpropertyStatus':btnpropertyStatus,
	        		'btndisableStatus':btndisableStatus,
	        		'btnenableStatus':btnenableStatus,
	        		'btndefaultStatus':btndefaultStatus
	        };
		}
		this.setbuttonsstatus(activatestatus);
    },
    setbuttonsstatus:function(activatestatus){ //根据值设置按钮状态
		var block = this.getBlock('result');
	    var gridBlock =block.down('mrtemplatelistblock');
	    var btnopen = gridBlock.down('button[method=open]');
	    this.setbuttion(btnopen,activatestatus.btnopenStatus);
	    var btndelete = gridBlock.down('button[method=delete]');
	    this.setbuttion(btndelete,activatestatus.btndeleteStatus);
	    var btnproperty = gridBlock.down('button[method=property]');
	    this.setbuttion(btnproperty,activatestatus.btnpropertyStatus);
	    var btndisable = gridBlock.down('button[method=disable]');
	    this.setbuttion(btndisable,activatestatus.btndisableStatus);
	    var btnenable = gridBlock.down('button[method=enable]');
	    this.setbuttion(btnenable,activatestatus.btnenableStatus);
	    var btndefault = gridBlock.down('button[method=default]');
	    this.setbuttion(btndefault,activatestatus.btndefaultStatus);
	    /*var btnsubmit = gridBlock.down('button[method=submit]');
	    this.setbuttion(btnsubmit,activatestatus.btnsubmitStatus);
		var btnverify = gridBlock.down('button[method=verify]');
	    this.setbuttion(btnverify,activatestatus.btnverifyStatus);
	    var btnupgrade = gridBlock.down('button[method=upgrade]');
	    this.setbuttion(btnupgrade,activatestatus.btnupgradeStatus);
	    var btnreject = gridBlock.down('button[method=reject]');
	    this.setbuttion(btnreject,activatestatus.btnrejectStatus);
	    var btncancleVerify = gridBlock.down('button[method=cancleVerify]');
	    this.setbuttion(btncancleVerify,activatestatus.btncancleVerifyStatus);
	    var btnissue = gridBlock.down('button[method=issue]');
	    this.setbuttion(btnissue,activatestatus.btnissueStatus);*/
    },
    setbuttion:function(btn,status){//设置单个按钮状态
    	 btn.setDisabled(!status);
    }
});

Ext.define('iih.mr.tm.mr.action.MrTemplateEditAction', {
	extend:  iih.mr.action.editor.EmrEditorOperatorAction ,
	
	/*
	* @Override
	*/
	execute: function(context) {
    	var operations = context.operations;
    	if(!operations) {
            return;
        }
    	var view = this.getOwner().ownerCt;
    	var opType = view.opType;
    	var rs = this.getBlock('content');   
    	this.addEditorEvent(rs);
    	if(opType!=undefined){
    		this.showProgress();
            if(opType=='new'){
                var filePk = view.data.basetemplatefilePk;
                this.addPrepareOperations(operations,filePk);
            }else if(opType=='saveAs'){
                var filePk = view.data.filePk;
                console.log(view.data);
                this.addPrepareOperations(operations, filePk);
            }else if(opType=='open'){
                var filePk = view.filePk;
                this.openPrepareOperations(operations, filePk);
            }
        }
    },
    openPrepareOperations: function(operations, filePk) {
//    	filePk = '0A3FA5841F3FA776E050007F01006EAB';
    	var url = this.url+'/'+filePk;
    	 console.log(url);
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            method: METHODS.METHOD_GET,
            scope: this,
            success: this.onOpenSuccess
        };
        operations.push(operation);
    },
    onOpenSuccess: function(operation) {
        var self = this;
        var mrTemplateEditPage = this.getOwner();
        mrTemplateEditPage.mrTemplate = operation.result;
        var params={
                'objectId':'iemrEditor',
                'sstream':operation.result.data.odtFile,
                'mr_mode':2,
                'readonly':mrTemplateEditPage.readonly,
                'callBackAction':'editorCallBackAction'//编辑器加载完成后要执行的回调Action
        };
        this.insertWriter(mrTemplateEditPage,params);
        this.closeProgress();
    },
    addPrepareOperations: function(operations,filePk) {
    	//filePk = '0A3FA5841F3FA776E050007F01006EAB';
        var url = this.url+'/'+filePk;
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            method: METHODS.METHOD_GET,
            scope: this,
            success: this.onAddSuccess
        };
        operations.push(operation);
    },
    onAddSuccess: function(operation) {
        var self=this;
        var mrTemplateEditPage = this.getOwner();
        var params={
                'objectId':'iemrEditor',
                'sstream':operation.result.data.odtFile,
                'mr_mode':2,
                'readonly':'false',
                'callBackAction':'editorCallBackAction'//编辑器加载完成后要执行的回调Action
        };
        this.insertWriter(mrTemplateEditPage,params);
        this.closeProgress();
    }
});

Ext.define('iih.mr.tm.mr.action.MrTemplateListSearchAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	                                 

	doExecute: function(context) {
		this.showLoading();
	    this.callParent();
	    console.log('------------------------ MrTemplateListSearchAction ----------------------------');
	    var sourceView = this.getOwner();
		var enTypeCode = sourceView.enTypeCode;
		var eventName,pageNum,pageSize,condition,block;
		if(context.event != undefined){
			eventName = context.event.name ;
		}
		var data = null ;
		var left = this.getBlock('left');
		var view = left.ownerCt;
		var mrTplCCat = left.down('xapcombobox[name=mrTplCCat]');
		var mrTplTypeCd = left.down('xapcombobox[name=mrTplTypeCd]');
		var mrTplStatCd = left.down('xapcombobox[name=mrTplStatCd]');
		var mrTemplateTrigger = left.down('xaptrigger[name=mrTemplateTrigger]');
		var xaptreemrTemplate = left.down('xaptree[name=mrTemplate]');    
		var mrTplCCatValue = mrTplCCat.value;
		var mrTplTypeCdValue = mrTplTypeCd.value;
		var mrTplStatCdValue = mrTplStatCd.value;
		var mrTemplateTriggerValue = mrTemplateTrigger.value;
		//var chain = view.getActionChain('initTree');
		var properties = view.getLayer(Xap.ej.block.Layer.PROPERTIES);
		block = this.getBlock('result');
		//获取模板列表组件	
		grid = block.down('mrtemplatelistblock');
		var nodeId = xaptreemrTemplate.nodeId;
		var temp,nodeClick,ownerCode,mrCategoryCode,typeCode;
		if(typeof(nodeId)!=undefined && nodeId!=null && nodeId!=''){//如果非空
        	temp = nodeId.split('_');
        	if(temp.length==2){
        		ownerCode = temp[temp.length-1];
        	}else if(temp.length==3){
        		ownerCode = temp[temp.length-2];
        		mrCategoryCode = temp[temp.length-1];
        		if(mrTplCCatValue == 'ALL' ){
        			mrTplCCatValue = mrCategoryCode;
        		}
        	}else if(temp.length==4){
        		ownerCode = temp[temp.length-3];
        		mrCategoryCode = temp[temp.length-2];
        		typeCode = temp[temp.length-1];
        		if(mrTplCCatValue == 'ALL' ){
        			mrTplCCatValue = mrCategoryCode;
        		}
        		if(mrTplTypeCdValue == 'ALL' ){
        			mrTplTypeCdValue = typeCode;
        		}
        	}
        }
		if(context.event == undefined){
			pageNum = context.pageNum;
			pageSize = context.pageSize;
			statusCode = context.statusCode;
			if(mrCategoryCode!=undefined && !Ext.isEmpty(mrCategoryCode,false)){
			}else{
				mrCategoryCode = context.mrCategoryCode;
			}
			if(typeCode!=undefined && !Ext.isEmpty(typeCode,false)){
			}else{
				typeCode = context.typeCode;
			}
			name = context.name;
			if(context.ownerCode!=undefined && context.ownerCode!=null && context.ownerCode!=''){
				ownerCode = context.ownerCode;
			}
			//获取模板列表的 block
			data = {
					pageNum : pageNum,
					pageSize : pageSize,
					statusCode :statusCode,
					mrCategoryCode :mrCategoryCode,
					typeCode :typeCode,
					name:name,
					ownerCode:ownerCode,
					enTypeCode:enTypeCode
			};
			
		}else{
			if(eventName == "afterrender"){
				data = {
						pageNum : '1',
						pageSize : '25',
						statusCode :"ALL",
						mrCategoryCode:"ALL",
						typeCode:"ALL",
						name:name,
						enTypeCode:enTypeCode
				};
			}else if(eventName ==  'onTriggerClick' || eventName ==  'select' ){
				pageNum  = grid.currentPage ;
				pageSize = grid.pageSize ;
				data = {
						pageNum : pageNum,
						pageSize : pageSize,
						statusCode :mrTplStatCdValue,
						mrCategoryCode :mrTplCCatValue,
						typeCode :mrTplTypeCdValue,
						ownerCode:ownerCode,
						name:name,
						enTypeCode:enTypeCode
				};
			}else{
			    pageNum = context.event.arguments[0]; 
				pageSize = context.event.arguments[1]; 
				//获取模板列表的 block
				data = {
						pageNum : pageNum,
						pageSize : pageSize,
						statusCode :mrTplStatCdValue,
						mrCategoryCode :mrTplCCatValue,
						typeCode :mrTplTypeCdValue,
						name:name,
						enTypeCode:enTypeCode,
						ownerCode:ownerCode
				};
			}
		}
		if(data.mrCategoryCode == 'ALL' ){
			data.mrCategoryCode = null ;
			delete data.mrCategoryCode ;
		}
		if(data.typeCode == 'ALL' ){
			data.typeCode = null ;
			delete data.typeCode ;
		}
		if(data.statusCode == 'ALL' ){
			data.statusCode = null ;
			delete data.statusCode ;
		}
		var name = data.name;
		if(typeof(name) == undefined || name == ""){
			data.name = null ;
			delete data.name ;
		}
        var operations = context.operations;      
        this.prepareOperations(operations,data);        
	},  
	 prepareOperations: function(operations,data) {  
		var url = this.url;
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_GET,
            params: data,
            data:null,
            scope: this,
            success: this.onSuccessList,
            //fail: this.onFail
        };
        operations.push(operation);	    
	 },
	 onSuccessList: function(operation) {
	        var block = this.getBlock('result');
	        var gridBlock =block.down('mrtemplatelistblock');
		    //保存查询参数到store中
			Ext.apply(gridBlock.store.lastOptions,{// 把查询条件放到ds的参数对象中 
            		sourceEvent:'listSearch',
                    params : operation.params
                } 
            );
	        var m = operation.result;
	        // TODO 数据格式就这样了？
			if(m instanceof Ext.data.Model) {
				gridBlock.setData({
					mclass: operation.mclass,
					data: m.getData(true)
				});
			} else {        
				gridBlock.setGridData(m); //设置数据
			}
			var chain =  this.getOwner().getActionChain('selectionchange');
            chain.execute();
	 }    
});

Ext.define('iih.mr.tm.mr.action.MrTemplateLoadTreeDataAction', {
	extend:  Xap.ej.action.ServiceInvocation ,

	doExecute: function(context) {
		this.showLoading();
        var operations = context.operations;
        var view = this.getBlock('result').ownerCt;
        var enTypeCode = view.enTypeCode;
        var properties = view.getLayer(Xap.ej.block.Layer.PROPERTIES);
        var left = view.getBlock('left');
		var mrTplCCat = left.down('xapcombobox[name=mrTplCCat]');
		var mrTplTypeCd = left.down('xapcombobox[name=mrTplTypeCd]');
		var mrTplStatCd = left.down('xapcombobox[name=mrTplStatCd]');
		var mrTemplateTrigger = left.down('xaptrigger[name=mrTemplateTrigger]');
		var mrTplCCatValue = mrTplCCat.value;
		var mrTplTypeCdValue = mrTplTypeCd.value;
		var mrTplStatCdValue = mrTplStatCd.value;
		var mrTemplateTriggerValue = mrTemplateTrigger.value;
		//树节点选择病历分类编号
		var condition,data;
		if(properties.data != undefined){
			condition = properties.data.condition;
		}else{
			condition = {name:mrTemplateTriggerValue,
	            	mrCategoryCode:mrTplCCatValue,
	            	statusCode:mrTplStatCdValue,
	            	typeCode:mrTplTypeCdValue};
		}
		if(condition.mrCategoryCode == 'ALL' ){
			condition.mrCategoryCode = null ;
			delete condition.mrCategoryCode ;
		}
		if(condition.typeCode == 'ALL' ){
			condition.typeCode = null ;
			delete condition.typeCode ;
		}
		if(condition.statusCode == 'ALL' ){
			condition.statusCode = null ;
			delete condition.statusCode ;
		}

		if(condition.name == undefined || condition.name ==""){
			condition.name = null ;
			delete condition.name ;
		}
		data = {
				condition:condition,
				enTypeCode:enTypeCode
		}
        this.prepareOperations(operations,data);    
    }, 
    prepareOperations: function(operations,data) {
    	var condition = data.condition;
    	var enTypeCode = data.enTypeCode;
        var url = this.url+'?enTypeCode='+enTypeCode;
        if(Ext.Object.getSize(condition) > 0 ){
	        var queryString = Ext.Object.toQueryString(condition);
	        url = url + '&'+queryString;
        }

        var mclass = null;        
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: mclass,
            method:METHODS.METHOD_GET,
            condition: null,
            scope: this,
            success: this.onSuccessTree
        };
        operations.push(operation);
    },
       
    onSuccessTree: function(operation) {
        var block = this.getBlock('result');
        var noTree = block.down('xaptree');
        var m = operation; 
        if(m instanceof Ext.data.Model) {
        	gridBlock.setData({
                mclass: operation.mclass,
                data: m.getData(true)
            });
        }else {
        	console.log(operation.result);
        	if(operation.result.root.children){
        		block.setData(operation.result.root.children);
        	}else{
        		block.setData(null);
        	}
        }
        noTree.collapseAll();
        var ownerCode;
        if(operation.result.root.children && operation.result.root.children.length>0){
        	ownerCode = operation.result.root.children[0].data.ownerCode;
        }
//        var chain =  this.getOwner().getActionChain('mrTemplateTreeNodeChange');
//        chain.execute({
//        	ownerCode:ownerCode
//        });
        var view = this.getBlock('result').ownerCt;
        var properties = view.getLayer(Xap.ej.block.Layer.PROPERTIES);
        var left = view.getBlock('left');
		var mrTplCCat = left.down('xapcombobox[name=mrTplCCat]');
		var mrTplTypeCd = left.down('xapcombobox[name=mrTplTypeCd]');
		var mrTplStatCd = left.down('xapcombobox[name=mrTplStatCd]');
		var mrTemplateTrigger = left.down('xaptrigger[name=mrTemplateTrigger]');
		var mrTplCCatValue = mrTplCCat.value;
		var mrTplTypeCdValue = mrTplTypeCd.value;
		var mrTplStatCdValue = mrTplStatCd.value;
		var mrTemplateTriggerValue = mrTemplateTrigger.value;
		var mrTemTree = left.down('xaptree[name=mrTemplate]');  
		var nodeId = mrTemTree.nodeId;
		var condition={},temp,mrCategoryCode,typeCode,path;
		if(typeof(nodeId)!=undefined && nodeId!=null && nodeId!=''){//如果非空
        	temp = nodeId.split('_');
        	if(temp.length==2){
        		ownerCode = temp[temp.length-1];
        	}else if(temp.length==3){
        		ownerCode = temp[temp.length-2];
        		mrCategoryCode = temp[temp.length-1];
        	}else if(temp.length==4){
        		ownerCode = temp[temp.length-3];
        		mrCategoryCode = temp[temp.length-2];
        		typeCode = temp[temp.length-1];
        	}
        }
		if(properties.data != undefined){
			condition = properties.data.condition;
		}else{
			condition = {name:mrTemplateTriggerValue,
	            	mrCategoryCode:mrTplCCatValue,
	            	statusCode:mrTplStatCdValue,
	            	typeCode:mrTplTypeCdValue};
		}
		if(typeof(mrCategoryCode)!=undefined && mrCategoryCode!=null && mrCategoryCode!=''){
			condition.mrCategoryCode = mrCategoryCode;
		}else{
			if(condition.mrCategoryCode == 'ALL' ){
				condition.mrCategoryCode = null ;
				delete condition.mrCategoryCode ;
			}
		}
		if(typeof(typeCode)!=undefined && typeCode!=null && typeCode!=''){
			condition.typeCode = typeCode;
		}else{
			if(condition.typeCode == 'ALL' ){
				condition.typeCode = null ;
				delete condition.typeCode ;
			}
		}
		if(condition.statusCode == 'ALL' ){
			condition.statusCode = null ;
			delete condition.statusCode ;
		}

		if(condition.name == undefined || condition.name ==""){
			condition.name = null ;
			delete condition.name ;
		}
        var gridBlock = view.down('mrtemplatelistblock');
        var pageNum = gridBlock.currentPage;
        var chainList =  this.getOwner().getActionChain('init');
        chainList.execute({
        	pageNum:pageNum,
        	pageSize:'25',
    		statusCode :condition.statusCode,
			mrCategoryCode :condition.mrCategoryCode,
			typeCode :condition.typeCode,
			name:condition.name,
			ownerCode:ownerCode
        });
        if(typeof(typeCode)!=undefined && !Ext.isEmpty(typeCode,false)){
        	path = '/root/_'+ownerCode+'/_'+ownerCode+'_'+mrCategoryCode+'/_'+ownerCode+'_'+mrCategoryCode+'_'+typeCode;
        }else{
        	if(typeof(mrCategoryCode)!=undefined && !Ext.isEmpty(mrCategoryCode,false)){
        		path = '/root/_'+ownerCode+'/_'+ownerCode+'_'+mrCategoryCode;
        	}else{
        		if(typeof(ownerCode)!=undefined && !Ext.isEmpty(ownerCode,false)){
        			path = '/root/_'+ownerCode;
        		}
        	}
        }
//        mrTemTree.expandPath('/root/_004942/_004942_MRM14.02/_004942_MRM14.02_MRM16.14', 'id')
        if(nodeId){
			var r = mrTemTree.getStore().getNodeById(nodeId);
			mrTemTree.getSelectionModel().select(r);
			mrTemTree.expandPath(path, 'id');
		}else{
			mrTemTree.getSelectionModel().select(0);
			mrTemTree.expandPath(path, 'id');
			mrTemTree.nodeId = '_'+ownerCode;
		}
		//var xaptree = this.getBlock('result').down('xaptree');
		/*noTree.expandAll(function(){//树展开所有节点
			//console.trace();
			//alert("xaptree.expandAll");
		});*/
    }/*,
    onExpandPathComplete: function(bSuccess, oLastNode) { 
    	if(!bSuccess) 
    		return;
    	//focus 节点，并选中节点！，以下代码不可少 
    	oLastNode.ensureVisible();
    	oLastNode.select();
    	oLastNode.fireEvent('click', oLastNode);
	}*/
});

Ext.define('iih.mr.tm.mr.action.MrTemplateNmSerchAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
    doExecute: function(context) {
        //console.log(context.event.arguments[1]);
        var mrTplNm =context.event.arguments[1];
        var operations = context.operations;    
        this.prepareOperations(operations,mrTplNm);
    }, 
    prepareOperations: function(operations,data) {
        var url = this.url;
        url += '/' + data;       
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_GET,
            condition: null,
            data:null,
            scope: this,
            success: this.onSuccess,
            //fail: this.onFail
        };
        operations.push(operation);     
     },        
    onSuccess: function(operation) {
        var block = this.getBlock('result');
        var m = operation;
		if(m)
			block.setData(m.result.data);
    }    
    
});

Ext.define('iih.mr.tm.mr.action.MrTemplateReleaseAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	 * @Override
	 */
	execute: function(context) {
	    var operations = context.operations;
        if(!operations) {
            return;
        }
	    var plugin = document.getElementById('iemrEditor');
	    var view = this.getOwner();
	    var properties = view.getLayer(Xap.ej.block.Layer.PROPERTIES);
	    var opType = view.opType;
	    var dataList =[];
	    console.log(opType);
	    var data = {};
	    if(opType!=undefined){
	    	if(view.mrTemplate!=undefined){
	    		data = view.mrTemplate;
	    	}else{
	    		data = properties.owner.data;
	    	}
            data.odtFile = plugin.SaveToString();
            data.statusCode = 'release';
            var code = view.code;
            if(opType == 'new'){
            	data.baseTemplateCode = properties.owner.data.baseTemplateCode;
            	data.name = properties.owner.data.mrTplNm;//"新建";
            	data.description = properties.owner.data.description;
            	if((properties.owner.data.ownerTypeCode==null)||("" ==properties.owner.data.ownerTypeCode)){
            		data.ownerTypeCode ="MDM08.01";//"MDM08.01";全院
            	}else{
            		data.ownerTypeCode =properties.owner.data.ownerTypeCode;
            	}
            	if(data.ownerTypeCode == 'MDM08.01'){
            		data.tplUseTypeCode ="MDM12.01";
            	}
            	if(data.ownerTypeCode == 'MDM08.02'){
            		data.tplUseTypeCode ="MDM12.02";
            	}
            	if(data.ownerTypeCode == 'MDM08.03'){
            		data.tplUseTypeCode ="MDM12.03";
            	}
            	data.ownDeptCd = data.deptCode ;
            	data.tplUseCode = data.ownDeptCd ;
            	data.signLevel = properties.owner.data.signLevelCode;
            	
            	if((properties.owner.data.mrTypeCd==null)||("" ==properties.owner.data.mrTypeCd)){
            		//alert(properties.owner.data.mrTypeCd);
            		data.mrTypeCode ="MRM16.13";;//"MRM01.02";全院
            	}else{
            		//alert(properties.owner.data.mrTypeCd);
                    data.mrTypeCode = properties.owner.data.mrTypeCd//"MRM01.02";
            	}
            	if((properties.owner.data.diCds==null)||("" ==properties.owner.data.diCds)){
            		//alert(properties.owner.data.mrTypeCd);
            		data.diCds ="N93.801";;//"N93.801"
            	}else{
                    data.diCds =properties.owner.data.diCds
            	}
                this.addPrepareOperations(operations,data);
            }else if(opType == 'open'){
            	dataList.push(code);
            	data ={"ids":dataList};
                this.openPrepareOperations(operations, data);
            }
        }
    },
    
    addPrepareOperations: function(operations,data) {
        var METHODS = this.getInvocationMethods();
        var url = this.url;
        console.log(url);
        var operation = {
            url: url,
            method: METHODS.METHOD_CREATE,
            data:data,
            scope: this,
            success: this.onAddSuccess,
            fail: this.onFail
        };
        operations.push(operation);
    },
    
    openPrepareOperations: function(operations,data) {
        var METHODS = this.getInvocationMethods();
        var code = data.code;
        var url = 'mr/tpl/activated/template';
        var operation = {
            url: url,
            method: METHODS.METHOD_CREATE,
            data:data,
            scope: this,
            success: this.onOpenSuccess,
            fail: this.onFail
        };
        operations.push(operation);
    },
    onOpenSuccess: function(operation) {
    	var plugin = document.getElementById('iemrEditor');
    	var emrSave = 'com.founder.iemr.editor.toolbar:emrSave';//保存
        var emrRelease = 'com.founder.iemr.editor.toolbar:emrRelease';//保存
		plugin.SetCommandEnable(emrSave,false);
		plugin.SetCommandEnable(emrRelease,false);
		plugin.UpdateToolbar();
    	var msg = '启用成功!!!';
		XapMessageBox.info(msg);
    },
    onAddSuccess: function(returnData) {
        this.getOwner().opType='open';
        this.getOwner().mrTemplateCd = returnData.result.mrTplVerKc;
        var plugin = document.getElementById('iemrEditor');
        var emrSave = 'com.founder.iemr.editor.toolbar:emrSave';//保存
        var emrRelease = 'com.founder.iemr.editor.toolbar:emrRelease';//保存
		plugin.SetCommandEnable(emrSave,false);
		plugin.SetCommandEnable(emrRelease,false);
		plugin.UpdateToolbar();
        var msg = '启用成功!!!';
		XapMessageBox.info(msg);
    },
    onFail: function(operation) {
    	var msg = '启用失败!!!';
		XapMessageBox.info(msg);
    }
        
});

/**
 * Created by guo_zhongbao on 2015/1/20.
 * datagrid表的行点击，选择或取消选择一行时触发事件
 */
Ext.define('iih.mr.tm.mr.action.MrTemplateRowclickAction', {
    extend:  Xap.ej.action.ServiceInvocation ,
    
    doExecute: function (context) {
        var datagrid = this.getBlock('result').down('mrtemplatelistblock');
        var checkmodel = datagrid.getSelectionModel();
        var count1 = checkmodel.getCount();
        var selectedItemArr = datagrid.getSelectionModel().getSelection();
        var count = selectedItemArr.length ;
        /*var btnupgradeStatus  = false ;//升级
        var btnsubmitStatus  = false ;//提交
        var btnverifyStatus  = false ;//审核通过
        var btnrejectStatus  = false ;//驳回
        var btncancleVerifyStatus  = false ;// 取消审核
        var btnissueStatus  = false ;// 发布*/
        var btnopenStatus  = false ;//打开
        var btndeleteStatus  = false ;//删除
        var btnpropertyStatus  = false ;// 属性
        var btndisableStatus  = false ;//停用
        var btnenableStatus  = false ;//启用
        var btndefaultStatus  = false ;//默认模板
        if(count == 0){
        	
        }else{
            if(count == 1){
            	var item = selectedItemArr[0].raw;
            	/*if(item.canSubmit=='1'){
            		btnsubmitStatus = true ;//提交
            	}
            	if(item.canUpgrade=='1'){
            		btnupgradeStatus = true ;//升级
            	}
            	if( '1' == item.canReview){
            		btnverifyStatus = true ;//审核通过
            	}
            	if( '1' == item.canReject){
            		btnrejectStatus = true ;//驳回
            	}
            	if( '1' == item.canCancelReview){
            		btncancleVerifyStatus = true ;//取消审核
            	}
            	if( '1' == item.canPublish){
            		btnissueStatus = true ;//发布
            	}*/
            	if( '1' == item.canDelete){
            		btndeleteStatus = true ;//删除
            	}
            	if( '1' == item.canStop){
            		btndisableStatus = true ;//停用
            	}
            	if( '1' == item.canActivated ||  '1' == item.canSubmit ){
            		btnenableStatus = true ;//启用
            	}
            	if( '1' == item.canStop ){
            		btndefaultStatus = true ;//默认模板
            	}
            	btnopenStatus = true ;//打开
            	btnpropertyStatus = true ;//属性
            }else{
            	/*btnsubmitStatus = true ;//提交
                btnverifyStatus  = true ;//审核通过
                btnrejectStatus  = true ;//驳回
                btncancleVerifyStatus  = true ;// 取消审核
                btnissueStatus  = true ;// 发布*/
                btndeleteStatus = true ;//删除
                btndisableStatus  = true ;//停用
                btnenableStatus  = true ;//启用
                btndefaultStatus = true ;//默认模板
                for(var i = 0 ; i < count ; i++ ){
                    var item = selectedItemArr[i].raw ;
                    /*if( btnsubmitStatus && ('0' == item.canSubmit)){
                		btnsubmitStatus = false ;//提交
                	}
                	if( btnverifyStatus && ('0' == item.canReview)){
                		btnverifyStatus = false ;//审核通过
                	}
                	if( btnrejectStatus && ('0' == item.canReject)){
                		btnrejectStatus = false ;//驳回
                	}
                	if( btncancleVerifyStatus && ('0' == item.canCancelReview)){
                		btncancleVerifyStatus = false ;//取消审核
                	}
                	if( btnissueStatus && ('0' == item.canPublish)){
                		btnissueStatus = false ;//发布
                	}*/
                	if( btndeleteStatus && ('0' == item.canDelete)){
                		btndeleteStatus = false ;//删除
                	}
                	if( btndisableStatus && ('0' == item.canStop)){
                		btndisableStatus = false ;//停用
                	}
                	if( btnenableStatus && ('0' == item.canActivated)){
                		btnenableStatus = false ;//启用
                	}
                }
            }
        }
        var activatestatus = {
        		/*'btnupgradeStatus':btnupgradeStatus,
        		'btnsubmitStatus':btnsubmitStatus,
        		'btnverifyStatus':btnverifyStatus,
        		'btnrejectStatus':btnrejectStatus,
        		'btncancleVerifyStatus':btncancleVerifyStatus,
        		'btnissueStatus':btnissueStatus,*/
        		'btndeleteStatus':btndeleteStatus,
        		'btnpropertyStatus':btnpropertyStatus,
        		'btnopenStatus':btnopenStatus,
        		'btndisableStatus':btndisableStatus,
        		'btnenableStatus':btnenableStatus,
        		'btndefaultStatus':btndefaultStatus
        };
        var defectinAndmreditview = this.getOwner(); 	
        var chain = defectinAndmreditview.getActionChain('btnstatus');
        if(chain) {
                chain.execute({'activatestatus':activatestatus});
        }
    }
});

Ext.define('iih.mr.tm.mr.action.MrTemplateSaveAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	                                                     
	/*
	 * @Override
	 */
	execute: function(context) {
	    var operations = context.operations;
        if(!operations) {
            return;
        }
        console.log('------------------------ MrTemplateSaveAction -----------------------------------');
        var plugin = document.getElementById('iemrEditor');
	    plugin.tagName='ext';
	    var view = this.getOwner();
	    var properties = this.getOwner().getLayer(Xap.ej.block.Layer.PROPERTIES);
	    var opType = view.opType;
	    var data ={'odtFile':plugin.SaveToString()};
	    if(opType!=undefined){
	    	this.showSubmitProgressBar();
            if(opType=='new' || opType=='saveAs'){
            	var properties = view.getLayer(Xap.ej.block.Layer.PROPERTIES);
                var data = properties.owner.data;
            	data.baseTemplateCode = properties.owner.data.baseTemplateCode;
            	data.name = properties.owner.data.mrTplNm;//"新建";
            	data.description = properties.owner.data.description;
            	if((properties.owner.data.ownerTypeCode==null)||("" ==properties.owner.data.ownerTypeCode)){
            		data.ownerTypeCode ="MDM08.01";//"MDM08.01";全院
            	}else{
            		data.ownerTypeCode =properties.owner.data.ownerTypeCode;
            	}
            	if(data.ownerTypeCode == 'MDM08.01'){
            		data.tplUseTypeCode ="MDM12.01";
            	}
            	if(data.ownerTypeCode == 'MDM08.02'){
            		data.tplUseTypeCode ="MDM12.02";
            	}
            	if(data.ownerTypeCode == 'MDM08.03'){
            		data.tplUseTypeCode ="MDM12.03";
            	}
            	data.ownDeptCd = data.deptCode ;
            	data.tplUseCode = data.ownDeptCd ;
            	data.signLevel = properties.owner.data.signLevelCode;
            	
            	if((properties.owner.data.mrTypeCd==null)||("" ==properties.owner.data.mrTypeCd)){
            		//alert(properties.owner.data.mrTypeCd);
            		data.mrTypeCode ="MRM16.13";;//"MRM01.02";全院
            	}else{
            		//alert(properties.owner.data.mrTypeCd);
                    data.mrTypeCode = properties.owner.data.mrTypeCd//"MRM01.02";
            	}
            	if((properties.owner.data.diCds==null)||("" ==properties.owner.data.diCds)){
            		//alert(properties.owner.data.mrTypeCd);
            		data.diCds ="";
            	}else{
                    data.diCds =properties.owner.data.diCds;
            	}
                
                //delete  data.data;//删除多余的json对象
                data.odtFile = plugin.SaveToString();/**/
                this.addPrepareOperations(operations,data);
            }else if(opType=='open'){
                data.actionType = 'save';
                data.code = view.code;
                data.filePk = view.filePk;
                //Xap.debug('模板编码：'+data.code);
                this.openPrepareOperations(operations, data);
            }
        }
    },
    
    addPrepareOperations: function(operations,data) {
        var METHODS = this.getInvocationMethods();
        var url=this.url;
        var operation = {
            url: url,
            method: METHODS.METHOD_CREATE,
            data:data,
            scope: this,
            success: this.onAddSuccess,
            fail: this.onFail
        };
        operations.push(operation);
    },
    
    openPrepareOperations: function(operations,data) {
    	var code  = data.code;
        var METHODS = this.getInvocationMethods();
        var url=this.url+"/"+code;
        var operation = {
            url: url,
            method: METHODS.METHOD_UPDATE,
            data:data,
            scope: this,
            success: this.onOpenSuccess,
            fail: this.onFail
        };
        operations.push(operation);
    },
    onOpenSuccess: function(operation) {
    	var mrTemplateEditPage = this.getOwner(),chain,basCode,code;
    	if(mrTemplateEditPage.templateReset!=undefined && !Ext.isEmpty(mrTemplateEditPage.templateReset,false) && mrTemplateEditPage.templateReset=='reset'){
    		//保存基础模板的code
        	chain = mrTemplateEditPage.getActionChain('saveBaseCode');
        	code = mrTemplateEditPage.code;
        	baseCode = mrTemplateEditPage.baseTemplateCode;
        	if(!chain) {
                 //如果没找到chain执行结果
                 console.log("faile");   
            }
            if(chain) {
                 chain.execute({
                 	code:code,
                 	baseCode:baseCode
                 });
            }
    	}
    },
    onAddSuccess: function(returnData) {
    	var mrTemplateEditPage = this.getOwner(),chain,code,baseCode;
    	if(mrTemplateEditPage.templateReset!=undefined && !Ext.isEmpty(mrTemplateEditPage.templateReset,false) && mrTemplateEditPage.templateReset=='reset'){
    		//保存基础模板的code
        	chain = mrTemplateEditPage.getActionChain('saveBaseCode');
        	code = mrTemplateEditPage.code;
        	baseCode = mrTemplateEditPage.baseTemplateCode;
        	if(!chain) {
                 //如果没找到chain执行结果
                 console.log("faile");   
            }
            if(chain) {
                 chain.execute({
                 	code:code,
                 	baseCode:baseCode
                 });
            }
    	}
    	mrTemplateEditPage.opType = 'open';
    	mrTemplateEditPage.filePk = returnData.result.data.filePk;
    	mrTemplateEditPage.code = returnData.result.data.code;
    	mrTemplateEditPage.mrTypeCode = returnData.result.data.mrTypeCode;
    	mrTemplateEditPage.enTypeCode = returnData.result.data.enTypeCode;
    	mrTemplateEditPage.mrTemplate = returnData.result.data;
    	var plugin = document.getElementById('iemrEditor');
    	var emrSaveAs = 'com.founder.iemr.editor.toolbar:emrSaveAs';//保存
		plugin.SetCommandEnable(emrSaveAs,true);
		plugin.UpdateToolbar();
    },
    onFail: function(operation) {
    }
});

Ext.define('iih.mr.tm.mr.action.MrTemplateStatCdChangeAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	                                 

	doExecute: function(context) {
	    this.callParent();
	    //console.log('状态下拉框选择，应该触发查询事件');
	  //获取模板列表的 block
		var block = this.getBlock('result');
		//获取模板列表组件	
		var grid = block.down('mrtemplatelistblock');
		var rs = grid.fireEvent('turnpage',1,25);
		console.log(rs);

	}   
});

Ext.define('iih.mr.tm.mr.action.MrTemplateTreeItemExpandAction', {
	extend:  Xap.ej.action.ServiceInvocation ,

	execute: function(context) {
		var me = this;
        var operations = context.operations;  
		me.node =context.event.arguments[0];
    	//自定义参数，可有可无
		var params = {
			parOrgCd : IMER_GLOBAL.hospitalArea.code,
			orgTpCd : 'ORGM01.04'
		};	
		//返回值参数
		var nodeData =	context.event.arguments[0].raw.data;
        var operation = {
            url: me.url,
			//params : params,
            mclass: null,
            method: 'post',
            data:nodeData,
            condition: null,
            scope: this,
            success: this.onSuccess
        };
        operations.push(operation);  
    }, 

    onSuccess: function(operation) {
		var me = this;
        var block = this.getBlock('result');
        if(operation.result.root){
			var data = operation.result.root.children;
			//先找到children的节点并去除掉children=[],使children=null
			Ext.Array.forEach(data,function(node,index,array){ 
				if(!node.leaf){
					node.children = null;
				}
			});
			var treeData = [];
			for(var d in data){
				treeData.push(data[d]);
			}
			me.node.appendChild(treeData);
		};
    } 
});

Ext.define('iih.mr.tm.mr.action.MrTemplateTreeNodeChangeAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
    doExecute: function(context) {
    	this.showLoading();
        var operations = context.operations; 
        var view = this.getOwner();
        var treeBlock = view.down('mrtemplateTreeBlock');
        console.log('------------------- MrTemplateTreeNodeChangeAction ------------------------');
        var mrTplCCat = treeBlock.down('xapcombobox[name=mrTplCCat]');
		var mrTplTypeCd = treeBlock.down('xapcombobox[name=mrTplTypeCd]');
		var mrTplStatCd = treeBlock.down('xapcombobox[name=mrTplStatCd]');
		var mrTemplateTrigger = treeBlock.down('xaptrigger[name=mrTemplateTrigger]');
		var mrTplCCatValue = mrTplCCat.value;//自定义类型
		var mrTplTypeCdValue = mrTplTypeCd.value;//病历类型
		var mrTplStatCdValue = mrTplStatCd.value;//模板状态
		var mrTemplateTriggerValue = mrTemplateTrigger.value;//名称
        var block = this.getBlock('right');
        var layout = block.getLayout();
        var treeNode,data,evn,treeTem,nodeId;
        if(context.event != undefined){
        	treeNode = context.event.arguments[1];
            data = treeNode.raw.data;
        }else{
        	data={};
        	data.ownerCode = context.ownerCode;
        }
        var operations = context.operations;
        /*if(mrTplCCatValue == 'ALL'){
			mrTplCCatValue = '';
		}else{
			data.templateCategoryCode = mrTplCCatValue;
		}
        if(mrTplTypeCdValue == 'ALL'){
        	mrTplTypeCdValue = '';
		}else{
			data.templateCategoryCode = mrTplTypeCdValue;
		}*/
        if(mrTplStatCdValue == 'ALL'){
        	mrTplStatCdValue = '';
		}
		data.statusCode = mrTplStatCdValue;
        if(mrTemplateTriggerValue == undefined){
        	mrTemplateTriggerValue = '';
		}
		data.name = mrTemplateTriggerValue;
        this.prepareOperations(operations,data);
    	layout.setActiveItem(0);
        /*if(treeNode.data.leaf==true){
        	var gridBlock = block.down('mrtemplateeditview')
        	//console.log(context.event.arguments[1].raw.data.templateCode);
        	var code = context.data.data.code;
        	var filePk = context.data.data.filePk;
        	//console.log(context.data);
        	var properties = gridBlock.getLayer(Xap.ej.block.Layer.PROPERTIES);
            properties.setData({
            	opType: 'open',  
            	filePk:filePk,
                code:code
            });
            //先remove掉编译器打开的odt
            var owner = this.getOwner();
            var chain = owner.getActionChain('beforeActivate');
            chain.execute();
            layout.setActiveItem(1);
        }else{
        	//点击非叶子结点，对树进行查询
        	//按条件查询，修改列表显示
            console.log(context.event.arguments[1]);
            var operations = context.operations;      
            var data = treeNode.raw.data;
            console.log(data);
            this.prepareOperations(operations,data);
        	layout.setActiveItem(0);
        } */       
    }, 
    prepareOperations: function(operations,data) { 
    	var typeCode = data.templateTypeCode;
    	if(Ext.isEmpty(typeCode,false)){
    		typeCode = data.scTemplateTypeCode;
    	}
    	var mrCategoryCode = data.templateCategoryCode;
    	if(Ext.isEmpty(mrCategoryCode,false)){
    		mrCategoryCode = data.scTemplateCategoryCode;
    	}
    	var ownerCode = data.ownerCode;
    	var sourceView = this.getOwner();
		var enTypeCode = sourceView.enTypeCode;
		var statusCode = data.statusCode;
		var name = data.name;
//    	typeCode = "MRM11.01";
        var url = this.url ;//+'?typeCode='+typeCode+'&mrCategoryCode='+mrCategoryCode+'&ownerCode='+ownerCode+'&enTypeCode='+enTypeCode;  
        var searchParam = {
				pageNum : 1,
				pageSize : 25,
        		typeCode:typeCode,//病历类型
        		statusCode:statusCode,//状态码
        		name:name,//
        		mrCategoryCode:mrCategoryCode,//自定义分类
        		ownerCode:ownerCode,//所属编码
        		enTypeCode:enTypeCode//就诊类型
        }
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_GET,
            params: searchParam,
            data:null,
            scope: this,
            success: this.onSuccess,
            //fail: this.onFail
        };
        operations.push(operation);	    
	 },
	    
	 onSuccess: function(operation) {
	        var block = this.getBlock('right');
	        var gridBlock =block.down('mrtemplatelistblock');
	       //保存查询参数到store中
			Ext.apply( 
            	gridBlock.store.lastOptions,  
                {   // 把查询条件放到ds的参数对象中 
            		sourceEvent:'treeNodeItemClick',
                    params : operation.params
                } 
            );
	        
	        var m = operation.result;
	        // TODO 数据格式就这样了？
	        if(m instanceof Ext.data.Model) {
	        	gridBlock.setData({
	                mclass: operation.mclass,
	                data: m.getData(true)
	            });
	        }else{        
	        	console.log(m);
	        	gridBlock.setGridData(m);
	        }
			var chain =  this.getOwner().getActionChain('selectionchange');
            chain.execute();
	 }     
});

Ext.define('iih.mr.tm.mr.action.MrTplStatCdChangeAction', {
    extend:  Xap.ej.action.ServiceInvocation ,
	
	   doExecute: function(context) {
	        //console.log(context.event.arguments[0].value);
	        var mrTplStatCd =context.event.arguments[0].value;
	        var operations = context.operations; 
	        var owner = this.getOwner().ownerCt;  
	        console.log(owner);
	        var  mrNm =owner.down('[name=mrTemplateTrigger]').value;	
	        if(mrNm==undefined){
	            mrNm=null;
	        }
	        console.log(mrNm);
	        this.prepareOperations(operations,mrNm,mrTplStatCd);
	    }, 
	   prepareOperations: function(operations,mrNm,data) {
	        var url = this.url;
	        url += '/' +mrNm+'/'+ data;   
	        var METHODS = this.getInvocationMethods();
	        var operation = {
	            url: url,
	            mclass: null,
	            method: METHODS.METHOD_GET,
	            condition: null,
	            data:null,
	            scope: this,
	            success: this.onSuccess,
	            fail: this.onFail
	        };
	        operations.push(operation);     
	     },	
	     onFail: function(operation) {
	         Ext.MessageBox.show({
	             title:'提示',
	             msg:'查询失败!!!'
	         });
	     },          
	     onSuccess: function(operation) {
	         var block = this.getBlock('result');
	         var m = operation;
			 if(m)
				block.setData(m.result.data);
	     }    
	    
});

Ext.define('iih.mr.tm.mr.action.MrTypeCodeInitAction', {
	extend:  Xap.ej.action.ServiceInvocation ,

	doExecute: function(context) {
	    this.callParent();
	    var sourceView = this.getOwner();
	    var enTypeCode = sourceView.enTypeCode;
        var operations = context.operations;
        this.prepareOperations(operations);        
	},  
	 prepareOperations: function(operations) {
		//查询
        //var condition = '?statusCode='+'MRM06.02';
		 var sourceView = this.getOwner();
		 var enTypeCode = sourceView.enTypeCode;
        var url = this.url + '?enTypeCode='+enTypeCode;   
	    var mrTplCCat = this.getBlock('result').down('[name=mrTplCCat]') ;
		var mrTplCCatCode = mrTplCCat.getValue() ;
		if(mrTplCCatCode != "ALL"){
			url = url + '&mrCategoryCode='+mrTplCCatCode; 
		}
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_GET,
            condition: null,
            data:null,
            scope: this,
            success: this.onSuccess,
            //fail: this.onFail
        };
        operations.push(operation);	    
	 },
	    
    onSuccess: function(operation) {
    	
        var block = this.getBlock('result').down('[name=mrTplTypeCd]')
        var m = operation.result;
		if(m){
			// TODO 数据格式就这样了？
			if(m instanceof Ext.data.Model) {
				block.setData({
					mclass: operation.mclass,
					data: m.getData(true)
				});
			}
			else {
				//遍历结果,重新赋值，对于不对应的dataIndex
				var data =m.dataList
				Ext.Array.forEach(data,function(node,index,array){ 
						node.mrTypeCd = node.name;
				});
				block.setData(m.dataList);
			}
		
		}
    }    
});


Ext.define('iih.mr.tm.mr.action.MrtemplateClickAction', {
	extend:  Xap.ej.action.Action ,
	
	execute: function(context) {
		//点击grid上选中的行，对操作权限进行修改
		var grid = this.getBlock('result').down('mrtemplatelistblock');  
		var rb = grid.getSelectionModel().getSelection();  
		/*if(rb.length > 1){
			//选择多条组合元素
		}else{
	    	
	    }*/

		var enabledFlag=null;
        //升级按钮
		/*var upgrade =grid.down('button[method=upgrade]');
        //打开
        var open =grid.down('button[method=open]');
        //属性按钮
        var property =grid.down('button[method=property]');*/
        //删除按钮
        var deleteBt =grid.down('button[method=delete]');
        //提交
        var submit =grid.down('button[method=submit]');              
        /*//审核通过
        var verify =grid.down('button[method=verify]');
     	//驳回
        var reject =grid.down('button[method=reject]');  */      
        //停用
        var disable =grid.down('button[method=disable]');
        //启用
        var enable =grid.down('button[method=enable]');
		
		//将选中的这一条对应的可用的标志位可用
		var canUpdate 		= rb[0].raw.canUpdate;
		var canDelete 		= rb[0].raw.canDelete;
		var canSubmit 		= rb[0].raw.canSubmit;
	    var canReview 		= rb[0].raw.canReview;
		var canReject 		= rb[0].raw.canReject;
		var canStop 		= rb[0].raw.canStop;
		var canActivated 	= rb[0].raw.canActivated;
//		var canUpgrade		= rb[0].raw.canUpgrade;
	    
		console.log(rb[0]);
	    //升级 1可用  0为停用
	    /*if(canUpgrade=='1'){
	    	upgrade.setDisabled(false);  
	    }else  if(canUpgrade=='0'){
	    	upgrade.setDisabled(true);  
	    }*/
	    //删除 1可用  0为停用
	    if(canDelete=='1'){
	    	deleteBt.setDisabled(false);  
	    }else  if(canDelete=='0'){
	    	deleteBt.setDisabled(true);  
	    }
	    //提交 1可用  0为停用
	    if(canSubmit=='1'){
	    	submit.setDisabled(false);  
	    }else  if(canSubmit=='0'){
	    	submit.setDisabled(true);  
	    }
	    //canReview通过  1可用  0为停用
	    //alert(canReview);
	    //不要给我返回除了1和0以外的值
	    /*if(canReview=='1'){
	    	verify.setDisabled(false);  
	    }else  if(canReview=='0'){
	    	verify.setDisabled(true);  
	    }else{
	    	verify.setDisabled(true);  
	    }*/
	    
	    //驳回 1可用  0为停用
	    /*if(canReject=='1'){
	    	reject.setDisabled(false);  
	    }else  if(canReject=='0'){
	    	reject.setDisabled(true);  
	    }*/
	    //停用 1可用  0为停用
	    if(canStop=='1'){
	    	disable.setDisabled(false);  
	    }else  if(canStop=='0'){
	    	disable.setDisabled(true);  
	    }
	    //启用 1可用  0为停用
	    if(canActivated=='1'){
	    	enable.setDisabled(false);  
	    }else  if(canActivated=='0'){
	    	enable.setDisabled(true);  
	    }
	    /*//应用 1可用  0为停用
	    if(canUpgrade=='1'){
	    	//可用升级
	    	deleteBt.setDisabled(false);  
	    }else  if(canUpgrade=='0'){
	    	//可用升级
	    	deleteBt.setDisabled(true);  
	    }*/
    }
});

Ext.define('iih.mr.tm.mr.action.NodeChangeTreeDataAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	
    doExecute: function(context) {
        var operations = context.operations;    
        //alert(encodeURI(encodeURI('BCM001.01'))); 
        var SmrTypeCd =context.event.arguments[1].raw.mrTypeCd;
        var SownerCd =context.event.arguments[1].raw.ownerCd;
        var SownerType =context.event.arguments[1].raw.ownerType;
        var mrTplStatCd =null;      
        var data ={mrTypeCd:SmrTypeCd,ownerCd:SownerCd,ownerType:SownerType};
        this.prepareOperations(operations,SmrTypeCd,SownerCd,SownerType,mrTplStatCd);
    }, 
    prepareOperations: function(operations,mrTypeCd,ownerCd,ownerType,mrTplStatCd) {        
        var condition ='?mrTemplate='+'click'+ '&mrTypeCd='+mrTypeCd+'&ownerCd='+ownerCd+'&ownerTypeCd='+ownerType+'&mrTplStatCd='+mrTplStatCd;   
        var url = this.url + condition;    
        //console.log(url);
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_GET,
            condition: null,
            data:condition,
            scope: this,
            success: this.onSuccess,
            //fail: this.onFail
        };
        operations.push(operation);     
     },
        
    onSuccess: function(operation) {
        var block = this.getBlock('grid');
        var m = operation.result;
		if(m){
			// TODO 数据格式就这样了？
			if(m instanceof Ext.data.Model) {
				block.setData({
					mclass: operation.mclass,
					data: m.getData(true)
				});
			}
			else {
				block.setData(m);
			}
		}
    }    
    
});

Ext.define('iih.mr.tm.mr.action.OpenTemplateAction', {
	extend:  Xap.ej.action.PopAction ,
	
	/*
	* @Override
	*/
	execute: function(context,data) {
       this.callParent();    
       var block = this.getBlock('result');
       var layout = block.getLayout();
       var grid = block.down('mrtemplatelistblock');  
       var rb = grid.getSelectionModel().getSelection();
       var sourceView = this.getOwner();
       var enTypeCode = sourceView.enTypeCode;
//       console.log('------------------ OpenTemplateAction ---------------------------');
//       console.log(rb);
       if(rb.length == 0){
    	   var message = '请选模板进行打开~~~';
           XapMessageBox.info(message);
       }else if(rb.length >  1){
    	   var message = '请选模板进行打开~~~';
           XapMessageBox.info(message);
       }else{
    	   var code = rb[0].data.code;           
    	   var pk = rb[0].data.filePk;
    	   var name = rb[0].data.name;
    	   var baseTemplateCode = rb[0].data.baseTemplateCode;
    	   var readonly = true;
    	   var release = false;
    	   var canUpdate = rb[0].raw.canUpdate;
    	   var canActivated = rb[0].raw.canActivated;
    	   var canSubmit = rb[0].raw.canSubmit;
    	   //设置编辑器状态
    	   if(canUpdate =='1'){
    		   readonly = false;
    	   }
    	   if(canActivated =='1' || '1' == canSubmit){
    		   release = true;
    	   }
    	   var mrTypeCode = rb[0].data.mrTypeCode;
    	   var view = this.getOwner().ownerCt;
    	   var workpageview = view.items.items[1];
           if(workpageview){
	           	var mrSn = workpageview.filePk;
	           	if(mrSn!=pk){
	           		view.remove(workpageview);
	           	}
           }
    	   var canvas = Xap.getCanvas();
           var config = {
                   pageCode: 'mrtpleditview',
                   xclass: 'iih.mr.tm.mr.view.MrTemplateEditView',
                   pageTitle: name,
                   viewConfig:{
                       //mrCd:condition
                	   filePk:pk,
                       opType:'open',
                       code:code,
                       enTypeCode:enTypeCode,
                       mrTypeCode:mrTypeCode,
                       readonly:readonly,
                       baseTemplateCode:baseTemplateCode,
                       release:release
                   }
           };       
           canvas.fireEvent("addWorkPage",config);
    	}     
    }
});

Ext.define('iih.mr.tm.mr.action.PropertyTemplateDocAction', {
	extend:  Xap.ej.action.PopAction ,
	

	                                                           
	/*
	* @Override
	*/
	execute: function(context) {
	    var doc = this.getOwner();
	    console.log('------------------------------- PropertyTemplateDocAction ------------------------------------------');
	    console.log(doc);
	    var code = doc.code;
	    if(!Ext.isEmpty(code,false)){
	    	var config = {         
                    modal: true,            
                    height: 280,
                    width:  530,
                    title :'模板属性',
                    contentConfig: {
                        xtype: 'mrTemplatePropertyEditView',  
                        initChain: {
                            name: 'init',
                            context: {
                                customerData: 'edit',
                                verMrTplKc :code,
                                sourceView: doc
                            }
                        }
                    }
            };
          this.callParent([config]); 
	    }
    }
});

Ext.define('iih.mr.tm.mr.action.PropertyTemplateListAction', {
	extend:  Xap.ej.action.PopAction ,
	

	                                                           
	/*
	* @Override
	*/
	execute: function(context) {
	    var gridPage = this.getOwner();
	    var grid = this.getBlock('result').down('mrtemplatelistblock'); 
	    console.log(grid);
	    var rb = grid.getSelectionModel().getSelection(); 	            
        if(rb.length == 0){
            var message = '请选模板进行属性编辑~~~';
            XapMessageBox.info(message);
        }else if(rb.length == 1){
            //模板id
            var code =rb[0].data.code;
          //  console.log(rb[0].data);
            var config = {         
                    modal: true,            
                    height: 280,
                    width:  530,
                    title :'模板属性',
                    contentConfig: {
                        xtype: 'mrTemplatePropertyEditView',  
                        initChain: {
                            name: 'init',
                            context: {
                                customerData: 'edit',
                                verMrTplKc :code,
                                sourceView: gridPage
                            }
                        }
                    }
            };
          this.callParent([config]); 
        }else if(rb.length >1){
        	var message = '不能选择多个模板~~~';
            XapMessageBox.info(message);
        }	       
    }
});

Ext.define('iih.mr.tm.mr.action.PropertyTemplateSaveAsAction', {
	extend:  Xap.ej.action.PopAction ,
	

	                                                           
	/*
	* @Override
	*/
	execute: function(context) {
		console.log('---------------------- PropertyTemplateSaveAsAction --------------------------------');
	    var gridPage = this.getOwner();
    	var code = gridPage.code;
    	var filePk = gridPage.filePk;
    	var config = {         
                modal: true,            
                height: 280,
                width:  530,
                title :'模板另存为',
                contentConfig: {
                    xtype: 'mrTemplatePropertyEditView',  
                    initChain: {
                        name: 'init',
                        context: {
                            customerData: 'saveAs',
                            verMrTplKc :code,
                            filePk:filePk,
                            sourceView: gridPage,
                            enTypeCode:gridPage.enTypeCode
                        }
                    }
                }
    		};
    	this.callParent([config]); 
    }
});

Ext.define('iih.mr.tm.mr.action.RejectTemplateAction', {
    extend:  Xap.ej.action.ServiceInvocation ,  
    
    doExecute: function(context) {
    	var grid = this.getBlock('result').down('mrtemplatelistblock');  
        var rb = grid.getSelectionModel().getSelection();         
        //模板id//rb instanceof Array
        if(rb.length == 0){
            Ext.MessageBox.show({
                title:'提示',
                msg:'请选模板进行驳回~~~'
            });
        }else{
            var code =rb[0].data.code;
            var length = rb.length;
            var dataList =[];
            for(var i=0;i<length;i++){
            	dataList.push(rb[i].data.code);
            }
            //参照接口文件，多条记录启用
            var data ={"ids":dataList};
            this.prepareOperations(context.operations,data);
        }
    },

    prepareOperations: function(operations,data) {       
        var url = this.url;
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_CREATE,
            condition: null,
            data:data,
            scope: this,
            success: this.onSuccess
            // fail: this.onFail
        };
        operations.push(operation);
    },
    
    onSuccess: function(operation) {
        var owner = this.getOwner();
        var chain = owner.getActionChain('init');
        if(!chain) {
            //如果没找到chain执行结果
            console.log("faile");
            console.log(chain);            
        }
        if(chain) {
            chain.execute();
        }
    }
});

Ext.define('iih.mr.tm.mr.action.SubmitTemplateAction', {
    extend:  Xap.ej.action.ServiceInvocation ,  
    
    doExecute: function(context) {
    	var grid = this.getBlock('result').down('mrtemplatelistblock');  
        var rb = grid.getSelectionModel().getSelection();         
        //模板id//rb instanceof Array
        if(rb.length == 0){
            Ext.MessageBox.show({
                title:'提示',
                msg:'请选模板进行提交~~~'
            });
        }else{
            var code =rb[0].data.code;
            var length = rb.length;
            var dataList =[];
            for(var i=0;i<length;i++){
            	dataList.push(rb[i].data.code);
            }
            //参照接口文件，多条记录启用
            var data ={"ids":dataList};
            this.prepareOperations(context.operations,data);
        }
    },

    prepareOperations: function(operations,data) {       
        var url = this.url;
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_CREATE,
            condition: null,
            data:data,
            scope: this,
            success: this.onSuccess
            // fail: this.onFail
        };
        operations.push(operation);
    },
    
    onSuccess: function(operation) {
        var owner = this.getOwner();
        console.log(owner);
        var treeBlock = owner.down('mrtemplateTreeBlock');
        var mrTplCCat = treeBlock.down('xapcombobox[name=mrTplCCat]');
		var mrTplTypeCd = treeBlock.down('xapcombobox[name=mrTplTypeCd]');
		var mrTplStatCd = treeBlock.down('xapcombobox[name=mrTplStatCd]');
		var mrTemplateTrigger = treeBlock.down('xaptrigger[name=mrTemplateTrigger]');
		var mrTplCCatValue = mrTplCCat.value;
		var mrTplTypeCdValue = mrTplTypeCd.value;
		var mrTplStatCdValue = mrTplStatCd.value;
		var mrTemplateTriggerValue = mrTemplateTrigger.value;
        var gridBlock = owner.down('mrtemplatelistblock');
        var pageNum = gridBlock.currentPage;
        var chain = owner.getActionChain('init');
        if(!chain) {
            //如果没找到chain执行结果
            console.log("faile");
            console.log(chain);            
        }
        if(chain) {
            chain.execute({
            	pageNum:pageNum,
            	pageSize:'25',
        		statusCode :mrTplStatCdValue,
				mrCategoryCode :mrTplCCatValue,
				typeCode :mrTplTypeCdValue,
				name:mrTemplateTriggerValue
            });
        }
    }
});

Ext.define('iih.mr.tm.mr.action.TemplatePropertySaveAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	doExecute: function(context) {
	   this.callParent();
	   console.log('--------------------- TemplatePropertySaveAction -----------------------------');
	   var operations = context.operations;
	   var data = {};
	   data.code = context.code;
	   data.baseTemplateCode = context.baseCode;
	   this.prepareOperations(operations,data);
	},
    prepareOperations: function(operations,data) {
        var url = this.url+'/'+data.code;
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_UPDATE,
            condition: null,
            data:data,
            scope: this,
            success: this.onSuccess
            // fail: this.onFail
        };
        operations.push(operation);
    },
    onSuccess: function(operation) {
    	var result = operation.result;
    	return;
    },
    
    onFail: function(operation) {
    	return;
    }
});

Ext.define('iih.mr.tm.mr.action.TemplateResetConfimAction', {
	extend:  Xap.ej.action.ServiceInvocation ,

	/*
	* @Override
	*/
	doExecute: function(context) {
		console.log('---------------------- TemplateResetConfimAction --------------------------------');
	    var operations = context.operations;
	    var view = this.getOwner();
	    var grid = view.down('bastemplateresetlistblock');
	    var records = grid.getSelectionModel().getSelection();
	    var properties = view.getLayer(Xap.ej.block.Layer.PROPERTIES);
	    var owner = view.ownerCt;  
	    if(records.length>0){
	    	owner.close();
	    	properties.data.basCode = records[0].data.code;
	    	this.prepareOperations(operations,records[0].data.filePk);
	    }else{
	    	var msg = '请选择基础模板!';
    		XapMessageBox.info(msg);
	    }
    },
    
    prepareOperations: function(operations,data) {  
    	var url = 'mr/tpl/smbtcr?filePk='+data;
    	var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: null,
            method: METHODS.GET,
            data: data,
            scope: this,
            success: this.onSuccess,
            fail: this.onFail
        };
        operations.push(operation);
    },
    
    onSuccess: function(operation) {
    	var result = operation.result;
    	var file = result.data.odtFile;
    	var plugin = document.getElementById('iemrEditor');
	    plugin.tagName='ext';
	    var temp = plugin.SaveToString();
	    //plugin.CloseDocument();
	    plugin.OpenFromString(file,2);
	    plugin.InsertFromString(temp,0);
	    //控制按钮0
	    var me = this;
        var emrStartApprove ='com.founder.iemr.editor.toolbar:emrStartApprove';//开始审签
        setTimeout(function() {
        	plugin.SetCommandVisible(emrStartApprove,false);
        	plugin.UpdateToolbar();
        },350);
        
        //更新基础模板编码
        var view = this.getOwner();
        var properties = view.getLayer(Xap.ej.block.Layer.PROPERTIES);
        var sourceView = properties.data.sourceView;
        var code = sourceView.code,basCode,chain;
    	basCode = properties.data.basCode;
    	sourceView.baseTemplateCode = basCode;
    	sourceView.templateReset = 'reset';
    	/*chain = view.getActionChain('save');
    	if(!chain) {
             //如果没找到chain执行结果
             console.log("faile");   
        }
        if(chain) {
             chain.execute({
             	code:code,
             	basCode:basCode
             });
        }*/
    	return;
    },
    
    onFail: function(operation) {
    	return;
    }
});

Ext.define('iih.mr.tm.mr.action.TemplateResetUseAction', {
	extend:  Xap.ej.action.ServiceInvocation ,

	/*
	* @Override
	*/
	doExecute: function(context) {
		console.log('---------------------- TemplateResetUseAction --------------------------------');
	    var view = this.getOwner();
	    var code = view.code;
	    var operations = context.operations;
	    //通过code获取到基础模板的文件id
	    this.prepareOperations(operations,code);
    },
    
    prepareOperations: function(operations,data) {  
    	var url = 'mr/tpl/smbtfp?code='+data;
    	var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: null,
            method: METHODS.GET,
            data: data,
            scope: this,
            success: this.onSuccess,
            fail: this.onFail
        };
        operations.push(operation);
    },
    
    onSuccess: function(operation) {
    	var result = operation.result;
    	var file = result.data.odtFile;
    	var plugin = document.getElementById('iemrEditor');
	    plugin.tagName='ext';
	    var temp = plugin.SaveToString();
	   // plugin.CloseDocument();
	    plugin.OpenFromString(file,2);
	    plugin.InsertFromString(temp,0);
	    //控制按钮
	    var me = this;
        var emrStartApprove ='com.founder.iemr.editor.toolbar:emrStartApprove';//开始审签
        setTimeout(function() {
        	plugin.SetCommandVisible(emrStartApprove,false);
        	plugin.UpdateToolbar();
        },350);
    	return;
    },
    
    onFail: function(operation) {
    	return;
    }
});

Ext.define('iih.mr.tm.mr.block.BasTemplateResetListBlock',{
	extend :  Xap.ej.element.grid.Grid ,

	           	           
			                            
			                                 
			                                         
	  
	
	alias:'widget.bastemplateresetlistblock',
	
	mixins : [ Xap.ej.block.LayeredBlock ],
	initComponent: function() {
		this.callParent();
		this.initBlock();
	},
	layout: 'fit',
	//checkboxShow : true,
	//simple点击行起作用，multi点击checkbox起作用
	mode: 'simple',
	//title: '基础模板列表',
	autoScroll:true,
	pageSize : 25,
	pageShow : true,
	ifSelect:true,
	selectBy: 'code' ,//主键dataIndex名称（默认是id）
	name: 'basTemplateResetListBlock',
	
	tbar:[],
	CM_JR_Record: [
           {header: '名称',dataIndex: 'name',width:200},//基础模板
           {header: '纸张类型',dataIndex: 'paperTypeName',width:60},
           //{header: '状态',dataIndex: 'statusName',width:60},
           //{header: '创建人',dataIndex: 'createUserName',width:100},
           //{header: '创建时间',dataIndex: 'crtTime',xtype: 'xapdatecolumn',width:150},
           {header: '最后更新人',dataIndex: 'lastUpdateUserName',width:100},
           {header: '最后更新时间',dataIndex: 'lastUpdateTime',xtype: 'xapdatecolumn',width:150},
           {header: '描述',dataIndex: 'description',flex:1},
          // {header: '应用标志',dataIndex: 'applyFlag',width:60},
           {header: '状态编码',dataIndex: 'statusCode'/*,dictionary: 'MRM06'*/,hidden:true},
           {header: '基础模板id',dataIndex: 'code',hidden:true},
		   {header: '文件主键',dataIndex: 'filePk',hidden:true},
		 //  {header: '版本号',dataIndex: 'versionNo',flex:1},
           {header: '纸张类型',dataIndex: 'paperTypeCode',hidden:true}
	],
	setGridData: function(data) {
	 	var dataList = data;
	 	if( null == data.dataList ){
	 		var totalList = {"total":0,"dataList":null};
	 		this.setPageData(totalList);
	 	}
	 	if(dataList){
		    	var totalList = {"total":data.total,"dataList":data.dataList};
		    	var pageNum = data.pageNum;
		    	if(pageNum == '1'){
			 		//console.log(totalList);
		    		this.setPageData(totalList);	//初始化赋值
		    	}else{
		    		//console.log("翻页");
		    		this.setData(data.dataList);	//翻页时赋值
		    	}
	 	}else{
	 		var totalList = {"total":data.total,"dataList":data.dataList};
	 		this.setPageData(totalList);
	 	}
	}

})
Ext.define('iih.mr.tm.mr.view.BasTemplateResetListView',{
	extend :  Xap.ej.template.BaseTemplate ,

	           
	                                             
	                                                          
	                                                            
	                                                            
	                                                          
	            
	
	alias:'widget.basictemplateresetlistview',	
	layout:{
		type: 'vbox',
	    align: 'stretch'
	},
	xapConfig: {
		blocks: {
            'top': {
                xclass: 'iih.mr.tm.mr.block.BasTemplateResetListBlock',
                height: 270
            },
			'bottom': {
				xclass: 'Xap.ej.block.ToolbarBlock',
				height:40,
				items:[{
			        xtype: "button",
			        name: 'confim',
			        method:'confim',
			        text: '确认',
			        iconCls: 'icon-OK'
			    },{
			        xtype: "button",
			        name: 'close',
			        method:'close',
			        text: '关闭',
			        iconCls: 'icon-close'
			    }]
			}
		},

		actions: {
            //查询列表
           'init': {
				xclass: 'iih.mr.tm.mr.action.BasTemplateResetInitAction',
				url:'mr/tpl/baseTemplate',
				blocks: {
					result: 'top'
				}
			},
			'close': {
                xclass: 'iih.mr.tm.mr.action.CancelTemplatePropertyEditAction',
                blocks: {
                    result: 'top'
                }
            },
			'confim': {
                xclass: 'iih.mr.tm.mr.action.TemplateResetConfimAction',
                blocks: {
                    result: 'top'
                }
            },
			'save': {
                xclass: 'iih.mr.tm.mr.action.TemplatePropertySaveAction',
                url:'mr/tpl/template/reset',
                blocks: {
                    result: 'top'
                }
            }
		},

		chains: {
			'init': ['init'],
			'close':['close'],
			'confim':['confim'],
			'save':['save']
		},

		connections: {	
		'top': [
	            {	//翻页操作
					event: 'turnpage',
					chain: 'init'
				 },{
	                event: 'afterrender',
	                chain: 'init'
	            }
			],
		'bottom':[
				{
					//取消按钮
	                selector: 'button[method=confim]',
	                event: 'click',
	                chain: 'confim'
				},
				{
					//取消按钮
	                selector: 'button[method=close]',
	                event: 'click',
	                chain: 'close'
				}
			]
    	}
	},
	
	initComponent : function() {
		this.callParent();
	}
})

Ext.define('iih.mr.tm.mr.action.TemplateResetUseSelAction', {
	extend:  Xap.ej.action.PopAction ,
	

	                                                         
	/*
	* @Override
	*/
	execute: function(context) {
		console.log('---------------------- TemplateResetUseSelAction --------------------------------');
	    var gridPage = this.getOwner();
    	var code = gridPage.code;
    	var filePk = gridPage.filePk;
    	var config = {         
                modal: true,            
                height: 340,
                width:  550,
                title :'重新应用基础模板',
                contentConfig: {
                    xtype: 'basictemplateresetlistview',  
                    initChain: {
                        name: 'init',
                        context: {
                            sourceView: gridPage
                        }
                    }
                }
    		};
    	this.callParent([config]); 
    }
});

Ext.define('iih.mr.tm.mr.action.VerifyTemplateAction', {
    extend:  Xap.ej.action.ServiceInvocation ,  
    
    doExecute: function(context) {
    	var grid = this.getBlock('result').down('mrtemplatelistblock');  
        var rb = grid.getSelectionModel().getSelection();         
        //模板id//rb instanceof Array
        if(rb.length == 0){
            Ext.MessageBox.show({
                title:'提示',
                msg:'请选模板进行审核通过~~~'
            });
        }else{
            var code =rb[0].data.code;
            var length = rb.length;
            var dataList =[];
            for(var i=0;i<length;i++){
            	dataList.push(rb[i].data.code);
            }
            //参照接口文件，多条记录启用
            var data ={"ids":dataList};
            this.prepareOperations(context.operations,data);
        }
    },

    prepareOperations: function(operations,data) {       
        var url = this.url;
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_CREATE,
            condition: null,
            data:data,
            scope: this,
            success: this.onSuccess
            // fail: this.onFail
        };
        operations.push(operation);
    },
    
    onSuccess: function(operation) {
        var owner = this.getOwner();
        var chain = owner.getActionChain('init');
        if(!chain) {
            //如果没找到chain执行结果
            console.log("faile");
            console.log(chain);            
        }
        if(chain) {
            chain.execute();
        }
    }
});

Ext.define('iih.mr.tm.mr.block.MrTemplateListBlock',{
	extend :  Xap.ej.element.grid.Grid ,
	           	           
		                            
	                                     
	                                             
	  
	
	alias:'widget.mrtemplatelistblock',	
	
	mixins : [ Xap.ej.block.LayeredBlock ],
	
	name:'mrtemplatelistblock',
	layout: 'fit',
	checkboxShow : false,
	//simple点击行起作用，multi点击checkbox起作用
	mode: 'simple',
	//title: '模板列表',
	autoScroll:true,
	pageSize : 25,
	pageShow : true,
	ifSelect:true,
	selectBy: 'code' ,//主键dataIndex名称（默认是id）
		
	tbar:[
/*	      {        
	        xtype: "xapcombobox",
	        name: 'mrTplStatCd',
	        allOptions:true,
	        editable: false,
	        fieldLabel: '',
	        dictionary:'MRM07',
	        emptyText: "状态查询",
	        value:'ALL',
	        editable:false
	      },
		{text: '升级',method: 'upgrade'},
		{text: '审核通过',method: 'verify'},
		{text: '驳回',method: 'reject'},
		{text: '取消审核',method: 'cancleVerify'},	
		{text: '发布',method: 'issue',iconCls: 'icon-Issue'},			
		{text: '提交',method: 'submit',iconCls: 'icon-Submit'},*/
		{text: '新建',method: 'create',iconCls: 'icon-Create'},
		{text: '打开',method: 'open',iconCls: 'icon-Open'},
		{text: '删除',method: 'delete',iconCls: 'icon-Delete'},
		{text: '属性',method: 'property',iconCls: 'icon-Property'},	
		{text: '停用',method: 'disable',iconCls: 'icon-disable'},
        {text: '启用',method: 'enable',iconCls: 'icon-enable'},
        {text: '默认设置',method: 'default',iconCls: 'icon-enable'}
	],

	CM_JR_Record: [
				   {header: '名称',dataIndex: 'name',width:150},
				  /* {header: '版本号',dataIndex: 'versionNo',flex:1},*/
				   {header: '适用病种',dataIndex: 'diNameArray',hidden:true},	
				   {header: '适用病种',dataIndex: 'diNames',width:100},
				   {header: '状态id',dataIndex: 'statusCode',hidden:true},
				   {header: '状态',dataIndex: 'statusName',width:60},//dictionary: 'MRM07',
				   {header: '是否默认',dataIndex: 'defaultName',width:60},
				   {header: '医疗记录类型编码',dataIndex: 'mrTypeCode',hidden:true},
				   {header: '类型',dataIndex: 'mrTypeName',width:100},//MRM16
                   {header: '所属编码',dataIndex: 'ownerTypeCode',hidden:true},
	               {header: '所属',dataIndex: 'ownerName',width:100},
				   {header: '审签等级',dataIndex: 'signLevelCode',hidden:true},	
				   {header: '审签等级',dataIndex: 'signLevelName',width:100},
	               {header: '创建人',dataIndex: 'createUserName',width:100},
	               {header: '创建时间',dataIndex: 'crtTime',xtype: 'xapdatecolumn',width:150},
	               {header: '最后更新人',dataIndex: 'lastUpdateUserName',width:100},
	               {header: '最后更新时间',dataIndex: 'lastUpdateTime',xtype: 'xapdatecolumn',width:150},
	               {header: '描述',dataIndex: 'description',width:150},
	               {header: '模板id',dataIndex:'code',hidden:true},
	               {header: '模板文件id',dataIndex: 'filePk',hidden:true},
	               {header: '基础模板id',dataIndex: 'baseTemplateCode',hidden:true},
	               {header: '基础模板名字',dataIndex: 'baseTemplateName',hidden:true},
	],
	
	setGridData: function(data) {
	 	var dataList = data;
	 	if( null == data.dataList ){
	 		var totalList = {"total":0,"dataList":null};
	 		this.setPageData(totalList);
	 	}
	 	if(dataList){
		    	var totalList = {"total":data.total,"dataList":data.dataList};
		    	var pageNum = data.pageNum;
		    	if(pageNum == '1'){
			 		//console.log(totalList);
		    		this.setPageData(totalList);	//初始化赋值
		    	}else{
		    		//console.log("翻页");
		    		this.setData(data.dataList);	//翻页时赋值
		    	}
	 	}else{
	 		var totalList = {"total":data.total,"dataList":data.dataList};
	 		this.setPageData(totalList);
	 	}
	},
	initComponent: function() {
		this.callParent();
		this.initBlock();
	}
})
Ext.define('iih.mr.tm.mr.block.MrTemplateTreeBlock',{
	extend :  Xap.ej.block.FormBlock ,

	           
	                                      
                                                    
	                                          
	  
	
	alias:'widget.mrtemplateTreeBlock',
	layout: 'fit',
	items:[{
            xtype:'xapformblock',
            layout: {
    		    type: 'vbox',
    		    align: 'stretch'
    		},
            items:[{
                xtype: "xapcombobox",
                name: 'mrTplCCat', //病历 自定义分类  选择下拉框
                allOptions:true,
                editable: false,
                fieldLabel: '自定义分类',
                value:'ALL',
                width:192,
                labelAlign:'left',
                labelWidth:65,
                margin:'2 2 2 2',
	            displayField: 'name',		            
	            valueField: 'code'
            },{           
                xtype: "xapcombobox",
                name: 'mrTplTypeCd',//病历类型  选择下拉框
                allOptions:true,
                editable: false,
                fieldLabel: '病历类型',
                value:'ALL',
                width:192,
                labelAlign:'left',
                labelWidth:65,
                margin:'2 2 2 2',
	            displayField: 'name',		            
	            valueField: 'code'
            },{           
                xtype: "xapcombobox",
                name: 'mrTplStatCd',//病历模板状态 选择下拉框
                allOptions:true,
                editable: false,
                fieldLabel: '模板状态',
                value:'ALL',
                width:192,
                labelAlign:'left',
                labelWidth:65,
                margin:'2 2 2 2',
                dictionary:'MRM07'  
            },{           
                xtype: "xaptrigger",
                name: 'mrTemplateTrigger',
                triggerBaseCls :'x-text-trigger', 
                margin:'2 2 2 2',
                emptyText: "按模板名称检索"
            },{
 	           xtype:'xaptree',
	           name:'mrTemplate',
	           flex: 1,
	           ifSelect:true,
	           rootVisible: false
	       }]
    }],

	setData: function(data) {
	    var tree = this.down('xaptree');
	    var myobj=eval(data);  
	    tree.setData(myobj);
	},
    getData: function() {
        return null;
    }	
    
})
Ext.define('iih.mr.tm.mr.view.MrTemplateEditView', {
    extend:  Xap.ej.template.BaseTemplate ,

                                                     
                                                           
                                                           
                                                            
                                                              
                                                           
                                                                 
                                                          
                                                                  
                                                               
                                                                 

    alias: 'widget.mrtemplateeditview',
    layout: 'fit',

    xapConfig: {
        blocks: {
            'content': {
                xclass: 'iih.mr.block.editor.MrDocEditBlock',
                flex: 1
            }
        },

        actions: {
            'init': {
                xclass: 'iih.mr.tm.mr.action.MrTemplateEditAction',
                url: 'mr/basefile',
                blocks: {
                    content: 'content'
                }
            },
            'emrCmdDispatch': {
                xclass: 'iih.mr.action.editor.EmrCmdDispatchAction',
                blocks: {
                    content: 'content'
                }
            },
            'emrSave': {
                xclass: 'iih.mr.tm.mr.action.MrTemplateSaveAction',
                url: 'mr/tpl/template',//修改url+换新的iemr地址 /mr/tpl/template2014-12-24
                blocks: {
                    content: 'content'
                }
            },
            'emrDocProperty': {
                xclass: 'iih.mr.tm.mr.action.PropertyTemplateDocAction',
                url: 'mr/tpl/template',//修改url+换新的iemr地址 /mr/tpl/template2014-12-24
                blocks: {
                    content: 'content'
                }
            },
            'emrSaveAs': {
                xclass: 'iih.mr.tm.mr.action.PropertyTemplateSaveAsAction',
                url: 'mr/tpl/template',
                blocks: {
                	content: 'content',
                	result: 'content'
                }
            },
            'emrUpdateTempl': {
                xclass: 'iih.mr.tm.mr.action.TemplateResetUseAction',
                blocks: {
                	content: 'content',
                	result: 'content'
                }
            },
            'emrChangeBaseTempl': {
                xclass: 'iih.mr.tm.mr.action.TemplateResetUseSelAction',
                blocks: {
                	content: 'content',
                	result: 'content'
                }
            },
            'emrRelease': {
                xclass: 'iih.mr.tm.mr.action.MrTemplateReleaseAction',
				url:'mr/tpl/template',
                blocks: {
                    content: 'content'
                }
            },
            'emrEditorOperator': {
                xclass: 'iih.mr.action.editor.EmrEditorOperatorAction'
            },
            'groupElementLib': {
                xclass: 'iih.mr.tm.mr.action.GroupElementLibAction'
            },
            'editorCallBackAction': {
                xclass: 'iih.mr.tm.mr.action.EditorCallBackAction',
                blocks: {
                    content: 'content'
                }
            },
            'disabledOfficeToolBarAction': {
                xclass: 'iih.mr.tm.mr.action.DisabledOfficeToolBarAction',
                blocks: {
                    content: 'content'
                }
            },
			'saveBaseCode': {
                xclass: 'iih.mr.tm.mr.action.TemplatePropertySaveAction',
                url:'mr/tpl/template/reset',
                blocks: {
                	content: 'content'
                }
            }
        },

        chains: {
            'init': ['init'],
            'emrCmdDispatch': ['emrCmdDispatch'],
            'emrSave': ['emrSave'],
            'emrUpdateTempl': ['emrUpdateTempl'],
            'emrChangeBaseTempl': ['emrChangeBaseTempl'],
            'doSave': ['emrSave'],
            'emrDocProperty': ['emrDocProperty'],
            'emrSaveAs': ['emrSaveAs'],
            'IDD_GROUP_ELEMENT_LIB': ['groupElementLib'],
            'emrRelease': ['emrRelease'],
            'editorCallBackAction':['editorCallBackAction'],
            'disabledOfficeToolBarAction':['disabledOfficeToolBarAction'],
            'saveBaseCode': ['saveBaseCode'],
        },

        connections: {
            'content': [{
                selector: 'button[method=editorEvent]',
                event: 'editorEvent',
                chain: 'emrCmdDispatch'
            }, {
                event: 'afterrender',
                chain: 'init'
            }]
        }
    },
    
    hasEdit: function() {
        var plugin = document.getElementById('iemrEditor');
        if (plugin != undefined &&plugin.valid&&plugin.IsModified()) {
            return true;
        } else {
            return false;
        }
    }
})
Ext.define('iih.mr.tm.mr.block.MrTemplateWorkBlock', {
	extend:  Xap.ej.block.Block ,

	           
	                                                    
	                                                 
	             

	alias:'widget.mrtemplateworkblock',
	
	id:'mrtemplateworkblock',
	
	border: 0,
	
	layout:'card',
	
	items: [{
        id: 'mrtemplatelistblock',
        name:'mrtemplatelistblock',
        xtype: 'mrtemplatelistblock'
    },{
        id: 'mrtemplateeditview',
        name:'mrtemplateeditview',
        xtype: 'mrtemplateeditview'
    }],
    
    initComponent: function() {
    	this.callParent();
    },
})
Ext.define('iih.mr.tm.mr.view.MrTemplateListView',{
	extend :  Xap.ej.stl.view.LeftRightContainerTemplate ,

	           
	           	                                  
 				                                         
 				                                         
				                                         
				                                                 
				                                               
				                                                   
				                                                     
				                                           
				                                         
				                                           
				                                                 
				                                                 
				                                            
				                                            
               
	alias:'widget.mrtemplatelistview',	

	xapConfig: {
		blocks: {
			'left': {
                xclass: 'iih.mr.tm.mr.block.MrTemplateTreeBlock',
                width:200
            },
            'right': {
                xclass: 'iih.mr.tm.mr.block.MrTemplateWorkBlock',
                flex:1
            }
		},		
		actions: {
			'search': {
				xclass: 'iih.mr.tm.mr.action.MrTemplateListSearchAction',
				url:'mr/tpl/template',
				blocks: {
					left: 'left',
					result: 'right'
				}
			},
			'mrTemplateActivate': {
				xclass: 'iih.mr.tm.mr.action.MrTemplateActivateAction',
				url:'mr/basefile',
				blocks: {
					result: 'right'
				}
			},
			'refreshTree': {
                xclass: 'iih.mr.tm.mr.action.MrTemplateLoadTreeDataAction',
                url:'mr/tpl/tree/notlazy',
                blocks: {
                    result: 'left',
                }
            },
			'mrtemplateClick': {
				xclass: 'iih.mr.tm.mr.action.MrtemplateClickAction',
				blocks: {
					result: 'right'
				}
			},
            'mrTemplateTreeNodeChange': {
                xclass: 'iih.mr.tm.mr.action.MrTemplateTreeNodeChangeAction',
                url:'mr/tpl/template',
                blocks: {
                    result: 'left',
                    right: 'right'
                }
            },
			'createTemplate': {
				xclass: 'iih.mr.tm.mr.action.CreateTemplateAction',
				blocks: {
					result: 'right'
                }      
			}, 
			'openTemplate': {
				xclass: 'iih.mr.tm.mr.action.OpenTemplateAction',
				blocks: {
					result: 'right'
                }      
			},            
			'submitTemplate': {
				xclass: 'iih.mr.tm.mr.action.SubmitTemplateAction',
				url:'mr/tpl/submitted/template',
				blocks: {
					result: 'right'
                }      
			},
			'deleteTemplate': {
				xclass: 'iih.mr.tm.mr.action.DeleteMrTemplateListAction',
				url:'mr/tpl/template',
				blocks: {
					result: 'right'
                }      
			},
			'propertyTemplate': {
				xclass: 'iih.mr.tm.mr.action.PropertyTemplateListAction',
				url:'mr/tpl/template',
				blocks: {
					result: 'right'
                }      
			},
			'disableTemplate': {
				xclass: 'iih.mr.tm.mr.action.DisableTemplateAction',
				url:'mr/tpl/stopped/template',
				blocks: {
					result: 'right'
                }      
			},
			'enableTemplate': {
				xclass: 'iih.mr.tm.mr.action.EnableTemplateAction',
				url:'mr/tpl/activated/template',
				blocks: {
					result: 'right'
                }      
			},
			'defaultTemplate': {
				xclass: 'iih.mr.tm.mr.action.DefaultTemplateAction',
				url:'mr/tpl/default/template',
				blocks: {
					result: 'right'
                }      
			},
			 'selectionchange':{
	                xclass: 'iih.mr.tm.mr.action.MrTemplateRowclickAction',
	                blocks: {
	                    result: 'right'
	                }
	            } ,
			'btnstatus':{
                xclass: 'iih.mr.tm.mr.action.MrTemplateBtnStatusAction',
                blocks: {
                    result: 'right'
                }
            }
            ,'mrTypeCodeInit': { 
				xclass: 'iih.mr.tm.mr.action.MrTypeCodeInitAction',
				url:'mr/type/tree',
				blocks: {
                    result:'left'
                }
			}
            ,'mrCcatCodeInit': { 
				xclass: 'iih.mr.tm.mr.action.MrCcatCodeInitAction',
				url:'mr/ccat/tree',
				blocks: {
                    result:'left'
                }
			}
		},

		chains: {
			'init': ['search'],
			'initTree': ['refreshTree'],
			'mrTemplateTreeNodeChange': ['mrTemplateTreeNodeChange'],
			//'treeItemExpand': ['treeItemExpand'],
			'beforeActivate': ['mrTemplateActivate'],
			'mrtemplateClick': ['mrtemplateClick'],
			'createTemplate': ['createTemplate'],
			'openTemplate': ['openTemplate'],
			'submitTemplate': ['submitTemplate'],
			'deleteTemplate': ['deleteTemplate'],
			'propertyTemplate': ['propertyTemplate'],
			'disableTemplate': ['disableTemplate'],
			'enableTemplate': ['enableTemplate'],
			'defaultTemplate': ['defaultTemplate'],
			'selectionchange':['selectionchange'],	
			/*'issueTemplate': ['issueTemplate'],
			'verifyTemplate': ['verifyTemplate'],
			'rejectTemplate': ['rejectTemplate'],
			'cancleVerifyTemplate': ['cancleVerifyTemplate'],
			'mrTemplateStatCdChange': ['mrTemplateStatCdChange'],*/
 			'btnstatus':['btnstatus'],
			'mrCcatCodeInit':['mrCcatCodeInit'],
			'mrTypeCodeInit':['mrTypeCodeInit'],
			'searchAll':['search','refreshTree'],
			'ccatselect':['search','refreshTree','mrTypeCodeInit']
			},
			
			connections: {
				'left': [{
				    selector: 'xapcombobox[name=mrTplCCat]',
				    event: 'afterrender',
				    chain: 'mrCcatCodeInit'
				},{
				    selector: 'xapcombobox[name=mrTplTypeCd]',
				    event: 'afterrender',
				    chain: 'mrTypeCodeInit'
				}/*,{
	                selector: 'xaptree[name=mrTemplate]',
	                event: 'afterrender',
	                chain: 'initTree'
				}*/,{
	                 selector: 'xaptree[name=mrTemplate]',
	                 event: 'itemclick',
	                 chain: 'mrTemplateTreeNodeChange'
				},{
	                 selector: 'xaptrigger[name=mrTemplateTrigger]',
	                 event: 'onTriggerClick',
	                 chain: 'initTree'
				},{
				    //combox的change时间
				    selector: 'xapcombobox[name=mrTplCCat]',
				    event: 'select',
				    chain: 'ccatselect'
				}
				,{
				    //combox的change时间
				    selector: 'xapcombobox[name=mrTplTypeCd]',
				    event: 'select',
				    chain: 'initTree'
				},{
				    //combox的change时间
				    selector: 'xapcombobox[name=mrTplStatCd]',
				    event: 'select',
				    chain: 'initTree'
				}
				],
			'right': [
			          {	//翻页操作
							selector: 'mrtemplatelistblock',
							event: 'turnpage',
							chain: 'init'
					 }/*,{    
						selector: 'mrtemplatelistblock',
					    event: 'afterrender',
					    chain: 'init'
					 }*/,{  
						 selector: 'mrtemplatelistblock',
		                 event: 'cellclick',
		                 chain: 'selectionchange'
					 },{  
						 selector: 'mrtemplatelistblock',
		                 event: 'celldblclick',
		                 chain: 'openTemplate'
					 },{
		                //新建按钮
		                selector: 'button[method=create]',
		                event: 'click',
		                chain: 'createTemplate'
		            },{
		                //打开按钮
		                selector: 'button[method=open]',
		                event: 'click',
		                chain: 'openTemplate'
		            }/*,{
		                //删除按钮
		                selector: 'button[method=delete]',
		                event: 'click',
		                chain: 'deleteTemplate'
		            }*/,{
		                //属性按钮
		                selector: 'button[method=property]',
		                event: 'click',
		                chain: 'propertyTemplate'
		            },{
		                //停用按钮
		                selector: 'button[method=disable]',
		                event: 'click',
		                chain: 'disableTemplate'
		            },{
		                //启用按钮
		                selector: 'button[method=enable]',
		                event: 'click',
		                chain: 'enableTemplate'
		            },{
		                //模板默认设置按钮
		                selector: 'button[method=default]',
		                event: 'click',
		                chain: 'defaultTemplate'
		            }/*,{//行点击时，触发判断操作按钮的有效无效
	                    selector: 'mrtemplatelistblock',
	                    event: 'selectionchange',
	                    chain: 'selectionchange'
	                }*/]
		}
		
	},
	initComponent : function() {
		this.callParent();
		var self = this;
		var gridBlock = self.down('mrtemplatelistblock');
		this.addEvents("pageRefresh");//为视图添加刷新事件
		this.addListener('pageRefresh', function(){//添加监听事件
		   // var owner = this.getOwner();
			//获取查询条件
		    var treeBlock = this.down('mrtemplateTreeBlock');
	        var mrTplCCat = treeBlock.down('xapcombobox[name=mrTplCCat]');
			var mrTplTypeCd = treeBlock.down('xapcombobox[name=mrTplTypeCd]');
			var mrTplStatCd = treeBlock.down('xapcombobox[name=mrTplStatCd]');
			var mrTemplateTrigger = treeBlock.down('xaptrigger[name=mrTemplateTrigger]');
			var mrTplCCatValue = mrTplCCat.value;
			var mrTplTypeCdValue = mrTplTypeCd.value;
			var mrTplStatCdValue = mrTplStatCd.value;
			var mrTemplateTriggerValue = mrTemplateTrigger.value;
	        var pageNum = gridBlock.currentPage;
	        var chain = self.getActionChain('init');
	        //获取树选中的节点
	        var mrTemplate = treeBlock.down('xaptree[name=mrTemplate]');
	        /*if(chain) {
	        	chain.execute({
	        		pageNum:pageNum,
	            	pageSize:'25',
	        		statusCode :mrTplStatCdValue,
					mrCategoryCode :mrTplCCatValue,
					typeCode :mrTplTypeCdValue,
					name:mrTemplateTriggerValue
	        	});
	        }*/
	        var chainTree = this.getActionChain('initTree');
	        if(chainTree) {
	        	chainTree.execute({
	        		statusCode :mrTplStatCdValue,
					mrCategoryCode :mrTplCCatValue,
					typeCode :mrTplTypeCdValue,
					name:mrTemplateTriggerValue
	        	});
	        }
		});
		var delBtn = gridBlock.down('button[method=delete]');
		var msg = '确认删除？';
		delBtn.on('click',function(btn){
			XapMessageBox.confirm2(msg, function(btn){
        		if(btn=='yes'){
        			var chainDel = self.getActionChain('deleteTemplate');
        			chainDel.execute();
        		}
        	});
		});
	}
})

Ext.define('iih.po.com.block.KnowledgeSearchBlock',{
	extend :  Xap.ej.block.FormBlock ,

	                                           
	                                                
	                                            
	           
	alias:'widget.knowledgesearchblock',
	
	header:false,
	
	border:0,
	    
	items:[{		 
    	xtype:'panel',
    	name:'searchblock',
    	tbar:[/*{
		        xtype: 'xapcheckbox',
		        padding:'0 0 0 5',
		        name:'ownerPersonal',
		        vertical: true,
		        boxLabel: '个人', 
		        inputValue: 'MDM12.03',
		        checked:true
		    },{
		        xtype: 'xapcheckbox',
		        padding:'0 0 0 5',
		        name:'ownerDept',
		        vertical: true,
		        boxLabel: '科室',
		        inputValue: 'MDM12.02'
		    },*/{           
	            xtype: "textfield",
	            name: 'keyword',
	            width:220,
	            margin: '0 2 0 2',
	            emptyText: "输入关键字按回车检索",
	            listeners:{
	                specialkey : function(field, e) {  
	                    if (e.getKey() == Ext.EventObject.ENTER) {  
	                        var view = this.up('knowledgeview');
	                        var chain = view.getActionChain('search');
	                        chain.execute({}); 
	                    }  
	                }
	            }
		    },{
	            itemId: 'refresh',
	            xtype: 'tool',
	            type: 'refresh'
		    }
    	]
	}]  
});
Ext.define('iih.po.com.action.KnowledgeTreeInitAction', {
	extend:  Xap.ej.action.ServiceInvocation ,

	doExecute: function(context) {
		this.showLoading();
        var operations = context.operations;
        var view = this.getBlock('result').ownerCt;
        var data = {};
        var keyword = view.ownerCt.down('[name=keyword]').value;
        condition = {keyword:keyword};
        data.condition = condition;
        this.prepareOperations(operations,data);    
    }, 
    prepareOperations: function(operations,data) {
    	var condition = data.condition;
        var url = this.url;
        if(Ext.Object.getSize(condition) > 0 ){
	        var queryString = Ext.Object.toQueryString(condition);
	        url = url + '?'+queryString;
        }

        var mclass = null;        
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: mclass,
            method:METHODS.METHOD_GET,
            condition: null,
            scope: this,
            success: this.onSuccessTree
        };
        operations.push(operation);
    },
       
    onSuccessTree: function(operation) {
        var block = this.getBlock('top');
        var noTree = block.down('xaptree');
        var m = operation; 
        if(m instanceof Ext.data.Model) {
        	gridBlock.setData({
                mclass: operation.mclass,
                data: m.getData(true)
            });
        }else {
        	console.log(operation.result);
        	if(operation.result.data.children){
//        		var store = noTree.getStore();
        		block.setData(operation.result.data.children);
        	}else{
        		block.setData(null);
        	}
        }
        noTree.collapseAll();
        /*var ownerCode;
        if(operation.result.data.children && operation.result.data.children.length>0){
        	ownerCode = operation.result.data.children[0].data.ownerCode;
        }*/
        var view = this.getBlock('result').ownerCt;
        var properties = view.getLayer(Xap.ej.block.Layer.PROPERTIES);
    }
});

Ext.define('iih.po.com.action.KnowledgeTreeNodeAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
    doExecute: function(context) {
    	
        var operations = context.operations; 
        var view = this.getOwner();
        var treeBlock = view.down('knowledgetreeblock');
        console.log('------------------- KnowledgeTreeNodeAction ------------------------');
        var data = {},fragmentTplCd='',treeNode;
        var keyword = view.ownerCt.down('[name=keyword]').value;
        if(context.fragmentTplCd!=undefined && !Ext.isEmpty(context.fragmentTplCd,false)){
        	fragmentTplCd = context.fragmentTplCd;
        }else{
        	treeNode = context.event.arguments[1];
        	if(!Ext.isEmpty(treeNode.data.leaf,false)){
            	if(treeNode.data.leaf){
            		fragmentTplCd = treeNode.data.id;
            	}
            }
        }
        data.fragmentTplCd = fragmentTplCd;
        if(!Ext.isEmpty(data.fragmentTplCd,false)){
        	this.showLoading();
        	this.prepareOperations(operations,data);
        }
    }, 
    prepareOperations: function(operations,data) { 
    	var fragmentTplCd = data.fragmentTplCd;
        var url = this.url+"/"+fragmentTplCd;
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_GET,
            params: data,
            data:null,
            scope: this,
            success: this.onSuccess,
        };
        operations.push(operation);	    
	 },
	    
	 onSuccess: function(operation) {
     	var block = this.getBlock('result');
        var areaText =block.down('[name=fragmentTplContent]');
       	        
        var m = operation.result.data;
        // TODO 数据格式就这样了？
        areaText.setValue(m.fragmentTplContent);
	 }     
});

Ext.define('iih.po.com.action.KnowledgeTreeRebackAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	execute: function(context) {
		var view = this.getOwner();
		var bottom = view.down('knowledgetextareablock');
        //写回病历
        var hisDocPlugin = document.getElementById('iemrEditor');
        var treeNode = context.event.arguments[1];
        if(!Ext.isEmpty(treeNode.data.leaf,false)){
        	if(treeNode.data.leaf){
        		if(!hisDocPlugin.IsReadOnly()){
                    var textArea,area;
                    textArea = bottom.down('xaptextarea[name=fragmentTplContent]');
                    area = textArea.value;
                    if(!Ext.isEmpty(area,false)){
                    	hisDocPlugin.InsertText(area);
                    }
                }
        	}
        }
        
	}
});

Ext.define('iih.po.com.action.KnowledgeTextRebackAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	execute: function(context) {
		var view = this.getOwner();
		var bottom = view.down('knowledgetextareablock');
        //写回病历
        var hisDocPlugin = document.getElementById('iemrEditor');
        
        if(!hisDocPlugin.IsReadOnly()){
            var textArea,area;
            textArea = bottom.down('xaptextarea[name=fragmentTplContent]');
            area = textArea.value;
            if(!Ext.isEmpty(area,false)){
            	hisDocPlugin.InsertText(area);
            }
        }
	}
});

Ext.define('iih.po.com.block.KnowledgeTreeBlock',{
	extend :  Xap.ej.block.FormBlock ,

	           
	                                     
	             
	
	alias:'widget.knowledgetreeblock',
	layout: 'fit',
	items:[{
            xtype:'xapformblock',
            layout: {
    		    type: 'vbox',
    		    align: 'stretch'
    		},
            items:[{
 	           xtype:'xaptree',
	           name:'knowledgesTree',
	           flex: 1,
	           ifSelect:true,
	           rootVisible: false,
	           /*treeFields:[{
	   				name : 'content',
	   				type : 'string'
	           }]*/
	       }]
    }],

	setData: function(data) {
	    var tree = this.down('xaptree');
	    var myobj=eval(data);  
	    tree.setData(myobj);
	},
    getData: function() {
        return null;
    }	
    
})
Ext.define('iih.po.com.block.KnowledgeTextAreaBlock',{
	extend :  Xap.ej.block.FormBlock ,

	           
		                               
	  

	alias:'widget.knowledgetextareablock',

	layout:{
		type: 'vbox',
        align: 'stretch',
	},
	
	autoScroll : true,
	
	//margin: '5 5 5 0',

	items: [{
			xtype: 'xaptextarea',
			name: 'fragmentTplContent',
//			labelWidth:80,
//			labelAlign:'right',
//			fieldLabel:'',
			readOnly:true,
			enableKeyEvents :true,
			margin:'5 10 5 5',
			rows:12,
			renderer : function(value) {
				if(value)
					return '<textarea name=\"knowledgeArea\" id=\"fragmentTplContent1\" rows=\"12\" cols=\"25\" ></textarea>';
			},
			listeners:{
				focus : function(area, The, eOpts) {
					var center = this.up('knowledgetextareablock');
					if(center.selectedCmp){
						center.selectedCmp.setFieldStyle({'background-image': 'url("images/form/text-bg.gif")','background-color': 'white'});
						center.selectedCmp=null;
					}
					area.setFieldStyle({'background-image': 'none','background-color': '#D9D9D9'});
					center.selectedCmp = area;
                }
            }
		}],

	setData: function(data) {
	    this.callParent(arguments);
	},
    getData: function() {
        this.callParent(arguments);
    }
})
Ext.define('iih.po.com.view.KnowledgeSidebarView', {
    extend:  Xap.ej.stl.view.TopBottomContainerTemplate ,
    
               
               	                                            
               	                                            
               	                                              
               	                                             
               	
                 
    
    alias: 'widget.knowledgesidebarview',
    
    border: 0,

    xapConfig: {
        blocks: {
            'top': {
                xclass: 'iih.po.com.block.KnowledgeTreeBlock',
                height:290
                
            },
            'bottom': {
                xclass: 'iih.po.com.block.KnowledgeTextAreaBlock',
                flex:1
            }
        },

        actions: {
        	'init': {
				xclass: 'iih.po.com.action.KnowledgeTreeInitAction',
				url:'knowledges/tree',
				blocks: {
					top: 'top',
					result: 'bottom'
				}
			},
			'treeClick': {
                xclass: 'iih.po.com.action.KnowledgeTreeNodeAction',
                url:'knowledge',
                blocks: {
                	top: 'top',
					result: 'bottom'
                }
            },
			'treeReback': {
                xclass: 'iih.po.com.action.KnowledgeTreeRebackAction',
                blocks: {
                	top: 'top',
					result: 'bottom'
                }
            },
			'textReback': {
                xclass: 'iih.po.com.action.KnowledgeTextRebackAction',
                blocks: {
                	top: 'top',
					result: 'bottom'
                }
            }
		},

        chains: {
        	'init':['init'],
        	'treeClick':['treeClick'],
        	'treeReback':['treeReback'],
        	'textReback':['textReback']
        },

        connections: {
            'bottom': [/*{
	            	selector: 'xaptextarea[name=fragmentTplContent]',
	                event: 'ondblclick',
	                chain: 'textReback'
	            }*/],
            'top': [{
                    	event: 'afterrender',
                    	chain: 'init'
                	}/*,{
	                 selector: 'xaptree[name=knowledgesTree]',
	                 event: 'itemclick',
	                 chain: 'treeClick'
                	},{
	                 selector: 'xaptree[name=knowledgesTree]',
	                 event: 'itemdblclick',
	                 chain: 'treeReback'
				}*/]
        	}
    },
    
    initComponent : function() {
        this.callParent();
        var me = this,clickNtime,clickOtime,ctime,textArea,area,content;
        me.clicktime = '';
        var tree = me.down('[name=knowledgesTree]');
        tree.addListener('itemclick', function(v,r,it,i,e,eOpts){
    		var chain = me.getActionChain('treeClick');
    		var fragmentTplCd = r.raw.id,leaf = r.raw.leaf;
    		var bottom = me.down('knowledgetextareablock');
    		clickNtime = new Date();
        	if(!Ext.isEmpty(me.clicktime,false)){
        		clickOtime = me.clicktime;
        		ctime = clickNtime-clickOtime;
        		me.clicktime = clickNtime;
        		//ctime = Math.round(ctime/1000);
        		if(ctime>500){
        			if(leaf){
        				content = r.raw.content;
                        textArea = bottom.down('xaptextarea[name=fragmentTplContent]');
                        textArea.setValue(content);
                        me.oldTreeCd = fragmentTplCd;
            		}
        		}else{
        			if(leaf){
        				var hisDocPlugin = document.getElementById('iemrEditor'),content;
        				if(!Ext.isEmpty(me.oldTreeCd,false)){
            				if(me.oldTreeCd==fragmentTplCd){
            					if(!hisDocPlugin.IsReadOnly()){
                        			content = r.raw.content;
                        			if(!Ext.isEmpty(content,false)){
                                    	hisDocPlugin.InsertText(content);
                                    }
                                }
            				}else{
            					me.oldTreeCd = fragmentTplCd;
            					content = r.raw.content;
                                textArea = bottom.down('xaptextarea[name=fragmentTplContent]');
                                textArea.setValue(content);
            				}
            			}else{
            				me.oldTreeCd = fragmentTplCd;
                    		if(!hisDocPlugin.IsReadOnly()){
                    			content = r.raw.content;
                    			if(!Ext.isEmpty(content,false)){
                                	hisDocPlugin.InsertText(content);
                                }
                            }
            			}
                	}
        		}
        	}else{
        		me.clicktime = clickNtime;
    			if(leaf){
        			content = r.raw.content;
                    textArea = bottom.down('xaptextarea[name=fragmentTplContent]');
                    textArea.setValue(content);
                    me.oldTreeCd = fragmentTplCd;
        		}
        	}
        });
    }
});
Ext.define('iih.po.com.view.KnowledgeView', {
    extend:  Xap.ej.stl.view.TopBottomContainerTemplate ,
    
                                                          
    
    alias: 'widget.knowledgeview',
    
    border: 0,

    xapConfig: {
        blocks: {
            'top': {
                xclass: 'iih.po.com.block.KnowledgeSearchBlock',
                height:25
                
            },
            /*'bottom': {
                xclass: 'iih.po.com.block.KnowledgeListBlock',
                flex:1
            },*/
            'bottom': {
                xclass: 'iih.po.com.view.KnowledgeSidebarView',
                flex:1
            }
        },

        actions: {
            'search': {
                xclass: 'iih.po.com.action.KnowledgeSearchAction',
                //url: 'knowledges',
                blocks: {
                    condition: 'top',
                    result: 'bottom'
                }
            }
        },

        chains: {
            'search': ['search']
        },

        connections: {
            'bottom': [{
                event: 'afterrender',
                chain: 'search'
            }],
            'top': [{
                selector: 'tool[itemId=refresh]',
                event: 'click',
                chain: 'search'
            }]
        }
    },
    
    initComponent : function() {
        this.callParent();
        var me = this;
        this.addEvents("writeMrDoc");//为视图添加事件
        this.addListener('writeMrDoc', function(){//添加监听事件
            //写回病历
            var hisDocPlugin=document.getElementById('iemrEditor');
            if(!hisDocPlugin.IsReadOnly()){
                var text,textArea,area;
                textArea = me.down('xaptextarea[name=fragmentTplContent]');
                area = textArea.value;
                var ta = textArea.inputEl.dom;
				var s = ta.selectionStart;
				var e = ta.selectionEnd;
				var text = area.substring(s,e); 
                if(!Ext.isEmpty(text,false)){
                    hisDocPlugin.InsertText(text);
                }else if(!Ext.isEmpty(area,false)){
                	hisDocPlugin.InsertText(area);
                }else{
                	XapMessageBox.info("请选择文本！");
                }
            }
        });
    }
});
Ext.define('iih.po.com.block.SpecialCharacterBlock', {
    extend :  Xap.ej.block.Block ,

                                           

    alias:'widget.specialcharacterblock',

    layout: 'fit',
    
    border: 0,
    
    flex: 1,

    items: [{
        xtype:'xapgrid',
        layout: 'fit',
        border:false,
        rownumShow:false,
        flex:1,
        selModel:new Ext.selection.CellModel(),
        CM_JR_Record: [{
            header:'1',
            dataIndex:'fst',
            flex:1
        },{
            header:'2',
            dataIndex:'snd',
            flex:1
        },{
            header:'3',
            dataIndex:'thd',
            flex:1
        }],
        listeners: {
            celldblclick:function( grid, td, cellIndex, record, tr, rowIndex, e, eOpts ) {
                var text;
                if(cellIndex > 1)
                    text=record.get('thd');
                else if(cellIndex > 0)
                    text=record.get('snd');
                else
                    text=record.get('fst');
                var hisDocPlugin=document.getElementById('iemrEditor');
                if(!hisDocPlugin.IsReadOnly()){
                    hisDocPlugin.InsertText(text);
                }
            }
        }
    }],
    
    initComponent: function() {
        this.callParent();
    }
});
Ext.define('iih.po.com.action.SpecialCharacterSearchAction', {
    extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override
	*/
	doExecute: function(context) {
	    this.callParent();
	    var view = this.getOwner();
	    var grid = view.down('xapgrid');
        var store = grid.getStore();
        var data = [{
            'fst':'mOms/kg',
            'snd':'ng/ml',
            'thd':'pg/ml'
        },{
            'fst':'10^12/L',
            'snd':'10^9/L',
            'thd':'KIU/L'
        },{
            'fst':'R/s',
            'snd':'U/L',
            'thd':'g/L'
        }];
        grid.setData(data);
    	/*var operations = context.operations;
    	var METHODS = this.getInvocationMethods();
    	var operation = {
    	    url: this.url,
    	    mclass: null,
    	    method: METHODS.METHOD_GET,
            scope: this,
            success: this.onSuccess
    	};
    	operations.push(operation);*/
    },
    
    onSuccess: function(operation) {
        /*var block = this.getBlock('content');
        var grid = block.down('xapgrid');
        var m = operation.result;
		if(m){
		    grid.setData(m.dataList);
		}*/
    }
});
Ext.define('iih.po.com.view.SpecialCharacterView', {
	extend:  Xap.ej.template.BaseTemplate ,

	requires: [],

	alias:'widget.specialcharacterview',

	layout: 'fit',
	
	border: 0,
	
	xapConfig: {
        blocks: {
            'content': {
                xclass: 'iih.po.com.block.SpecialCharacterBlock'
            }
        },

        actions: {
            'search': {
                xclass: 'iih.po.com.action.SpecialCharacterSearchAction',
                blocks: {
                    content: 'content'
                }
            }
        },

        chains: {
            'search': ['search']
        },

        connections: {
            'content': [{
                event: 'afterrender',
                chain: 'search'
            }]
        }
    },

    initComponent: function() {
    	this.callParent();
    }
});
Ext.define('iih.po.com.view.RightEditView', {
	extend:  Xap.ej.element.tab.Panel ,

	                                           
	                                                  
	                                          

	alias:'widget.righteditview',

	layout: 'fit',
	
	tabBar: {
	    height:30,
	    layout: {
            type: 'hbox',
            align: 'middle',
            pack: 'end'
        },
	},

    items: [],

    initComponent: function() {
    	this.callParent();
    	this.removeAll();
    	if(this.workscene=='mr'){
    	    this.add({
    	        title:'个人知识库',
    	        xtype:'knowledgeview'
    	    }).show();
    	}else{
    	    this.add({
    	        title:'片段模板',
    	        xtype:'frtplview'
    	    }).show();
    	};
    	this.add({
    	    title:'特殊字符',
            xtype:'specialcharacterview'
    	});
    	var workscene = this.workscene;
    	this.getTabBar().add({
            xtype: 'container',
            layout: {
                type: 'hbox',
                align: 'middle',
                pack: 'end'
            },
            flex: 1,
            items: [{
                xtype: 'button',
                text: '写回病历',
                handler : function() {
                    var tabpanel = this.up('righteditview');
                    var view = tabpanel.down('knowledgeview');
                    view.fireEvent("writeMrDoc");
                },
                hidden:workscene=='mr'?true:false
            },{
                xtype: 'label',
                width: 5
            },{
                xtype: 'button',
                text: '插入',
                hidden:workscene=='mr'?false:true
            }]
        });
    }
});
Ext.define('iih.mr.tm.mr.view.MrTemplateManageView', {
	extend:  Xap.ej.template.BaseTemplate ,

	requires: [],

	alias:'widget.mrtemplatemanageview',
	layout:'border',
	xapConfig: {
		blocks: {
			'center': {
				xclass: 'iih.mr.tm.mr.view.MrTemplateEditView',
				region:'center',
				flex:1
			},
			'helper': {
			    xclass: 'iih.po.com.view.RightEditView',
			    workscene:'tm',
			    region:'east',
			    split: true,
                collapsible: true,
                collapsed: true,
                header:false,
                width: 250
			}
		},
		
		actions: {},

		chains: {},

		connections: {},
		
	},
	
	initComponent : function() {
		this.callParent();
	}
});
Ext.define('iih.mr.tth.action.TeethExamInitAction', {
    extend:  Xap.ej.action.Action ,
	
	/*
	* @Override
	*/
    execute: function(context) {
    	this.callParent();
    	var view = this.getOwner();
    	var topleft = view.down('teethtopleftblock');
    	var content = topleft.info.apply({});
        var info = Ext.getCmp('TeethTopLeft');
    	//info.update(content);
    }
});
Ext.define('iih.mr.tth.block.TeethTopLeftBlock', {
    extend :  Xap.ej.block.FormBlock ,

                                                 

    alias:'widget.teethtopleftblock',
    
    layout: {
        type: 'table',
        columns: 48,
        tableAttrs: { 
            width: '100%',
            cellSpacing: "0",
            cellPadding: "0"
        }/*,
        tdAttrs: {
            width: '15',
            height: '15',
            style: {border: '0px solid red'}
        }*/
    },
    
    border:0,
    
    header:false,

    defaults: { 
        xtype:'xaptextfield',
        style: { marginBottom: '0px',border: '0' },
        height: 30
    },
    
    items: [{
        colspan: 6
    },{
        colspan: 6
    },{
        colspan: 6
    },{
        colspan: 6
    },{
        colspan: 6
    },{
        colspan: 6
    },{
        colspan: 6
    },{
        colspan: 6
    },{
        colspan: 3
    },{
        colspan: 3
    },{
        colspan: 3
    },{
        colspan: 3
    },{
        colspan: 3
    },{
        colspan: 3
    },{
        colspan: 3
    },{
        colspan: 3
    },{
        colspan: 3
    },{
        colspan: 3
    },{
        colspan: 3
    },{
        colspan: 3
    },{
        colspan: 3
    },{
        colspan: 3
    },{
        colspan: 3
    },{
        colspan: 3
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 6
    },{
        colspan: 6
    },{
        colspan: 6
    },{
        colspan: 6
    },{
        colspan: 6
    },{
        colspan: 6
    },{
        colspan: 6
    },{
        colspan: 6
    },{
        colspan: 6
    },{
        colspan: 6
    },{
        colspan: 6
    },{
        colspan: 6
    },{
        colspan: 6
    },{
        colspan: 6
    },{
        colspan: 6
    },{
        colspan: 6
    },{
        colspan: 3,
        height: 60
    },{
        colspan: 3,
        height: 60
    },{
        colspan: 3,
        height: 60
    },{
        colspan: 3,
        height: 60
    },{
        colspan: 3,
        height: 60
    },{
        colspan: 3,
        height: 60
    },{
        colspan: 3,
        height: 60
    },{
        colspan: 3,
        height: 60
    },{
        colspan: 3,
        height: 60
    },{
        colspan: 3,
        height: 60
    },{
        colspan: 3,
        height: 60
    },{
        colspan: 3,
        height: 60
    },{
        colspan: 3,
        height: 60
    },{
        colspan: 3,
        height: 60
    },{
        colspan: 3,
        height: 60
    },{
        colspan: 3,
        height: 60
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 6
    },{
        colspan: 6
    },{
        colspan: 6
    },{
        colspan: 6
    },{
        colspan: 6
    },{
        colspan: 6
    },{
        colspan: 6
    },{
        colspan: 6
    },{
        colspan: 6
    },{
        colspan: 6
    },{
        colspan: 6
    },{
        colspan: 6
    },{
        colspan: 6
    },{
        colspan: 6
    },{
        colspan: 6
    },{
        colspan: 6
    },{
        colspan: 6
    },{
        colspan: 6
    },{
        colspan: 6
    },{
        colspan: 6
    },{
        colspan: 6
    },{
        colspan: 6
    },{
        colspan: 6
    },{
        colspan: 6
    },{
        colspan: 6
    },{
        colspan: 6
    },{
        colspan: 6
    },{
        colspan: 6
    },{
        colspan: 6
    },{
        colspan: 6
    },{
        colspan: 6
    },{
        colspan: 6
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    },{
        colspan: 2
    }],

    initComponent: function() {
        /*this.info = new Ext.XTemplate(
                '<table cellSpacing = "0" cellPadding = "0"><tr>',
                '<td width=2></td>',
                '<td width=2></td>',
                '<td width=2></td>',
                '<td width=2></td>',
                '<td width=2></td>',
                '<td width=2></td>',
                '<td width=2><input width="1px" type="text"></td>',
                '<td width=2><input width="1px" type="text"></td>',
                '</tr></table>'
        );*/
        this.callParent();
    }
})
Ext.define('iih.mr.tth.view.TeethBottomExamView', {
	extend:  Xap.ej.template.BaseTemplate ,

	requires: [],
    
	alias:'widget.teethbottomexamview',
	
	layout:{
	  type:'hbox',
	  align:'stretch',
	  defaultMargins:{
          top: 0, 
          right: 1, 
          bottom: 1, 
          left: 1
      }
	},

	xapConfig: {
		
		blocks: {
			'left': {
		        xclass: 'Xap.ej.stl.view.PlaceHolderBlock',
		        border:0,
		        flex:1
            },
            'right': {
                xclass: 'Xap.ej.stl.view.PlaceHolderBlock',
                border:0,
                flex:1
            }
		},
        actions: {},  
        chains: {},
        connections: {}
	},
	initComponent : function() {
		this.callParent();
	}
});
Ext.define('iih.mr.tth.view.TeethTopExamView', {
	extend:  Xap.ej.template.BaseTemplate ,

	requires: [],
    
	alias:'widget.teethtopexamview',
	
	layout:{
	  type:'hbox',
	  align:'stretch',
	  defaultMargins:{
	      top: 1, 
	      right: 1, 
	      bottom: 1, 
	      left: 1
	  }
	},

	xapConfig: {
		
		blocks: {
			'left': {
		        xclass: 'iih.mr.tth.block.TeethTopLeftBlock',
		        border:0,
		        flex:1
            },
            'right': {
                xclass: 'Xap.ej.stl.view.PlaceHolderBlock',
                border:0,
                flex:1
            }
		},
        actions: {},  
        chains: {},
        connections: {}
	},
	initComponent : function() {
		this.callParent();
	}
});
Ext.define('iih.mr.tth.view.TeethExamView', {
	extend:  Xap.ej.template.BaseTemplate ,

	requires: [],
    
	alias:'widget.teethexamview',
	
	layout:{
	  type:'vbox',
	  align:'stretch'
	},

	xapConfig: {
		
		blocks: {
			'title': {
		        xclass: 'Xap.ej.stl.view.PlaceHolderBlock',
		        border:0,
		        height:20
            },
		    'top': {
		        xclass: 'iih.mr.tth.view.TeethTopExamView',
		        height:400
            },
            'exam': {
                xclass: 'Xap.ej.stl.view.PlaceHolderBlock',
                border:0,
                height:20
            },
            'bottom': {
                xclass: 'iih.mr.tth.view.TeethBottomExamView',
                height:400
            }
		},
        actions: {
            'init': {
                xclass: 'iih.mr.tth.action.TeethExamInitAction',
                blocks: {
                    title: 'title',
                    top: 'top',
                    exam: 'exam',
                    bottom: 'bottom'
                }
            }
        },  
        chains: {
            'init': ['init'],
        },
        connections: {}
	},
	initComponent : function() {
		this.callParent();
	}
});
Ext.define('iih.mr.wr.mr.action.AlreadySignInitAction', {
    extend:  Xap.ej.action.ServiceInvocation ,

    execute: function(context) {
//    	this.showLoading();
    	var pageNum,pageSize;
		if(context.event==undefined||context.event.from.name != 'alreadySign'){
			pageNum = context.pageNum; 
			pageSize = context.pageSize; 
			var block = this.getBlock('content');
			block.pageSize = pageSize;
		}else{
			pageNum = context.event.arguments[0]; 
			pageSize = context.event.arguments[1]; 
		}
		var data = {
			pageNum : pageNum,
			pageSize : pageSize
		};
        this.signedPrepareOperations(context.operations,data);
    },
    signedPrepareOperations: function(operations,data) {
    	 var block = this.getBlock('content');
         var patientId=block.down('[name=patient]').getValue();
	     var url = this.url+'?userId='+IMER_GLOBAL.user.code+'&deptCd='+IMER_GLOBAL.department.code+'&patientId='+patientId+'&pageNum='+data.pageNum+'&pageSize='+data.pageSize;
	     var operation = {
	         url: url,
	         method: 'get',
	         scope: this,
	         success: this.signedOnSuccess
	     };
	     operations.push(operation);
     },
     signedOnSuccess: function(operation) {
         var block = this.getBlock('content');
         var pageSize = block.pageSize;
         var m = operation.result;
         m.pageSize = pageSize;
         block.setData(m,'alreadySign');
     }
});

Ext.define('iih.mr.wr.mr.action.AlreadySignOpenAction', {
    extend:  Xap.ej.action.ServiceInvocation ,
	execute: function(context) {
        var mrPk = '';
		var name = '';
		var encounterPk = '';
		var patientId = '';
		var arguments = context.event.arguments;
		if(context.event.name=="itemdblclick"){
			mrPk = arguments[1].raw.mrPk;
	        name = arguments[1].raw.name;
	        encounterPk = arguments[1].raw.encounterPk;
	        patientId = arguments[1].raw.patientId;
		}else{
			mrPk = arguments[0].mrPk;
	        name = arguments[0].name;
	        encounterPk = arguments[0].encounterPk;
	        patientId = arguments[0].patientId;
		}
		IMER_GLOBAL.encounterSn = encounterPk;
        IMER_GLOBAL.patientId = patientId;
    	if(undefined!=mrPk){
    		/*var workpageview = this.getOwner().ownerCt.items.items[1];
	        if(workpageview){
	        	var mrSn = workpageview.blocks.workContent.items.items[0].mrSn;
	        	if(mrSn!=mrPk){
	        		workpageview.ownerCt.remove(workpageview);//blocks.workContent.items.items[0].ownerCt.remove(workpageview.blocks.workContent.items.items[0]);
	        	}
	        }*/
        	var canvas = Xap.getCanvas();
	        var config = {
                pageCode: 'mrdoceditview',
                xclass: 'iih.mr.wr.mr.view.MrDocEditView',
                pageTitle: name,
                viewConfig:{
                    mrSn:mrPk,
                    opType:'open'
                },
                assistantConfig:{
                    tgtObCd: 'MRB02',
                    tgtObPk: mrPk
                }
	        };       
	        canvas.fireEvent("addWorkPage",config);
        }
    }
});

Ext.define('iih.mr.wr.mr.action.CancelCreateMrDocAction', {
    extend:  Xap.ej.action.Action ,

    /*
     * @Override
     */
    execute: function(context) {
        // 关闭窗口
        var owner = this.getOwner().ownerCt.ownerCt;// 从新建病历进来关闭此页面
        if (owner == null || owner == undefined) {
            this.getOwner().ownerCt.close();// 从病历属性进来关闭此页面
        } else {
            owner.close();
        }
    }
});

Ext.define('iih.mr.wr.mr.action.CheckChangeAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override
	*/
	execute: function(context) {
		var block = this.getOwner().getBlock('condition');
	    var personal=block.down('[name=personal]');
	    var dept=block.down('[name=dept]');
	    var all=block.down('[name=all]');
	    
		var checkPersonal =personal.getValue();
		var checkDept =dept.getValue();
		var checkAll =all.getValue();
		 
		var sum = 0;
		var sdte = '';
		if(checkPersonal.personal){
			sum++;
			sdte = 'personal';
		}
		if(checkDept.dept){
			sum++;
			sdte = 'dept';
		}
		if(checkAll.all){
			sum++;
			sdte = 'all';
		}
		var name = context.event.from.name;
		//如果三个组件只选了一个,则最后一个设置为只读
		if(sum==1){
			var checkbox=block.down('[name='+sdte+']');
//			console.log(checkbox);
			checkbox.items.items[0].readOnly = true;
		}else{
			personal.items.items[0].readOnly = false;
			dept.items.items[0].readOnly = false;
			all.items.items[0].readOnly = false;
		}
		if(name=='dept'){
			var block = this.getOwner().getBlock('condition');
	        var deptCode=block.down('[name=deptCode]');
	        //登陆科室编码
	        //var departCode = IMER_GLOBAL.department.code;
	        deptCode.select("");
	        if(deptCode.disabled){
	        	deptCode.setDisabled(false);
	        }else{
	        	deptCode.setDisabled(true);
	        };
		}
        var result = this.getOwner();
        var initChain = result.getActionChain('init');
        initChain.execute();
    }
});

Ext.define('iih.mr.wr.mr.action.CheckElectronicSignatureAction', {
    extend:  Xap.ej.action.ServiceInvocation ,

    /*
     * @Override
     */
    execute: function(context,callback) {
        this.prepareOperations(operations,callback);
        /*var certId = plugin.CA_GetCertId();
        if (userName == '') {
            FuiMessageBox.confirm2('未检测到电子签章， 使用文字签章？', function(btn) {
                if (btn == 'yes') {
                    callback(pojoUser.employee.employeeNm);
                }
            });
        } else {
            if (pojoUser.employee.employeeNm == userName) {
                var picPngStr = plugin.CA_GetPicPNG();
                if (picPngStr.length < 1) {
                    FuiMessageBox.confirm2('无法获得电子签章， 使用文字签章？', function(btn) {
                        if (btn == 'yes') {
                            picPngStr = pojoUser.employee.employeeNm;
                            callback(pojoUser.employee.employeeNm);
                        }
                    });
                } else {
                    picPngStr = '\n';//使用电子签名的时候，传空字符串给编辑器，编辑器会从Ukey拿到签名图片
                    callback(picPngStr);
                }
            } else {
                Ext.MessageBox.alert('提示', '当前用户【' + pojoUser.employee.employeeNm + '】与电子签章用户【' + userName + '】不一致，无法提交!');
            }
        }*/
    },
    prepareOperations: function(operations) {
        var url = 'userInfo';
        var operation = {
                url: url,
                method: 'get',
                condition: condition,
                scope: this,
                success: this.onSuccess
                // fail: this.onFail
            };
        operations.push(operation);
    },
    onSuccess: function(operation) {
        var block = this.getOwner().getBlock('condition');
        var mrTypeCd=block.down('[name=mrTypeCd]');
//        console.log(mrTypeCd);
//        console.log(operation.result);
        if(operation.result){
            mrTypeCd.setData(operation.result);
            mrTypeCd.expand();
        }
    }
});

Ext.define('iih.mr.wr.mr.action.CloseProgressAction', {
    extend:  iih.mr.action.editor.EmrEditorOperatorAction ,
//    userName:'',
    /*
    * @Override
    */
    execute: function(context) {
    	var owner=this.getOwner();
    	var page=owner.ownerCt;
    	if(page.tabId&&page.tabId=="mr_doc_helper"){
    		var bolck=page.getBlock('left');
        	var tree=bolck.down('xaptree');
        	tree.enable();
        	this.closeProgress();//关闭进度条
    	}
    }
});

Ext.define('iih.mr.wr.mr.action.CompleteMrAction', {
    extend:  Xap.ej.action.ServiceInvocation ,
    
    /*
        * @Override
        */
        execute: function(context) {
        this.showSubmitProgressBar();
          this.prepareOperations(context.operations);
         
        },

        /*
         * @return {mclass: '', condition: {}}
         */
        
        prepareOperations: function(operations) {
            var METHODS = this.getInvocationMethods();
            var url=this.url;
            var operation = {
                url: url,
                method: METHODS.METHOD_UPDATE,
                scope: this,
                success: this.onSuccess,
                fail: this.onFail
            };
            operations.push(operation);
//            var url = this.url;    
//            var METHODS = this.getInvocationMethods();
//            var operation = {
//                url: url,
//                method: METHODS.METHOD_DELETE,
//                scope: this,
//                success: this.onSuccess
//            };
//            operations.push(operation);
        },
        
        onSuccess: function(operation) {
//            Ext.Msg.alert("提示",'成功!');
        },
        onFail: function(operation) {
            Ext.Msg.alert("提示",'失败!');
        }
        
});

Ext.define('iih.mr.wr.mr.action.ConfimCreateMrDocAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	doExecute: function(context) {
	   var grid = this.getBlock('content').ownerCt.ownerCt.getBlock('top').down('xapgrid');
       var rb = grid.getSelectionModel().getSelection(); 
       //病历文书类型
       var typeCode = rb[0].data.mrTypeCode;
       //就诊号
	   var encounterSn = IMER_GLOBAL.encounterSn;
	   var data = {'typeCode':typeCode,'encounterPk':encounterSn};
	   this.prepareOperations(context.operations,data);
	},
    prepareOperations: function(operations,data) {
        var url = 'canCreate';
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            method: METHODS.METHOD_CREATE,
            data:data,
            condition: null,
            scope: this,
            success: this.onSuccess
        };
        operations.push(operation);
    },
    onSuccess: function(operation) {
       if(operation.result){
       	   var canCreate = operation.result.data.canCreate;
	       if(canCreate!=1){
	           Ext.Msg.alert('提示','首次病程记录已存在！');
	           return
	       }
       }
       var form= this.getBlock('content').getForm();
       var data =form.getValues();
       if(data==undefined){
           Ext.Msg.alert('提示','请填写必要属性！');
           return
       }
       if(data.mrNm==''){
           Ext.Msg.alert('提示','请填写病历文书名称！');
           return
       }
       if(data.logicSmtDate==''){
           Ext.Msg.alert('提示','请填写业务时间！');
           return
       }
       var grid = this.getBlock('content').ownerCt.ownerCt.getBlock('top').down('xapgrid');
       var rb = grid.getSelectionModel().getSelection(); 
       var typecode = rb[0].data.mrTypeCode;
       if(typecode=='MRM16.19'||typecode=='MRM16.20'){
       	  if(data.higherLvlEmpId==''){
	         Ext.Msg.alert('提示','请选择上级查房医师！');
	         return
	      }
       }
       if(rb.length == 0){
            Ext.Msg.alert('提示','请先选一个模板！');
        }else{
            var rbData=rb[0].data;
            if(data && rbData){
                for(var p in rbData){
                    data[p] = rbData[p];
                }
             }
            var higherLvlEmpId = this.getBlock('content').down('[name=higherLvlEmpId]');
            var superiorDoctorName='';
            if(higherLvlEmpId){
            	superiorDoctorName=higherLvlEmpId.rawValue.substring(0,higherLvlEmpId.rawValue.indexOf(' '));
            }
            var medicalRecord={filePk:data.filePk,
            		name:data.mrNm,
            		encounterPk:IMER_GLOBAL.encounterSn,
            		bizTime:data.logicSmtDate,
            		typeCode:data.mrTypeCode,
            		signLevelCode:data.signLevelCode,
            		superiorDoctorId:data.higherLvlEmpId,
            		superiorDoctorName:superiorDoctorName,
            		templeCode:data.code};
            
            var owner = this.getOwner();	
            var properties = owner.ownerCt.getLayer(Xap.ej.block.Layer.PROPERTIES);
		    //得到文书编辑器tab
		    /*var workpageview = properties.data.workpageview;
            if(workpageview){
            	workpageview.ownerCt.remove(workpageview);
            }*/
            var canvas = Xap.getCanvas();            
            var config = {
                    xclass: 'iih.mr.wr.mr.view.MrDocEditView',
                    pageTitle: data.mrNm,
                    pageCode:'mrdoceditview',
                    viewConfig:{
                        opType:'new',
                        medicalRecord:medicalRecord
                    },
                    assistantConfig:{
                        tgtObCd: 'MRB02',
                        tgtObPk: null
                    }
            };       
            canvas.fireEvent("addWorkPage",config);             
            this.getOwner().ownerCt.ownerCt.close();
        }
    }       
});

Ext.define('iih.mr.wr.mr.action.ConfirmCompleteAction', {
    extend:  Xap.ej.action.Action ,

    /*
     * @Override
     */
    execute: function(context) {
    	var me = this;
        XapMessageBox.confirm2('是否病历文书全部完成？', function(id){
				if(id=='yes'){
					var owner = me.getOwner();
			        var chain = owner.getActionChain('finish');
			        if(chain) {
			            chain.execute({});
			        }
				}
			});
    }
});

Ext.define('iih.mr.wr.mr.block.WrTemplateListBlock',{
    extend :  Xap.ej.block.Block ,

               
                                     
                                                 
      

    alias:'widget.wrTemplateListBlock',

    //layout: 'fit',

    items: [{
        title: '病历模板一览',
        
        //maxHeight: 800,
        
        xtype: 'xapgrid',

        CM_JR_Record: [
           {header: '模板id',dataIndex: 'code',hidden:true},
           {header: '文件主键',dataIndex: 'filePk',hidden:true},
           {header: '医疗记录类型编码',dataIndex: 'mrTypeCode',hidden:true},
//           {header: '模板标准编码',dataIndex: 'mrTplKc',hidden:true},
           {header: '医疗记录类型名称',dataIndex: 'mrTypeName',hidden:true},
           {header: '病历模板名称',dataIndex: 'name',field: 'textfield',type: 'string',flex:1},
           {header: '适用病种',dataIndex: 'diNames',field: 'textfield',type: 'string',width:150},
           {header: '所属',dataIndex: 'ownerName',field: 'textfield',type: 'string',width:150},
           {header: '审签级别编码',dataIndex: 'signLevelCode',hidden:true},
           {header: '审签级别',dataIndex: 'signLevelName',field: 'textfield',type: 'string',width: 150}
        ],
        autoScroll:true,
        height:250/*,
    	gridData:{
			'results':[
				{'mrTplVerKc': '001', "mrTypeCd":"MRM003.01",'mrTplKc':"001" ,'mrTypeNm':"其他病历类型",'mrTplNm':"XXXXX1",'mrTplDiNm':"xx1xxx",'ownerCd':"个人",'signLvlCd':"1"},
				{'mrTplVerKc': '002', "mrTypeCd":"MRM003.12",'mrTplKc':"002" ,'mrTypeNm':"上级医师查房记录",'mrTplNm':"XXXXX2",'mrTplDiNm':"x2xxxx",'ownerCd':"科室",'signLvlCd':"1"},
				{'mrTplVerKc': '003', "mrTypeCd":"MRM003.11",'mrTplKc':"003" ,'mrTypeNm':"手术记录",'mrTplNm':"XXXXX3",'mrTplDiNm':"xxx3xx",'ownerCd':"全院",'signLvlCd':"1"},
				{'mrTplVerKc': '004', "mrTypeCd":"MRM003.10",'mrTplKc':"004" ,'mrTypeNm':"会诊记录",'mrTplNm':"XXXXX4",'mrTplDiNm':"xxx4xx",'ownerCd':"科室",'signLvlCd':"1"},
				{'mrTplVerKc': '005', "mrTypeCd":"MRM003.02",'mrTplKc':"005" ,'mrTypeNm':"其他病历类型",'mrTplNm':"XXXXX5",'mrTplDiNm':"xx5xxx",'ownerCd':"科室",'signLvlCd':"1"},
				{'mrTplVerKc': '006', "mrTypeCd":"MRM003.03",'mrTplKc':"006" ,'mrTypeNm':"其他病历类型",'mrTplNm':"XXXXX6",'mrTplDiNm':"xxx6xx",'ownerCd':"个人",'signLvlCd':"1"}
			]
        }*/
    }],

    setData: function(data) {
        var grid = this.down('xapgrid');
        if(grid){
        	grid.setData(data);
        }
    }
})
Ext.define('iih.mr.wr.mr.block.MrTemplateSearchConditionBlock',{
	extend :  Xap.ej.block.FormBlock ,

	           
		                                          
		                           
		                                
		                                 
                                               
                                                    
	  

	alias:'widget.mrtemplatesearchconditionblock',

	layout: {
        type: 'table',
        columns: 9
    },
	items: [{
        xtype:'xapcombobox',
        name:'mrCategoryCode',
        colspan: 3,
        padding:'10 0 0 15',
        labelWidth:100,
        width:220,
        editable:false,
        allOptions: false,
        fieldLabel:'病历文书类型组',
        queryMode: 'local',
        displayField: 'name',
        valueField: 'code'
    },{
        xtype:'xapcombobox',
        name:'typeCode',
        padding:'10 0 0 20',
        labelWidth:80,
        width:260,
        colspan: 3,
        //value:'ALL',
        editable:false,
        allOptions: true,
        fieldLabel:'病历文书类型',
        queryMode: 'local',
        displayField: 'name',
        valueField: 'code'
    },{
        xtype: 'xaptextfield',
        padding:'10 0 0 10',
        name:'templateNm',
        labelWidth:80,
        colspan: 3,
        width:220,
        fieldLabel:'模板名称'
    },{
        xtype: 'xapcheckboxgroup',
        padding:'10 0 0 15',
        name:'personal',
        vertical: true,
        items: [
            { boxLabel: '个人', name: 'personal', inputValue: 'MDM08.03' ,checked:true}
        ]
    },{
        xtype: 'xapcheckboxgroup',
        padding:'10 0 0 10',
        name:'dept',
        vertical: true,
        items: [
            { boxLabel: '科室', name: 'dept', inputValue: 'MDM08.02',checked:true}
        ]
    },{
	      xtype:'comboxgrid',
	      name:'deptCode',
		  url: 'organization/keyword',//科室查询的url
		  listWidth:210,    //gird的宽度
		  width:140,        //combo的宽度
		  valueField : 'code',//科室编码的字段名
		  displayField: 'name',//科室名称的字段名
		  padding:'10 0 0 0',
		  columns: [{              //grid的column配置
			 text: '科室编码',
			 dataIndex: 'code',
			 width:60
		  },{
			 text: '科室',
			 flex:1,
			 dataIndex: 'name'
		  }],
		  callback:function(newValue,oldValue,record){  //在grid选择记录后的回调函数
		  	  var owner=this.ownerCt.ownerCt;
		      var chain = owner.getActionChain('init');
		      if(chain) {
		          chain.execute({
		          	 newValue:newValue
		          });
		      }
		  }
     },{
        xtype: 'xapcheckboxgroup',
        padding:'10 0 0 10',
        name:'all',
        vertical: true,
        items: [
            { boxLabel: '全院', name: 'all', inputValue: 'MDM08.01',checked:true }
        ]
    }]
})
Ext.define('iih.mr.wr.mr.action.MrTemplateSearchAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override
	*/
	execute: function(context) {
	    var newValue = context.newValue;
	    this.prepareOperations(context.operations,newValue);
    },
    prepareOperations: function(operations,newValue) {
        var block = this.getBlock('condition');
        var condition = block.getData();
        var mainDiCd = IMER_GLOBAL.mainDiCd;
        var departCode = IMER_GLOBAL.department.code;//登陆科室编码
        var userCode = IMER_GLOBAL.user.code;//登陆用户
        var hospitalArea = IMER_GLOBAL.hospitalArea.code;//全院
        
        var url = this.url;
        if(condition) {
        	var cond = condition;
        	var ownerCode = "";
        	if(condition.dept){
        		//如果newValue不为undefined则为切换科室时触发的init操作
        		if(newValue!=undefined){
	        		ownerCode = ownerCode + "," + newValue;
	        	}else{
	        		if(condition.deptCode){
		        		ownerCode = ownerCode + "," + cond.deptCode;
		        	}else{
		        		ownerCode = ownerCode + "," + departCode;
		        	}
	        	}
        	}
        	if(condition.personal){
        		ownerCode = ownerCode + "," + userCode;
        	}
        	if(condition.all){
        		ownerCode = ownerCode  + "," + hospitalArea;
        	}
            ownerCode=ownerCode.substr(1);
        	
        	var typeCode = condition.typeCode;
        	var templateNm = condition.templateNm;
        	
        	if(typeCode==""||typeCode=="ALL"){
        		cond = {'mrCategoryCode':condition.mrCategoryCode,'ownerCode':ownerCode,'name':templateNm}
        	}else{
        		cond = {'typeCode':condition.typeCode,'ownerCode':ownerCode,'name':templateNm}
        	}
            var qs = Ext.Object.toQueryString(cond);
            if(qs){
                url += '?' + qs;
            }
        };
        url=url+'&addSignLevel=1&mainDiCode='+mainDiCd+'&signDeptCode='+departCode+'&statusCode=MRM07.05&enTypeCode=ENM01.04&pageNum=1&pageSize=100000';
//        console.log(url);
        var operation = {
            url: url,
            method: 'get',
            condition: condition,
            scope: this,
            success: this.onSuccess
        };
        operations.push(operation);
    },
    onSuccess: function(operation) {
        var block = this.getBlock('result');
        // TODO 数据格式就这样了？
        if(operation.result.dataList){
        	block.setData(operation.result.dataList);
        }else{
        	block.setData([]);
        };
        //新建画面确定按钮置灰
        var bottom = this.getOwner().ownerCt.getBlock('bottom');
		var confim=bottom.down('button[name=confim]');
		confim.setDisabled(true);
		//判断结果集是否为一条数据，如果为一条则选中
		var grid = block.down('xapgrid');
		var length = grid.store.data.length;
		if(length>0){
			grid.getSelectionModel().select(0,false,true);
			var select = grid.getSelectionModel().getSelection()[0];
			grid.fireEvent('itemclick',grid, select, null, 0, null, null);
		}
    }
});

Ext.define('iih.mr.wr.mr.action.SearchMrTypeAction', {
    extend:  Xap.ej.action.ServiceInvocation ,
    
    /*
    * @Override
    */
    execute: function(context) {
        this.prepareOperations(context.operations);
    },
    prepareOperations: function(operations) {
        var block = this.getOwner().getBlock('condition');
        var mrCustClaCd=block.down('[name=mrCategoryCode]').getValue();
        var condition={"mrTypeCustomCategoryCd":mrCustClaCd,"enTypeCd":'ENM01.04'};
        var url = this.url;
        /*if(condition) {
            var qs = Ext.Object.toQueryString(condition);
            if(qs) {
                url += '?'+qs;
            }
        }*/
        var operation = {
                url: url,
                method: 'get',
                params: condition,
                scope: this,
                success: this.onSuccess
                // fail: this.onFail
            };
        operations.push(operation);
    },
    onSuccess: function(operation) {
        var block = this.getOwner().getBlock('condition');
        var mrTypeCd=block.down('[name=typeCode]');
        mrTypeCd.select(null);
        if(operation.result){
            mrTypeCd.setData(operation.result.dataList);
            var properties = this.getOwner().ownerCt.getLayer(Xap.ej.block.Layer.PROPERTIES);
            var mrTpCd = properties.data.mrTpCd;
            if(mrTpCd){
                mrTypeCd.select(mrTpCd);
                properties.data.mrTpCd = null;
            }else{
                mrTypeCd.select('ALL');
            };
            //var result = this.getOwner();
            //var initChain = result.getActionChain('init');
            //initChain.execute();
            //if(mrCustClaCd!='ALL')mrTypeCd.expand();
        }
    }
});
Ext.define('iih.mr.wr.mr.action.MrCustClaSearchAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override
	*/
	execute: function(context) {
	    this.prepareOperations(context.operations);
    },
    prepareOperations: function(operations) {
        var url = this.url+'?encounterPk='+IMER_GLOBAL.encounterSn;
        var operation = {
                url: url,
                method: 'get',
                scope: this,
                success: this.onSuccess
            };
        operations.push(operation);
    },
    onSuccess: function(operation) {
    	console.info(this.url+'?encounterPk='+IMER_GLOBAL.encounterSn);
    	var owner=this.getOwner();
    	var block= owner.getBlock("condition");
        var xapcheckboxgroup=block.down('xapcheckboxgroup[name=all]');
        var checked=xapcheckboxgroup.items.items;
        console.info(deselectedEnabled);
        var mrCustClaCd=block.down('[name=mrCategoryCode]');
        var mrTypeCd=block.down('[name=typeCode]');
        //为辅助录入赋值 
        var mrDeptCode=block.down('[name=deptCode]');
        var departCode = IMER_GLOBAL.department.code;//登陆科室编码
        mrDeptCode.select(departCode);
        var properties = owner.ownerCt.getLayer(Xap.ej.block.Layer.PROPERTIES);
		//树节点选择病历分类编号
		var ccatCode = properties.data.ccatCode;
        if(operation.result.data){
        	if(operation.result.data.mrTypeCustomCategorys&&operation.result.data.mrTypeCustomCategorys.length>0){
        		mrCustClaCd.setData(operation.result.data.mrTypeCustomCategorys);
        		  if(ccatCode==''){
                  	mrCustClaCd.select('MRM14.02');
                  }else{
                  	mrCustClaCd.select(ccatCode);
                  }
        	}
            if(operation.result.data.mrTypes){
            	mrTypeCd.setData(operation.result.data.mrTypes);
            }
            //给病历类型分类赋值
//            if(ccatCode==''){
//            	mrCustClaCd.select('MRM14.02');
//            }else{
//            	mrCustClaCd.select(ccatCode);
//            }
            //var result = this.getOwner();
            //var initChain = result.getActionChain('init');
            //initChain.execute();
        }
        var deselectedEnabled= operation.result.data.deselectedEnabled;
        checked[0].setValue(deselectedEnabled);
    }
});

Ext.define('iih.mr.wr.mr.action.MrTemplateSelectAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override
	*/
	execute: function(context) {
		var bottom = this.getOwner().ownerCt.getBlock('bottom');
		var confim=bottom.down('button[name=confim]');
		confim.setDisabled(false);
	    var rb = this.getBlock('result');
        var grid = rb.down('xapgrid'); 
        var selected=grid.getSelectionModel().getSelection();
        var mrDocNm=selected[0].data.name;
        var mrDocNmText=bottom.down('[name=mrNm]');
        mrDocNmText.setValue(mrDocNm);
        var mrTypeCode=selected[0].data.mrTypeCode;
        this.initOrcaleGetDate(context.operations);
        var higherLvlEmpId=bottom.down('[name=higherLvlEmpId]');
        
        if(mrTypeCode=='MRM16.19'||mrTypeCode=='MRM16.20'){//上级医师查房记录
        	var higherLvlEmpNm = higherLvlEmpId.getRawValue();
        	mrDocNmText.setRawValue(higherLvlEmpNm+" "+mrDocNm);
            //设置只读
            higherLvlEmpId.setDisabled(false);
        }else if(mrTypeCode=='MRM16.33'||mrTypeCode=='MRM16.30'){
        	//清空上级医师和职称
            higherLvlEmpId.select('');
            //设置只读
        	higherLvlEmpId.setDisabled(true);
        }else{
        	higherLvlEmpId.select('');
            //设置只读
            higherLvlEmpId.setDisabled(true);
        }
    },initOrcaleGetDate: function(operations) {
        var url = 'mr/dataBaseTime';
        var operation = {
            url: url,
            method: 'get',
            scope: this,
            success: this.onSuccess
        };
        operations.push(operation);
    },
    onSuccess: function(operation) {
    	if(operation.result.data.dataBaseTime){
    		var bottom = this.getOwner().ownerCt.getBlock('bottom');
            var logicSmtTimeDateFiled=bottom.down('[name=logicSmtDate]');
            logicSmtTimeDateFiled.setValue(operation.result.data.dataBaseTime);
    	}else{
    		console.log("获取数据库时间出错！");
    	}
        
    }
});

Ext.define('iih.mr.wr.mr.action.MrTemplateDblclickAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	execute: function(context) {
		var bottom = this.getOwner().ownerCt.getBlock('bottom');
		var chain = bottom.getActionChain('confim');
        if(chain) {
            chain.execute();
        }
	}     
});

Ext.define('iih.mr.wr.mr.action.EnterPressAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override
	*/
	execute: function(context) {
		var arguments = context.event.arguments[1];
		if (arguments.keyCode == 13){
			var result = this.getOwner();
	        var initChain = result.getActionChain('init');
	        initChain.execute();
        }
    }
});

Ext.define('iih.mr.wr.mr.view.MrTemplateSelectView',{
	extend :  Xap.ej.template.BaseTemplate ,

	           
	                                             
	                                                        
		                                             
		                                         
		                                            
		                                       
	  

	alias:'widget.mrtemplateselectview',

	layout : {
		type: 'vbox',
		align : 'stretch'
	},
	height:335,
	xapConfig: {
		blocks: {
		    'condition': {
                xclass: 'iih.mr.wr.mr.block.MrTemplateSearchConditionBlock',
                height:85
            },
			'result': {
				xclass: 'iih.mr.wr.mr.block.WrTemplateListBlock'
				//height:250
			}
		},

		actions: {
		    'init':{
		        xclass:'iih.mr.wr.mr.action.MrTemplateSearchAction',
		        url:'mr/tpl/template',
		        blocks:{
		            result:'result',
		            condition:'condition'
		        }
		    },
		    'select':{
                xclass:'iih.mr.wr.mr.action.MrTemplateSelectAction',
                url:'mr/create/init',
                blocks:{
                    result:'result'
                }
            },
            'confim':{
                xclass:'iih.mr.wr.mr.action.MrTemplateDblclickAction'
            },
            'initMrCustCla':{ 
                xclass:'iih.mr.wr.mr.action.MrCustClaSearchAction',
                url:'mr/create/init',

                blocks:{
                    result:'condition'
                }
            },
            'searchMrType':{
                xclass:'iih.mr.wr.mr.action.SearchMrTypeAction',
                url:'mrtypes',
                blocks:{
                    result:'condition'
                }
            },
            'checkChange':{
                xclass:'iih.mr.wr.mr.action.CheckChangeAction',
                blocks:{
                    result:'condition'
                }
            },
            'enterPress':{
                xclass:'iih.mr.wr.mr.action.EnterPressAction',
                blocks:{
                    result:'condition'
                }
            }
		},

		chains: {
		    'init':['init'],
		    'select':['select'],
		    'confim':['confim'],
		    'creatMrDoc':['creatMrDoc'],
		    'initMrCustCla':['initMrCustCla'],
		    'searchMrType':['searchMrType'],
		    'checkChange':['checkChange'],
		    'enterPress':['enterPress']
		},

		connections: {
		    'result':[/*{
		        event:'afterrender',
		        chain:'init'
		    },*/{
                selector: 'xapgrid',
                event: 'itemclick',
                chain: 'select'
            },{
            	selector: 'xapgrid',
                event: 'itemdblclick',
                chain: 'confim'
            }],
            'condition':[{
                event:'afterrender',
                chain:'initMrCustCla'
            },{
                selector: 'xapcombobox[name=mrCategoryCode]',
                event: 'change',
                chain: 'searchMrType'
            },{
                selector: 'xapcombobox[name=typeCode]',
                event: 'change',
                chain: 'init'
            },{
                selector: 'xapcheckboxgroup[name=personal]',
                event: 'change',
                chain: 'checkChange'
            },{
                selector: 'xapcheckboxgroup[name=dept]',
                event: 'change',
                chain: 'checkChange'
            },{
                selector: 'comboxgrid[name=deptCode]',
                event: 'change',
                chain: 'init'
            },{
                selector: 'xapcheckboxgroup[name=all]',
                event: 'change',
                chain: 'checkChange'
            },{
                selector: 'xaptextfield[name=templateNm]',
                event: 'specialkey',
                chain: 'enterPress'
            }]
		}
	}
})
Ext.define('iih.mr.wr.mr.block.MrDocPropertyBlock',{
	extend :  Xap.ej.block.FormBlock ,

	           
		                                 
                                         
                                        
                                                    
	  
	alias:'widget.mrdocformblock',
	/*
     * layout:{ type: 'table', columns: 2, //width: 1024, tableAttrs: { border:
     * 0, cellpadding: 4, // cellspacing: 1, width: '100%' }, tdAttrs: { valign:
     * 'left' }},
     */
	layout:{
		type: 'table',
		columns: 2,
		tableAttrs: {
			border: 0,
			//cellpadding: 2,
			width: '100%'
		},
		tdAttrs: {
			valign: 'left'
		}
	},
	buttons:[{
            xtype: "button",
            name: 'close',
            method:'close',
            text: '关闭',
            iconCls: 'icon-close'
        },{
            xtype: "button",
            name: 'confim',
            method:'confim',
            text: '确认',
            disabled:true,
            iconCls: 'icon-OK'
        },{
            xtype: "button",
            name: 'confimUpPro',
            method:'confimUpPro',
            text: '确认',
            iconCls: 'icon-OK'
        },{
            xtype: "button",
            name: 'cancel',
            method:'cancel',
            text: '取消' ,
            iconCls: 'icon-cancel' 
    }],
	
	items: [/*,{
		xtype:'xaptextfield',
		name:'jobTitleCd',
		padding:'10 0 0 15',
		fieldLabel:'职称',
		labelWidth:60,
		queryMode: 'local',
		readOnly:true,
		disabled:true
	},*/{
		xtype:'xaptextfield',
		name:'mrNm',
		fieldLabel:'病历标题',
		labelWidth:60,
		width:516,
		colspan:2,
		padding:'10 0 0 15'
	},{
		xtype:'datetimefield',
		name:'logicSmtDate',
		fieldLabel:'业务时间',
		labelWidth:60,
		padding:'10 0 0 22'
	},{
		xtype:'xapcombobox',
		name:'higherLvlEmpId',
		padding:'10 0 0 15',
		fieldLabel:'上级查房医师',
		labelWidth:80,
		editable:false,
		width:280,
		disabled:true,
		queryMode: 'local',
		displayField: 'name',
		valueField: 'id'
	}/*,{
		xtype:'xapcombobox',
		name:'relevance',
		fieldLabel:'关联医嘱',
		labelWidth:60,
		queryMode: 'local',
		disabled:true,
		padding:'10 0 0 15',
		displayField: 'name',
		valueField: 'abbr'
	}*/],
	setData: function(data) {
        this.callParent(arguments);
    },
    getData: function() {
        this.callParent(arguments);
    }
})
Ext.define('iih.mr.wr.mr.action.InitMrDocPropertyAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override
	*/
	execute: function(context) {
	    if(this.getOwner().ownerCt.ownerCt==undefined){//从病历文书属性进来
	        if(undefined!=context.mrSn){
	            if(context.from=='editor'){//从编辑器打开属性
	                var block = this.getOwner().getBlock('content');
	                var close=block.down('button[name=close]');
	                close.setVisible(false);
	                var confim=block.down('button[name=confim]');
	                confim.setVisible(false);
	                var higherLvlEmpId=block.down('[name=higherLvlEmpId]');
	                higherLvlEmpId.setReadOnly(true);
	                var mrNm=block.down('[name=mrNm]');
	                mrNm.setReadOnly(true);
	            }else{//从病历文书列表打开属性
	                this.setReadonly();
	            }
	            this.getOwner().mrPk=context.mrSn;
	            this.initMrDocProperty(context.operations,context.mrSn);
	        }
	    }else{//从新建病历文书进来
	        var block = this.getOwner().getBlock('content');
	        var close=block.down('button[name=close]');
	        close.setVisible(false);
	        var confimUpPro=block.down('button[name=confimUpPro]');
	        confimUpPro.setVisible(false);
	        this.initHigherLvlEmpId(context.operations);
	    }
    },
    initHigherLvlEmpId: function(operations) {
        var url = this.url+'?deptCd='+IMER_GLOBAL.department.code;
        var operation = {
            url: url,
            method: 'get',
            scope: this,
            success: this.onSuccess
        };
        operations.push(operation);
    },
    onSuccess: function(operation) {
    	
        var block = this.getOwner().getBlock('content');
        var higherLvlEmpId=block.down('[name=higherLvlEmpId]');
        if(operation.result.data.employees){
            higherLvlEmpId.setData(operation.result.data.employees);
        }
    },
    initMrDocProperty: function(operations,mrSn) {
        var url = 'mr/'+mrSn+'?withFile=false';
        var operation = {
                url: url,
                method: 'get',
                scope: this,
                success: this.onSearchSuccess
        };
        operations.push(operation);
    },
    onSearchSuccess: function(operation) {
        var block = this.getOwner().getBlock('content');
        var logicSmtDate=block.down('[name=logicSmtDate]');
        logicSmtDate.setValue(operation.result.data.bizTime);
        var mrNm=block.down('[name=mrNm]');
        mrNm.setValue(operation.result.data.name);
        var higherLvlEmpId=block.down('[name=higherLvlEmpId]');
        var jobTitleCd=block.down('[name=jobTitleCd]');
        var typeCode = operation.result.data.typeCode;
        if("MRM16.19"==typeCode||"MRM16.20"==typeCode){
            higherLvlEmpId.setValue(operation.result.data.higherLvlEmpId);
            jobTitleCd.setValue(operation.result.data.jobTitleCd);
        }/*else{
            higherLvlEmpId.setVisible(false);
            jobTitleCd.setVisible(false);
        }*/
    },
    setReadonly: function() {
        var block = this.getOwner().getBlock('content');
        var higherLvlEmpId=block.down('[name=higherLvlEmpId]');
        higherLvlEmpId.setReadOnly(true);
        var mrNm=block.down('[name=mrNm]');
        mrNm.setReadOnly(true);
        var logicSmtDate=block.down('[name=logicSmtDate]');
        logicSmtDate.setReadOnly(true);
        var cancel=block.down('button[name=cancel]');
        cancel.setVisible(false);
        var confim=block.down('button[name=confim]');
        confim.setVisible(false);
        var confimUpPro=block.down('button[name=confimUpPro]');
        confimUpPro.setVisible(false);
    }
});

Ext.define('iih.mr.wr.mr.action.ModifyMrProAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	 * @Override
	 */
	execute: function(context) {
	    var operations = context.operations;
        if(!operations) {
            return;
        }
	    var page=this.getOwner();
	    var form= this.getBlock('content').getForm();
	    var data =form.getValues();
	    var mr=page.mr;
	    mr.bizTime=data.logicSmtDate;
	    mr.name=data.mrNm;
	    mr.superiorDoctorId=data.higherLvlEmpId;
	    mr.mastDoctorCd=data.masterDoctorName;
	    mr.dirDoctorCd=data.dirDoctorName;
        this.openPrepareOperations(operations, mr);
    },
    
    openPrepareOperations: function(operations,data) {
        var METHODS = this.getInvocationMethods();
        var url=this.url+'/'+data.mrPk;
        var operation = {
            url: url,
            method: METHODS.METHOD_UPDATE,
            data:data,
            scope: this,
            success: this.onOpenSuccess,
            fail: this.onFail
        };
        operations.push(operation);
    },
    onOpenSuccess: function(operation) {
    	var mrDocEditView=this.getOwner().mrDocEditView;
    	if(mrDocEditView){
    		mrDocEditView.medicalRecord=operation.result.data;
//    		console.log(mrDocEditView);
    		mrDocEditView.up('workareapageview').getActiveTab().tab.setText(operation.result.data.name);
    	}
    	var mrDocListView = this.getOwner().mrDocListView;
    	if(mrDocListView){
    		var chain = mrDocListView.getActionChain('init');
            if(chain) {
                chain.execute();
            }
    	}
        
        this.getOwner().ownerCt.close();
    },
    onFail: function(operation) {
        Ext.Msg.alert('提示','保存失败!');
    }
});

Ext.define('iih.mr.wr.mr.action.InitjobTitleAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override
	*/
	execute: function(context) {
		var owner=this.getOwner();
		if(owner.xtype=="mrdocpropertyeditview"){//从病历文书属性编辑页面进来
			//得到医疗记录名称
			var mr=this.getOwner().mr;
			if(owner.init!=1){
				var block = this.getOwner().getBlock('content');
			    var mrDocNm=mr.templeName;
		        var higherLvlEmpId = block.down('[name=higherLvlEmpId]');
		        var mrNm = block.down('[name=mrNm]');
		        var higherLvlEmpNm = higherLvlEmpId.getRawValue();
		        //拼接病历标题
		        mrNm.setRawValue(higherLvlEmpNm+" "+mrDocNm);
			}else{
				this.getOwner().init=0;
			}
			
		}else{//从新建病历页面进来
			//得到医疗记录名称
			var rb = this.getOwner().ownerCt.getBlock('top').getBlock('result');
	        var grid = rb.down('xapgrid'); 
	        var selected=grid.getSelectionModel().getSelection();
	        var mrDocNm=selected[0].data.name;
	        
		    var block = this.getOwner().getBlock('content');
	        var higherLvlEmpId = block.down('[name=higherLvlEmpId]');
	        var mrNm = block.down('[name=mrNm]');
	        
	        /*var arr = higherLvlEmpId.value.split("-");
	        var jobTitleNm = arr[1];*/
	        var higherLvlEmpNm = higherLvlEmpId.getRawValue();
	        //jobTitleCd.setRawValue(jobTitleNm);
	        //拼接病历标题
	        mrNm.setRawValue(higherLvlEmpNm+" "+mrDocNm);
		}
		
    }
});

Ext.define('iih.mr.wr.mr.view.MrDocPropertyView',{
	extend :  Xap.ej.stl.view.SingleRecordEditTemplate ,

	           
	                                            
	                                                           
	                                                  
	                                                  
	                                            
	                                            
	  

	alias:'widget.mrdocpropertyview',
	
	layout:'fit',
	
	xapConfig: {
		blocks: {
		    'content': {
                xclass: 'iih.mr.wr.mr.block.MrDocPropertyBlock',
                height:150
            }
		},

		actions: {
		    'init': { 
		    	xclass: 'iih.mr.wr.mr.action.InitMrDocPropertyAction',
		        url:'mr/create/init',
		        blocks: {
		            content:'content'
		        }
		    },
		    'initjobTitle': { 
                xclass: 'iih.mr.wr.mr.action.InitjobTitleAction',
                blocks: {
                    content:'content'
                }
            },
            'confim':{
                xclass:'iih.mr.wr.mr.action.ConfimCreateMrDocAction',
                url:'mr_doc_file',
                blocks:{
                    content:'content'
                }
            },
            'confimUpPro':{
                xclass:'iih.mr.wr.mr.action.ModifyMrProAction',
                url:'mr_doc_file',
                blocks:{
                    content:'content'
                }
            },
		    'cancel': {
		        xclass: 'iih.mr.wr.mr.action.CancelCreateMrDocAction',
		        //url:'cancelTemplatePropertyEdit',
		        blocks: {
		            content: 'content'
		        }
		    }
		},

		chains: {
		    'init': ['init'],
		    'initjobTitle': ['initjobTitle'],
            'confim': ['confim'],
            'confimUpPro': ['confimUpPro'],
            'cancel': ['cancel']
		},

		connections: {
		    'content':[{
                event:'afterrender',
                chain:'init'
            },{    
                //确认按钮（新建病历选择模板属性）
                selector: 'button[method=confim]',
                event: 'click',
                chain: 'confim'
            },{    
                //确认按钮（修改病历属性）
                selector: 'button[method=confimUpPro]',
                event: 'click',
                chain: 'confimUpPro'
            },{    
                //取消按钮
                selector: 'button[method=cancel]',
                event: 'click',
                chain: 'cancel'
            },{    
                //关闭按钮
                selector: 'button[method=close]',
                event: 'click',
                chain: 'cancel'
            },{    
                //上级医师
                selector: 'xapcombobox[name=higherLvlEmpId]',
                event: 'change',
                chain: 'initjobTitle'
            }]
		}
	}
})
Ext.define('iih.mr.wr.mr.action.MrTemplateInitAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override
	*/
	execute: function(context) {
	    var owner = this.getOwner();   
		var opType = context.opType;
		owner.opType=opType;
//		console.log('MrTemplateInitAction');
//		console.log(owner);
		var ccatCode = context.id;
		var omrDocEditPage=context.omrDocEditPage;
		var workpageview = context.workpageview;
		//储存画面间参数
	    var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
        properties.setData({
        	ccatCode:ccatCode,    //树节点中选择的病历文书分类
        	opType:opType,
        	omrDocEditPage:omrDocEditPage,
        	workpageview:workpageview  //得到当前打开的病历文书页面
        });
    }
});

Ext.define('iih.mr.wr.mr.view.CreateMrDocView',{
	extend :  Xap.ej.stl.view.TopBottomContainerTemplate ,

	           
	                                             
	                                          
		                                            
	  

	alias:'widget.createmrdocview',

	xapConfig: {
		blocks: {
		    'top': {
                xclass: 'iih.mr.wr.mr.view.MrTemplateSelectView',
                height:335
            },
			'bottom': {
				xclass: 'iih.mr.wr.mr.view.MrDocPropertyView'
			}
		},
        actions: {
        	'init': {
				xclass: 'iih.mr.wr.mr.action.MrTemplateInitAction'
            }
        },  
        chains: {
        	'init': ['init']
        }
	}
})
Ext.define('iih.mr.wr.mr.action.CreateMrDocAction', {
	extend:  Xap.ej.action.PopAction ,

	                                                
	
	/*
	* @Override
	*/
	execute: function(context) {
		var block = this.getBlock('result');
		var tree=block.down('xaptree');
		var select = tree.getSelectionModel().getSelection();
		var workpageview = this.getOwner().ownerCt.items.items[1];
		var ccatCode = '';
		var mrTpCd = '';
		if(select.length>0){
			ccatCode = select[0].raw.id;
		};
		if(context.mrTpCcatCd)ccatCode=context.mrTpCcatCd;
		if(context.mrTpCd)mrTpCd=context.mrTpCd;
    	var config = {
    	    modal: true,           
    		width: 820,
    		height:478,
    		title :'病历新建',
    		contentConfig: {
    			xtype: 'createmrdocview',
    			initChain: {
    				name: 'init',
    				context: {
    					id:ccatCode,
    					mrTpCd:mrTpCd,
    					workpageview:workpageview
    				}
    			}
    		}
    	};
    	this.callParent([config]);
    }
});

Ext.define('iih.mr.wr.mr.action.DisabledOfficeToolBarAction', {
    extend:  Xap.ej.action.ServiceInvocation ,
    
    /*
     * @Override
     */
    doExecute: function(context) {
        var operations = context.operations;
        if(!operations) {
            return;
        }
        function intToBoolean(str){
        	if('1'==str){
        		return true;
        	}else{
        		return false;
        	}
        }
        var me=this;
        var emrSave = 'com.founder.iemr.editor.toolbar:emrSave';//保存
        var emrSubmit = 'com.founder.iemr.editor.toolbar:emrSubmit';//提交
        var emrRevoke = 'com.founder.iemr.editor.toolbar:emrRevoke';//撤销
        var emrDocProperty='com.founder.iemr.editor.toolbar:emrDocProperty';//属性
        var emrStartApprove='com.founder.iemr.editor.toolbar:emrStartApprove';//开始审签
        var emrApprove='com.founder.iemr.editor.toolbar:emrApprove';//审签
        var emrAuditRevoke='com.founder.iemr.editor.toolbar:emrAuditRevoke';//审签撤回
        var emrReject = 'com.founder.iemr.editor.toolbar:emrReject';//驳回
        var emrDocDelete = 'com.founder.iemr.editor.toolbar:emrDocDelete';//删除
        var emrRefreshMacro = 'com.founder.iemr.editor.toolbar:emrRefreshMacro';//刷新宏元素
        var emrRefreshDiagnosis = 'com.founder.iemr.editor.toolbar:emrRefreshDiagnosis';//刷新诊断
        var emrImageLibraries = 'com.founder.iemr.editor.toolbar:emrImageLibraries';//插入图片
        var emrContinuePrint = 'com.founder.iemr.editor.toolbar:emrContinuePrint';//续打
        var emrSelectContinuePrint = 'com.founder.iemr.editor.toolbar:emrSelectContinuePrint';//选页打印
        var emrSaveAsTemplate = 'com.founder.iemr.editor.toolbar:emrSaveAsTemplate';//病历另存为模板
        var emrRefreshOutpatientDisposal='com.founder.iemr.editor.toolbar:emrRefreshOutpatientDisposal';//刷新门诊处置
//        var emrSelectContinuePrint = 'com.founder.iemr.editor.toolbar:emrSelectContinuePrint';//选页续打
//        var emrContinuePrint = 'com.founder.iemr.editor.toolbar:emrContinuePrint';//病历另存为模板
//        var iddMedocalHistory = '';//月经史公式编辑
        var plugin = document.getElementById('iemrEditor');
        var mr=me.getOwner().medicalRecord;
        setTimeout(function() {
        	Ext.MessageBox.hide();
        },150);
        setTimeout(function() {
        	
            var canSign=intToBoolean(mr.canSign);
            var canCancelSigned=intToBoolean(mr.canCancelSigned);
            var canReject=intToBoolean(mr.canReject);
            var canUpdate=intToBoolean(mr.canUpdate);
            var canDelete=intToBoolean(mr.canDelete);
            var canEdit=intToBoolean(mr.canEdit);
            var canPrint=intToBoolean(mr.canPrint);
            var canContinuePrint=intToBoolean(mr.canContinuePrint);
            var canApprove=intToBoolean(mr.canApprove);
            var canStartApprove=intToBoolean(mr.canStartApprove);
            var canCancelApprove=intToBoolean(mr.canCancelApprove);
            var canSaveAsTemplate=intToBoolean(mr.canSaveAsTemplate);
            plugin.SetCommandVisible(emrRefreshOutpatientDisposal,false);
        	if(me.getOwner().opType=='open'){
        			plugin.SetCommandEnable(emrSaveAsTemplate,canSaveAsTemplate);
        		//根据用户审签等级判断隐藏哪些按钮
        		if(mr.userSignLevelCode==null||'MRM02.01'==mr.userSignLevelCode||'MRM02.02'==mr.userSignLevelCode||IMER_GLOBAL.user.code==mr.createUserId){
        			plugin.SetCommandVisible(emrApprove,false);
        			plugin.SetCommandVisible(emrStartApprove,false);
        			plugin.SetCommandVisible(emrAuditRevoke,false);
        			plugin.SetCommandVisible(emrReject,false);
        		}else if(('MRM02.03'==mr.userSignLevelCode||'MRM02.04'==mr.userSignLevelCode)&&IMER_GLOBAL.user.code!=mr.createUserId){
        			plugin.SetCommandVisible(emrSubmit,false);
        			plugin.SetCommandVisible(emrRevoke,false);
        		}
        		plugin.SetCommandEnable(emrSave,canUpdate);
            	plugin.SetCommandEnable(emrSubmit,canSign);
            	plugin.SetCommandEnable(emrRevoke,canCancelSigned);
            	plugin.SetCommandEnable(emrReject,canReject);
            	plugin.SetCommandEnable(emrDocDelete,canDelete);
            	plugin.SetCommandEnable(emrRefreshDiagnosis,canEdit);
            	plugin.SetCommandEnable(emrRefreshMacro,canEdit);
            	plugin.SetCommandEnable(emrImageLibraries,canEdit);
            	plugin.SetCommandEnable(emrStartApprove,canStartApprove);
            	plugin.SetCommandEnable(emrApprove,canApprove);
            	plugin.SetCommandEnable(emrAuditRevoke,canCancelApprove);
            	plugin.SetCommandVisible(emrContinuePrint,canContinuePrint);
            	plugin.SetCommandVisible(emrSelectContinuePrint,canContinuePrint);
            }else{
            	plugin.SetCommandEnable(emrDocProperty,false);
            	plugin.SetCommandEnable(emrRevoke,false);
            	plugin.SetCommandVisible(emrReject,false);
            	plugin.SetCommandEnable(emrDocDelete,false);
            	plugin.SetCommandVisible(emrStartApprove,false);
            	plugin.SetCommandVisible(emrApprove,false);
            	plugin.SetCommandVisible(emrAuditRevoke,false);
//            	plugin.SetCommandEnable(emrContinuePrint,false);
            }
        	/*
        	//当医疗记录自定义分类既不是入院记录也不是病程记录时禁用续打和选页打印功能
        	if(mr.mrTypeCustomCode&&mr.mrTypeCustomCode.indexOf('MRM14.02')<0&&mr.mrTypeCustomCode.indexOf('MRM14.03')<0){
        		plugin.SetCommandVisible(emrSelectContinuePrint,false);
            	plugin.SetCommandVisible(emrContinuePrint,false);
        	}*/
        	plugin.UpdateToolbar();
        	var count=me.getOwner().count;
            console.log(count);
            if(count&&count==3){
            	console.log('----------plugin.EnableOCX(true);---------'+count);
            	plugin.EnableOCX(true);
            }else{
            	me.getOwner().count=count+1;
            }
        },300);
//        Ext.MessageBox.hide();
    }
});

Ext.define('iih.mr.wr.mr.action.EditorCallBackAction', {
    extend:  Xap.ej.action.ServiceInvocation ,

    
    /*
    * @Override
    */
    execute: function(context) {
    	var self=this;
    	var opType=this.getOwner().opType;
    	var plugin = document.getElementById('iemrEditor');
    	var gui = require('nw.gui');
		var win = gui.Window.get();
		var page = this.getOwner();
		win.on('close', function() {
			var a=this;
			if(plugin&&plugin.valid&&plugin.IsModified()){
//				alert('当前对病历所做修改未保存，是否保存？');
				var close=function(){
					a.close(true);
				};
				XapMessageBox.confirm('是否保存对当前病历的修改？',
			            function(btn, text){
			                if (btn == 'yes') {
			                	var saveActionChain=page.getActionChain('emrSave');
			                	saveActionChain.execute({callback:close});
//			                    return me.callMethod(yesCallback, me);
			                } else if (btn == 'no') {
			                	close();
			                } else if (btn == 'cancel') {
//			                    return me.callMethod(cancelCallback, me);
			                }
			            },page
			        );
				/*
	            FuiMessageBox.confirm('当前对病历所做修改未保存，是否保存？', function(btn) {
					console.log(btn);
	                if (btn == 'yes') {
	                    self.doSave(function(){
							a.close(true);
	                    },mrDocEditPage);
	                }else if (btn == 'cancel'){
	                    
	                }else{
						a.close(true);
					}
	            });*/
	        }else{
				a.close(true);
			}
		});
    	if('new'==opType){
    		self.getOwner().count=0;
    		setTimeout(function() {
    			plugin.EnableOCX(false);
    			console.log('----------plugin.EnableOCX(false);------------');
   		 	},500);
    		//设置编辑器按钮状态
    		var disabledOfficeToolBarAction=self.getOwner().getActionChain("disabledOfficeToolBarAction");
    		disabledOfficeToolBarAction.execute();
    		
    		//刷新宏元素
    		var emrRefreshMacro=this.getOwner().getActionChain("emrRefreshMacro");
    		emrRefreshMacro.execute();
    		
    		var emrRefreshDiagnosis=this.getOwner().getActionChain("emrRefreshDiagnosis");
    		emrRefreshDiagnosis.execute();
    		
    		//设置newF为1，则刷新宏元素后会自动刷新引用元素
    		this.getOwner().newF=1;
    	}else if ('open'==opType){
    		var operations = context.operations;
            if(!operations) {
                return;
            }
            //设置编辑器按钮状态
    		var disabledOfficeToolBarAction=self.getOwner().getActionChain("disabledOfficeToolBarAction");
    		disabledOfficeToolBarAction.execute();
    		//判断是否为审签模式
    		var medicalRecord=self.getOwner().medicalRecord;
    		if(medicalRecord.canApprove&&medicalRecord.canApprove==1){
//    			console.log('----------------------plugin.ShowRedline(1);');
    			self.openPrepareOperations(operations);
    		}
    	}
		plugin.GotoSection('主诉',true);
		plugin.SetModified(false);
    },
    openPrepareOperations: function(operations) {
    	var url=this.url+'?userId='+IMER_GLOBAL.user.code;
        var operation = {
            url: url,
            method: 'get',
            scope: this,
            success: this.onSuccess,
            fail: this.onFail
        };
        operations.push(operation);
    },
    onSuccess: function(operation) {
    	var user=operation.result.data;
        var plugin = document.getElementById('iemrEditor');
        //设置审签痕迹
        var signatureLevel=0;
        if('MRM02.03'==user.signLevelCode){
        	signatureLevel=2;
        	
        }else if('MRM02.04'==user.signLevelCode){
        	signatureLevel=3;
        }
//        console.log('----------plugin.SwitchRedline(signatureLevel, user.id);------------');
        //signatureLevel传0为停止记录修订，1为无下划线，2为1条下划线，3为2条下划线分别对应停止记录修订痕迹，一级审签、二级审签和三级审签
        plugin.SwitchRedline(signatureLevel, user.id);
        plugin.ShowRedline(1);
//        console.log('----------plugin.SwitchRedline('+signatureLevel+',' +user.id+');------------');
        setTimeout(function() {
        	//将编辑器对文档自动做的修改（此处为设置审签痕迹），设置为未发生修改，因为医生未修改文书内容
            plugin.SetModified(false);
        },200);
        
    }
});

Ext.define('iih.mr.wr.mr.action.EncounterTypeSearchAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override
	*/
	execute: function(context) {
	    var typeCode = context.typeCode;
	    this.prepareOperations(context.operations,typeCode);
    },
    prepareOperations: function(operations,typeCode) {
        var url = this.url + '?typeCode=' + typeCode;
        var operation = {
                url: url,
                method: 'get',
                scope: this,
                success: this.onSuccess
                // fail: this.onFail
            };
        operations.push(operation);
    },
    onSuccess: function(operation) {
    	if(operation.result){
            var block = this.getBlock('content');
            if(block)
                block.setEnTypeValue(operation.result.dataList);
        }
    }
});

Ext.define('iih.mr.wr.mr.action.InitMrDocPropertyEditAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override
	*/
	execute: function(context) {
		this.getOwner().mrPk=context.mrSn;
//		console.log('eeeeeeeee');
//		console.log(context);
		this.getOwner().mrDocListView=context.mrDocListView;
		this.getOwner().mrDocEditView=context.mrDocEditView;
        this.initMrDocProperty(context.operations,context.mrSn);
    },
    initMrDocProperty: function(operations,mrSn) {
        var url = 'mr/'+mrSn+'?withFile=false';
        var operation = {
                url: url,
                method: 'get',
                scope: this,
                success: this.onSearchSuccess
        };
        operations.push(operation);
    },
    onSearchSuccess: function(operation) {
    	var owner=this.getOwner();
    	this.getOwner().mr=operation.result.data;
    	var mr=this.getOwner().mr;
        var block = this.getOwner().getBlock('content');
        var confimUpPro=block.down('[name=confimUpPro]');
        var cancel=block.down('[name=cancel]');
        var close=block.down('[name=close]');
        var higherLvlEmpId=block.down('[name=higherLvlEmpId]');
        higherLvlEmpId.setDisabled(true);
        if(!('MRM04.01'==mr.statusCode&&mr.canEdit==1)){
//        	confimUpPro.setVisible(false);
        	close.setVisible(true);
        	var higherLvlEmpId=block.down('[name=higherLvlEmpId]');
            var typeCode = mr.typeCode;
        	if("MRM16.19"==typeCode||"MRM16.20"==typeCode){
                higherLvlEmpId.setValue(mr.superiorDoctorName);
            }
        }else{
        	var mrDocPropertyEditInitComboxAction=owner.getActionChain('mrDocPropertyEditInitComboxAction');
        	mrDocPropertyEditInitComboxAction.execute();
        	confimUpPro.setVisible(true);
        	cancel.setVisible(true);
        }
        var mrType=block.down('[name=mrType]');
        mrType.setValue(mr.typeName);
        mrType.setDisabled(true);
        var bizTime=block.down('[name=logicSmtDate]');
        bizTime.setValue(mr.bizTime);
        bizTime.setDisabled(true);
        var createUserName=block.down('[name=createUserName]');
        createUserName.setValue(mr.createUserName);
        createUserName.setDisabled(true);
        var templeName=block.down('[name=templeName]');
        templeName.setValue(mr.templeName);
        var a=document.getElementById('temp');
        a.onclick = function showmsg(){ 
        	var templateProperty=owner.getActionChain('templateProperty');
        	templateProperty.execute();
        }; 
//        a.addEventListener("onclick ",function(){alert(123);});
//        templeName.setDisabled(true);
        var createTime=block.down('[name=createTime]');
        createTime.setValue(mr.crtTime);
        createTime.setDisabled(true);
        var masterDoctorName=block.down('[name=masterDoctorName]');
        masterDoctorName.setValue(mr.masterDoctorName);
        masterDoctorName.setDisabled(true);
        var mastDoctorDate=block.down('[name=mastDoctorDate]');
        mastDoctorDate.setValue(mr.mastDoctorDate);
        mastDoctorDate.setDisabled(true);
        var mrNm=block.down('[name=mrNm]');
        mrNm.setDisabled(true);
        mrNm.setValue(mr.name);
        
        var statusName=block.down('[name=statusName]');
        statusName.setValue(mr.statusName);
        statusName.setDisabled(true);
//        var qaStatusName=block.down('[name=qaStatusName]');
//        qaStatusName.setValue(mr.qaStatusName);
//        qaStatusName.setDisabled(true);
        var completedFlag=block.down('[name=completedFlag]');
        completedFlag.setValue(mr.completedFlag==1?'已完成':'未完成');
        completedFlag.setDisabled(true);
        var signLevelName=block.down('[name=signLevelName]');
        signLevelName.setValue(mr.signLevelName);
        signLevelName.setDisabled(true);
        var submitName=block.down('[name=submitName]');
        submitName.setValue(mr.submitName);
        submitName.setDisabled(true);
        var submitDate=block.down('[name=submitDate]');
        submitDate.setValue(mr.submitDate);
        submitDate.setDisabled(true);
        var logicSubmitTime=block.down('[name=logicSubmitTime]');
        logicSubmitTime.setValue(mr.submitDate);
        logicSubmitTime.setDisabled(true);
        var deptName=block.down('[name=deptName]');
        deptName.setValue(mr.deptName);
        deptName.setDisabled(true);
        var treatDoctorName=block.down('[name=treatDoctorName]');
        treatDoctorName.setValue(mr.treatDoctorName);
        treatDoctorName.setDisabled(true);
        var dirDoctorName=block.down('[name=dirDoctorName]');
        dirDoctorName.setValue(mr.dirDoctorName);
        dirDoctorName.setDisabled(true);
        var dirDoctorDate=block.down('[name=dirDoctorDate]');
        dirDoctorDate.setValue(mr.dirDoctorDate);
        dirDoctorDate.setDisabled(true);
        var lastUpdateUserName=block.down('[name=lastUpdateUserName]');
        lastUpdateUserName.setValue(mr.lastUpdateUserName);
        lastUpdateUserName.setDisabled(true);
        var lastUpdateTime=block.down('[name=lastUpdateTime]');
        lastUpdateTime.setValue(mr.lastUpdateTime);
        lastUpdateTime.setDisabled(true);
        if('MRM04.01'==mr.statusCode&&mr.canEdit==1){
        	mrNm.setDisabled(false);
        	bizTime.setDisabled(false);
        	if('MRM02.03'==mr.signLevelCode){
        		masterDoctorName.setDisabled(false);
        	}else if('MRM02.04'==mr.signLevelCode){
        		masterDoctorName.setDisabled(false);
        		dirDoctorName.setDisabled(false);
        	}
        }
    }
});

Ext.define('iih.mr.wr.mr.action.MergeAllAction', {
	extend:  iih.mr.action.editor.EmrEditorOperatorAction ,
	
	/*
	* @Override
	*/
	execute: function(context) {
		var me=this;
		var mrs=this.getOwner().mrs;
		if(mrs.length>0){
			var plugin = document.getElementById('iemrEditorRead');
//			plugin.EditDocument();
			setTimeout(function() {
			for(var i=0;i<mrs.length;i++){
//				
//					plugin.EditDocument();
					if(i>0){
						var mr=mrs[i];
		        		plugin.InsertFromString(mr.fileData,1);
					}
	    	}
			setTimeout(function() {
				plugin.SaveToString();
				plugin.SetReadOnly();
				plugin.OfficeCommand('com.founder.iemr.editor.toolbar:emrBrowsMode'); 
//				setTimeout(function() {
						plugin.ShowOCX(true);
						plugin.GotoMark('DOC_START');
						me.closeProgress();//关闭进度条
//					},200);
			},100);
			},200);
		}
    }
});

Ext.define('iih.mr.wr.mr.action.MrCheckUserCaAction', {
    extend:  Xap.ej.action.ServiceInvocation ,
    
    /*
     * @Override
     */
    execute: function(context) {
        var operations = context.operations;
        if(!operations) {
            return;
        }
        
        var method = context.event.arguments[0];
        var plugin = document.getElementById('iemrEditor');
        plugin.EnableOCX(false);
        if(method=='emrSubmit'){
            plugin.SetCommandEnable('com.founder.iemr.editor.toolbar:emrSubmit',false);
            plugin.SetCommandEnable('com.founder.iemr.editor.toolbar:emrSave',false);
        }
        this.getOwner().cmdName=method;
        this.prepareOperations(operations);
    },
    
    prepareOperations: function(operations) {
        var url=this.url;
        var operation = {
            url: url,
            method: 'get',
            scope: this,
            success: this.onSuccess,
            fail: this.onFail
        };
        operations.push(operation);
    },
    onSuccess: function(operation) {
    	var me=this;
    	var user=operation.result.data;
    	if('1'==user.useCa){
    		var plugin = document.getElementById('iemrEditor');
    		var userName=plugin.CA_GetUserName();
    		if(userName==''){
    			XapMessageBox.confirm2('未检测到电子签章， 使用文字签章？', function(id){
    				if(id=='yes'){
    					me.exceAction({user:user});
    				}else{
    					me.enable();
    				}
    			});
            }else{
            	if(user.name==userName){
                    var picPngStr=plugin.CA_GetPicPNG();
                    if(picPngStr.length<1){
                        FuiMessageBox.confirm2('无法获得电子签章， 使用文字签章？', function(btn) {
                            if (btn == 'yes') {
                            	me.exceAction({user:user});
                            }else{
                            	me.enable();
                            }
                        });
                    }else{
                    	user.name= '\n';//使用电子签名的时候，传空字符串给编辑器，编辑器会从Ukey拿到签名图片
                    	this.exceAction({user:user});
                    }
                }else{
                	var action='提交';
                	var method = this.getOwner().cmdName;
                	if('emrApprove'==method){
                		action='审签';
                	}
                	me.enable();
                    Ext.MessageBox.alert('提示', '当前用户【'+user.name+'】与电子签章用户【'+userName+'】不一致，无法'+action+'!');
                }
            }
    	}else{
    		me.exceAction({user:user});
    	}
    },
    exceAction:function(data){
    	var method = this.getOwner().cmdName;
//        console.log('--------'+method+'--------');
        method=method+'2';
        var owner = this.getOwner();
        var chain = owner.getActionChain(method);
        if(chain) {
            chain.execute(data);
        }
    },
    enable:function(){
    	var method = this.getOwner().cmdName;
    	if(method=='emrSubmit'){
        	var plugin = document.getElementById('iemrEditor');
            plugin.SetCommandEnable('com.founder.iemr.editor.toolbar:emrSubmit',false);
            plugin.SetCommandEnable('com.founder.iemr.editor.toolbar:emrSave',false);
        }
        var plugin = document.getElementById('iemrEditor');
        plugin.EnableOCX(true);
        plugin.SetCommandEnable('com.founder.iemr.editor.toolbar:emrSubmit',true);
        plugin.SetCommandEnable('com.founder.iemr.editor.toolbar:emrSave',true);
    },
    onFail: function(operation) {
        Ext.Msg.alert("提示",'获取用户信息失败!');
    }
});

Ext.define('iih.mr.wr.mr.action.MrContinuePrintAction', {
    extend:  Xap.ej.action.ServiceInvocation ,
    
    /*
     * @Override
     */
    execute: function(context) {
        var operations = context.operations;
        if(!operations) {
            return;
        }
        var plugin = document.getElementById('iemrEditor');
        if(!plugin.IsModified()){
            var mrTypeCustomCode=this.getOwner().medicalRecord.mrTypeCustomCode;
            this.prepareOperations(operations, mrTypeCustomCode);
        }else{
        	Ext.MessageBox.alert('提示', '当前修改未保存，请保存后重试！');
        }
    },
    
    prepareOperations: function(operations,mrTypeCustomCode) {
        var METHODS = this.getInvocationMethods();
        var encounterSn = IMER_GLOBAL.encounterSn;
        var deptCd=this.getOwner().medicalRecord.deptCd;
        var url=this.url+'?withFile=1&encounterPk='+encounterSn+'&mrTypeCustomCode='+mrTypeCustomCode+'&deptCd='+deptCd;
        var operation = {
            url: url,
            method: METHODS.METHOD_GET,
            scope: this,
            success: this.onSuccess,
            fail: this.onFail
        };
        operations.push(operation);
    },
    onSuccess: function(operation) {
        var plugin = document.getElementById('iemrEditor');
        var fileNames='';
        var fileNewPageSorts='';
        var printBegin = 0;
        var mrPk=this.getOwner().medicalRecord.mrPk;
        var returnData=operation.result.dataList;
        for ( var i = 0; i < returnData.length; i++) {
            if (mrPk == returnData[i].mrPk) {
                printBegin = i;
            }
            
            var fileName=plugin.Base64toODT(returnData[i].fileData);
            if('MRM16.25'==returnData[i].typeCode){//如果类型是转入记录，则页眉需要以此开始
            	fileName=fileName+'NewHeader-';
            }
            if(fileNames==''){
                fileNames=fileName;
            }else{
                fileNames=fileNames+'\n'+fileName
            }
            if(1==returnData[i].newPageF){
                if(fileNewPageSorts==''){
                    fileNewPageSorts=i;
                }else{
                    fileNewPageSorts=fileNewPageSorts+'\n'+i
                }
            }
        }
        setTimeout(function() {
            plugin.PrintContinue2(fileNames,printBegin,fileNewPageSorts);
        }, 500);
//        plugin.EditDocument();
//        Ext.Msg.alert("提示",'驳回成功!');
    },
    onFail: function(operation) {
        Ext.Msg.alert("提示",'获取续打病历失败!');
    }
});

Ext.define('iih.mr.wr.mr.action.MrDocApproveAction', {
    extend:  Xap.ej.action.ServiceInvocation ,
//    userName:'',
    /*
    * @Override
    */
    execute: function(context) {
    	var operations = context.operations;
        if(!operations) {
            return;
        }
        var user=context.user;
        var userName=user.name;
        var plugin = document.getElementById('iemrEditor');
        plugin.EnableOCX(false);
        plugin.SwitchRedline(0, user.id);
        plugin.ShowRedline(0);//不显示审签痕迹
        var signatureLevel=0;
        var macroId='';
        if('MRM02.03'==user.signLevelCode){
        	signatureLevel=2;
        	macroId='MR.M.013.D.25';
        }else if('MRM02.04'==user.signLevelCode){
        	signatureLevel=3;
        	macroId='MR.M.013.D.24';
        }else{
        	Ext.Msg.alert('提示','您没有权限进行此操作!');
        	return false;
        }
        plugin.AddSignature(signatureLevel);
        plugin.ImportMacroValue(macroId,userName);//进行签名
        
        var approvePostAction=this.getOwner().getActionChain('approvePost');
        approvePostAction.execute();
    }
});

Ext.define('iih.mr.wr.mr.action.MrDocApprovePostAction', {
    extend:  Xap.ej.action.ServiceInvocation ,
    
    /*
     * @Override
     */
    execute: function(context) {
        var operations = context.operations;
        if(!operations) {
            return;
        }
        var plugin = document.getElementById('iemrEditor');
        var opType=this.getOwner().opType;
        if(opType!=undefined){
            var medicalRecord=this.getOwner().medicalRecord;
            medicalRecord.fileData=plugin.SaveToString();
            if(opType=='new'){
                Ext.Msg.alert("提示","只有已经提交的病历才可审签！");
            }else if(opType=='open'){
            	this.showSubmitProgressBar('iemrEditor');
                this.openPrepareOperations(operations, medicalRecord);
            }
        }
    },
    
    openPrepareOperations: function(operations,data) {
        var METHODS = this.getInvocationMethods();
        var url=this.url+'/'+data.mrPk;
        var operation = {
            url: url,
            method: METHODS.METHOD_UPDATE,
            data:data,
            scope: this,
            success: this.onOpenSuccess,
            fail: this.onFail
        };
        operations.push(operation);
    },
    onOpenSuccess: function(operation) {
        var plugin = document.getElementById('iemrEditor');
        plugin.SetReadOnly();
        this.getOwner().medicalRecord=operation.result.data;
        //设置编辑器按钮状态
		var disabledOfficeToolBarAction=this.getOwner().getActionChain("disabledOfficeToolBarAction");
		disabledOfficeToolBarAction.execute();
		plugin.EnableOCX(true);
//        Ext.Msg.alert('提示','审签成功!');
    },
    onFail: function(operation) {
        Ext.Msg.alert('提示','审签失败!');
    }
});

Ext.define('iih.mr.wr.mr.action.MrDocAuditRevokeAction', {
    extend:  Xap.ej.action.ServiceInvocation ,
    
    /*
     * @Override
     */
    execute: function(context) {
        var operations = context.operations;
        if(!operations) {
            return;
        }
        var m=this;
        var plugin = document.getElementById('iemrEditor');
        plugin.EnableOCX(false);
        plugin.SetCommandEnable('com.founder.iemr.editor.toolbar:emrAuditRevoke',false);
        var opType=this.getOwner().opType;
        if(opType!=undefined){
        	var medicalRecord=this.getOwner().medicalRecord;
            plugin.EditDocument();//设置为可编辑模式（因只读状态对编辑器进行的修改SaveToString无法得到）
            plugin.SetModified(true);
            //          plugin.SwitchRedline(0, '');//停止记录修订痕迹
            var signEleId='';
            if('MRM02.03'==medicalRecord.userSignLevelCode){
            	signEleId='MR.M.013.D.25';// 清空二级签名
            }else if('MRM02.04'==medicalRecord.userSignLevelCode){
            	signEleId='MR.M.013.D.24';// 清空三级签名
            }
            if(''!=signEleId){
            	 plugin.ClearMacroValue(signEleId);// 清空签名
            }
            var d=new Date();
            for(var i=0;i<20;i++){
            	console.log(medicalRecord);
            }
            var e=new Date();
            console.log(e-d);
            plugin.EnableOCX(true);
        	medicalRecord.fileData=plugin.SaveToString();
            if(opType=='new'){
                Ext.Msg.Ext.Msg.alert("提示","提示","只有已经审签的病历才可以审签撤回！");
            }else if(opType=='open'){
            	m.showSubmitProgressBar('iemrEditor');
                m.openPrepareOperations(operations, medicalRecord);
            }
        	
/*            var data={
                    'odtFile':plugin.SaveToString()
                    };
            data.actionType='revoke';
            if(opType=='new'){
                
            }else if(opType=='open'){
                data.mrSn=this.getOwner().mrSn;
                this.openPrepareOperations(operations, data);
            }*/
        }
    },
    
    openPrepareOperations: function(operations,data) {
        var METHODS = this.getInvocationMethods();
        var url=this.url+'/'+data.mrPk;
        var operation = {
            url: url,
            method: METHODS.METHOD_DELETE,
            data:data,
            scope: this,
            success: this.onOpenSuccess,
            fail: this.onFail
        };
        operations.push(operation);
    },
    onOpenSuccess: function(operation) {
//        plugin.EditDocument();
        this.getOwner().medicalRecord=operation.result.data;
        var editorCallBackAction = this.getOwner().getActionChain("editorCallBackAction");
		editorCallBackAction.execute();
//        Ext.Msg.alert("提示",'审签撤回成功!');
    },
    onFail: function(operation) {
        Ext.Msg.alert("提示",'审签撤回失败!');
    }
});

Ext.define('iih.mr.wr.mr.action.MrDocBtnUsableAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	doExecute: function(context) {
		var encounterSn = IMER_GLOBAL.encounterSn;
		this.prepareOperations(context.operations,encounterSn);
	},
    prepareOperations: function(operations,encounterSn) {
        var url = this.url+'/'+encounterSn;
        
        var mclass = null;
        var operation = {
            url: url,
            mclass: mclass,
            method: 'get',
            condition: null,
            scope: this,
            success: this.onSuccess
        };
        operations.push(operation);
    },
    onSuccess: function(operation) {
        if(operation.result.data){
        	var amr=operation.result.data;
            var statusCode = amr.statusCode;
            var block = this.getBlock('result');
            var deleteBtn=block.down('toolbar button[method=create]');
            var finishBtn=block.down('toolbar button[method=finish]');
            if('ENM02.04'!=amr.encounterStatusCode&&'ENM02.06'!=amr.encounterStatusCode){
            	finishBtn.setDisabled(true);
            }else{
            	finishBtn.setDisabled(false);
            }
            if(statusCode!='MRM22.01'){
                deleteBtn.setDisabled(true);
            }else{
            	if(deleteBtn){
            		deleteBtn.setDisabled(false);
            	}
            }
        }
    }
});

Ext.define('iih.mr.wr.mr.action.MrDocCanEditAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	 * @Override
	 */
	execute: function(context) {
	    var operations = context.operations;
        if(!operations) {
            return;
        }
        var medicalRecord=this.getOwner().medicalRecord;
        this.prepareOperations(operations,medicalRecord);
    },
    
    prepareOperations: function(operations,data) {
        var METHODS = this.getInvocationMethods();
        var url=this.url+'/'+data.mrPk;
        var operation = {
            url: url,
            method: METHODS.METHOD_CREATE,
            data:data,
            scope: this,
            success: this.onSuccess,
            fail: this.onFail
        };
        operations.push(operation);
    },
    onSuccess: function(returnData) {
        var plugin = document.getElementById('iemrEditor');
        this.getOwner().medicalRecord=returnData.result.data;
        var medicalRecord=returnData.result.data;
        if(medicalRecord.canEdit==1){
        	plugin.SetCommandVisible('com.founder.iemr.editor.toolbar:emrReadOnly', true);
    		plugin.SetCommandVisible('com.founder.iemr.editor.toolbar:emrEdit', false);
        	plugin.SetCommandEnable('com.founder.iemr.editor.toolbar:emrSave', true);
            plugin.SetCommandEnable('com.founder.iemr.editor.toolbar:emrDocDelete',true);
            plugin.SetCommandEnable('com.founder.iemr.editor.toolbar:emrDocProperty',true);
            plugin.EditDocument();
            plugin.UpdateToolbar();
        }else{
        	Ext.Msg.alert('提示','编辑申请失败!');
        }
        Ext.Msg.alert('提示','编辑申请成功!');
    },
    onFail: function(operation) {
    	 plugin.SetCommandEnable('com.founder.iemr.editor.toolbar:emrSave', false);
    	 plugin.UpdateToolbar();
        Ext.Msg.alert('提示','编辑申请失败!');
    }
});

Ext.define('iih.mr.wr.mr.action.MrDocEditAction', {
	extend:  iih.mr.action.editor.EmrEditorOperatorAction ,
	
	                                                 
	/*
	* @Override
	*/
	execute: function(context) {
	    Ext.useShims=true;
    	var operations = context.operations;
    	if(!operations) {
            return;
        }
    	var mrWriteView=this.getOwner().ownerCt;
    	this.getOwner().medicalRecord=mrWriteView.medicalRecord;
    	this.getOwner().mrSn=mrWriteView.mrSn;
    	this.getOwner().mrTpCcatCd=mrWriteView.mrTpCcatCd;
    	this.getOwner().opType=mrWriteView.opType;
    	var opType=this.getOwner().opType;
    	if(opType!=undefined){
            if(opType=='new'){//创建新病历
            	var rs = this.getBlock('content');   
    			this.addEditorEvent(rs);
            	this.showProgress();//显示进度条
                var filePk=this.getOwner().medicalRecord.filePk;//得到模板文件pk
                this.addPrepareOperations(operations,filePk);
            }else if(opType=='open'){//打开已有病历
            	var rs = this.getBlock('content');   
    			this.addEditorEvent(rs);
            	this.showProgress();//显示进度条
                var mrSn=this.getOwner().mrSn;//得到文书pk
                var a=new Date();
                console.log('%c'+a+':'+a.getMilliseconds()+'毫秒     开始调用后台服务获取【'+mrSn+'】的文件......','color: #86CC00; background-color: black; font-size: 20px; padding: 3px;');
                this.openPrepareOperations(operations, mrSn);
            }else if(opType=='readonly'){//只读浏览病历
                var mrTpCcatCd=this.getOwner().mrTpCcatCd;//得到医疗记录类型组pk
                var mrSn=this.getOwner().mrSn;//得到文书pk
                if(mrSn){
                	this.readPrepareOperations(operations, mrSn);
                }else if(mrTpCcatCd){
                	this.showProgress();//显示进度条
                	this.readPrepareOperations2(operations, mrTpCcatCd);
                }
            }
        }
    },
    openPrepareOperations: function(operations, mrSn) {
        var url = this.url+'/'+mrSn+'?withFile=true';
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            method: METHODS.METHOD_GET,
            scope: this,
            success: this.onOpenSuccess
        };
        operations.push(operation);
    },
    readPrepareOperations: function(operations, mrSn) {
    	var url = 'mrfile/'+mrSn;
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            method: METHODS.METHOD_GET,
            scope: this,
            success: this.onReadSuccess
        };
        operations.push(operation);
    },
    readPrepareOperations2: function(operations, mrTpCcatCd) {
    	var encounterSn = IMER_GLOBAL.encounterSn;
    	var url='mrs'+'?withFile=1&encounterPk='+encounterSn+'&mrTypeCustomCode='+mrTpCcatCd;
//    	var url = 'mrs'+'/'+mrSn+'?withFile=true';
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            method: METHODS.METHOD_GET,
            scope: this,
            success: this.onReadSuccess2
        };
        operations.push(operation);
    },
    onOpenSuccess: function(operation) {
//        var self=this;
        var medicalRecord=operation.result.data;
        var fileData=medicalRecord.fileData;
        var a=new Date();
        console.log('%c'+a+':'+a.getMilliseconds()+'毫秒     得到后台返回【'+medicalRecord.mrPk+'】的文件：'+fileData.substring(0,20),'color: #86CC00; background-color: black; font-size: 20px; padding: 3px;');
        var mrDocEditPage=this.getOwner();
        mrDocEditPage.medicalRecord=medicalRecord;
        
        //调用老孟提供的接口,在TOP页上显示诊断信息
        this.refreshTop(medicalRecord);
        
//        console.log(mrDocEditPage.medicalRecord);
        //根据medicalRecord属性判断当前用户是否要用编辑模式打开
        var readonlyF=true;
        if(medicalRecord.canEdit&&1==medicalRecord.canEdit){
        	readonlyF=false;
        }
        //初始化编辑器参数
        var params={
                'objectId':'iemrEditor',
                'sstream':medicalRecord.fileData,
                'mr_mode':1,//编辑器打开模式，1为书写模式，2为模板编辑模式，3为浏览模式
                'readonly':readonlyF,//是否以只读方式打开文档
                'callBackAction':'editorCallBackAction'//编辑器加载完成后要执行的回调Action
        };
        //将编辑器插入当前page
        this.insertWriter(mrDocEditPage,params);
    },
    
    onReadSuccess: function(operation) {
        var self=this;
        var mrDocEditPage=self.getOwner();
        mrDocEditPage.medicalRecord=operation.result.data;
        mrDocEditPage.fireEvent('editorOpened', operation.result.data);
//        console.log(mrDocEditPage.medicalRecord);
        var params={
                'objectId':'iemrEditorRead',
                'sstream':operation.result.data.fileData,
                'mr_mode':3,
                'readonly':true,
                'callBackAction':'closeProgress'
        };
        self.insertWriter(mrDocEditPage,params);
    },
    
    onReadSuccess2: function(operation) {
        var self=this;
        var mrDocEditPage=self.getOwner();
        var mrs=operation.result.dataList;
        mrDocEditPage.mrs=mrs;
        mrDocEditPage.fireEvent('editorOpened', operation.result.dataList);
//        console.log(mrDocEditPage.medicalRecord);
        if(mrs.length>0){
        	var params={
                    'objectId':'iemrEditorRead',
                    'sstream':mrs[0].fileData,
                    'mr_mode':1,
                    'readonly':false,
                    'hidden':true,
                    'callBackAction':'mergeAll'
            };
            self.insertWriter(mrDocEditPage,params);
        }
        
    },
    addPrepareOperations: function(operations,filePk) {
        var url = 'mr/basefile/'+filePk;
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            method: METHODS.METHOD_GET,
            scope: this,
            success: this.onAddSuccess
        };
        operations.push(operation);
    },
    onAddSuccess: function(operation) {
        var self=this;
        var data=operation.result.data;
        var mrDocEditPage=self.getOwner();
        var params={
                'objectId':'iemrEditor',
                'sstream':data.odtFile,
                'mr_mode':1,
                'readonly':'false',
                'callBackAction':'editorCallBackAction'
        };
        this.insertWriter(mrDocEditPage,params);
    },
    
    refreshTop:function(medicalRecord){
    	
    	 var canvas = Xap.getCanvas();
         canvas.fireEvent("updatePatient",{patient:medicalRecord.amr});
    }
    
});

Ext.define('iih.mr.wr.mr.action.MrDocFinishWriteAction', {
    extend:  Xap.ej.action.ServiceInvocation ,
    
    doExecute: function(context) {
		this.prepareOperations(context.operations);
	},
    prepareOperations: function(operations) {
        var url = this.url;
        url = url+'/'+IMER_GLOBAL.encounterSn;  
        var mclass = null;
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: mclass,
            method: METHODS.METHOD_CREATE,
            condition: null,
            scope: this,
            success: this.onSuccess
        };
        operations.push(operation);
    },
    onSuccess: function(operation) {
    	XapMessageBox.info('操作成功!');
        var owner = this.getOwner();
        var deleteBtn=owner.down('toolbar button[method=delete]');
        var createBtn=owner.down('toolbar button[method=create]');
        var finishBtn=owner.down('toolbar button[method=finish]');
		deleteBtn.setDisabled(true);
		createBtn.setDisabled(true);
		finishBtn.setDisabled(true);
		
		var patient={
        	pk: IMER_GLOBAL.encounterSn
		};
		var canvas = Xap.getCanvas();
		canvas.fireEvent("updatePatient",{patient:patient});
		
        var chain = owner.getActionChain('refresh');
        if(chain) {
            chain.execute();
        }
    }
});

Ext.define('iih.mr.wr.mr.action.MrDocListDeleteAction', {
    extend:  Xap.ej.action.ServiceInvocation ,
    
    doExecute: function(context) {
		var datas = {'mrPk':context.mrPk,'encounterPk':context.encounterSn,'updateCount':context.updateCount};
	    this.prepareOperations(context.operations,datas);
	},
    prepareOperations: function(operations,datas) {
        var url = this.url;
        url += '/' + datas.mrPk;       
        var mclass = null;
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: mclass,
            method: METHODS.METHOD_DELETE,
            condition: null,
            data:datas,
            scope: this,
            success: this.onSuccess
        };
        operations.push(operation);
    },
    onSuccess: function(operation) {
        var owner = this.getOwner();
        var chain = owner.getActionChain('init');
        if(chain) {
            chain.execute();
        };
        var chainTask = owner.getActionChain('searchTask');
        if(chainTask) {
            chainTask.execute();
        };
    }
});

Ext.define('iih.mr.wr.mr.action.MrDocListFreshAction', {
    extend:  Xap.ej.action.ServiceInvocation ,
    
    execute: function(context) {
        var owner = this.getOwner();
        var chain = owner.getActionChain('init');
        if(chain) {
            chain.execute();
        }
    }
});

Ext.define('iih.mr.wr.mr.action.MrDocListGetSelectAction', {
    extend:  Xap.ej.action.ServiceInvocation ,
    
    doExecute: function(context) {
		var self=this;  
		var rb = this.getBlock('result');
		var grid = rb.down('xapgrid[name=mrDocGrid]'); 
		var selected=grid.getSelectionModel().getSelection();
		if(selected.length > 0){
			XapMessageBox.confirm2('是否确定删除？', function(id){
				if(id=='yes'){
					var owner = self.getOwner();
			        var chain = owner.getActionChain('delete');
			        if(chain) {
			            chain.execute({
			            	mrPk:selected[0].data.mrPk,
			            	encounterPk:IMER_GLOBAL.encounterSn,
			            	updateCount:selected[0].raw.updateCount
			            });
			        }
				}
			});
		}else {
			XapMessageBox.info("请选择一条记录！");
		}; 
	}
});

Ext.define('iih.mr.wr.mr.action.MrDocListInitAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
    /*
	    * @Override
	    */
	    execute: function(context) {
	    	/*var owner = this.getOwner();
	        var chain = owner.getActionChain('btnUsable');
	        if(chain) {
	            chain.execute();
	        }*/
	        var encounterSn = IMER_GLOBAL.encounterSn;
	        var me=this;
	        this.prepareOperations(context.operations,encounterSn);
	    },
	    /*
	     * @return {mclass: '', condition: {}}
	     */
	    prepareOperations: function(operations,encounterSn) {
	         
	         var url = this.url+'?encounterPk='+encounterSn;
	         var operation = {
	             url: url,
	             method: 'get',
	             scope: this,
	             success: this.onSuccess
	         };
	         operations.push(operation);
	     },
	     onSuccess: function(operation) {
	         var block = this.getBlock('result');
	         block.setData(operation.result.dataList);
	     }
});

Ext.define('iih.mr.wr.mr.action.MrDocListSelectAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	doExecute: function(context) {
		var self=this;  
		var rb = this.getBlock('result');
		var grid = rb.down('xapgrid[name=mrDocGrid]'); 
		var selected=grid.getSelectionModel().getSelection();
		var mrPk = selected[0].data.mrPk;
		self.prepareOperations(context.operations,mrPk);
	},
    prepareOperations: function(operations,mrPk) {
    	
        var url = this.url;
        url += '/'+mrPk+'?withFile=false';  
        
        var mclass = null;
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: mclass,
            method: 'get',
            condition: null,
            scope: this,
            success: this.onSuccess
        };
        operations.push(operation);
    },
    onSuccess: function(operation) {
    	var canDelete = operation.result.data.canDelete;
    	var owner = this.getOwner();
        var deleteBtn=owner.down('toolbar button[method=delete]');
    	if(canDelete!=1){
			deleteBtn.setDisabled(true);
    	}else{
    		deleteBtn.setDisabled(false);
    	}
    }
});

Ext.define('iih.mr.wr.mr.action.MrDocNeatPrintAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	 * @Override
	 */
	execute: function(context) {
	    var plugin = document.getElementById('iemrEditor');
	    if(plugin.IsModified()){
            Ext.MessageBox.alert('提示', '当前修改未保存，请保存后重试！');
        }else{
        	var tabList = plugin.GetTables();
	    	var arrayObj = new Array(0);
	    	var emptyParagNames = new Array(0);
	    	if(tabList){                	    		
	    		for(var i=0;i<tabList.length;i++){
    	    		var tabName = tabList[i];
    	    		var tabContent =plugin.ExportTable(tabName);
    	    		if(!(tabContent&&tabContent.length>0)){
    	    			arrayObj.push(tabName);
    	    		}
    	    	}
	    	}                	    	
	    	plugin.PrintEx(emptyParagNames,arrayObj);
        }
    }
});

Ext.define('iih.mr.wr.mr.block.MrDocPropertyEditBlock',{
	extend :  Xap.ej.block.FormBlock ,

	           
		                                 
                                         
                                        
                                                    
	  
	alias:'widget.mrdocpropertyeditblock',
	/*
     * layout:{ type: 'table', columns: 2, //width: 1024, tableAttrs: { border:
     * 0, cellpadding: 4, // cellspacing: 1, width: '100%' }, tdAttrs: { valign:
     * 'left' }},
     */
	layout:{
		type: 'table',
		columns: 2,
		tableAttrs: {
			border: 0,
			width: '100%'
		},
        tdAttrs: {
            valign: 'left'
        }
	},
	buttons:[{
            xtype: "button",
            name: 'confimUpPro',
            method:'confimUpPro',
            hidden:true,
            text: '确认',
            iconCls: 'icon-OK'
        },{
            xtype: "button",
            name: 'close',
            hidden:true,
            method:'close',
            text: '关闭',
            iconCls: 'icon-close'
        },{
            xtype: "button",
            name: 'cancel',
            hidden:true,
            method:'cancel',
            text: '取消',
            iconCls: 'icon-cancel'
        }],
	
	items: [{
		xtype:'xaptextfield',
		name:'mrNm',
		fieldLabel:'病 历 名 称',
		labelAlign:'left',
		labelWidth:80,
		width:513,
		colspan:2,
		padding:'5 0 0 30'
	},{
		xtype:'xaptextfield',
		name:'mrType',
		fieldLabel:'病 历 类 型',
		labelWidth:80,
		width:230,
//		colspan:2,
		padding:'5 0 0 30'
	},{
		xtype:'datetimefield',
		name:'logicSmtDate',
		fieldLabel:'业 务 时 间',
		labelAlign:'right',
		labelWidth:80,
		width:230,
//		colspan:2,
		padding:'5 0 0 10'
	},{
		xtype:'xapcombobox',
		name:'higherLvlEmpId',
		fieldLabel:'查 房 医 师',
		labelAlign:'right',
		editable:false,
		readOnly:true,
		labelWidth:80,
		width:230,
		queryMode: 'local',
		displayField: 'name',
		valueField: 'id',
		padding:'5 0 0 30'
	},{
		xtype:'xaptextfield',
		name:'statusName',
		fieldLabel:'病 历 状 态',
		labelWidth:80,
		width:230,
//		colspan:2,
		padding:'5 0 0 10'
	}/*,{
		xtype:'xaptextfield',
		name:'qaStatusName',
		fieldLabel:'终末质控状态',
		labelWidth:80,
		width:230,
//		colspan:2,
		padding:'5 10 0 0'
	}*/,{
		xtype:'xaptextfield',
		name:'completedFlag',
		fieldLabel:'是 否 完 成',
		labelWidth:80,
		width:230,
//		colspan:2,
		padding:'5 0 0 30'
	},{
		xtype:'xaptextfield',
		name:'signLevelName',
		fieldLabel:'审 签 级 别',
		labelWidth:80,
		width:230,
//		colspan:2,
		padding:'5 0 0 10'
	},{
		xtype:'xapdisplayfield',
		name:'templeName',
		fieldLabel:'模 板 名 称',
		labelAlign:'right',
		labelWidth:80,
		width:230,
//		colspan:2,
		padding:'5 0 0 30',
		renderer:function(value){
			if(value){
				return "<a class='link' href='#' id='temp'>"+value+"</a>";
			}
	    }
	},{
		xtype:'datetimefield',
		name:'logicSubmitTime',
		fieldLabel:'逻辑提交时间',
		labelAlign:'right',
		labelWidth:80,
		width:230,
//		colspan:2,
		padding:'5 0 0 10'
	},{
		xtype:'xaptextfield',
		name:'submitName',
		fieldLabel:'提    交    人',
		labelWidth:80,
		width:230,
//		colspan:2,
		padding:'5 0 0 30'
	},{
		xtype:'datetimefield',
		name:'submitDate',
		fieldLabel:'提 交 时 间',
		labelAlign:'right',
		labelWidth:80,
		width:230,
//		colspan:2,
		padding:'5 0 0 10'
	},{
		xtype:'xaptextfield',
		name:'deptName',
		fieldLabel:'所 属 科 室',
		labelWidth:80,
		width:230,
//		colspan:2,
		padding:'5 0 0 30'
	},{
		xtype:'xaptextfield',
		name:'treatDoctorName',
		fieldLabel:'经 治 医 师',
		labelWidth:80,
		width:230,
//		colspan:2,
		padding:'5 0 0 10'
	},{
		xtype:'xapcombobox',
		name:'masterDoctorName',
		labelAlign:'right',
		queryMode: 'local',
		displayField: 'name',
		editable:false,
		valueField: 'id',
		fieldLabel:'主 治 医 师',
		labelWidth:80,
		width:230,
//		colspan:2,
		padding:'5 0 0 30'
	},{
		xtype:'datetimefield',
		name:'mastDoctorDate',
		labelAlign:'right',
		fieldLabel:'二级审签时间',
		labelWidth:80,
		width:230,
//		colspan:2,
		padding:'5 0 0 10'
	},{
		xtype:'xapcombobox',
		name:'dirDoctorName',
		labelAlign:'right',
		queryMode: 'local',
		displayField: 'name',
		valueField: 'id',
		name:'dirDoctorName',
		editable:false,
		fieldLabel:'主 任 医 师',
		labelWidth:80,
		width:230,
//		colspan:2,
		padding:'5 0 0 30'
	},{
		xtype:'datetimefield',
		name:'dirDoctorDate',
		labelAlign:'right',
		fieldLabel:'三级审签时间',
		labelWidth:80,
		width:230,
//		colspan:2,
		padding:'5 0 0 10'
	},{
		xtype:'xaptextfield',
		name:'createUserName',
		fieldLabel:'创&nbsp;&nbsp;建&nbsp;&nbsp;人',
		labelWidth:80,
		width:230,
//		colspan:2,
		padding:'5 0 0 30'
	},{
		xtype:'datetimefield',
		name:'createTime',
		fieldLabel:'创 建 时 间',
		labelAlign:'right',
		labelWidth:80,
		width:230,
//		colspan:2,
		padding:'5 0 0 10'
	},{
		xtype:'xaptextfield',
		name:'lastUpdateUserName',
		fieldLabel:'最后修改人',
		labelWidth:80,
		width:230,
//		colspan:2,
		padding:'5 0 0 30'
	},{
		xtype:'datetimefield',
		name:'lastUpdateTime',
		fieldLabel:'最后修改时间',
		labelAlign:'right',
		labelWidth:80,
		width:230,
//		colspan:2,
		padding:'5 0 0 10'
	}],
	setData: function(data) {
        this.callParent(arguments);
    },
    getData: function() {
        this.callParent(arguments);
    }
})
Ext.define('iih.mr.wr.mr.action.MrTemplatePropertyInitAction', {
	extend :  Xap.ej.action.PopAction ,

	                                                              
	/*
	 * @Override
	 */
	execute : function(context) {
		var mr = this.getOwner().mr;
		var enTypeCode;
		var enTypeCode;
		if(IMER_GLOBAL.portal.code == IMER_CONSTANT.PORTAL_CD_1 || IMER_GLOBAL.portal.code == IMER_CONSTANT.PORTAL_CD_8 ){
			enTypeCode = 'ENM01.01';
		}else if(IMER_GLOBAL.portal.code == IMER_CONSTANT.PORTAL_CD_2){
			enTypeCode = 'ENM01.04';
		}
		this.getOwner().enTypeCode = enTypeCode;
		var templeCode = mr.templeCode;
		var config = {
			modal : true,
			height : 280,
			width : 530,
			title : '模板属性',
			contentConfig : {
				xtype : 'mrTemplatePropertyEditView',
				initChain : {
					name : 'init',
					context : {
						customerData : 'readOnly',
						verMrTplKc : templeCode,
						sourceView : this.getOwner()
					}
				}
			}
		};
		this.callParent([ config ]);
	}
});

Ext.define('iih.mr.wr.mr.action.MrDocPropertyEditInitComboxAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override
	*/
	execute: function(context) {
        this.init(context.operations);
    },
    init: function(operations) {
        var url = this.url+'?deptCd='+IMER_GLOBAL.department.code;
        var operation = {
            url: url,
            method: 'get',
            scope: this,
            success: this.onSuccess
        };
        operations.push(operation);
    },
    onSuccess: function(operation) {
//    	console.log('aaaaaaaa');
//    	console.log(operation.result.data.supDoctors);
    	var mr=this.getOwner().mr;
//    	console.log(mr);
        var block = this.getOwner().getBlock('content');
        var typeCode = mr.typeCode;
        if("MRM16.19"==typeCode||"MRM16.20"==typeCode){
        	var higherLvlEmpId=block.down('[name=higherLvlEmpId]');
            higherLvlEmpId.setReadOnly(false);
            if(operation.result.data.supDoctors){
            	this.getOwner().init=1;
                higherLvlEmpId.setData(operation.result.data.supDoctors);
                higherLvlEmpId.setValue(mr.superiorDoctorId);
            }
        }
        var masterDoctorName=block.down('[name=masterDoctorName]');
        masterDoctorName.setReadOnly(false);
        if(operation.result.data.twoSignLevelDoctors){
        	masterDoctorName.setData(operation.result.data.twoSignLevelDoctors);
        	masterDoctorName.setValue(mr.mastDoctorCd);
        }
        var dirDoctorName=block.down('[name=dirDoctorName]');
        dirDoctorName.setReadOnly(false);
        if(operation.result.data.threeSignLevelDoctors){
        	dirDoctorName.setData(operation.result.data.threeSignLevelDoctors);
        	dirDoctorName.setValue(mr.dirDoctorCd);
        }
    }
});

Ext.define('iih.mr.wr.mr.view.MrDocPropertyEditView',{
	extend :  Xap.ej.stl.view.SingleRecordEditTemplate ,

	           
	                                                
	                                                           
	                                                  
	                                            
	                                            
	  

	alias:'widget.mrdocpropertyeditview',
	
	layout:'fit',
	
	xapConfig: {
		blocks: {
		    'content': {
                xclass: 'iih.mr.wr.mr.block.MrDocPropertyEditBlock',
                height:150
            }
		},
		actions: {
		    'init': { 
		    	xclass: 'iih.mr.wr.mr.action.InitMrDocPropertyEditAction',
		        url:'mr/create/init',
		        blocks: {
		            content:'content'
		        }
		    },
		    'initjobTitle': { 
                xclass: 'iih.mr.wr.mr.action.InitjobTitleAction',
                blocks: {
                    content:'content'
                }
            }/*,
		    'initCombox': { 
                xclass: 'iih.mr.wr.mr.action.InitComboxAction',
                blocks: {
                    content:'content'
                }
            }*/,
            'confimUpPro':{
                xclass:'iih.mr.wr.mr.action.ModifyMrProAction',
                url:'mr',
                blocks:{
                    content:'content'
                }
            },
		    'cancel': {
		        xclass: 'iih.mr.wr.mr.action.CancelCreateMrDocAction',
		        //url:'cancelTemplatePropertyEdit',
		        blocks: {
		            content: 'content'
		        }
		    },
            'templateProperty': {
                xclass: 'iih.mr.wr.mr.action.MrTemplatePropertyInitAction',
                url:'mr/tpl/template',
                blocks: {
                    content: 'content'
                }
            },
            'mrDocPropertyEditInitComboxAction': {
                xclass: 'iih.mr.wr.mr.action.MrDocPropertyEditInitComboxAction',
                url:'/app/sup/doctors',
                blocks: {
                    content: 'content'
                }
            }
		},

		chains: {
		    'init': ['init'],
		    'initjobTitle': ['initjobTitle'],
            'confimUpPro': ['confimUpPro'],
            'mrDocPropertyEditInitComboxAction': ['mrDocPropertyEditInitComboxAction'],
            'cancel': ['cancel'],
            'templateProperty':['templateProperty']
		},

		connections: {
		    'content':[/*{
                event:'afterrender',
                chain:'init'
            },*/{    
                //确认按钮（修改病历属性）
                selector: 'button[method=confimUpPro]',
                event: 'click',
                chain: 'confimUpPro'
            },{    
                //关闭按钮
                selector: 'button[method=close]',
                event: 'click',
                chain: 'cancel'
            },{    
                //取消按钮
                selector: 'button[method=cancel]',
                event: 'click',
                chain: 'cancel'
            },{
                selector: 'xapdisplayfield[name=templeName]',
                event: 'click',
                chain: 'templateProperty'
            },{    
                //上级医师
                selector: 'xapcombobox[name=higherLvlEmpId]',
                event: 'change',
                chain: 'initjobTitle'
            }]
		}
	}
})
Ext.define('iih.mr.wr.mr.action.MrDocPropertyAction', {
    extend:  Xap.ej.action.PopAction ,

                                                          
    
    execute: function(context) {
        var rb = this.getOwner().getBlock('right');
//        var context={mrSn:null};
        if(undefined!=rb){//从病历文书列表进来
        	context.mrDocListView=this.getOwner();
            var grid = rb.down('xapgrid[name=mrDocGrid]'); 
            var selected=grid.getSelectionModel().getSelection();
            if (selected.length > 0) {
                context.mrSn=selected[0].data.mrPk;
            }else {
                XapMessageBox.info("请选择一条记录！");
            };
        }else{//从编辑器菜单进来
            var mrDocEditView=this.getOwner();
//          console.log('rrrrrrrr');
//          console.log(mrDocEditView);
            context.mrSn=mrDocEditView.mrSn;
            context.mrDocEditView=mrDocEditView,
            context.from='editor';
            }
            if(null!=context.mrSn){
                var config = {
                    modal: true,           
                    width: 600,
                    height:430,
                    title :'病历属性',
                    contentConfig: {
                        xtype:'mrdocpropertyeditview',
                        initChain: {
                            name: 'init',
                            context: context
                        }
                    }
                };
                this.callParent([config]);
            }
    	}
});

Ext.define('iih.mr.wr.mr.action.MrDocQaEditAction', {
	extend:  iih.mr.action.editor.EmrEditorOperatorAction ,
	
	                                                 
	/*
	* @Override
	*/
	execute: function(context) {
	    Ext.useShims=true;
    	var operations = context.operations;
    	if(!operations) {
            return;
        }
    	var opType=this.getOwner().opType;
    	var rs = this.getBlock('content');   
    	this.addEditorEvent(rs);
    	if(opType!=undefined){
            if(opType=='reform'){//创建新病历
            	this.showProgress();
                var mrSn=this.getOwner().mrSn;
                this.openPrepareOperations(operations, mrSn);
            }else{
            	Ext.Msg.alert('提示','opType参数错误!');
            }
        }
    },
    openPrepareOperations: function(operations, mrSn) {
        var url = this.url+'/'+mrSn+'?withFile=true';
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            method: METHODS.METHOD_GET,
            scope: this,
            success: this.onOpenSuccess
        };
        operations.push(operation);
    },
    onOpenSuccess: function(operation) {
        var self=this;
        var medicalRecord=operation.result.data;
        //设置整改标志位1，这样后台保存时不验证是否有保存权限
        medicalRecord.reformFlag=true;
        var mrDocEditPage=this.getOwner();
        mrDocEditPage.medicalRecord=medicalRecord;
//        console.log(mrDocEditPage.medicalRecord);
        var params={
                'objectId':'iemrEditor',
                'sstream':medicalRecord.fileData,
                'mr_mode':1,
                'readonly':false,
                'callBackAction':'editorCallBackAction'
        };
        this.insertWriter(mrDocEditPage,params);
    }
});

Ext.define('iih.mr.wr.mr.action.MrDocRejectAction', {
    extend:  Xap.ej.action.ServiceInvocation ,
    
    /*
     * @Override
     */
    execute: function(context) {
        var operations = context.operations;
        if(!operations) {
            return;
        }
        var plugin = document.getElementById('iemrEditor');
        plugin.EnableOCX(false);
        var opType=this.getOwner().opType;
        if(opType!=undefined){
            var medicalRecord=this.getOwner().medicalRecord;
            var signEleId='';
            if('MRM02.03'==medicalRecord.userSignLevelCode){
            	signEleId='MR.M.013.D.26';// 清空一级签名
            }else if('MRM02.04'==medicalRecord.userSignLevelCode){
            	signEleId='MR.M.013.D.25';// 清空二级签名
            }
            if(''!=signEleId){
            	 plugin.ClearMacroValue(signEleId);// 清空签名
            }
            plugin.SwitchRedline(0, '');
            plugin.ShowRedline(0);
            medicalRecord.fileData=plugin.SaveToString();
            if(opType=='new'){
                Ext.Msg.alert("提示","提示","只有已经提交的病历才可驳回！");
            }else if(opType=='open'){
            	this.showSubmitProgressBar('iemrEditor');
                this.openPrepareOperations(operations, medicalRecord);
            }
        }
    },
    
    openPrepareOperations: function(operations,medicalRecord) {
        var METHODS = this.getInvocationMethods();
        var url=this.url+'/'+medicalRecord.mrPk;
        var operation = {
            url: url,
            method: METHODS.METHOD_CREATE,
            data:medicalRecord,
            scope: this,
            success: this.onOpenSuccess,
            fail: this.onFail
        };
        operations.push(operation);
    },
    onOpenSuccess: function(operation) {
        var plugin = document.getElementById('iemrEditor');
        plugin.SetReadOnly();
        plugin.EnableOCX(true);
        this.getOwner().medicalRecord=operation.result.data;
        //设置编辑器按钮状态
		var disabledOfficeToolBarAction=this.getOwner().getActionChain("disabledOfficeToolBarAction");
		disabledOfficeToolBarAction.execute();
    },
    onFail: function(operation) {
        Ext.Msg.alert("提示",'驳回失败!');
    }
});

Ext.define('iih.mr.wr.mr.action.MrDocRevokeAction', {
    extend:  Xap.ej.action.ServiceInvocation ,
    
    /*
     * @Override
     */
    execute: function(context) {
        var operations = context.operations;
        if(!operations) {
            return;
        }
        this.showSubmitProgressBar('iemrEditor');
        var plugin = document.getElementById('iemrEditor');
        plugin.EnableOCX(false);
        var opType=this.getOwner().opType;
        plugin.SetCommandEnable('com.founder.iemr.editor.toolbar:emrRevoke',false);
        if(opType!=undefined){
            var medicalRecord=this.getOwner().medicalRecord;
            plugin.EditDocument();//设置为可编辑模式（因只读状态对编辑器进行的修改SaveToString无法得到）
            plugin.SetModified(true);
            //            plugin.SwitchRedline(0, IMER_GLOBAL.user.code);//停止记录修订痕迹
            plugin.ClearMacroValue('MR.M.013.D.26');// 清空一级签名
//            plugin.SetModified(true);
            plugin.EnableOCX(true);
            medicalRecord.fileData=plugin.SaveToString();
//            plugin.SetReadOnly();
            if(opType=='new'){
                Ext.Msg.alert("提示","只有已经提交的病历才可撤回！");
            }else if(opType=='open'){
                this.openPrepareOperations(operations, medicalRecord);
            }
/*            var data={
                    'odtFile':plugin.SaveToString()
                    };
            data.actionType='revoke';
            if(opType=='new'){
                
            }else if(opType=='open'){
                data.mrSn=this.getOwner().mrSn;
                this.openPrepareOperations(operations, data);
            }*/
        }
    },
    
    openPrepareOperations: function(operations,medicalRecord) {
        var METHODS = this.getInvocationMethods();
        var url=this.url+'/'+medicalRecord.mrPk;
        var operation = {
            url: url,
            method: METHODS.METHOD_DELETE,
            data:medicalRecord,
            scope: this,
            success: this.onOpenSuccess,
            fail: this.onFail
        };
        operations.push(operation);
    },
    onOpenSuccess: function(operation) {
    	this.getOwner().medicalRecord=operation.result.data;
//        plugin.EditDocument();
   		var disabledOfficeToolBarAction=this.getOwner().getActionChain("disabledOfficeToolBarAction");
		disabledOfficeToolBarAction.execute();
    },
    onFail: function(operation) {
        Ext.Msg.alert("提示",'撤回失败!');
    }
});

Ext.define('iih.mr.wr.mr.action.MrDocSaveAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	 * @Override
	 */
	execute: function(context) {
	    var operations = context.operations;
        if(!operations) {
            return;
        }
        if(context.callback){
        	this.getOwner().callback=context.callback;
        }
	    var plugin = document.getElementById('iemrEditor');
	    plugin.EnableOCX(false);
	    plugin.SetCommandEnable('com.founder.iemr.editor.toolbar:emrSave', false);
	    plugin.SetCommandEnable('com.founder.iemr.editor.toolbar:emrSubmit',false);
	    plugin.SetCommandEnable('com.founder.iemr.editor.toolbar:emrDocDelete',false);
        plugin.SetCommandEnable('com.founder.iemr.editor.toolbar:emrDocProperty',false);
//	    plugin.UpdateToolbar();
	    var opType=this.getOwner().opType;
	    if(opType!=undefined){
	        var medicalRecord=this.getOwner().medicalRecord;
	        medicalRecord.fileData=plugin.SaveToString();
//	        medicalRecord.docContent=plugin.ExportText();
//	        medicalRecord.actionType='save';
	        var referenceElem=plugin.GetSourceReferenceElem();
//	        console.log(referenceElem);
	        if(referenceElem.length>0){
	            var referenceElemJson=JSON.parse(referenceElem);
	            medicalRecord.referenceElem=referenceElemJson;//得到文档中的引用元素及值
	        }
	        this.showSubmitProgressBar('iemrEditor');
//	        console.log('------********-------'+opType);
            if(opType=='new'){
                this.addPrepareOperations(operations,medicalRecord);
            }else if(opType=='open'){
            	if(Ext.isEmpty(medicalRecord.mrPk,false)){
//            		console.log('-------------'+opType);
            		this.addPrepareOperations(operations,medicalRecord);
            	}else{
            		this.openPrepareOperations(operations, medicalRecord);
            	}
            }else if(opType=='reform'){
                this.openPrepareOperations(operations, medicalRecord);
            }else{
            	Ext.Msg.alert('提示','opType：【'+opType+'】不符合要求，只能为【new】、【open】、【reform】！');
            }
        }else{
        	Ext.Msg.alert('提示','opType不能为空！');
        }
    },
    
    addPrepareOperations: function(operations,data) {
        var METHODS = this.getInvocationMethods();
        var url=this.url;
        var operation = {
            url: url,
            method: METHODS.METHOD_CREATE,
            data:data,
            scope: this,
            success: this.onAddSuccess,
            fail: this.onFail
        };
        operations.push(operation);
    },
    
    openPrepareOperations: function(operations,medicalRecord) {
        var METHODS = this.getInvocationMethods();
        var url=this.url+'/'+medicalRecord.mrPk;
        var operation = {
            url: url,
            method: METHODS.METHOD_UPDATE,
            data:medicalRecord,
            scope: this,
            success: this.onOpenSuccess,
            fail: this.onFail
        };
        operations.push(operation);
    },
    onOpenSuccess: function(returnData) {
        var plugin = document.getElementById('iemrEditor');
        plugin.EnableOCX(true);
        plugin.SetCommandEnable('com.founder.iemr.editor.toolbar:emrSave', true);
        plugin.SetCommandEnable('com.founder.iemr.editor.toolbar:emrSubmit',true);
        this.getOwner().medicalRecord=returnData.result.data;
        this.callback();
//        plugin.UpdateToolbar();
//        Ext.Msg.alert('提示','保存成功!');
    },
    onAddSuccess: function(returnData) {
        var plugin = document.getElementById('iemrEditor');
        plugin.EnableOCX(true);
        this.getOwner().opType='open';
        this.getOwner().medicalRecord=returnData.result.data;
        this.getOwner().mrSn=returnData.result.data.mrPk;
        plugin.SetCommandEnable('com.founder.iemr.editor.toolbar:emrSubmit',true);
        plugin.SetCommandEnable('com.founder.iemr.editor.toolbar:emrSave', true);
        plugin.SetCommandEnable('com.founder.iemr.editor.toolbar:emrDocDelete',true);
        plugin.SetCommandEnable('com.founder.iemr.editor.toolbar:emrDocProperty',true);
        this.callback();
//        plugin.UpdateToolbar();
//        Ext.Msg.alert('提示','保存成功!');
    },
    onFail: function(operation) {
    	 plugin.SetCommandEnable('com.founder.iemr.editor.toolbar:emrSave', true);
    	 plugin.UpdateToolbar();
        Ext.Msg.alert('提示','保存失败!');
    },
    callback: function() {
    	if(this.getOwner().callback){
        	var callback=this.getOwner().callback;
        	callback();
        }
   }
});

Ext.define('iih.mr.wr.mr.action.MrDocSaveAsTemplateAction', {
	extend:  Xap.ej.action.PopAction ,
	                                                           
	/*
	 * @Override
	 */
	execute: function(context) {
	    var plugin = document.getElementById('iemrEditor');
	    var opType=this.getOwner().opType;
	    if(plugin.IsModified()||'new'==opType){
	    	Ext.Msg.alert('提示','请先保存后在进行此操作!');
	    }else{
	    	var view = this.getOwner();
		    view.enTypeCode = 'ENM01.04';
		    var config = {         
	                modal: true,            
	                height: 280,
	                width:  530,
	                title :'另存为模板',
	                contentConfig: {
	                    xtype: 'mrTemplatePropertyEditView',  
	                    initChain: {
	                        name: 'init',
	                        context: {
	                        	plugin:plugin,
	                            customerData: 'mrSaveAs',
	                            verMrTplKc: view.medicalRecord.templeCode,
	                            sourceView: view
	                        }
	                    }
	                }
	    		};
	    	this.callParent([config]); 
	    }
    }
});

Ext.define('iih.mr.wr.mr.action.MrDocSortTreeInitAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	    execute: function(context) {
	    	this. showLoading();
	    	var owner = this.getOwner();
	        var chain = owner.getActionChain('btnUsable');
	        if(chain) {
	            chain.execute();
	        }
	    	var encounterSn = IMER_GLOBAL.encounterSn;
	        this.prepareOperations(context.operations,encounterSn);
	    },
	    prepareOperations: function(operations,encounterSn) {
	         
	         var url = this.url+'?encounterPk='+encounterSn;
	         var operation = {
	             url: url,
	             method: 'get',
	             scope: this,
	             success: this.onSuccess
	         };
	         operations.push(operation);
	     },
	     onSuccess: function(operation) {
	         var block = this.getBlock('result'); 
	         // TODO 数据格式就这样了？
	         if(operation.result.data){
	         	 block.setData(operation.result.data.children);
		         var tree = block.down('xaptree'); 
		         //var node = tree.getRootNode().childNodes[0];
		         
		         //tree.getSelectionModel().select(0,false,false);
		         //var selected=tree.getSelectionModel().getSelection();
		         //tree.getStore().getAt(0);
	         }else{
	        	 block.setData(null);
	         }
	     }
});

Ext.define('iih.mr.wr.mr.action.MrDocStartApproveAction', {
    extend:  Xap.ej.action.ServiceInvocation ,
    
    /*
     * @Override
     */
    execute: function(context) {
        var operations = context.operations;
        if(!operations) {
            return;
        }
        var plugin = document.getElementById('iemrEditor');
        var opType=this.getOwner().opType;
        plugin.SetCommandEnable('com.founder.iemr.editor.toolbar:emrStartApprove',false);
        if(opType!=undefined){
            var medicalRecord=this.getOwner().medicalRecord;
//            medicalRecord.fileData=plugin.SaveToString();
            if(opType=='new'){
                Ext.Msg.alert("提示","提示","只有已经提交的病历才开始审签！");
            }else if(opType=='open'){
            	this.showSubmitProgressBar('iemrEditor');
                this.openPrepareOperations(operations, medicalRecord);
            }
        }
    },
    
    openPrepareOperations: function(operations,medicalRecord) {
        var url=this.url+'/'+medicalRecord.mrPk;
        var operation = {
            url: url,
            method: 'post',
            data:medicalRecord,
            scope: this,
            success: this.onOpenSuccess,
            fail: this.onFail
        };
        operations.push(operation);
    },
    onOpenSuccess: function(operation) {
    	this.getOwner().medicalRecord=operation.result.data;
    	var self=this;
//    	setTimeout(function(){
    	var emrSignDisposeAction=self.getOwner().getActionChain("emrSignDispose");
        emrSignDisposeAction.execute();
//    	},1000);
   		var disabledOfficeToolBarAction=this.getOwner().getActionChain("disabledOfficeToolBarAction");
		disabledOfficeToolBarAction.execute();
    },
    onFail: function(operation) {
        Ext.Msg.alert("提示",'开始审签失败!');
    }
});

Ext.define('iih.mr.wr.mr.action.MrDocSubmitAction', {
    extend:  Xap.ej.action.ServiceInvocation ,
    
    /*
     * @Override
     */
    execute: function(context) {
        var operations = context.operations;
        if(!operations) {
            return;
        }
        var userName=context.user.name;
        var emrSubmit = 'com.founder.iemr.editor.toolbar:emrSubmit';//提交
        var plugin = document.getElementById('iemrEditor');
        plugin.EnableOCX(false);
        plugin.SetCommandEnable('com.founder.iemr.editor.toolbar:emrSubmit',false);
//        var certId=plugin.CA_GetCertId();
        var opType=this.getOwner().opType;
        if(opType!=undefined){
        	this.showSubmitProgressBar('iemrEditor');
           	plugin.SetCommandEnable(emrSubmit,false);
//           	plugin.UpdateToolbar();
            var medicalRecord=this.getOwner().medicalRecord;
            var macroIdOld='MR.M.013.D.26';
            plugin.ImportMacroValue(macroIdOld, userName);//进行签名
            medicalRecord.fileData=plugin.SaveToString();
            var referenceElem=plugin.GetSourceReferenceElem();
//	        console.log(referenceElem);
	        if(referenceElem.length>0){
	            var referenceElemJson=JSON.parse(referenceElem);
	            medicalRecord.referenceElem=referenceElemJson;//得到文档中的引用元素及值
	        }
            if(opType=='new'){
                this.addPrepareOperations(operations,medicalRecord);
            }else if(opType=='open'){
                this.openPrepareOperations(operations, medicalRecord);
            }
        }
    },
    
    addPrepareOperations: function(operations,medicalRecord) {
    	medicalRecord.statusCode='MRM04.02';
        var METHODS = this.getInvocationMethods();
        var url='mr';
        var operation = {
            url: url,
            method: METHODS.METHOD_CREATE,
            data:medicalRecord,
            scope: this,
            success: this.onAddSuccess,
            fail: this.onFail
        };
        operations.push(operation);
    },
    
    openPrepareOperations: function(operations,medicalRecord) {
        var METHODS = this.getInvocationMethods();
//        console.log(medicalRecord);
        var url=this.url+'/'+medicalRecord.mrPk;
        var operation = {
            url: url,
            method: METHODS.METHOD_CREATE,
            data:medicalRecord,
            scope: this,
            success: this.onOpenSuccess,
            fail: this.onFail
        };
        operations.push(operation);
    },
    onOpenSuccess: function(returnData) {
        var plugin = document.getElementById('iemrEditor');
        this.getOwner().medicalRecord=returnData.result.data;
        plugin.SetReadOnly();

        var owner = this.getOwner();
        var chain = owner.getActionChain('disabledOfficeToolBarAction');
        if(chain) {
            chain.execute();
        }
        plugin.EnableOCX(true);
//        Ext.Msg.alert('提示','提交成功!');
    },
    onAddSuccess: function(returnData) {
        this.getOwner().opType='open';
        this.getOwner().mrSn=returnData.result.data.mrPk;
        this.getOwner().medicalRecord=returnData.result.data;
        var plugin = document.getElementById('iemrEditor');
        plugin.SetCommandEnable('com.founder.iemr.editor.toolbar:emrDocProperty',true);
        //审签后设置编辑器为只读
        plugin.SetReadOnly();
        //更改按钮状态
        var owner = this.getOwner();
        var chain = owner.getActionChain('disabledOfficeToolBarAction');
        if(chain) {
            chain.execute();
        }
        plugin.EnableOCX(true);
//        plugin.UpdateToolbar();
//        Ext.Msg.alert('提示','提交成功!');
    },
    onFail: function(operation) {
        Ext.Msg.alert('提示','提交失败!');
    }
});

Ext.define('iih.mr.wr.mr.action.MrDocTreeSelectAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
    /*
	    * @Override
	    */
    execute: function(context) {
    	if(context.event){
    		var ccatCode = context.event.arguments[1].raw.id;
    	};
        var encounterSn = IMER_GLOBAL.encounterSn;
        this.prepareOperations(context.operations,encounterSn,ccatCode);
    },
    prepareOperations: function(operations,encounterSn,ccatCode) {
         
         var url = this.url+'?encounterPk='+encounterSn+'&mrTypeCustomCode='+ccatCode;
         var operation = {
             url: url,
             method: 'get',
             scope: this,
             success: this.onSuccess
         };
         operations.push(operation);
     },
     onSuccess: function(operation) {
         var block = this.getBlock('result');
         // TODO 数据格式就这样了？
         if(operation.result.dataList){
     	 	 block.setData(operation.result.dataList);
         }else{
        	 block.setData(null);
         }
     }
});

Ext.define('iih.mr.wr.mr.action.MrPrintAction', {
    extend:  Xap.ej.action.ServiceInvocation ,
    
    /*
     * @Override
     */
    execute: function(context) {
        var operations = context.operations;
        if(!operations) {
            return;
        }
        
        var plugin = document.getElementById('iemrEditor');
        var arrayObj = new Array(0);
    	var emptyParagNames = new Array(0);
    	/*if(tabList){                	    		
    		for(var i=0;i<tabList.length;i++){
	    		var tabName = tabList[i];
	    		var tabContent =plugin.ExportTable(tabName);
	    		if(!(tabContent&&tabContent.length>0)){
	    			arrayObj.push(tabName);
	    		}
	    	}
    	}    */            	    	
    	plugin.PrintEx(emptyParagNames,arrayObj);
    }
});

Ext.define('iih.mr.wr.mr.action.MrReadonlyAction', {
    extend:  Xap.ej.action.ServiceInvocation ,
    
    /*
     * @Override
     */
    execute: function(context) {
    	var operations = context.operations;
        if(!operations) {
            return;
        }
    	var plugin = document.getElementById('iemrEditor');
    	if(plugin.IsModified()){
//    		var emrSaveAction=this.getOwner().getActionChain('emrSave');
//    		emrSaveAction.execute(context);
    		Ext.Msg.alert('提示','当前文档发生修改，请保存后进行只读操作!');
    		return false;
    	}
    	var medicalRecord=this.getOwner().medicalRecord;
    	this.prepareOperations(operations,medicalRecord);
    },
    prepareOperations: function(operations,medicalRecord) {
        var METHODS = this.getInvocationMethods();
        var url=this.url+'/'+medicalRecord.mrPk;
        var operation = {
            url: url,
            method: METHODS.METHOD_DELETE,
            data:medicalRecord,
            scope: this,
            success: this.onSuccess,
            fail: this.onFail
        };
        operations.shift();
        operations.push(operation);
    },
    onSuccess: function(returnData) {
    	var plugin = document.getElementById('iemrEditor');
    	plugin.SetReadOnly();
		plugin.SetCommandVisible('com.founder.iemr.editor.toolbar:emrReadOnly', false);
		plugin.SetCommandVisible('com.founder.iemr.editor.toolbar:emrEdit', true);
		plugin.SetCommandEnable('com.founder.iemr.editor.toolbar:emrSave', false);
		plugin.UpdateToolbar();
    },
    onFail: function(operation) {
    	 plugin.SetCommandEnable('com.founder.iemr.editor.toolbar:emrSave', false);
    	 plugin.UpdateToolbar();
        Ext.Msg.alert('提示','只读申请失败!');
    }
});

Ext.define('iih.mr.wr.mr.action.MrSelectContinuePrintAction', {
    extend:  Xap.ej.action.ServiceInvocation ,
    
    /*
     * @Override
     */
    execute: function(context) {
        var operations = context.operations;
        if(!operations) {
            return;
        }
        var plugin = document.getElementById('iemrEditor');
        if(!plugin.IsModified()){
            var mrTypeCustomCode=this.getOwner().medicalRecord.mrTypeCustomCode;
            this.prepareOperations(operations, mrTypeCustomCode);
        }else{
        	Ext.MessageBox.alert('提示', '当前修改未保存，请保存后重试！');
        }
    },
    
    prepareOperations: function(operations,mrTypeCustomCode) {
        var METHODS = this.getInvocationMethods();
        var encounterSn = IMER_GLOBAL.encounterSn;
        var url=this.url+'?withFile=1&encounterPk='+encounterSn+'&mrTypeCustomCode='+mrTypeCustomCode;
        var operation = {
            url: url,
            method: METHODS.METHOD_GET,
            scope: this,
            success: this.onSuccess,
            fail: this.onFail
        };
        operations.push(operation);
    },
    onSuccess: function(operation) {
        var plugin = document.getElementById('iemrEditor');
        var fileNames='';
        var fileNewPageSorts='';
        var printBegin = -1;
        var mrPk=this.getOwner().medicalRecord.mrPk;
        var returnData=operation.result.dataList;
        for ( var i = 0; i < returnData.length; i++) {
/*            if (mrPk == returnData[i].mrPk) {
                printBegin = i;
            }*/
            
            var fileName=plugin.Base64toODT(returnData[i].fileData);
            if(fileNames==''){
                fileNames=fileName;
            }else{
                fileNames=fileNames+'\n'+fileName
            }
            if('MRM16.36'==returnData[i].typeCode){
                if(fileNewPageSorts==''){
                    fileNewPageSorts=i;
                }else{
                    fileNewPageSorts=fileNewPageSorts+'\n'+i
                }
            }
        }
        setTimeout(function() {
            plugin.PrintContinue2(fileNames,printBegin,fileNewPageSorts);
        }, 500);
//        plugin.EditDocument();
//        Ext.Msg.alert("提示",'驳回成功!');
    },
    onFail: function(operation) {
        Ext.Msg.alert("提示",'获取续打病历失败!');
    }
});

Ext.define('iih.mr.wr.mr.action.MrShareElementDelAction', {
    extend:  Xap.ej.action.ServiceInvocation ,
    
    /*
    * @Override
    */
    doExecute: function(context) {
        this.callParent();
        var record = context.data;
        var operations = context.operations;
        var url = this.url + '/' + record.mrShareElementCd;
        var operation = {
            url: url,
            mclass: null,
            method: 'DELETE',
            condition: null,
            scope: this,
            success: this.onSuccess
        };
        operations.push(operation);
    },
    
    onSuccess: function(operation) {
        var view = this.getOwner();
        var chain = view.getActionChain('search');
        chain.execute();
    }
});
Ext.define('iih.mr.wr.mr.action.MrShareElementEditAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override
	*/
	execute: function(context) {
	    if(context.element){
	        console.log(context.element);
	        var block = this.getBlock('content');
	        block.setData(context.element);
	    }
    }
});

Ext.define('iih.mr.wr.mr.block.MrShareElementEditBlock', {
    extend :  Xap.ej.block.FormBlock ,
    
                                               
                                               
                                                
                                                   

    alias:'widget.mrshareelementeditblock',

    layout: {
        type: 'table',
        columns: 1,
        tableAttrs: {
            border: 0,
            cellpadding: 5,
            cellspacing: 1
        },
        tdAttrs: {
            valign: 'left'
        }
    },
    
    border:false,
    
    defaults:{
        labelWidth:75,
        labelAlign:'right'
    },
    
    items:[{
        xtype:'xaptextfield',
        name:'mrShareElementCd',
        hidden: true
    },{
        xtype:'xaptextfield',
        name:'nm',
        width: 250,
        fieldLabel:'名称',
        allowBlank:false,
        blankText:'名称不允许为空！'
    }/*,{
        xtype:'xapcombobox',
        name:'category',
        width: 250,
        fieldLabel:'分类编码',
        comboData : [
             {"code":'MR.M.030.D.1', "value":"患者基本信息"},
             {"code":'MR.M.030.D.2', "value":"是"},
             {"code":'MR.M.030.D.3', "value":"是"}
        ],
        displayField: 'value',
        valueField: 'code',
        editable:false
    },{
        xtype:'xapcombobox',
        name:'macroFlag',
        width: 120,
        fieldLabel:'宏元素标识',
        comboData : [
             {"code":'0', "value":"否"},
             {"code":'1', "value":"是"}
        ],
        displayField: 'value',
        valueField: 'code',
        allowBlank:false,
        editable:false,
        value:'0'
    }*/,{
        xtype:'xaptextfield',
        name:'macroFlag',
        hidden: true,
        value:'0'
    },{
        xtype:'xaptextfield',
        name:'spellNo',
        width: 150,
        fieldLabel:'拼音码',
        allowBlank:false,
        blankText:'拼音码不允许为空！'
    },{
        xtype:'xaptextarea',
        name:'des',
        rows:3,
        width: 300,
        fieldLabel:'描述'
    }],
    
    buttons:[{
        xtype: "button",
        name: 'confim',
        method:'confim',
        text: '确认',
        handler:function(btn,e){
            var form = this.up('xapformblock');
            if(form.isValid()){
                var view = this.up('mrshareelementeditview');
                var chain = view.getActionChain('save');
                chain.execute();
            }
        }
    },{
        xtype: "button",
        name: 'cancel',
        method:'cancel',
        text: '取消',
        handler:function(btn,e){
            var win = this.up('window');
            win.close();
        }
    }],
    
    initComponent: function() {
        this.callParent();
    }
})
Ext.define('iih.mr.wr.mr.action.MrShareElementSaveAction', {
    extend:  Xap.ej.action.ServiceInvocation ,
    
    /*
    * @Override
    */
    doExecute: function(context) {
        this.callParent();
        var operations = context.operations;
        var block = this.getBlock('content');
        var data = block.getData();
        var code = data.mrShareElementCd;
        var method = 'POST';
        if(code)
            method = 'PUT';
        var url = this.url;
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: null,
            method: method,
            condition: null,
            data:data,
            scope: this,
            success: this.onSuccess
        };
        operations.push(operation);
    },
    
    onSuccess: function(operation) {
        var view = this.getOwner();
        var win = view.up('window');
        var parent = Ext.getCmp('mrshareelementid');
        var fn = function(){
            win.close();
            if(parent){
                var chain = parent.getActionChain('search');
                chain.execute();
            }
        };
        if(Ext.isObject(operation.data) && win){
            XapMessageBox.info(FuiLocale.get('messagebox', 'savedSuccess'),fn,win);
        }
    }
});
Ext.define('iih.mr.wr.mr.view.MrShareElementEditView', {
    extend :  Xap.ej.template.BaseTemplate ,

    requires: [],

    alias:'widget.mrshareelementeditview',
    
    border: 0,
    
    layout: 'fit',

    xapConfig: {
        blocks: {
            'content': {
                xclass: 'iih.mr.wr.mr.block.MrShareElementEditBlock'
            }
        },

        actions: {
            'init': {
                xclass: 'iih.mr.wr.mr.action.MrShareElementEditAction',
                blocks: {
                    content: 'content'
                }
            },
            'save': {
                xclass: 'iih.mr.wr.mr.action.MrShareElementSaveAction',
                url: 'mr/md/shareElement',
                blocks: {
                    content: 'content'
                }
            }
        },

        chains: {
            'init': ['init'],
            'save': ['save']
        },

        connections: {
            'content': [{
                event: 'afterrender',
                chain: 'init'
            }]
        }
    }
})
Ext.define('iih.mr.wr.mr.action.MrShareElementPopAction', {
	extend:  Xap.ej.action.PopAction ,

	                                                       
	
	execute: function(context) {
	    var data = context.data;
    	var config = {
    	    modal: true,           
    		width: 350,
    		height:200,
    		title : data?'共享元素编辑':'共享元素新增',
    		contentConfig: {
    			xtype: 'mrshareelementeditview',
    			initChain: {
                    name: 'init',
                    context: {
                        'element': data
                    }
                }
    		}
    	};
    	this.callParent([config]);
    }
});

Ext.define('iih.mr.wr.mr.action.MrShareElementSearchAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override
	*/
	execute: function(context) {
	    var block = this.getBlock('content');
	    var grid = block.down('xapgrid');
        block.loadingMask = Ext.create('Xap.ej.element.window.LoadMask', block);
        block.loadingMask.show();
	    var url = this.url;
	    var pageNum = grid.currentPage; 
        var pageSize = grid.pageSize;
        this.turnpage = false;
        if(context.event && context.event.name == 'turnpage')
            this.turnpage = true;
	    var condition = {
            pageSize: pageSize,
            pageNum: pageNum
        };
	    var qs = Ext.Object.toQueryString(condition);
        url += '?' + qs;
        var operation = {
            url: url,
            method: 'get',
            condition: condition,
            scope: this,
            success: this.onSuccess,
            fail: this.onFail
        };
        context.operations.push(operation);
    },
    onSuccess: function(operation) {
        var block = this.getBlock('content');
    	if(operation.result){
            if(block)
                block.setListData(operation.result,this.turnpage);
        };
        block.loadingMask.hide();
        block.updateLayout();
    },
    onFail: function(operation) {
        var block = this.getBlock('content');
        block.loadingMask.hide();
        block.updateLayout();
    }
});

Ext.define('iih.mr.wr.mr.action.MrSignDisposeAction', {
    extend:  Xap.ej.action.ServiceInvocation ,

    
    /*
    * @Override
    */
    execute: function(context) {
    	var opType=this.getOwner().opType;
    	var plugin = document.getElementById('iemrEditor');
    	if ('open'==opType){
    		var operations = context.operations;
            if(!operations) {
                return;
            }
    		plugin.ShowRedline(1);
        	this.openPrepareOperations(operations);
    	}
    },
    openPrepareOperations: function(operations) {
    	var url=this.url;
        var operation = {
            url: url,
            method: 'get',
            scope: this,
            success: this.onSuccess,
            fail: this.onFail
        };
        operations.push(operation);
    },
    onSuccess: function(operation) {
    	var user=operation.result.data;
        var plugin = document.getElementById('iemrEditor');
        var signatureLevel=0;
        if('MRM02.03'==user.signLevelCode){
        	signatureLevel=2;
        	
        }else if('MRM02.04'==user.signLevelCode){
        	signatureLevel=3;
        }
//        console.log('审签等级'+signatureLevel);
        if(signatureLevel>0){
            plugin.EditDocument();
            plugin.SwitchRedline(signatureLevel, user.id);
            plugin.ShowRedline(1);
            plugin.SetModified(false);
        }
    }
});

Ext.define('iih.mr.wr.mr.action.MrSignInitAction', {
    extend:  Xap.ej.action.ServiceInvocation ,

    execute: function(context) {
    	this.showLoading();
    	var block = this.getBlock('content');
		var pageNum,pageSize;
		var owner = this.getOwner();
		var me=this;
		if(context.event == undefined){
			pageNum = 1; 
			pageSize = 25; 
			block.pageSize = pageSize;
			var data = {
			};
			me.waitPrepareOperations(context.operations,data);
			
			var alreadySignChain = owner.getActionChain('alreadySignInit');
	        var waitDeptSignChain = owner.getActionChain('waitDeptSignInit');
	        var signedPatientsChain = owner.getActionChain('signedPatients');
	        var waitDeptSignPatients = owner.getActionChain('waitDeptSignPatients');
	        if(alreadySignChain) {
	            setTimeout(function() {
	            	alreadySignChain.execute(data);
	            },250);
	        }
	        if(waitDeptSignChain) {
	        	setTimeout(function() {
	        		waitDeptSignChain.execute(data);
	            },450);
	        }
	        if(signedPatientsChain) {
	        	setTimeout(function() {
	        		 signedPatientsChain.execute();
	        	},650);
	        }
	        if(waitDeptSignPatients) {
	        	setTimeout(function() {
	        		waitDeptSignPatients.execute();
	        	},850);
	        }
		}else{
			pageNum = context.event.arguments[0]; 
			pageSize = context.event.arguments[1]; 
			block.pageSize = pageSize;
			var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
	        properties.setData({
	            parentWindow: context.parentWindow,
	            sourceView: context.sourceView,
	            pageSize:pageSize,
	            pageNum:pageNum
	        });
			var data = {
					pageNum : pageNum,
					pageSize : pageSize
			};
			var fromName=context.event.from.name;
			if(fromName=="waitDeptSign"||fromName=="waitDeptSignPatient"){
				var waitDeptSignChain = owner.getActionChain('waitDeptSignInit');
		        if(waitDeptSignChain) {
		            waitDeptSignChain.execute(data);
		        }
			}else if(fromName=="waitPersonSign"){
				this.waitPrepareOperations(context.operations,data);
			}else if(fromName=="alreadySign"){
				var alreadySignChain = owner.getActionChain('alreadySignInit');
		        if(alreadySignChain) {
		        	alreadySignChain.execute(data);
		        }
			}
		}
		
		
//        this.waitPrepareOperations(context.operations,data);
    },
    waitPrepareOperations: function(operations,data) {
         var url = this.url+'?userId='+IMER_GLOBAL.user.code+'&deptCd='+IMER_GLOBAL.department.code+'&pageNum='+data.pageNum+'&pageSize='+data.pageSize;
         var operation = {
             url: url,
             method: 'get',
             scope: this,
             success: this.waitOnSuccess
         };
         operations.push(operation);
     },
     waitOnSuccess: function(operation) {
    	 var me=this;
    	 setTimeout(function() {
    		 var block = me.getBlock('content');
             var pageSize = block.pageSize;
             var m = operation.result;
             m.pageSize = pageSize;
             block.setData(m,'waitPersonSign');
    	 },200);
     }
});

Ext.define('iih.mr.wr.mr.action.MrSignOpenAction', {
    extend:  Xap.ej.action.ServiceInvocation ,
    
	execute: function(context) {
		var mrPk = '';
		var name = '';
		var statusCode = '';
		var encounterPk = '';
		var patientId = '';
		var arguments = context.event.arguments;
		if(context.event.name=="itemdblclick"){
			mrPk = arguments[1].raw.mrPk;
	        name = arguments[1].raw.name;
	        statusCode = arguments[1].raw.statusCode;
	        encounterPk = arguments[1].raw.encounterPk;
	        patientId = arguments[1].raw.patientId;
		}else{
			mrPk = arguments[0].mrPk;
	        name = arguments[0].name;
	        statusCode = arguments[0].statusCode;
	        encounterPk = arguments[0].encounterPk;
	        patientId = arguments[0].patientId;
		}
        
        //需要进行赋值,吴国成修改
        IMER_GLOBAL.encounterSn = encounterPk;
        IMER_GLOBAL.patientId = patientId;
        
        //当文书状态为已提交(MRM04.02),已二级审签时(MRM04.04)
        /*var workpageview = this.getOwner().ownerCt.items.items[1];
        if(workpageview){
        	var mrSn = workpageview.blocks.workContent.items.items[0].mrSn;
        	if(mrSn!=mrPk){
        		workpageview.ownerCt.remove(workpageview);//blocks.workContent.items.items[0].ownerCt.remove(workpageview.blocks.workContent.items.items[0]);
        	}
        }*/
        /*if(statusCode=='MRM04.02'||statusCode=='MRM04.04'){
        	var owner = this.getOwner();   
			//储存画面间参数
		    var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
	        properties.setData({
	        	mrPk:mrPk,
	        	name:name 
	        });
	        this.prepareOperations(context.operations,mrPk);
        }else{*/
        	if(undefined!=mrPk){
	        	var canvas = Xap.getCanvas();
		        var config = {
	                pageCode: 'mrdoceditview',
	                xclass: 'iih.mr.wr.mr.view.MrDocEditView',
	                pageTitle: name,
	                viewConfig:{
	                    mrSn:mrPk,
	                    opType:'open'
	                },
	                assistantConfig:{
	                    tgtObCd: 'MRB02',
	                    tgtObPk: mrPk
	                }
		        };       
		        canvas.fireEvent("addWorkPage",config);
	        }
        /*}*/
    },
     prepareOperations: function(operations,mrPk) {
         var url = this.url+'/'+mrPk;
         var operation = {
             url: url,
             method: 'post',
             scope: this,
             success: this.onSuccess
         };
         operations.push(operation);
     },
     onSuccess: function(operation) {
     	var owner=this.getOwner();	
        var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
		//树节点选择病历分类编号
		var mrPk = properties.data.mrPk;
		var name = properties.data.name;
		if(undefined!=mrPk){
        	var canvas = Xap.getCanvas();
	        var config = {
                pageCode: 'mrdoceditview',
                xclass: 'iih.mr.wr.mr.view.MrDocEditView',
                pageTitle: name,
                viewConfig:{
                    mrSn:mrPk,
                    opType:'open'
                },
                assistantConfig:{
                    tgtObCd: 'MRB02',
                    tgtObPk: mrPk
                }
	        };       
	        canvas.fireEvent("addWorkPage",config);
        }
     }
});

Ext.define('iih.mr.wr.mr.action.MrTypeCcatDelAction', {
    extend:  Xap.ej.action.ServiceInvocation ,
    
    /*
    * @Override
    */
    doExecute: function(context) {
        this.callParent();
        var record = context.mrtpccat;
        var operations = context.operations;
        var url = this.url + '/' + record.code;
        var operation = {
            url: url,
            mclass: null,
            method: 'DELETE',
            condition: null,
            scope: this,
            success: this.onSuccess
        };
        operations.push(operation);
    },
    
    onSuccess: function(operation) {
        var view = this.getOwner();
        var chain = view.getActionChain('search');
        chain.execute();
    }
});
Ext.define('iih.mr.wr.mr.action.MrTypeCcatEditAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override
	*/
	execute: function(context) {
	    if(context.mrtpccat){
	        console.log(context.mrtpccat);
	        var block = this.getBlock('content');
	        block.setData(context.mrtpccat);
	    }
    }
});

Ext.define('iih.mr.wr.mr.action.MrTypeCcatItmSearchAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override
	*/
	execute: function(context) {
	    var typeCode = context.typeCode;
	    this.prepareOperations(context.operations,typeCode);
    },
    prepareOperations: function(operations,typeCode) {
        var url = this.url + '?typeCode=' + typeCode;
        var operation = {
                url: url,
                method: 'get',
                scope: this,
                success: this.onSuccess
                // fail: this.onFail
            };
        operations.push(operation);
    },
    onSuccess: function(operation) {
    	if(operation.result){
            var block = this.getBlock('content');
            if(block)
                block.setMrTpCcatValue(operation.result.dataList);
        }
    }
});

Ext.define('iih.mr.wr.mr.block.MrTypeCcatEditBlock', {
    extend :  Xap.ej.block.FormBlock ,
    
                                               
                                               
                                                
                                                   

    alias:'widget.mrtypeccateditblock',

    layout: {
        type: 'table',
        columns: 1,
        tableAttrs: {
            border: 0,
            cellpadding: 5,
            cellspacing: 1
        },
        tdAttrs: {
            valign: 'left'
        }
    },
    
    border:false,
    
    defaults:{
        labelWidth:60,
        labelAlign:'right'
    },
    
    items:[{
        xtype:'xaptextfield',
        name:'code',
        hidden: true
    },{
        xtype:'xaptextfield',
        name:'name',
        width: 250,
        fieldLabel:'名称',
        allowBlank:false,
        blankText:'名称不允许为空！'
    },{
        xtype:'xapcombobox',
        name:'continuePrintF',
        width: 120,
        fieldLabel:'是否续打',
        comboData : [
             {"code":0, "value":"否"},
             {"code":1, "value":"是"}
        ],
        displayField: 'value',
        valueField: 'code',
        allowBlank:false,
        editable:false,
        value:0
    },{
        xtype:'xapnumberfield',
        name:'sortNo',
        width: 120,
        fieldLabel:'顺序',
        allowDecimals:false,
        minValue:1,
        allowBlank:false,
        blankText:'顺序不允许为空！'
    },{
        xtype:'xaptextarea',
        name:'description',
        rows:3,
        width: 300,
        fieldLabel:'描述'
    }],
    
    buttons:[{
        xtype: "button",
        name: 'confim',
        method:'confim',
        text: '确认',
        handler:function(btn,e){
            var form = this.up('xapformblock');
            if(form.isValid()){
                var view = this.up('mrtypeccateditview');
                var chain = view.getActionChain('save');
                chain.execute();
            }
        }
    },{
        xtype: "button",
        name: 'cancel',
        method:'cancel',
        text: '取消',
        handler:function(btn,e){
            var win = this.up('window');
            win.close();
        }
    }],
    
    initComponent: function() {
        this.callParent();
    }
})
Ext.define('iih.mr.wr.mr.action.MrTypeCcatSaveAction', {
    extend:  Xap.ej.action.ServiceInvocation ,
    
    /*
    * @Override
    */
    doExecute: function(context) {
        this.callParent();
        var operations = context.operations;
        var block = this.getBlock('content');
        var data = block.getData();
        var code = data.code;
        var method = 'POST';
        if(code)
            method = 'PUT';
        var url = this.url;
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: null,
            method: method,
            condition: null,
            data:data,
            scope: this,
            success: this.onSuccess
        };
        operations.push(operation);
    },
    
    onSuccess: function(operation) {
        var view = this.getOwner();
        var win = view.up('window');
        var parent = Ext.getCmp('mrtypeccatviewid');
        var fn = function(){
            win.close();
            if(parent){
                var chain = parent.getActionChain('search');
                chain.execute();
            }
        };
        if(Ext.isObject(operation.data) && win){
            XapMessageBox.info(FuiLocale.get('messagebox', 'savedSuccess'),fn,win);
        }
    }
});
Ext.define('iih.mr.wr.mr.view.MrTypeCcatEditView', {
    extend :  Xap.ej.template.BaseTemplate ,

    requires: [],

    alias:'widget.mrtypeccateditview',
    
    border: 0,
    
    layout: 'fit',

    xapConfig: {
        blocks: {
            'content': {
                xclass: 'iih.mr.wr.mr.block.MrTypeCcatEditBlock'
            }
        },

        actions: {
            'init': {
                xclass: 'iih.mr.wr.mr.action.MrTypeCcatEditAction',
                blocks: {
                    content: 'content'
                }
            },
            'save': {
                xclass: 'iih.mr.wr.mr.action.MrTypeCcatSaveAction',
                url: 'mrtypecustomcategory',
                blocks: {
                    content: 'content'
                }
            }
        },

        chains: {
            'init': ['init'],
            'save': ['save']
        },

        connections: {
            'content': [{
                event: 'afterrender',
                chain: 'init'
            }]
        }
    }
})
Ext.define('iih.mr.wr.mr.action.MrTypeCcatPopAction', {
	extend:  Xap.ej.action.PopAction ,

	                                                   
	
	execute: function(context) {
	    var mrtpccat = context.mrtpccat;
    	var config = {
    	    modal: true,           
    		width: 350,
    		height:250,
    		title : mrtpccat?'病历文书类型组编辑':'病历文书类型组新增',
    		contentConfig: {
    			xtype: 'mrtypeccateditview',
    			initChain: {
                    name: 'init',
                    context: {
                        'mrtpccat': mrtpccat
                    }
                }
    		}
    	};
    	this.callParent([config]);
    }
});

Ext.define('iih.mr.wr.mr.action.MrTypeCcatSearchAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override
	*/
	execute: function(context) {
	    this.prepareOperations(context.operations);
    },
    prepareOperations: function(operations) {
        var url = this.url;
        var operation = {
                url: url,
                method: 'get',
                scope: this,
                success: this.onSuccess
                // fail: this.onFail
            };
        operations.push(operation);
    },
    onSuccess: function(operation) {
    	if(operation.result){
            var block = this.getBlock('content');
            if(block)
                block.setListData(operation.result.dataList);
        }
    }
});

Ext.define('iih.mr.wr.mr.action.MrTypeCcatTreeSearchAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	                                       
	/*
	* @Override
	*/
	execute: function(context) {
	    var block = this.getBlock('result');
        block.loadingMask = Ext.create('Xap.ej.element.window.LoadMask', block);
        block.loadingMask.show();
	    this.prepareOperations(context.operations);
    },
    prepareOperations: function(operations) {
        var url = this.url;
        var operation = {
                url: url,
                method: 'get',
                scope: this,
                success: this.onSuccess,
                fail: this.onFail
            };
        operations.push(operation);
    },
    onSuccess: function(operation) {
    	if(operation.result){
    	    var block = this.getBlock('result');
    	    var tree = block.down('xaptree');
            if(tree){
                var obj=eval(operation.result.data.children);  
                tree.setData(obj);
            }
        };
        var block = this.getBlock('result');
        block.loadingMask.hide();
        block.updateLayout();
    },
    onFail: function(operation) {
        var block = this.getBlock('result');
        block.loadingMask.hide();
        block.updateLayout();
    }
});

Ext.define('iih.mr.wr.mr.action.MrTypeDelAction', {
    extend:  Xap.ej.action.ServiceInvocation ,
    
    /*
    * @Override
    */
    doExecute: function(context) {
        this.callParent();
        var record = context.mrtp;
        var operations = context.operations;
        var url = this.url + '/' + record.code;
        var operation = {
            url: url,
            mclass: null,
            method: 'DELETE',
            condition: null,
            scope: this,
            success: this.onSuccess
        };
        operations.push(operation);
    },
    
    onSuccess: function(operation) {
        var view = this.getOwner();
        var chain = view.getActionChain('tree');
        chain.execute();
    }
});
Ext.define('iih.mr.wr.mr.action.MrTypeEditAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override
	*/
	execute: function(context) {
	    var view = this.getOwner();
	    var block = this.getBlock('content');
        if(context.mrtp){
            block.setData(context.mrtp);
        };
	    var chain = view.getActionChain('mrTpCcatSearch');
	    chain.execute();
    }
});

Ext.define('iih.mr.wr.mr.block.MrTypeEditBlock', {
    extend :  Xap.ej.block.FormBlock ,
    
                                               
                                               
                                                
                                                  
                                                    

    alias:'widget.mrtypeeditblock',

    layout: {
        type: 'table',
        columns: 1,
        tableAttrs: {
            border: 0,
            cellpadding: 5,
            cellspacing: 1
        },
        tdAttrs: {
            valign: 'left'
        }
    },
    
    border:false,
    
    defaults:{
        labelWidth:90,
        labelAlign:'right'
    },
    
    items:[{
        xtype:'xaptextfield',
        name:'code',
        hidden: true
    },{
        xtype:'xaptextfield',
        name:'name',
        width: 280,
        fieldLabel:'名称',
        allowBlank:false,
        blankText:'名称不允许为空！'
    },{
        xtype:'xapcombobox',
        name:'mrTpCcatCd',
        //multiSelect:true,
        fieldLabel:'分组',
        valueField : 'code',
        displayField: 'name',
        allowBlank:false,
        editable:false,
        width: 350,
        blankText:'分组不允许为空！'
    },{
        xtype:'xapcombobox',
        name:'encounterTypeCode',
        width: 350,
        labelWidth:90,
        labelAlign:'right',
        fieldLabel:'就诊类型',
        multiSelect:true,
        dictionary:'ENM01',
        allowBlank:false,
        editable:false,
        //displayField: 'name',                   
        //valueField: 'code',
        blankText:'就诊类型不允许为空！'
    },{
        xtype:'xapcombobox',
        name:'signLevelCode',
        width: 280,
        fieldLabel:'审签级别',
        comboData : [
             {"signLevelCode":"MRM02.01", "name":"无需审签"},
             {"signLevelCode":"MRM02.02", "name":"一级审签"},
             {"signLevelCode":"MRM02.03", "name":"二级审签"},
             {"signLevelCode":"MRM02.04", "name":"三级审签"}
        ],
        allowBlank:false,
        editable:false,
        displayField: 'name',                   
        valueField: 'signLevelCode',
        value:'MRM02.01'
    },{
        xtype:'xapcombobox',
        name:'onlyF',
        width: 150,
        fieldLabel:'是否单文书',
        comboData : [
             {"code":0, "value":"否"},
             {"code":1, "value":"是"}
        ],
        displayField: 'value',
        valueField: 'code',
        allowBlank:false,
        editable:false,
        value:0
    },{
        xtype:'xapcombobox',
        name:'newPageF',
        width: 150,
        fieldLabel:'是否换页打印',
        comboData : [
             {"code":0, "value":"否"},
             {"code":1, "value":"是"}
        ],
        displayField: 'value',
        valueField: 'code',
        allowBlank:false,
        editable:false,
        value:0
    },{
        xtype:'xapnumberfield',
        name:'sortNo',
        width: 150,
        fieldLabel:'顺序',
        allowDecimals:false,
        minValue:1,
        allowBlank:false,
        blankText:'顺序不允许为空！'
    },{
        xtype:'xaptextarea',
        name:'description',
        rows:3,
        width: 350,
        fieldLabel:'描述'
    }],
    
    buttons:[{
        xtype: "button",
        name: 'confim',
        method:'confim',
        text: '确认',
        handler:function(btn,e){
            var form = this.up('xapformblock');
            if(form.isValid()){
                var view = this.up('mrtypeeditview');
                var chain = view.getActionChain('save');
                chain.execute();
            }
        }
    },{
        xtype: "button",
        name: 'cancel',
        method:'cancel',
        text: '取消',
        handler:function(btn,e){
            var win = this.up('window');
            win.close();
        }
    }],
    
    initComponent: function() {
        this.callParent();
    },
    
    setListData: function(data) {
        var mrTpCcatCd = this.down('xapcombobox[name=mrTpCcatCd]');
        if(mrTpCcatCd){
            mrTpCcatCd.setData(data);
            var code = this.down('xaptextfield[name=code]').getValue();
            if(code){
                var view = this.up('mrtypeeditview');
                var chain = view.getActionChain('mrTpCcatItmSearch');
                chain.execute({
                    typeCode:code
                });
                var enChain = view.getActionChain('encounterTypeSearch');
                enChain.execute({
                    typeCode:code
                });
            }
        }
    },
    
    setMrTpCcatValue: function(data) {
        var mrTpCcatCd = this.down('xapcombobox[name=mrTpCcatCd]');
        if(mrTpCcatCd){
            var array = new Array();
            Ext.each(data,function(rec){
                if(rec)
                    array.push(rec.mrTypeCustomCode);
            });
            mrTpCcatCd.setValue(array);
        }
    },
    
    setEnTypeValue: function(data) {
        var encounterTypeCode = this.down('xapcombobox[name=encounterTypeCode]');
        if(encounterTypeCode){
            var array = new Array();
            Ext.each(data,function(rec){
                if(rec)
                    array.push(rec.encounterTypeCode);
            });
            encounterTypeCode.setValue(array);
        }
    }
})
Ext.define('iih.mr.wr.mr.action.MrTypeSaveAction', {
    extend:  Xap.ej.action.ServiceInvocation ,
    
    /*
    * @Override
    */
    doExecute: function(context) {
        this.callParent();
        var operations = context.operations;
        var block = this.getBlock('content');
        var data = block.getData();
        var code = data.code;
        var method = 'POST';
        if(code)
            method = 'PUT';
        var url = this.url;
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: null,
            method: method,
            condition: null,
            data:data,
            scope: this,
            success: this.onSuccess
        };
        operations.push(operation);
    },
    
    onSuccess: function(operation) {
        var view = this.getOwner();
        var win = view.up('window');
        var parent = Ext.getCmp('mrtypeviewid');
        var fn = function(){
            win.close();
            if(parent){
                var chain = parent.getActionChain('tree');
                chain.execute();
            }
        };
        if(Ext.isObject(operation.data) && win){
            XapMessageBox.info(FuiLocale.get('messagebox', 'savedSuccess'),fn,win);
        }
    }
});
Ext.define('iih.mr.wr.mr.view.MrTypeEditView', {
    extend :  Xap.ej.template.BaseTemplate ,

    requires: [],

    alias:'widget.mrtypeeditview',
    
    border: 0,
    
    layout: 'fit',

    xapConfig: {
        blocks: {
            'content': {
                xclass: 'iih.mr.wr.mr.block.MrTypeEditBlock'
            }
        },

        actions: {
            'init': {
                xclass: 'iih.mr.wr.mr.action.MrTypeEditAction',
                blocks: {
                    content: 'content'
                }
            },
            'save': {
                xclass: 'iih.mr.wr.mr.action.MrTypeSaveAction',
                url: 'mr/md/mrtype',
                blocks: {
                    content: 'content'
                }
            },
            'mrTpCcatSearch': {
                xclass: 'iih.mr.wr.mr.action.MrTypeCcatSearchAction',
                url: 'mr/md/mrccat',
                blocks: {
                    content: 'content'
                }
            },
            'mrTpCcatItmSearch': {
                xclass: 'iih.mr.wr.mr.action.MrTypeCcatItmSearchAction',
                url: 'mr/md/mrccatitem/ccat',
                blocks: {
                    content: 'content'
                }
            },
            'encounterTypeSearch': {
                xclass: 'iih.mr.wr.mr.action.EncounterTypeSearchAction',
                url: 'mr/md/mrccatitem/entype',
                blocks: {
                    content: 'content'
                }
            }
        },

        chains: {
            'init': ['init'],
            'save': ['save'],
            'mrTpCcatSearch': ['mrTpCcatSearch'],
            'mrTpCcatItmSearch': ['mrTpCcatItmSearch'],
            'encounterTypeSearch': ['encounterTypeSearch']
        },

        connections: {
            'content': [/*{
                event: 'afterrender',
                chain: 'mrTpCcatSearch'
            }*/]
        }
    }
})
Ext.define('iih.mr.wr.mr.action.MrTypePopAction', {
	extend:  Xap.ej.action.PopAction ,

	                                               
	
	execute: function(context) {
	    var mrtp = context.mrtp;
    	var config = {
    	    modal: true,           
    		width: 400,
    		height:400,
    		title : mrtp?'病历文书类型编辑':'病历文书类型新增',
    		contentConfig: {
    			xtype: 'mrtypeeditview',
    			initChain: {
                    name: 'init',
                    context: {
                        'mrtp': mrtp
                    }
                }
    		}
    	};
    	this.callParent([config]);
    }
});

Ext.define('iih.mr.wr.mr.action.MrTypeSearchAction', {
    extend:  Xap.ej.action.ServiceInvocation ,
    
    /*
    * @Override
    */
    execute: function(context) {
        var block = this.getBlock('result');
        block.loadingMask = Ext.create('Xap.ej.element.window.LoadMask', block);
        block.loadingMask.show();
        var mrTypeCcatId='';
        if(context.event && context.event.name=='select')
            mrTypeCcatId = context.event.arguments[1].raw.id;
        this.prepareOperations(context.operations,mrTypeCcatId);
    },
    prepareOperations: function(operations,mrTypeCcatId) {
        var url = this.url + '/' + mrTypeCcatId;
        var operation = {
                url: url,
                method: 'get',
                scope: this,
                success: this.onSuccess,
                fail: this.onFail
            };
        operations.push(operation);
    },
    onSuccess: function(operation) {
        if(operation.result){
            var block = this.getBlock('result');
            var grid = block.down('xapgrid');
            if(grid)
                grid.setData(operation.result.dataList);
        };
        var block = this.getBlock('result');
        block.loadingMask.hide();
        block.updateLayout();
    },
    onFail: function(operation) {
        var block = this.getBlock('result');
        block.loadingMask.hide();
        block.updateLayout();
    }
});

Ext.define('iih.mr.wr.mr.action.OpenMrAction', {
    extend:  Xap.ej.action.PopAction ,

    
    /*
    * @Override
    */
    execute: function(context) {
        var mrSn=context.mrSn;
        if(undefined!=mrSn){
            this.openOperations(context.operations,mrSn);
        }
    },
    openOperations: function(operations, mrSn) {
        var url = this.url+'/'+mrSn;
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            method: METHODS.METHOD_GET,
            scope: this,
            success: this.onSuccess
        };
        operations.push(operation);
    },
    onSuccess: function(operation) {
        var plugin = document.getElementById('iemrEditor');
        var mrDocEditPage=this.getOwner();
        mrDocEditPage.medicalRecord=operation.result.data;
        plugin.OpenFromString(operation.result.data.fileData,1);
    }
});

Ext.define('iih.mr.wr.mr.action.OpenMrDocAction', {
    extend:  Xap.ej.action.PopAction ,

                                           
    
    execute: function(context) {
        var rb = this.getBlock('result');
        var grid = rb.down('xapgrid[name=mrDocGrid]'); 
        var selected=grid.getSelectionModel().getSelection();
        if (selected.length > 0) {
            var pk=selected[0].data.mrPk;
            var name=selected[0].data.name;
            var workpageview = this.getOwner().ownerCt.items.items[1];
            //框架已经给关闭了，不需要此处再关闭
            /*//打开第二份病历之前先关闭第一份病历
            if(workpageview){
            	var mrSn = workpageview.blocks.workContent.items.items[0].mrSn;
            	if(mrSn!=pk){
            		workpageview.ownerCt.remove(workpageview);
                }
            }*/
            var canvas = Xap.getCanvas();
            var config = {
                    pageCode: 'mrdoceditview',
                    xclass: 'iih.mr.wr.mr.view.MrDocEditView',
                    pageTitle: name,
                    viewConfig:{
                        //mrCd:condition
                        mrSn:pk,
                        opType:'open'
                    },
                    assistantConfig:{
                        tgtObCd: 'MRB02',
                        tgtObPk: pk
                    }
            };       
            canvas.fireEvent("addWorkPage",config);
        }else {
             XapMessageBox.info("请选择一条记录！");
        };
    }
});

Ext.define('iih.mr.wr.mr.action.PatientComboxInitAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
    /*
	    * @Override
	    */
	    execute: function(context) {
//	        this.callParent();
//	        var operations = context.operations;
//	        if(!operations) {
//	            return;
//	        };
	        
//	        console.log("this is mrdoclistinitaction 11111111111111111111111"); 
	        this.prepareOperations(context.operations);
	    },
	    /*
	     * @return {mclass: '', condition: {}}
	     */
	    prepareOperations: function(operations) {
	         
	         var url = this.url;
	         var operation = {
	             url: url,
	             method: 'get',
	             scope: this,
	             success: this.onSuccess
	         };
	         operations.push(operation);
	     },
	     onSuccess: function(operation) {
	         var block = this.getBlock('condition');
	         var combox = block.down('[name=patient]');
	         var m = operation.result;
	         var data;
	         if(!Ext.isEmpty(m, false)){
	             data = m.data;
	             if(data) {
	                 combox.setData(eval(data));
	             }
	         }

	     }
    
	    
});

Ext.define('iih.mr.wr.mr.action.PrintAction', {
    extend:  iih.mr.action.editor.EmrEditorOperatorAction ,
//    userName:'',
    /*
    * @Override
    */
    execute: function(context) {
    	var plugin = document.getElementById('iemrEditor');
	    if(plugin.IsModified()){
            Ext.MessageBox.alert('提示', '当前修改未保存，请保存后重试！');
        }else{
        	var a=new Array();
        	var b=new Array();
            plugin.PrintEx(a,b);
        }
    }
});

Ext.define('iih.mr.wr.mr.action.QaDisabledOfficeToolBarAction',{
    extend :  Xap.ej.action.ServiceInvocation ,

	/*
	* @Override
	*/
	doExecute : function(context) {
		var operations = context.operations;
		if (!operations) {
			return;
		}
		function intToBoolean(str) {
			if ('1' == str) {
				return true;
			} else {
				return false;
			}
		}
		var me = this;
		var emrSave = 'com.founder.iemr.editor.toolbar:emrSave';//保存
		var emrSubmit = 'com.founder.iemr.editor.toolbar:emrSubmit';//提交
		var emrRevoke = 'com.founder.iemr.editor.toolbar:emrRevoke';//撤销
		var emrStartApprove = 'com.founder.iemr.editor.toolbar:emrStartApprove';//开始审签
		var emrApprove = 'com.founder.iemr.editor.toolbar:emrApprove';//审签
		var emrAuditRevoke = 'com.founder.iemr.editor.toolbar:emrAuditRevoke';//审签撤回
		var emrReject = 'com.founder.iemr.editor.toolbar:emrReject';//驳回
		var emrDocDelete = 'com.founder.iemr.editor.toolbar:emrDocDelete';//删除
		var emrRefreshMacro = 'com.founder.iemr.editor.toolbar:emrRefreshMacro';//刷新宏元素
		var emrRefreshDiagnosis = 'com.founder.iemr.editor.toolbar:emrRefreshDiagnosis';//刷新诊断
		var emrImageLibraries = 'com.founder.iemr.editor.toolbar:emrImageLibraries';//插入图片
		var emrContinuePrint = 'com.founder.iemr.editor.toolbar:emrContinuePrint';//续打
		var emrSelectContinuePrint = 'com.founder.iemr.editor.toolbar:emrSelectContinuePrint';//选页打印
		var emrPrint='com.founder.iemr.editor.toolbar:emrPrint';//打印
		var emrSaveAsTemplate = 'com.founder.iemr.editor.toolbar:emrSaveAsTemplate';//病历另存为模板
//      var iddMedocalHistory = '';//月经史公式编辑
		setTimeout(function() {
		var plugin = document.getElementById('iemrEditor');
		if (me.getOwner().opType == 'reform') {
			plugin.SetCommandVisible(emrPrint, false);
			plugin.SetCommandVisible(emrSubmit, false);
			plugin.SetCommandVisible(emrRevoke, false);
			plugin.SetCommandVisible(emrReject, false);
			plugin.SetCommandVisible(emrDocDelete, false);
			plugin.SetCommandVisible(emrStartApprove, false);
			plugin.SetCommandVisible(emrApprove, false);
			plugin.SetCommandVisible(emrAuditRevoke, false);
			plugin.SetCommandVisible(emrSelectContinuePrint, false);
			plugin.SetCommandVisible(emrContinuePrint, false);
			plugin.SetCommandVisible(emrSaveAsTemplate, false);
		}
		plugin.UpdateToolbar();
		},200)
	}
});

Ext.define('iih.mr.wr.mr.action.QaEditorCallBackAction', {
    extend:  Xap.ej.action.ServiceInvocation ,

    
    /*
    * @Override
    */
    execute: function(context) {
    	Ext.MessageBox.hide();
    	var opType=this.getOwner().opType;
//    	var plugin = document.getElementById('iemrEditor');
    	if ('reform'==opType){
    		var operations = context.operations;
            if(!operations) {
                return;
            }
    		var disabledOfficeToolBarAction=this.getOwner().getActionChain("disabledOfficeToolBarAction");
    		disabledOfficeToolBarAction.execute();
    		//2015年5月28日15:38:13确定不需要记录修改痕迹
    		/*var medicalRecord=this.getOwner().medicalRecord;
    		if(medicalRecord.canSign&&medicalRecord.canSign==1){
    			plugin.ShowRedline(1);
        		this.openPrepareOperations(operations);
    		}
    		plugin.GotoSection('主诉',true);
    		plugin.SetModified(false);*/
    	}
    },
    openPrepareOperations: function(operations) {
    	var url=this.url+'?userId='+IMER_GLOBAL.user.code;
        var operation = {
            url: url,
            method: 'get',
            scope: this,
            success: this.onSuccess,
            fail: this.onFail
        };
        operations.push(operation);
    },
    onSuccess: function(operation) {
    	var user=operation.result.data;
        var plugin = document.getElementById('iemrEditor');
        var signatureLevel=0;
        if('MRM02.03'==user.signLevelCode){
        	signatureLevel=1;
        	
        }else if('MRM02.04'==user.signLevelCode){
        	signatureLevel=2;
        }
        plugin.SwitchRedline(signatureLevel, user.id);
        plugin.SetModified(false);
    }
});

Ext.define('iih.mr.wr.mr.action.RefreshMacroAction', {
    extend:  Xap.ej.action.ServiceInvocation ,
    
    /*
     * @Override
     */
    execute: function(context) {
        var operations = context.operations;
        if(!operations) {
            return;
        }
//        Ext.Msg.alert("提示",'刷新宏元素成功!');
        this.prepareOperations(operations);
    },
    
    prepareOperations: function(operations) {
        var condition=this.getOwner().medicalRecord;
        condition.opType=this.getOwner().opType;
        var url=this.url+'?opType='+condition.opType+'&encounterPk='+condition.encounterPk+'&typeCode='+condition.typeCode+'&mrPk='+condition.mrPk;
        var operation = {
            url: url,
            method: 'get',
            condition:condition,
            scope: this,
            success: this.onSuccess,
            fail: this.onFail
        };
        operations.push(operation);
    },
    onSuccess: function(operation) {
        var plugin = document.getElementById('iemrEditor');
//        console.log(operation);
        this.refreshMacroElement(plugin,operation.result.data);
//        Ext.Msg.alert("提示",'刷新宏元素成功!');
    },
    onFail: function(operation) {
        Ext.Msg.alert("提示",'获取宏元素失败!');
    },
    refreshMacroElement:function(plugin,macroElementValue){
        var self=this;
        var data = this.getOwner().medicalRecord;
        function trim(str) {
            if (typeof str == "string") {
                str = str.replace(/^(\s|\u00A0)+/, '');
                for ( var i = str.length - 1; i >= 0; i--) {
                    if (/\S/.test(str.charAt(i))) {
                        str = str.substring(0, i + 1);
                        break;
                    }
                }
            }
            return str;
        };
        function nullToNbsp(str) {
            if (str == null||str.length==0) {
                str = '&nbsp;';
            }
            return str;
        };
        Date.prototype.format = function(fmt)   
        {
          var o = {   
            "M+" : this.getMonth()+1,                 //月份   
            "d+" : this.getDate(),                    //日   
            "h+" : this.getHours(),                   //小时   
            "m+" : this.getMinutes(),                 //分   
            "s+" : this.getSeconds(),                 //秒   
            "q+" : Math.floor((this.getMonth()+3)/3), //季度   
            "S"  : this.getMilliseconds()             //毫秒   
          };   
          if(/(y+)/.test(fmt))   
            fmt=fmt.replace(RegExp.$1, (this.getFullYear()+"").substr(4 - RegExp.$1.length));   
          for(var k in o)   
            if(new RegExp("("+ k +")").test(fmt))   
          fmt = fmt.replace(RegExp.$1, (RegExp.$1.length==1) ? (o[k]) : (("00"+ o[k]).substr((""+ o[k]).length)));   
          return fmt;   
        }  
        function getFormatDate(date, pattern) {
            if (date == undefined) {
                date = new Date();
            }
            if (pattern == undefined) {
                pattern = "yyyy-MM-dd hh:mm:ss";
            }
            return date.format(pattern);
        };
        var patient = macroElementValue.patient;
        var encounter = macroElementValue.amr;
//        console.log(encounter);
        var temperature=macroElementValue.vitalsign;//生命体征
        var allMacroIds = plugin.GetAllMacro();//获取文档中所有的宏元素id
        var sAllMacroValue = null;//所有宏元素的值
        var allMacroIdKeys = null;//所有宏元素的key（ID）
        var unKnownMacros = '';//未知宏元素id
        var macroConstants = IMER_CONSTANT;//常量
        var allMacroIdsArray = allMacroIds.split("\n");//将宏元素id转换成数组以便遍历
        if(patient){
            self.disposeBySex(plugin, patient.sexCd);//根据性别特殊处理
        }
        for ( var i = 0; i < allMacroIdsArray.length; i++) {
            var macroId = allMacroIdsArray[i];
            var macroValue = null;
            switch (macroId) {
            case macroConstants.MR_ELEMENT_CD_1:
                macroValue = patient.nm; // 患者姓名
                break;
            case macroConstants.MR_ELEMENT_CD_2:// 性别名称
                macroValue = patient.sexNm;
                break;
            case macroConstants.MR_ELEMENT_CD_3: // 年龄
                macroValue = encounter.age;
                break;
            case macroConstants.MR_ELEMENT_CD_4:// 婚姻状况
                macroValue = patient.mariNm;
                break;
            case macroConstants.MR_ELEMENT_CD_5:// 民族
                macroValue = patient.nationNm;
                break;
            case macroConstants.MR_ELEMENT_CD_6:// 职业
                macroValue = patient.occuNm;
                break;
            case macroConstants.MR_ELEMENT_CD_7:// 出生地信息
                macroValue = patient.distNm;
                break;
            case macroConstants.MR_ELEMENT_CD_8:// 工作单位
                macroValue = patient.workOrgNm;
                break;
            case macroConstants.MR_ELEMENT_CD_9:// 身份证号
                macroValue = patient.idCardNo;
                break;
            case macroConstants.MR_ELEMENT_CD_10:// 现住址信息
                macroValue = patient.workAddr;
                break;
            case macroConstants.MR_ELEMENT_CD_11:// 患者电话
                macroValue = patient.telNo;
                break;
            case macroConstants.MR_ELEMENT_CD_12:// 暂时取的patientId
            	macroValue=patient.paId;
                break;
            case macroConstants.MR_ELEMENT_CD_13:// 住院号
                macroValue = encounter.inpatientNo;
                break;
            case macroConstants.MR_ELEMENT_CD_14:// 住院次数信息
                macroValue = encounter.encounterCount;
                break;
            case macroConstants.MR_ELEMENT_CD_15:// 床号
                macroValue = encounter.currentBedCode;
                break;
            case macroConstants.MR_ELEMENT_CD_16:// 入院时间
                if (encounter.receiveTime != undefined) {
                    macroValue = getFormatDate(new Date(encounter.receiveTime), 'yyyy-MM-dd hh:mm');
                }
                break;
            case macroConstants.MR_ELEMENT_CD_17:// 出院日期
                if (encounter.finishTime != undefined) {
                    macroValue = getFormatDate(new Date(encounter.finishTime), 'yyyy-MM-dd');
                }
                break;
            case macroConstants.MR_ELEMENT_CD_18:// 科室
                macroValue = encounter.currentDeptName;
                break;
            case macroConstants.MR_ELEMENT_CD_19:// 病区
                macroValue = encounter.currentDeptName;
                break;
            case macroConstants.MR_ELEMENT_CD_20:// 国籍（不需要）
                break;
            case macroConstants.MR_ELEMENT_CD_21:// 邮编（暂不要）
                break;
            case macroConstants.MR_ELEMENT_CD_22:// 主要诊断（暂不要）
                break;
            case macroConstants.MR_ELEMENT_CD_23:// 费用类型（暂不要）
                break;
            case macroConstants.MR_ELEMENT_CD_24:// 主任医师签名（暂不要）
                break;
            case macroConstants.MR_ELEMENT_CD_25:// 主治医师签名（暂不要）
                break;
            case macroConstants.MR_ELEMENT_CD_26:// 管床医师签名（暂不要）
                break;
            case macroConstants.MR_ELEMENT_CD_27:// 业务时间
                if (data != undefined && data.bizTime != undefined) {
                    macroValue = getFormatDate(new Date(data.bizTime), 'yyyy-MM-dd hh:mm');
                }
                break;
            case macroConstants.MR_ELEMENT_CD_28:// 住院天数
                if (encounter.receiveTime != undefined) {
                    var inpDeptTime=new Date(encounter.receiveTime);
                    var endTime=new Date();
                    
                    if(encounter.encounterStatusCode=='ENM02.04'||encounter.encounterStatusCode=='ENM02.06'){
                    	endTime=new Date(encounter.finishTime);
                    }
                    macroValue=parseInt((endTime-inpDeptTime)/(24*60*60*1000));
                    if(macroValue==0){
                    	macroValue++;
                    }
                }
                break;
            case macroConstants.MR_ELEMENT_CD_29:// 出生日期
                if (patient.birthday != undefined) {
                    macroValue=getFormatDate(new Date(patient.birthday), 'yyyy-MM-dd hh:mm');
                }
                break;
            case macroConstants.MR_ELEMENT_CD_30:// 心率
                if (temperature.heartRate) {
                    macroValue=temperature.heartRate;
                }
                break;
            case macroConstants.MR_ELEMENT_CD_31:// 体重
                if (temperature.weight) {
                    macroValue=temperature.weight;
                }
                break;
            case macroConstants.MR_ELEMENT_CD_32:// 上级医生
                if (data != undefined && data.superiorDoctorName!= undefined) {
                    var higherLvlDoctorNm=data.superiorDoctorName;
                    if(higherLvlDoctorNm.indexOf(' ')>0){
                        macroValue=higherLvlDoctorNm.substring(0,higherLvlDoctorNm.indexOf(' '));
                    }else{
                        macroValue=higherLvlDoctorNm;
                    }
                }
                break;
            case macroConstants.MR_ELEMENT_CD_101://体温
                if(temperature.temper){
                    macroValue=temperature.temper;
                }
                break;
            case macroConstants.MR_ELEMENT_CD_102://呼吸
                if(temperature.breathe){
                    macroValue=temperature.breathe;
                }
                break;
            case macroConstants.MR_ELEMENT_CD_103://脉搏
                if(temperature.pulse){
                    macroValue=temperature.pulse;
                }
                break;
            case macroConstants.MR_ELEMENT_CD_104://收缩压
                if(temperature.systolicPress){
                    macroValue=temperature.systolicPress;
                }
                break;
            case macroConstants.MR_ELEMENT_CD_105://舒张压
                if(temperature.diastolicPress){
                    macroValue=temperature.diastolicPress;
                }
                break;
            case macroConstants.MR_ELEMENT_CD_106:
            	var mr = this.getOwner().medicalRecord;
            	if(mr.superiorDoctorName&&null!=mr.superiorDoctorName){
                    macroValue=mr.superiorDoctorName;
                }
                break;
            default:
                if (unKnownMacros == '') {
                    unKnownMacros = macroId;
                } else {
                    unKnownMacros = unKnownMacros + ',' + macroId;
                }
            }
            if(macroId!='MR.M.013.D.24'&&macroId!='MR.M.013.D.25'&&macroId!='MR.M.013.D.26'){
            	macroValue=nullToNbsp(macroValue);
                macroValue=trim(macroValue);//delete spaces
            }
            if (macroValue != undefined && macroValue.length != 0) {
            	macroValue=macroValue+'';
            	macroValue=macroValue.replace('&nbsp;',' ');
                if (sAllMacroValue == null) {
                    sAllMacroValue = macroValue;
                } else {
                    sAllMacroValue = sAllMacroValue + '\n' + macroValue;
                }
                if (allMacroIdKeys == null) {
                    allMacroIdKeys = macroId;
                } else {
                    allMacroIdKeys = allMacroIdKeys + '\n' + macroId;
                }
            }
        }
        if (unKnownMacros.length > 1) {
            Ext.MessageBox.alert('错误', '文档中存在未识别的宏元素编码:' + unKnownMacros + '可能是文档中宏元素的版本不对，请联系管理员！');
        }
        if (null != allMacroIdKeys && null != sAllMacroValue){
            plugin.ImportMacroValue(allMacroIdKeys, sAllMacroValue);
        }
        plugin.SetCommandEnable('com.founder.iemr.editor.toolbar:emrSave', true);
        plugin.UpdateToolbar();
        if(this.getOwner().newF==1){
        	//刷新引用元素
   		 	setTimeout(function() {
   		 		var emrRefreshMrDocValue=self.getOwner().getActionChain("emrRefreshMrDocValue");
   		 		emrRefreshMrDocValue.execute();
   		 		self.getOwner().newF==0;
   		 	},100);
        }
        var count=this.getOwner().count;
        console.log(count);
        if(count&&count==3){
        	console.log('----------plugin.EnableOCX(true);---------'+count);
        	plugin.EnableOCX(true);
        }else{
        	this.getOwner().count=count+1;
        }
    },
    /**
     * 性别特殊处理
     * plugin：编辑器插件对象
     * sexCode 男：M,女：F
     */
    disposeBySex: function(plugin,sexCode) {
//    	console.log('-----------------------执行月经史处理：'+sexCode);
        if(sexCode=='M'){
//        	console.log('-----------------------执行删除月经史：'+sexCode);
            plugin.RemoveNamedElement('生育史');
            plugin.RemoveNamedElement('月经史');
        }
    }
});

Ext.define('iih.mr.wr.mr.action.RefreshMrDiagnosisAction', {
    extend:  Xap.ej.action.ServiceInvocation ,
    
    /*
     * @Override
     */
    execute: function(context) {
        var operations = context.operations;
        if(!operations) {
            return;
        }
        this.prepareOperations(operations);
    },
    
    prepareOperations: function(operations) {
    	var medicalRecord=this.getOwner().medicalRecord;
    	
        var url=this.url+'?enPk='+medicalRecord.encounterPk;
        var operation = {
            url: url,
            method: 'get',
            scope: this,
            success: this.onSuccess,
            fail: this.onFail
        };
        operations.push(operation);
    },
    onSuccess: function(operation) {
        var plugin = document.getElementById('iemrEditor');
//        console.log(operation);
/*        if(null!=operation.result.dataList&&operation.result.dataList.length>0){
        	this.importReferenceElem(plugin,operation.result.dataList);
        }*/
        var returnData=operation.result.dataList;
        var aData01 = null;
        var aData02 = null;
        for ( var i = 0; returnData&&i < returnData.length; i++) {
//            var macroConstants = window.iemr.extensions.constants[0];
            if(returnData[i].diTpCd == '01'){
                if(aData01 == null){
                    aData01 = returnData[i].diNm;
                }else{
                    aData01 = aData01 + '\n' + returnData[i].diNm;
                }
            }
            if(returnData[i].diTpCd == '02'){
                if(aData02 == null){
                    aData02 = returnData[i].diNm;
                }else{
                    aData02 = aData02 + '\n' + returnData[i].diNm;
                }
            }
            
        };
        if(aData01 != null)
            plugin.RefreshDiagnosis('01', aData01);
        if(aData02 != null)
            plugin.RefreshDiagnosis('02', aData02);
        
        var count=this.getOwner().count;
        console.log(count);
        if(count&&count==3){
        	console.log('----------plugin.EnableOCX(true);---------'+count);
        	plugin.EnableOCX(true);
        }else{
        	this.getOwner().count=count+1;
        }
    
    },
    onFail: function(operation) {
        Ext.Msg.alert("提示",'获取诊断失败，请重试！');
    }
});

Ext.define('iih.mr.wr.mr.action.RefreshMrDocValueAction', {
    extend:  Xap.ej.action.ServiceInvocation ,
    
    /*
     * @Override
     */
    execute: function(context) {
        var operations = context.operations;
        if(!operations) {
            return;
        }
        var plugin = document.getElementById('iemrEditor');
        //获取文档中所有引用目标元素的id
        var elemIds=plugin.GetReferenceElem();
        elemIds=elemIds.replace(new RegExp(/(\n)/g),",");
        if(elemIds.length>0){
        	this.prepareOperations(operations,elemIds);
        }else{
        	var count=this.getOwner().count;
            console.log(count);
            if(count&&count==3){
            	console.log('----------plugin.EnableOCX(true);---------'+count);
            	plugin.EnableOCX(true);
            }else{
            	this.getOwner().count=count+1;
            }
        }
    },
    
    prepareOperations: function(operations,elemIds) {
//    	var medicalRecord=this.getOwner().medicalRecord;
    	
        var url=this.url+'/'+elemIds+'?enPk='+IMER_GLOBAL.encounterSn;
        var operation = {
            url: url,
            method: 'get',
            scope: this,
            success: this.onSuccess,
            fail: this.onFail
        };
        operations.push(operation);
    },
    onSuccess: function(operation) {
        var plugin = document.getElementById('iemrEditor');
//        console.log(operation);
        if(null!=operation.result.dataList&&operation.result.dataList.length>0){
        	this.importReferenceElem(plugin,operation.result.dataList);
        }
        var count=this.getOwner().count;
        console.log(count);
        if(count&&count==3){
        	console.log('----------plugin.EnableOCX(true);---------'+count);
        	plugin.EnableOCX(true);
        }else{
        	this.getOwner().count=count+1;
        }
    },
    onFail: function(operation) {
        Ext.Msg.alert("提示",'获取引用元素元素值失败!');
    },
    importReferenceElem:function(plugin,elemValues){
    	if (elemValues != null && elemValues.length > 0) {
            for ( var i = 0; i < elemValues.length; i++) {
            	var dataElementId=elemValues[i].dataElementId;
            	var value=elemValues[i].value;
            	//循环遍历引用元素值并刷新文档中的引用目标元素
                plugin.ImportReferenceElem(dataElementId, value);
            }
        }
    }
});

Ext.define('iih.mr.wr.mr.action.RefreshValuesAction', {
    extend:  Xap.ej.action.ServiceInvocation ,
    
    /*
     * @Override
     */
    execute: function(context) {
        var operations = context.operations;
        if(!operations) {
            return;
        }
        var plugin = document.getElementById('iemrEditor');
        //获取文档中所有引用目标元素的id
        var elemIds=plugin.GetReferenceElem();
        elemIds=elemIds.replace(new RegExp(/(\n)/g),",");
        if(elemIds.length>0){
        	this.prepareOperations(operations,elemIds);
        }
//        Ext.Msg.alert("提示",'刷新宏元素成功!');
//        this.prepareOperations(operations);
    },
    
    prepareOperations: function(operations,elemIds) {
//        var url=this.url+'/'+IMER_GLOBAL.encounterSn;
        var url=this.url+'/'+elemIds+'?enPk='+IMER_GLOBAL.encounterSn;
//        console.log(url);
        var operation = {
            url: url,
            method: 'get',
            scope: this,
            success: this.onSuccess,
            fail: this.onFail
        };
        operations.push(operation);
    },
    onSuccess: function(operation) {
        var plugin = document.getElementById('iemrEditor');
        var macroElementValue=operation.result.data.macroElementValue;
        if(null!=macroElementValue){
        	this.refreshMacroElement(plugin,macroElementValue);
        }
        var mrElemValues=operation.result.data.mrElemValues;
        if(null!=mrElemValues&&mrElemValues.length>0){
        	this.importReferenceElem(plugin,mrElemValues);
        }
    },
    onFail: function(operation) {
        Ext.Msg.alert("提示",'获取宏元素失败!');
    },
    importReferenceElem:function(plugin,elemValues){
    	if (elemValues != null && elemValues.length > 0) {
            for ( var i = 0; i < elemValues.length; i++) {
            	var dataElementId=elemValues[i].dataElementId;
            	var value=elemValues[i].value;
            	//循环遍历引用元素值并刷新文档中的引用目标元素
                plugin.ImportReferenceElem(dataElementId, value);
            }
            plugin.SetModified(false);
        }
    },
    refreshMacroElement:function(plugin,macroElementValue){
        var self=this;
        var data = this.getOwner().medicalRecord;
        function trim(str) {
            if (typeof str == "string") {
                str = str.replace(/^(\s|\u00A0)+/, '');
                for ( var i = str.length - 1; i >= 0; i--) {
                    if (/\S/.test(str.charAt(i))) {
                        str = str.substring(0, i + 1);
                        break;
                    }
                }
            }
            return str;
        };
        Date.prototype.format = function(fmt)   
        {
          var o = {   
            "M+" : this.getMonth()+1,                 //月份   
            "d+" : this.getDate(),                    //日   
            "h+" : this.getHours(),                   //小时   
            "m+" : this.getMinutes(),                 //分   
            "s+" : this.getSeconds(),                 //秒   
            "q+" : Math.floor((this.getMonth()+3)/3), //季度   
            "S"  : this.getMilliseconds()             //毫秒   
          };   
          if(/(y+)/.test(fmt))   
            fmt=fmt.replace(RegExp.$1, (this.getFullYear()+"").substr(4 - RegExp.$1.length));   
          for(var k in o)   
            if(new RegExp("("+ k +")").test(fmt))   
          fmt = fmt.replace(RegExp.$1, (RegExp.$1.length==1) ? (o[k]) : (("00"+ o[k]).substr((""+ o[k]).length)));   
          return fmt;   
        }  
        function getFormatDate(date, pattern) {
            if (date == undefined) {
                date = new Date();
            }
            if (pattern == undefined) {
                pattern = "yyyy-MM-dd hh:mm:ss";
            }
            return date.format(pattern);
        };
        var patient = macroElementValue.patient;
        var encounter = macroElementValue.amr;
//        console.log(encounter);
        var temperature='';//macroElementValue.temperature;
        var allMacroIds = plugin.GetAllMacro();
        var sAllMacroValue = null;
        var allMacroIdKeys = null;
        var unKnownMacros = '';
        var macroConstants = IMER_CONSTANT;
        var allMacroIdsArray = allMacroIds.split("\n");
        if(patient){
            self.disposeBySex(plugin, patient.sexCd);//根据性别特殊处理
        }
        for ( var i = 0; i < allMacroIdsArray.length; i++) {
            var macroId = allMacroIdsArray[i];
            var macroValue = null;
            switch (macroId) {
            case macroConstants.MR_ELEMENT_CD_1:
                macroValue = patient.nm; // 患者姓名
                break;
            case macroConstants.MR_ELEMENT_CD_2:// 性别名称
                macroValue = patient.sexNm;
                break;
            case macroConstants.MR_ELEMENT_CD_3: // 年龄
                macroValue = encounter.age;
                break;
            case macroConstants.MR_ELEMENT_CD_4:// 婚姻状况
                macroValue = patient.mariNm;
                break;
            case macroConstants.MR_ELEMENT_CD_5:// 民族
                macroValue = patient.nationNm;
                break;
            case macroConstants.MR_ELEMENT_CD_6:// 职业
                macroValue = patient.occupationNm;
                break;
            case macroConstants.MR_ELEMENT_CD_7:// 出生地信息
                macroValue = patient.nativeDistrictNm;
                break;
            case macroConstants.MR_ELEMENT_CD_8:// 工作单位
                macroValue = patient.workOrgNm;
                break;
            case macroConstants.MR_ELEMENT_CD_9:// 身份证号
                macroValue = patient.idCardNo;
                break;
            case macroConstants.MR_ELEMENT_CD_10:// 现住址信息
                macroValue = patient.workAddr;
                break;
            case macroConstants.MR_ELEMENT_CD_11:// 患者电话
                macroValue = patient.telNo;
                break;
            case macroConstants.MR_ELEMENT_CD_12:// 暂时取的patientId
            	macroValue=patient.paId;
                break;
            case macroConstants.MR_ELEMENT_CD_13:// 住院号
                macroValue = encounter.inpatientNo;
                break;
            case macroConstants.MR_ELEMENT_CD_14:// 住院次数信息
                macroValue = encounter.encounterCount;
                break;
            case macroConstants.MR_ELEMENT_CD_15:// 床号
                macroValue = encounter.currentBedCode;
                break;
            case macroConstants.MR_ELEMENT_CD_16:// 入院时间
                if (encounter.receiveTime != undefined) {
                    macroValue = getFormatDate(new Date(encounter.receiveTime), 'yyyy-MM-dd hh:mm');
                }
                break;
            case macroConstants.MR_ELEMENT_CD_17:// 出院日期
                if (encounter.finishTime != undefined) {
                    macroValue = getFormatDate(new Date(encounter.finishTime), 'yyyy-MM-dd hh:mm');
                }
                break;
            case macroConstants.MR_ELEMENT_CD_18:// 科室
                macroValue = encounter.currentDeptName;
                break;
            case macroConstants.MR_ELEMENT_CD_19:// 病区
                macroValue = encounter.currentDeptName;
                break;
            case macroConstants.MR_ELEMENT_CD_20:// 国籍（不需要）
                break;
            case macroConstants.MR_ELEMENT_CD_21:// 邮编（暂不要）
                break;
            case macroConstants.MR_ELEMENT_CD_22:// 主要诊断（暂不要）
                break;
            case macroConstants.MR_ELEMENT_CD_23:// 费用类型（暂不要）
                break;
            case macroConstants.MR_ELEMENT_CD_24:// 主任医师签名（暂不要）
                break;
            case macroConstants.MR_ELEMENT_CD_25:// 主治医师签名（暂不要）
                break;
            case macroConstants.MR_ELEMENT_CD_26:// 管床医师签名（暂不要）
                break;
            case macroConstants.MR_ELEMENT_CD_27:// 业务时间
                if (data != undefined && data.bizTime != undefined) {
                    macroValue = getFormatDate(new Date(data.bizTime), 'yyyy-MM-dd hh:mm');
                }
                break;
            case macroConstants.MR_ELEMENT_CD_28:// 住院天数
                if (encounter.admissionDay != undefined) {
//                    var inpDeptTime=new Date(encounter.admissionDay);
//                    var encounterEndTime=new Date(encounter.encounterEndTime);
                    macroValue=encounter.admissionDay;
                }
                break;
            case macroConstants.MR_ELEMENT_CD_29:// 出生日期
                if (patient.birthday != undefined) {
                    macroValue=getFormatDate(new Date(patient.birthday), 'yyyy-MM-dd hh:mm');
                }
                break;
            case macroConstants.MR_ELEMENT_CD_30:// 心率
                if (temperature.heart) {
                    macroValue=temperature.heart;
                }
                break;
            case macroConstants.MR_ELEMENT_CD_31:// 体重
                if (temperature.weight) {
                    macroValue=temperature.weight;
                }
                break;
            case macroConstants.MR_ELEMENT_CD_32:// 上级医生
                if (data != undefined && data.superiorDoctorName!= undefined) {
                    var higherLvlDoctorNm=data.superiorDoctorName;
                    if(higherLvlDoctorNm.indexOf(' ')>0){
                        macroValue=higherLvlDoctorNm.substring(0,higherLvlDoctorNm.indexOf(' '));
                    }else{
                        macroValue=higherLvlDoctorNm;
                    }
                }
                break;
            case macroConstants.MR_ELEMENT_CD_101://体温
                if(temperature.bodyTemperature){
                    macroValue=temperature.bodyTemperature;
                }
                break;
            case macroConstants.MR_ELEMENT_CD_102://呼吸
                if(temperature.breathe){
                    macroValue=temperature.breathe;
                }
                break;
            case macroConstants.MR_ELEMENT_CD_103://脉搏
                if(temperature.pulse){
                    macroValue=temperature.pulse;
                }
                break;
            case macroConstants.MR_ELEMENT_CD_104://收缩压
                if(temperature.systolicPressure){
                    macroValue=temperature.systolicPressure;
                }
                break;
            case macroConstants.MR_ELEMENT_CD_105://舒张压
                if(temperature.diagstolicPressure){
                    macroValue=temperature.diagstolicPressure;
                }
                break;
            default:
                if (unKnownMacros == '') {
                    unKnownMacros = macroId;
                } else {
                    unKnownMacros = unKnownMacros + ',' + macroId;
                }
            }
            if (macroValue != undefined && trim(macroValue).length != 0) {
                if (sAllMacroValue == null) {
                    sAllMacroValue = macroValue;
                } else {
                    sAllMacroValue = sAllMacroValue + '\n' + macroValue;
                }
                if (allMacroIdKeys == null) {
                    allMacroIdKeys = macroId;
                } else {
                    allMacroIdKeys = allMacroIdKeys + '\n' + macroId;
                }
            }
        }
        if (unKnownMacros.length > 1) {
            Ext.MessageBox.alert('错误', '文档中存在未识别的宏元素编码:' + unKnownMacros + '可能是文档中宏元素的版本不对，请联系管理员！');
        }
        if (null != allMacroIdKeys && null != sAllMacroValue){
            plugin.ImportMacroValue(allMacroIdKeys, sAllMacroValue);
        }
        plugin.SetCommandEnable('com.founder.iemr.editor.toolbar:emrSave', true);
        plugin.UpdateToolbar();
        plugin.SetModified(false);
        var count=this.getOwner().count;
        console.log(count);
        if(count&&count==3){
        	console.log('----------plugin.EnableOCX(true);---------'+count);
        	plugin.EnableOCX(true);
        }else{
        	this.getOwner().count=count+1;
        }
    },
    /**
     * 性别特殊处理
     * plugin：编辑器插件对象
     * sexCode 男：M,女：F
     */
    disposeBySex: function(plugin,sexCode) {
        if(sexCode=='M'){
            plugin.RemoveNamedElement('生育史');
            plugin.RemoveNamedElement('月经史');
        }
    }
});

Ext.define('iih.mr.wr.mr.action.SelectedPrintAction', {
    extend:  iih.mr.action.editor.EmrEditorOperatorAction ,
//    userName:'',
    /*
    * @Override
    */
    execute: function(context) {
    	var plugin = document.getElementById('iemrEditor');
	    if(plugin.IsModified()){
            Ext.MessageBox.alert('提示', '当前修改未保存，请保存后重试！');
        }else{
            plugin.PrintContinue();
        }
    }
});

Ext.define('iih.mr.wr.mr.action.SignedPatientsInitAction', {
    extend:  Xap.ej.action.ServiceInvocation ,

    execute: function(context) {
        this.PrepareOperations(context.operations);
    },
    PrepareOperations: function(operations) {
         var url = this.url+'?userId='+IMER_GLOBAL.user.code+'&deptCd='+IMER_GLOBAL.department.code;
         var operation = {
             url: url,
             method: 'get',
             scope: this,
             success: this.OnSuccess
         };
         operations.push(operation);
     },
     OnSuccess: function(operation) {
     	var block = this.getBlock('content');
        var patient=block.down('xapcombobox[name=patient]');
	    if(operation.result.dataList){
	     	patient.setData(operation.result.dataList);
	    }else{
	    	patient.setData([]);
	    }
	    patient.select('ALL');
     }
});

Ext.define('iih.mr.wr.mr.action.WaitDeptSignInitAction', {
    extend:  Xap.ej.action.ServiceInvocation ,

    execute: function(context) {
//    	this.showLoading();
    	var pageNum,pageSize;
		if(context.event == undefined){
			pageNum = context.pageNum; 
			pageSize = context.pageSize; 
		}else{
			pageNum = context.event.arguments[0]; 
			pageSize = context.event.arguments[1]; 
		}
		var block = this.getBlock('content');
		block.pageSize = pageSize;
		var data = {
			pageNum : pageNum,
			pageSize : pageSize
		};
        this.waitDeptPrepareOperations(context.operations,data);
    },
     waitDeptPrepareOperations: function(operations,data) {
    	 var url = this.url+'?userId='+IMER_GLOBAL.user.code+'&deptCd='+IMER_GLOBAL.department.code+'&pageNum='+data.pageNum+'&pageSize='+data.pageSize;
    	 var block = this.getBlock('content');
         var patientId=block.down('[name=waitDeptSignPatient]').getValue();
         if(patientId&&patientId.length>0){
        	 url=url+'&patientId='+patientId;
         }
         var operation = {
             url: url,
             method: 'get',
             scope: this,
             success: this.waitDeptOnSuccess
         };
         operations.push(operation);
     },
     waitDeptOnSuccess: function(operation) {
         var block = this.getBlock('content');
         var pageSize = block.pageSize;
         var m = operation.result;
         m.pageSize = pageSize;
         block.setData(m,'waitDeptSign');
     }
});

Ext.define('iih.mr.wr.mr.action.WaitDeptSignPatientsInitAction', {
    extend:  Xap.ej.action.ServiceInvocation ,

    execute: function(context) {
        this.PrepareOperations(context.operations);
    },
    PrepareOperations: function(operations) {
    	var block = this.getBlock('content');
    	var patientId=block.down('[name=patient]').getValue();
         var url = this.url+'?userId='+IMER_GLOBAL.user.code+'&deptCd='+IMER_GLOBAL.department.code+'&patientId='+patientId;
         var operation = {
             url: url,
             method: 'get',
             scope: this,
             success: this.OnSuccess
         };
         operations.push(operation);
     },
     OnSuccess: function(operation) {
     	var block = this.getBlock('content');
        var patient=block.down('xapcombobox[name=waitDeptSignPatient]');
	    if(operation.result.dataList){
	     	patient.setData(operation.result.dataList);
	    }else{
	    	patient.setData([]);
	    }
	    patient.select('ALL');
     }
});

Ext.define('iih.mr.wr.mr.block.MrDocListBlock',{
    extend :  Xap.ej.block.Block ,

                                              
    		                                      

    alias:'widget.mrdoclistblock',

    layout: {
        type:'vbox',
        align: 'stretch'
    },

    items: [{
        title: '已书写文书',
        
        xtype: 'xapgrid',
        name: 'mrDocGrid',
        ifSelect : true,
        selectBy: 'mrPk',
        flex:1,

        tbar:[{xtype:'button',iconCls: 'icon-Create',text:'新建',method: 'create',disabled:true},
              {xtype:'button',iconCls: 'icon-Open',text:'打开',method: 'open'},
              {xtype:'button',iconCls: 'icon-Delete',text:'删除',disabled:true,method: 'delete'},
              {xtype:'button',iconCls: 'icon-Property',text:'属性',method: 'property'},
//              {xtype:'button',iconCls: 'icon-Property',text:'模板信息',method: 'templateProperty'},
              {xtype:'button',text:'完成书写',method: 'finish',hidden:true}
        ],
             
        CM_JR_Record: [
             {header: '文书状态',dataIndex: 'statusName',field: 'textfield' ,type: 'string',width:100},
             {header: '文书名称',dataIndex: 'name',alink:true,field: 'textfield' ,type: 'string',flex:1/*,renderer:handler*/},
             {header: '起草人',dataIndex: 'createUserName',field: 'textfield' ,type: 'string',width:80},
             {header: '业务时间',dataIndex: 'bizTime',xtype: 'xapdatecolumn',format:'Y-m-d H:i',width:140},
             {header: '审签等级',dataIndex: 'signLevelName',field: 'textfield' ,type: 'string',width:80},
             {header: '审签医师',dataIndex: 'masterDoctorName',field: 'textfield' ,type: 'string',width:80},
             {header: '最后更新人',dataIndex: 'lastUpdateUserName',field: 'textfield' ,type: 'string',width:80},
             {header: '最后更新时间',dataIndex: 'lastUpdateTime',xtype: 'xapdatecolumn',width:140},
             {header: '模板编码',dataIndex: 'templeCode',field: 'textfield' ,type: 'string',hidden:true},
             {header: '文书ID',dataIndex: 'mrPk',field: 'textfield' ,type: 'string',hidden:true,flex:1}
             //{header: '需整改缺陷数',dataIndex: 'defectCount',field: 'textfield',type: 'string',width:80}
        ]
    },{
        title: '待书写文书',
        
        xtype: 'xapgrid',
        name: 'taskGrid',
        ifSelect : true,
        selectBy: 'taskId',
        
        height:220,
        
        CM_JR_Record: [{
            header:'文书类型',
            dataIndex:'mrTpNm',
            width:150
        },{
            header:'任务描述',
            dataIndex:'memo',
            flex:1
        },{
            header:'创建时间',
            dataIndex:'beginTime',
            xtype:'xapdatecolumn',
            width:130
        },{
            header:'截止时间',
            dataIndex:'endTime',
            xtype:'xapdatecolumn',
            width:130
        },{
            header:'剩余时间',
            dataIndex:'surplusTime',
            width:100,
            renderer:function(val,cellmeta){
                if(val && val<0)
                    return '<span style="color:red;">' + val + '</span>';
                else
                    return val;
            }
        },{
            xtype:'xapactioncolumn',
            text:'操作',
            layout: {
                type: 'hbox',
                align: 'middle'
            },
            width:60,
            defectStore: null,
            items:[{
                text:'处理',
                handler: function(grid, rowIndex, colIndex) {
                    var view = grid.up('mrdoclistview');
                    var store = grid.getStore();
                    var rec = store.getAt(rowIndex); 
                    var docSn = rec.data.docSn;
                    if(docSn){
                        var docGrid = view.down('xapgrid[name=mrDocGrid]');
                        var docStore = docGrid.getStore();
                        var docRec = docStore.findRecord('mrPk',docSn);
                        docGrid.getSelectionModel().select(docRec);
                        var chain = view.getActionChain('open');
                        chain.execute();
                    }else{
                        var chain = view.getActionChain('create');
                        chain.execute({
                            mrTpCd:rec.raw.mrTpCd,
                            mrTpCcatCd:rec.raw.mrTpCcatCd
                        });
                    }
                },
                getClass : function(v,m,record) {
                    if(record.raw.status=='XAPM20.02'){
                        return 'x-hidden';
                    }                           
                }
            }]
        },{
            dataIndex:'taskId',
            hidden:true
        },{
            dataIndex:'encounterSn',
            hidden:true
        },{
            dataIndex:'taskTypeCd',
            hidden:true
        },{
            dataIndex:'docSn',
            hidden:true
        }],
        listeners: {
            itemdblclick: function(grid, rec, item, index) {
            }
        }
    }],
    
    setData : function(data) {
        var grid = this.down('xapgrid[name=mrDocGrid]');
        if(data){
        	grid.setData(data);
        }else{
        	grid.setData({});
        }
    }
});


Ext.define('iih.mr.wr.mr.block.MrDocSortTreeBlock',{
	extend :  Xap.ej.block.FormBlock ,

	           
	                                    
	  
	alias:'widget.mrdocsorttreeblock',
	
	title:'病历文书分类',
	
	items:[{
	        xtype:'xaptree',
	        layout: 'fit',
	        name:'MrDocSortTree',
            selectBy: 'id',
	        rootVisible:false,
	        border:0
	}],

	setData: function(data) {
	    var tree = this.down('xaptree');
	    if(tree){
	    	var myobj=eval(data);  
	    	tree.setData(myobj);
	    }
	    
	},
    getData: function() {
        return null;
    }    
})
Ext.define('iih.mr.wr.mr.block.MrShareElementBlock',{
	extend :  Xap.ej.block.Block ,

	           	           
			                          
	  
	
	alias:'widget.mrshareelementblock',
	
	mixins : [ Xap.ej.block.LayeredBlock ],
	
	layout: 'fit',
    
    border: 0,
    
    flex: 1,
    
	items:[{
	    xtype:'xapgrid',
        layout: 'fit',
        border:false,
        pageShow:true,
        pageSize:25,
        ifSelect:true,
        selectBy: 'mrShareElementCd',
        CM_JR_Record: [
               {header: '名称',dataIndex: 'nm',width:300},
               /*{header: '分类编码',dataIndex: 'category',width:300},*/
               {
                   header: '宏元素标识',
                   dataIndex: 'macroFlag',
                   width:80,
                   renderer:function(value,metaData,record){
                       if(value == 1){
                           return FuiLocale.get('messagebox', 'yes');
                       }else{
                           return FuiLocale.get('messagebox', 'no');
                       }
                   }
               },
               {header: '描述',dataIndex: 'des',flex:1},
               {dataIndex: 'mrShareElementCd',hidden:true}
        ],
        tbar:[
               {
                   text: '新建',
                   method: 'create',
                   iconCls: 'icon-Create',
                   handler:function(btn,e){
                       var view = this.up('mrshareelementview');
                       var chain = view.getActionChain('open');
                       chain.execute();
                   }
               },
               {
                   text: '编辑',
                   method: 'edit',
                   iconCls: 'icon-edit',
                   handler:function(btn,e){
                       var view = this.up('mrshareelementview');
                       var grid = view.down('xapgrid');
                       var record = grid.getSelectionModel().getSelection();
                       if(record && record.length>0){
                           var rec = record[0].raw;
                           var chain = view.getActionChain('open');
                           chain.execute({
                               data:rec
                           });
                       }else{
                           XapMessageBox.warn('请选择共享元素！','',view);
                       }
                   }
               },
               {
                   text: '删除',
                   method: 'delete',
                   iconCls: 'icon-Delete',
                   handler:function(btn,e){
                       var view = this.up('mrshareelementview');
                       var grid = view.down('xapgrid');
                       var record = grid.getSelectionModel().getSelection();
                       if(record && record.length>0){
                           var rec = record[0].raw;
                           XapMessageBox.confirm2('是否确认删除选中的共享元素？',
                               function(btn, text){
                                   if (btn == 'yes') {
                                       var chain = view.getActionChain('delete');
                                       chain.execute({
                                           data:rec
                                       });
                                   } 
                               }
                           );
                       }else{
                           XapMessageBox.warn('请选择共享元素！','',view);
                       }
                   }    
               }
        ]
	}],
	initComponent: function() {
		this.callParent();
		this.initBlock();
	},
	setListData: function(data,turnpage) {
	    var grid = this.down('xapgrid');
        if(grid)
            if(turnpage)
                grid.setData(data.dataList);
            else
                grid.setPageData(data);
	}

})
Ext.define('iih.mr.wr.mr.block.MrSignListBlock',{
    extend :  Xap.ej.block.FormBlock ,
    
                                          
                                          
                                                 
                                                    

    alias:'widget.mrsignlistblock',

    layout: 'fit',
    
    border:false,
    
    items:[{
        xtype:'xaptabpanel',
        layout: 'fit',
        border:false, 
        /*defaults:{
            xtype:'xapgrid',
            layout: 'fit',
            border:false,
            pageShow:true
        },*/
        items:[{
            title:'本人待审签一览',
            ifSelect : true,
            selectBy: 'mrPk',
            name:'waitPersonSign',
            xtype:'xapgrid',
            layout: 'fit',
            border:false,
            autoScroll:true,
    		pageSize : 25,
    		pageShow : true,
            selectBy: 'mrPk'
        },/*{
            title:'科室待审签一览',
            name:'waitDeptSign',
            xtype:'xapgrid',
            layout: 'fit',
            border:false,
            ifSelect : true,
            autoScroll:true,
    		pageSize : 25,
    		pageShow : true,
            selectBy: 'mrPk'
        },*/{
        	title:'科室待审签一览',
            border:false, 
            name:'waitDeptSign',
            xtype:'xappanel',
            layout: {
                type : 'vbox',
                align : 'stretch'
            },
            items:[{
            	xtype:'xapform',
            	height:50,
            	items:{
            		xtype:'xapcombobox',
					name:'waitDeptSignPatient',
					editable:false,
        			allOptions:true,
					padding:'10 0 10 20',
					fieldLabel:'患者',
					labelWidth:40,
					queryMode: 'local',
					displayField: 'patientName',
					valueField: 'patientId'
            	}
            },{
            	xtype:'xapgrid',
//	            layout: 'fit',
            	flex:1,
	            border:false,
	            name:'waitDeptSign',
	            ifSelect : true,
                selectBy: 'mrPk',
                autoScroll:true,
        		pageSize : 25,
        		pageShow : true,
	            CM_JR_Record:[
	            	{header: '床位',dataIndex: 'bedNo',field: 'textfield',type: 'string',flex:2},
			        {header: '姓名',dataIndex: 'patientName',field: 'textfield',type: 'string',flex:2},
			        {header: '性别',dataIndex: 'sexName',field: 'textfield',type: 'string',flex:1},
			        {header: '文书名称',dataIndex: 'name',alink:true,width:600},
			        {header: '文书状态',dataIndex: 'stateName',field: 'textfield',type: 'string',flex:2},
			        {header: '审签等级',dataIndex: 'signLvlNm',field: 'textfield',type: 'string',flex:2},
			        {header: '提交人',dataIndex: 'submitCd',field: 'textfield',type: 'string',flex:2},
			        {header: '提交时间',dataIndex: 'submitDate',width:120, xtype:'xapdatecolumn'},
			        {header: '文书ID',dataIndex: 'mrPk',field: 'textfield' ,type: 'string',hidden:true},
			        {header: '文书状态编码',dataIndex: 'statusCode',field: 'textfield' ,type: 'string',hidden:true},
			        {header: '就诊编码',dataIndex: 'encounterPk',field: 'textfield' ,type: 'string',hidden:true},
			        {header: '患者编码',dataIndex: 'patientId',field: 'textfield' ,type: 'string',hidden:true}
		        ]
            }]
        },{
            title:'本人已审签一览',
            border:false, 
            name:'alreadySign',
            xtype:'xappanel',
            layout: {
                type : 'vbox',
                align : 'stretch'
            },
            items:[{
            	xtype:'xapform',
            	height:50,
            	items:{
            		xtype:'xapcombobox',
					name:'patient',
					editable:false,
        			allOptions:true,
					padding:'10 0 10 20',
					fieldLabel:'患者',
					labelWidth:40,
					queryMode: 'local',
					displayField: 'patientName',
					valueField: 'patientId'
            	}
            },{
            	xtype:'xapgrid',
//	            layout: 'fit',
            	flex:1,
	            border:false,
	            name:'alreadySign',
	            ifSelect : true,
                selectBy: 'mrPk',
                autoScroll:true,
        		pageSize : 25,
        		pageShow : true,
	            CM_JR_Record:[
	            	{header: '床位',dataIndex: 'bedNo',field: 'textfield',type: 'string',flex:2},
			        {header: '姓名',dataIndex: 'patientName',field: 'textfield',type: 'string',flex:2},
			        {header: '性别',dataIndex: 'sexName',field: 'textfield',type: 'string',flex:1},
			        {header: '文书名称',dataIndex: 'name',alink:true,width:600},
			        {header: '文书状态',dataIndex: 'stateName',field: 'textfield',type: 'string',flex:2},
			        {header: '审签等级',dataIndex: 'signLvlNm',field: 'textfield',type: 'string',flex:2},
			        {header: '签名时间',dataIndex: 'doctorDate',flex:3, xtype:'xapdatecolumn'},
			        {header: '文书ID',dataIndex: 'mrPk',field: 'textfield' ,type: 'string',hidden:true},
			        {header: '文书状态编码',dataIndex: 'statusCode',field: 'textfield' ,type: 'string',hidden:true},
			        {header: '就诊编码',dataIndex: 'encounterPk',field: 'textfield' ,type: 'string',hidden:true},
			        {header: '患者编码',dataIndex: 'patientId',field: 'textfield' ,type: 'string',hidden:true}
		        ]
            }]
        }]
    }],
    initComponent: function() {
        var tabItems = this.items[0].items;
        tabItems[0].CM_JR_Record = this.createGridColumn();
        tabItems[1].CM_JR_Record = this.createGridColumn();
        this.callParent();
    },
    createGridColumn: function() {
        var columnConfig = [
	        {header: '床位',dataIndex: 'bedNo',field: 'textfield',type: 'string',flex:2},
	        {header: '姓名',dataIndex: 'patientName',field: 'textfield',type: 'string',flex:2},
	        {header: '性别',dataIndex: 'sexName',field: 'textfield',type: 'string',flex:1},
	        {header: '文书名称',dataIndex: 'name',alink:true,width:600},
	        {header: '文书状态',dataIndex: 'stateName',field: 'textfield',type: 'string',flex:2},
	        {header: '提交人',dataIndex: 'submitCd',field: 'textfield',type: 'string',flex:2},
	        {header: '提交时间',dataIndex: 'submitDate',flex:3, xtype:'xapdatecolumn'},
	        {header: '文书ID',dataIndex: 'mrPk',field: 'textfield' ,type: 'string',hidden:true},
            {header: '文书状态编码',dataIndex: 'statusCode',field: 'textfield' ,type: 'string',hidden:true},
            {header: '就诊编码',dataIndex: 'encounterPk',field: 'textfield' ,type: 'string',hidden:true},
            {header: '患者编码',dataIndex: 'patientId',field: 'textfield' ,type: 'string',hidden:true}
        ];
        return columnConfig;
    },
    setData : function(data,gridName) {
//    	console.log('aaaaaaaaaaaaaaaaa');
//    	console.log(data);
        var grid = this.down('xapgrid[name='+gridName+']');
        var dataList = data.dataList;
        if(grid){
    		if(dataList){
		    	var totalList = {"total":data.total,"dataList":dataList};
		    	var pageSize = data.pageSize;
		    	if(pageSize == undefined || typeof(data.pageSize) == 'object'){
		    		grid.setPageData(totalList);	//初始化赋值
		    	}else{
		    		grid.setData(dataList);	//翻页时赋值
		    	}
        	}else{
        		var totalList = {"total":data.total,"dataList":dataList};
        		grid.setPageData(totalList);
        	}
    	}/*
        if(data){
        	grid.setData(data);
        }else{
        	grid.setData({});
        }*/
    }
})
Ext.define('iih.mr.wr.mr.block.MrTypeCcatBlock',{
	extend :  Xap.ej.block.Block ,

	           	           
			                          
	  
	
	alias:'widget.mrtypeccatblock',
	
	mixins : [ Xap.ej.block.LayeredBlock ],
	
	layout: 'fit',
    
    border: 0,
    
    flex: 1,
    
	items:[{
	    xtype:'xapgrid',
        layout: 'fit',
        border:false,
        //pageShow:true,
        //pageSize:25,
        ifSelect:true,
        selectBy: 'code',
        CM_JR_Record: [
               {header: '名称',dataIndex: 'name',width:300},
               {
                   header: '是否续打',
                   dataIndex: 'continuePrintF',
                   width:80,
                   renderer:function(value,metaData,record){
                       if(value == 1){
                           return FuiLocale.get('messagebox', 'yes');
                       }else{
                           return FuiLocale.get('messagebox', 'no');
                       }
                   }
               },
               {header: '顺序',dataIndex: 'sortNo',width:80},
               {header: '描述',dataIndex: 'description',flex:1},
               {dataIndex: 'code',hidden:true}
        ],
        tbar:[
               {
                   text: '新建',
                   method: 'create',
                   iconCls: 'icon-Create',
                   handler:function(btn,e){
                       var view = this.up('mrtypeccatview');
                       var chain = view.getActionChain('open');
                       chain.execute();
                   }
               },
               {
                   text: '编辑',
                   method: 'edit',
                   iconCls: 'icon-edit',
                   handler:function(btn,e){
                       var view = this.up('mrtypeccatview');
                       var grid = view.down('xapgrid');
                       var record = grid.getSelectionModel().getSelection();
                       if(record && record.length>0){
                           var rec = record[0].raw;
                           var chain = view.getActionChain('open');
                           chain.execute({
                               mrtpccat:rec
                           });
                       }else{
                           XapMessageBox.warn('请选择病历文书类型组！','',view);
                       }
                   }
               },
               {
                   text: '删除',
                   method: 'delete',
                   iconCls: 'icon-Delete',
                   handler:function(btn,e){
                       var view = this.up('mrtypeccatview');
                       var grid = view.down('xapgrid');
                       var record = grid.getSelectionModel().getSelection();
                       if(record && record.length>0){
                           var rec = record[0].raw;
                           XapMessageBox.confirm2('是否确认删除选中的病历文书类型组？',
                               function(btn, text){
                                   if (btn == 'yes') {
                                       var chain = view.getActionChain('delete');
                                       chain.execute({
                                           mrtpccat:rec
                                       });
                                   } 
                               }
                           );
                       }else{
                           XapMessageBox.warn('请选择病历文书类型组！','',view);
                       }
                   }    
               }
        ]
	}],
	initComponent: function() {
		this.callParent();
		this.initBlock();
	},
	setListData: function(data) {
	    var grid = this.down('xapgrid');
        if(grid)
            grid.setData(data);
	}

})
Ext.define('iih.mr.wr.mr.block.MrTypeCcatTreeBlock',{
	extend :  Xap.ej.block.Block ,

	                                       
	
	alias:'widget.mrtypeccatTreeBlock',
	
	layout: 'fit',
	
	border: 0,
	
	items:[{
        xtype:'xaptree',
        border: 0,
        flex: 1,
        ifSelect:true,
        rootVisible: false
    }],

	setData: function(data) {
	},
    getData: function() {
    }	
    
})
Ext.define('iih.mr.wr.mr.block.MrTypeListBlock',{
	extend :  Xap.ej.block.Block ,

	           	           
			                          
	  
	
	alias:'widget.mrtypelistblock',
	
	mixins : [ Xap.ej.block.LayeredBlock ],
	
	layout: 'fit',
    
    border: 0,
    
    flex: 1,
    
	items:[{
	    xtype:'xapgrid',
        layout: 'fit',
        //pageShow:true,
        //pageSize:25,
        ifSelect:true,
        selectBy: 'code',
        CM_JR_Record: [
               {header: '名称',dataIndex: 'name',width:200},
               {
                   header: '就诊类型',
                   dataIndex: 'encounterTypeName',
                   width:120
               },
               {header: '审签级别',dataIndex: 'signLevelName',width:150},
               {
                   header: '是否单文书',
                   dataIndex: 'onlyF',
                   width:80,
                   renderer:function(value,metaData,record){
                       if(value == 1){
                           return FuiLocale.get('messagebox', 'yes');
                       }else{
                           return FuiLocale.get('messagebox', 'no');
                       }
                   }
               },
               {
                   header: '是否换页打印',
                   dataIndex: 'newPageF',
                   width:90,
                   renderer:function(value,metaData,record){
                       if(value == 1){
                           return FuiLocale.get('messagebox', 'yes');
                       }else{
                           return FuiLocale.get('messagebox', 'no');
                       }
                   }
               },
               {header: '顺序',dataIndex: 'sortNo',width:60},
               {header: '描述',dataIndex: 'description',flex:1},
               {dataIndex: 'code',hidden:true},
               {dataIndex: 'signLevelCode',hidden:true}
        ],
        tbar:[
               {
                   text: '新建',
                   method: 'create',
                   iconCls: 'icon-Create',
                   handler:function(btn,e){
                       var view = this.up('mrtypeview');
                       var chain = view.getActionChain('open');
                       chain.execute();
                   }
               },
               {
                   text: '编辑',
                   method: 'edit',
                   iconCls: 'icon-edit',
                   handler:function(btn,e){
                       var view = this.up('mrtypeview');
                       var grid = view.down('xapgrid');
                       var record = grid.getSelectionModel().getSelection();
                       if(record && record.length>0){
                           var rec = record[0].raw;
                           var chain = view.getActionChain('open');
                           chain.execute({
                               mrtp:rec
                           });
                       }else{
                           XapMessageBox.warn('请选择病历文书类型！','',view);
                       }
                   }
               },
               {
                   text: '删除',
                   method: 'delete',
                   iconCls: 'icon-Delete',
                   handler:function(btn,e){
                       var view = this.up('mrtypeview');
                       var grid = view.down('xapgrid');
                       var record = grid.getSelectionModel().getSelection();
                       if(record && record.length>0){
                           var rec = record[0].raw;
                           XapMessageBox.confirm2('是否确认删除选中的病历文书类型？',
                               function(btn, text){
                                   if (btn == 'yes') {
                                       var chain = view.getActionChain('delete');
                                       chain.execute({
                                           mrtp:rec
                                       });
                                   } 
                               }
                           );
                       }else{
                           XapMessageBox.warn('请选择病历文书类型！','',view);
                       }
                   }
               }
        ]
	}],
	initComponent: function() {
		this.callParent();
		this.initBlock();
	},
	setGridData: function(data) {
	}

})
Ext.define('iih.mr.wr.mr.view.MrDocEditView', {
    extend:  Xap.ej.template.BaseTemplate ,

    requires: [],
    alias: 'widget.mrdoceditview',
    layout: 'fit',

    xapConfig: {
        blocks: {
            'content': {
                xclass: 'iih.mr.block.editor.MrDocEditBlock',
                flex: 1
            }
        },

        actions: {
            'init': {
                xclass: 'iih.mr.wr.mr.action.MrDocEditAction',
//                url: 'http://127.0.0.1:8081/mr',
                url:'mr',
                blocks: {
                    content: 'content'
                }
            }, 
            'openMrDoc': {
                xclass: 'iih.mr.wr.mr.action.OpenMrAction',
                url: 'mr',
                blocks: {
                    content: 'content'
                }
            },
            'emrCmdDispatch': {
                xclass: 'iih.mr.action.editor.EmrCmdDispatchAction',
                blocks: {
                    content: 'content'
                }
            },
            'emrSave': {
                xclass: 'iih.mr.wr.mr.action.MrDocSaveAction',
                url: 'mr',
//                url: 'http://127.0.0.1:8081/mr',
                blocks: {
                    content: 'content'
                }
            },
            'emrReadOnly': {
                xclass: 'iih.mr.wr.mr.action.MrReadonlyAction',
                url: 'locked/mr'
//              url: 'http://127.0.0.1:8081/locked/mr',
            },
            'emrEdit':{
            	xclass:'iih.mr.wr.mr.action.MrDocCanEditAction',
            	url:'locked/mr'
//            	url:'http://127.0.0.1:8081/locked/mr'
            },
            'emrDocProperty': {
                xclass: 'iih.mr.wr.mr.action.MrDocPropertyAction',
                url: 'mr',
                blocks: {
                    content: 'content'
                }
            },
            'emrSubmit':{
                xclass: 'iih.mr.wr.mr.action.MrCheckUserCaAction',
                url: '/signUser',
                blocks: {
                    content: 'content'
                }
            },
            'emrSubmit2': {
                xclass: 'iih.mr.wr.mr.action.MrDocSubmitAction',
                url: 'submit/mr',
                blocks: {
                    content: 'content'
                }
            },
            'emrPrint':{
                xclass: 'iih.mr.wr.mr.action.MrPrintAction',
//                url: '/signUser',
                blocks: {
                    content: 'content'
                }
            },
            'approvePost': {
                xclass: 'iih.mr.wr.mr.action.MrDocApprovePostAction',
                url: 'approve/mr',
                blocks: {
                    content: 'content'
                }
            },
            'emrRevoke': {
                xclass: 'iih.mr.wr.mr.action.MrDocRevokeAction',
                url: 'submit/mr',
                blocks: {
                    content: 'content'
                }
            },
            'emrApprove2': {
                xclass: 'iih.mr.wr.mr.action.MrDocApproveAction',
                url: 'signUser',
                blocks: {
                    content: 'content'
                }
            },
            'emrApprove': {
           	 	xclass: 'iih.mr.wr.mr.action.MrCheckUserCaAction',
           	 	url: '/signUser',
           	 	blocks: {
           	 		content: 'content'
           	 	}
            },
            'emrStartApprove':{
            	xclass: 'iih.mr.wr.mr.action.MrDocStartApproveAction',
                url: 'startApprove/mr',
                blocks: {
                    content: 'content'
                }
            },
            'emrSignDispose':{
            	xclass: 'iih.mr.wr.mr.action.MrSignDisposeAction',
                url: 'signUser',
                blocks: {
                    content: 'content'
                }
            },
            'emrReject': {
                xclass: 'iih.mr.wr.mr.action.MrDocRejectAction',
                url: 'rejected/mr/',
//                url: 'http://127.0.0.1:8081/rejected/mr/',
                blocks: {
                    content: 'content'
                }
            },
            'emrAuditRevoke': {
                xclass: 'iih.mr.wr.mr.action.MrDocAuditRevokeAction',
                url: 'approve/mr',
                blocks: {
                    content: 'content'
                }
            },
            'emrSaveAsTemplate': {
                xclass: 'iih.mr.wr.mr.action.MrDocSaveAsTemplateAction',
                blocks: {
                    content: 'content'
                }
            },
            'emrRefreshMacro': {
                xclass: 'iih.mr.wr.mr.action.RefreshMacroAction',
                url:'macroElement',
                blocks: {
                    content: 'content'
                }
            },
            'emrRefreshMrDocValue': {
                xclass: 'iih.mr.wr.mr.action.RefreshMrDocValueAction',
                url:'mrDocValue',
                blocks: {
                    content: 'content'
                }
            },
            'emrRefreshDiagnosis': {
                xclass: 'iih.mr.wr.mr.action.RefreshMrDiagnosisAction',
                url:'ei/diagnosises',
                blocks: {
                    content: 'content'
                }
            },
            'editorCallBackAction': {
                xclass: 'iih.mr.wr.mr.action.EditorCallBackAction',
                url:'signUser',
                blocks: {
                    content: 'content'
                }
            },
            'disabledOfficeToolBarAction': {
                xclass: 'iih.mr.wr.mr.action.DisabledOfficeToolBarAction',
                url:'current_user',
                blocks: {
                    content: 'content'
                }
            },
            'emrNeatPrint': {
                xclass: 'iih.mr.wr.mr.action.MrDocNeatPrintAction',
                url: 'mr_doc_file',
                blocks: {
                    content: 'content'
                }
            },
            'emrPrintSelected': {
                xclass: 'iih.mr.wr.mr.action.SelectedPrintAction',
                blocks: {
                    content: 'content'
                }
            },
            'emrContinuePrint': {
                xclass: 'iih.mr.wr.mr.action.MrContinuePrintAction',
                url: 'mrs/for/continue/print',
                blocks: {
                    content: 'content'
                }
            },
            'emrSelectContinuePrint': {
                xclass: 'iih.mr.wr.mr.action.MrSelectContinuePrintAction',
                url: 'mrs',
                blocks: {
                    content: 'content'
                }
            },
            'emrEditorOperator': {
                xclass: 'iih.mr.action.editor.EmrEditorOperatorAction'
            },
            'emrRefreshValues':{
            	xclass: 'iih.mr.wr.mr.action.RefreshValuesAction',
            	url: 'allValue',
                blocks: {
                    content: 'content'
                }
            },
            'mergeAll':{
            	xclass: 'iih.mr.wr.mr.action.MergeAllAction',
//            	url: 'allValue',
                blocks: {
                    content: 'content'
                }
            },
            'closeProgress':{
            	xclass: 'iih.mr.wr.mr.action.CloseProgressAction',
//            	url: 'allValue',
                blocks: {
                    content: 'content'
                }
            },
            'emrPrint':{
            	xclass: 'iih.mr.wr.mr.action.PrintAction',
//            	url: 'allValue',
                blocks: {
                    content: 'content'
                }
            }
        },

        chains: {
            'init': ['init'],
            'openMrDoc': ['openMrDoc'],
            'emrPrint': ['emrPrint'],
            'emrPrintSelected':['emrPrintSelected'],
            'emrCmdDispatch': ['emrCmdDispatch'],
            'emrSave': ['emrSave'],
            'closeProgress': ['closeProgress'],
            'doSave': ['emrSave'],
            'emrReadOnly': ['emrReadOnly'],
            'emrEdit': ['emrEdit'],
            'mergeAll': ['mergeAll'],
            'emrDocProperty': ['emrDocProperty'],
            'emrSubmit':['emrSubmit'],
            'emrSubmit2':['emrSubmit2'],
            'emrPrint':['emrPrint'],
            'emrApprove2':['emrApprove2'],
            'mrSubmit':['mrSubmit'],
            'emrSignDispose':['emrSignDispose'],
            'emrRevoke':['emrRevoke'],
            'emrStartApprove':['emrStartApprove'],
            'emrApprove':['emrSubmit'],
            'emrReject':['emrReject'],
            'emrAuditRevoke':['emrAuditRevoke'],
            'emrSaveAsTemplate':['emrSaveAsTemplate'],
            'emrRefreshMacro':['emrRefreshMacro'],
            'emrRefreshReference':['emrRefreshMrDocValue'],
            'emrRefreshValues':['emrRefreshValues'],
            'emrRefreshMrDocValue':['emrRefreshMrDocValue'],
            'emrRefreshDiagnosis':['emrRefreshDiagnosis'],
            'disabledOfficeToolBarAction':['disabledOfficeToolBarAction'],
            'editorCallBackAction':['editorCallBackAction'],
            'emrNeatPrint':['emrNeatPrint'],
            'emrContinuePrint':['emrContinuePrint'],
            'approvePost':['approvePost'],
            'emrSelectContinuePrint':['emrSelectContinuePrint']
        },

        connections: {
            'content': [{
                selector: 'button[method=editorEvent]',
                event: 'editorEvent',
                chain: 'emrCmdDispatch'
            }, {
                event: 'afterrender',
                chain: 'init'
            }]
        }
    },
    
    initComponent : function() {
        var me = this;
        this.callParent();
        var canvas = Xap.getCanvas();
        this.relayEvents(canvas, ['refreshWorkArea']);
        this.addListener('refreshWorkArea', function(config) {
            var mrSn = config.viewConfig.mrSn;
            var chain = me.getActionChain('openMrDoc');
//            chain.execute({mrSn:mrSn});
        });
    },
    
    hasEdit: function() {
        var plugin = document.getElementById('iemrEditor');
        if (plugin != undefined &&plugin.valid&&plugin.IsModified()) {
            return true;
        } else {
            return false;
        }
    },
})
Ext.define('iih.po.com.action.TaskSearchAction', {
    extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override
	*/
	doExecute: function(context) {
	    this.callParent();
    	var operations = context.operations;
    	if(!IMER_GLOBAL.encounterSn)return;
    	var url = this.url;
    	var mclass = null;
    	var condition = {
    	   encounterSn: IMER_GLOBAL.encounterSn
    	};
    	var qs = Ext.Object.toQueryString(condition);
    	url += '?' + qs;
    	var METHODS = this.getInvocationMethods();
    	var operation = {
    	    url: url,
    	    mclass: mclass,
    	    method: METHODS.METHOD_GET,
    	    condition: condition,
            scope: this,
            success: this.onSuccess
    	};
    	operations.push(operation);
    },
    
    onSuccess: function(operation) {
        var view = this.getOwner();
        var m = operation.result;
        var grid = view.down('xapgrid[name=taskGrid]');
        if(m && m.dataList && grid){
            grid.setData(m.dataList);
        }
    }
});
Ext.define('iih.mr.wr.mr.view.MrDocListView', {
	extend:  Xap.ej.stl.view.LeftRightContainerTemplate ,

	           
	                                               
	                                                   
	                                                         
	                                                       
	                                                     
	                                                      
	                                                       
	                                                 
	                                                   
	                                                       
                                                         
                                                           
                                                            
                                                         
       
      
    
	alias:'widget.mrdoclistview',

	xapConfig: {
		
		blocks: {
			'left': {
		        xclass: 'iih.mr.wr.mr.block.MrDocSortTreeBlock',
		        width:200
            },
		    'right': {
		        xclass: 'iih.mr.wr.mr.block.MrDocListBlock'
            }
		},
        actions: {
        	'init': {
				xclass: 'iih.mr.wr.mr.action.MrDocSortTreeInitAction',
				url: 'sorttree/mrs',
				blocks: {
				   result: 'left'
				}
            },
            'treeSelect': {
				xclass: 'iih.mr.wr.mr.action.MrDocTreeSelectAction',
				url: 'mrs',
				blocks: {
				   result: 'right'
				}
            },
		    'btnUsable':{
                xclass:'iih.mr.wr.mr.action.MrDocBtnUsableAction',
                url:'mr/amr',
                blocks:{
                    result:'right'
                }
            },
		    'select':{
                xclass:'iih.mr.wr.mr.action.MrDocListSelectAction',
                url:'mr',
                blocks:{
                    result:'right'
                }
            },
            'create': {
                xclass: 'iih.mr.wr.mr.action.CreateMrDocAction',
                blocks:{
                    result:'left'
                }
            },
            'open': {
                xclass: 'iih.mr.wr.mr.action.OpenMrDocAction',
                blocks: {
                    result: 'right'
                }
            },
            'emrDocProperty': {
                xclass: 'iih.mr.wr.mr.action.MrDocPropertyAction',
                url: 'mr',
                blocks: {
                    content: 'content'
                }
            },
            'templateProperty': {
                xclass: 'iih.mr.wr.mr.action.MrTemplatePropertyInitAction',
                url:'mr/tpl/template',
                blocks: {
                    content: 'content'
                }
            },
            'getSelect': {
                xclass: 'iih.mr.wr.mr.action.MrDocListGetSelectAction',
                blocks: {
                    result: 'right'
                }
            },
            'confirmComplete': {
                xclass: 'iih.mr.wr.mr.action.ConfirmCompleteAction'
            },
            'finish': {
                xclass: 'iih.mr.wr.mr.action.MrDocFinishWriteAction',
                url: 'mr/writeCompleted/amr'
            },
            'delete': {
                xclass: 'iih.mr.wr.mr.action.MrDocListDeleteAction',
                url: 'mr',
                blocks: {
                    result: 'right'
                }
            },
            'searchTask': {
                xclass: 'iih.po.com.action.TaskSearchAction',
                url: 'task/en',
                blocks: {
                    result: 'right'
                }
            }
        },  
        chains: {
        	'init': ['init'],
        	'treeSelect': ['treeSelect'],
            'btnUsable': ['btnUsable'],
            'select': ['select'],
            'create': ['create'],
            'emrDocProperty':['emrDocProperty'],
            'templateProperty':['templateProperty'],
            'getSelect': ['getSelect'],
            'open': ['open'],
            'confirmComplete': ['confirmComplete'],
            'finish': ['finish'],
            'delete': ['delete'],
            'searchTask':['searchTask']
        },
        connections: {
        	'left': [/*{
                event: 'afterrender',
                chain: 'init'
            },*/{
                selector: 'xaptree',
                event: 'select',
                chain: 'treeSelect'
            }],
            'right': [{
                selector: 'xapgrid[name=mrDocGrid]',
                event: 'select',
                chain: 'select'
            },{
                selector: 'toolbar button[method=create]',
                event: 'click',
                chain: 'create'
            },{
                selector: 'toolbar button[method=delete]',
                event: 'click',
                chain: 'getSelect'
            },{
                selector: 'toolbar button[method=open]',
                event: 'click',
                chain: 'open'
            },{
                selector: 'toolbar button[method=property]',
                event: 'click',
                chain: 'emrDocProperty'
            }/*,{
                selector: 'toolbar button[method=templateProperty]',
                event: 'click',
                chain: 'templateProperty'
            }*/,{
                selector: 'toolbar button[method=finish]',
                event: 'click',
                chain: 'confirmComplete'
            },{
                selector: 'xapgrid[name=mrDocGrid]',
                event: 'itemdblclick',
                chain: 'open'
            },{
                selector: 'xapgrid[name=mrDocGrid]',
                event: 'linkClick',
                chain: 'open'
            }/*,{
                selector: 'xapgrid',
                event: 'linkClick',
                chain: 'open'
            }*/]
        }
	},
	initComponent : function() {
		this.callParent();
		this.addEvents("pageRefresh");//为视图添加刷新事件
		this.addListener('pageRefresh', function(){//添加监听事件
		    //var owner = this.getOwner();
	        /*var chainGrid = this.getActionChain('refresh');
	        if(chainGrid) {
	            chainGrid.execute();
	        };*/
	        var chainTree = this.getActionChain('init');
	        if(chainTree) {
	            chainTree.execute();
	        };
	        var chainTask = this.getActionChain('searchTask');
            if(chainTask) {
                chainTask.execute();
            }
		});
	}
});
Ext.define('iih.mr.wr.mr.view.MrDocQaEditView', {
    extend:  Xap.ej.template.BaseTemplate ,

    requires: [],

    alias: 'widget.mrdocqaeditview',
    layout: {
        type: 'fit'
    },

    xapConfig: {
        blocks: {
            'content': {
                xclass: 'iih.mr.block.editor.MrDocEditBlock',
                flex: 1
            }
        },

        actions: {
            'init': {
                xclass: 'iih.mr.wr.mr.action.MrDocQaEditAction',
//                url: 'http://127.0.0.1:8081/mr',
                url:'mr',
                blocks: {
                    content: 'content'
                }
            },
            'emrCmdDispatch': {
                xclass: 'iih.mr.action.editor.EmrCmdDispatchAction',
                blocks: {
                    content: 'content'
                }
            },
            'emrSave': {
                xclass: 'iih.mr.wr.mr.action.MrDocSaveAction',
                url: 'mr',
//                url: 'http://127.0.0.1:8081/mr',
                blocks: {
                    content: 'content'
                }
            },
            'editorCallBackAction': {
                xclass: 'iih.mr.wr.mr.action.QaEditorCallBackAction',
                url:'signUser',
                blocks: {
                    content: 'content'
                }
            },
            'disabledOfficeToolBarAction': {
                xclass: 'iih.mr.wr.mr.action.QaDisabledOfficeToolBarAction',
                url:'current_user',
                blocks: {
                    content: 'content'
                }
            },
            'emrEditorOperator': {
                xclass: 'iih.mr.action.editor.EmrEditorOperatorAction'
            }
        },

        chains: {
            'init': ['init'],
            'emrCmdDispatch': ['emrCmdDispatch'],
            'emrSave': ['emrSave'],
            'doSave': ['emrSave'],
            'disabledOfficeToolBarAction':['disabledOfficeToolBarAction'],
            'editorCallBackAction':['editorCallBackAction']
        },

        connections: {
            'content': [{
                selector: 'button[method=editorEvent]',
                event: 'editorEvent',
                chain: 'emrCmdDispatch'
            }, {
                event: 'afterrender',
                chain: 'init'
            }]
        }
    }
})
Ext.define('iih.mr.wr.mr.view.MrShareElementView', {
	extend:  Xap.ej.template.BaseTemplate ,

	                                       
    
	alias:'widget.mrshareelementview',
	
	id: 'mrshareelementid',

	border: 0,
    
    layout: 'fit',
    
	xapConfig: {
		
		blocks: {
			'content': {
		        xclass: 'iih.mr.wr.mr.block.MrShareElementBlock'
            }
		},
        actions: {
            'search': {
                xclass: 'iih.mr.wr.mr.action.MrShareElementSearchAction',
                url:'mr/md/shareElement',
                blocks: {
                   content: 'content'
                }
            },
        	'open': {
				xclass: 'iih.mr.wr.mr.action.MrShareElementPopAction',
				blocks: {
				   content: 'content'
				}
            },
            'delete': {
                xclass: 'iih.mr.wr.mr.action.MrShareElementDelAction',
                url:'mr/md/shareElement',
                blocks: {
                   content: 'content'
                }
            }
        },  
        chains: {
            'search': ['search'],
        	'open': ['open'],
        	'delete': ['delete']
        },
        connections: {
        	'content': [{
                event: 'afterrender',
                chain: 'search'
            },{
                selector: 'xapgrid',
                event: 'turnpage',
                chain: 'search'
            }]
        }
	},
	initComponent : function() {
		this.callParent();
	}
});
Ext.define('iih.mr.wr.mr.view.MrSignListView', {
	//extend: 'Xap.ej.stl.view.LeftRightContainerTemplate',
	extend:  Xap.ej.template.BaseTemplate ,

	                                                  
	                                                   

	alias:'widget.mrsignlistview',
	layout: {
        type : 'vbox',
        align : 'stretch'
    },

	xapConfig: {
		blocks: {
		    'content': {
                xclass: 'iih.mr.wr.mr.block.MrSignListBlock',
                flex:1
            }
		},
		actions: {
            'waitSignInit': {
               xclass: 'iih.mr.wr.mr.action.MrSignInitAction',
               url: 'waitSign/mrs',
               blocks: {
                  content: 'content'
               }
            },
            'alreadySignInit': {
               xclass: 'iih.mr.wr.mr.action.AlreadySignInitAction',
               url: 'signed/mrs',
               blocks: {
                  content: 'content'
               }
            },
            'signedPatients': {
               xclass: 'iih.mr.wr.mr.action.SignedPatientsInitAction',
               url: 'signed/patients',
               blocks: {
                  content: 'content'
               }
            },
            'waitDeptSignPatients': {
                xclass: 'iih.mr.wr.mr.action.WaitDeptSignPatientsInitAction',
                url: 'wait/dept/sign/patients',
                blocks: {
                   content: 'content'
                }
             },
            'waitDeptSignInit': {
               xclass: 'iih.mr.wr.mr.action.WaitDeptSignInitAction',
               url: 'waitDeptSign/mrs',
               blocks: {
                  content: 'content'
               }
            },
            'open': {
                xclass: 'iih.mr.wr.mr.action.MrSignOpenAction',
                url: 'startApprove/mr'
            },
            'alreadySignOpen': {
                xclass: 'iih.mr.wr.mr.action.AlreadySignOpenAction'
            }
        },
		   
        chains: {
            'waitSignInit': ['waitSignInit'],
            'alreadySignInit': ['alreadySignInit'],
            'signedPatients': ['signedPatients'],
            'waitDeptSignPatients':['waitDeptSignPatients'],
            'waitDeptSignInit': ['waitDeptSignInit'],
            'open': ['open'],
            'alreadySignOpen': ['alreadySignOpen']
        },
        
        connections: {
            'content': [/*{
                event: 'afterrender',
                chain: 'waitSignInit'
            },*/{
                selector: 'xaptabpanel xapgrid[name=waitPersonSign]',
                event: 'linkClick',
                chain: 'open'
            },{
                selector: 'xaptabpanel xapgrid[name=waitPersonSign]',
                event: 'itemdblclick',
                chain: 'open'
            },{
                selector: 'xaptabpanel xapgrid[name=waitDeptSign]',
                event: 'linkClick',
                chain: 'open'
            },{
                selector: 'xaptabpanel xapgrid[name=waitDeptSign]',
                event: 'itemdblclick',
                chain: 'open'
            },{
                selector: 'xaptabpanel xapgrid[name=alreadySign]',
                event: 'linkClick',
                chain: 'alreadySignOpen'
            },{
                selector: 'xaptabpanel xapgrid[name=alreadySign]',
                event: 'itemdblclick',
                chain: 'alreadySignOpen'
            },{
                selector: 'xapcombobox[name=patient]',
                event: 'change',
                chain: 'alreadySignInit'
            },{
                selector: 'xapcombobox[name=waitDeptSignPatient]',
                event: 'change',
                chain: 'waitSignInit'
            },{//翻页操作
				selector: 'xaptabpanel xapgrid[name=waitPersonSign]',
				event: 'turnpage',
				chain: 'waitSignInit'
			},{//翻页操作
				selector: 'xaptabpanel xapgrid[name=waitDeptSign]',
				event: 'turnpage',
				chain: 'waitSignInit'
			},{//翻页操作
				selector: 'xaptabpanel xapgrid[name=alreadySign]',
				event: 'turnpage',
				chain: 'waitSignInit'
			}]
        }
	},
	initComponent : function() {
		this.callParent();
		this.addEvents("pageRefresh");//为视图添加刷新事件
		this.addListener('pageRefresh', function(){//添加监听事件
			 var properties = this.getLayer(Xap.ej.block.Layer.PROPERTIES);
	        var chain = this.getActionChain('waitSignInit');
//	        var block = this.getBlock('content');
//	        var pageSize = block.pageSize;
	        if(properties.data == undefined){
	        	 if(chain) {
	            chain.execute({});
	        	}
	        }else{
	        	var pageSize = properties.data.pageSize;
		        var pageNum = properties.data.pageNum;
		        if(chain) {
		            chain.execute({
		            	pageSize:pageSize,
		            	pageNum:pageNum
		            });
		        }
	        }
		});
	}
});
Ext.define('iih.mr.wr.mr.view.MrTypeCcatView', {
	extend:  Xap.ej.template.BaseTemplate ,

	                                       
    
	alias:'widget.mrtypeccatview',
	
	id: 'mrtypeccatviewid',

	border: 0,
    
    layout: 'fit',
    
	xapConfig: {
		
		blocks: {
			'content': {
		        xclass: 'iih.mr.wr.mr.block.MrTypeCcatBlock'
            }
		},
        actions: {
            'search': {
                xclass: 'iih.mr.wr.mr.action.MrTypeCcatSearchAction',
                url:'mr/md/mrccat',
                blocks: {
                   content: 'content'
                }
            },
        	'open': {
				xclass: 'iih.mr.wr.mr.action.MrTypeCcatPopAction',
				blocks: {
				   content: 'content'
				}
            },
            'delete': {
                xclass: 'iih.mr.wr.mr.action.MrTypeCcatDelAction',
                url:'mrtypecustomcategory',
                blocks: {
                   content: 'content'
                }
            }
        },  
        chains: {
            'search': ['search'],
        	'open': ['open'],
        	'delete': ['delete']
        },
        connections: {
        	'content': [{
                event: 'afterrender',
                chain: 'search'
            }]
        }
	},
	initComponent : function() {
		this.callParent();
	}
});
Ext.define('iih.mr.wr.mr.view.MrTypeView',{
	extend :  Xap.ej.stl.view.LeftRightContainerTemplate ,

	requires: [],
               
	alias:'widget.mrtypeview',
	
	border: 0,
	
	id: 'mrtypeviewid',

	xapConfig: {
		blocks: {
			'left': {
                xclass: 'iih.mr.wr.mr.block.MrTypeCcatTreeBlock',
                width:200
            },
            'right': {
                xclass: 'iih.mr.wr.mr.block.MrTypeListBlock',
                flex:1
            }
		},		
		actions: {
			'tree': {
				xclass: 'iih.mr.wr.mr.action.MrTypeCcatTreeSearchAction',
				url: 'mr/md/mrccattree',
				blocks: {
					result: 'left'
				}
			},
			'search': {
                xclass: 'iih.mr.wr.mr.action.MrTypeSearchAction',
                url: 'mr/md/mrtype/ccat',
                blocks: {
                    result: 'right'
                }
            },
            'open': {
                xclass: 'iih.mr.wr.mr.action.MrTypePopAction',
                blocks: {
                   content: 'content'
                }
            },
            'delete': {
                xclass: 'iih.mr.wr.mr.action.MrTypeDelAction',
                url:'mr/md/mrtype',
                blocks: {
                   content: 'content'
                }
            }
		},

		chains: {
			'tree': ['tree'],
			'search': ['search'],
			'open': ['open'],
            'delete': ['delete']
		},
			
		connections: {
			'left': [{
			    event: 'afterrender',
			    chain: 'tree'
			},{
                selector: 'xaptree',
                event: 'select',
                chain: 'search'
            }]
		}
		
	},
	initComponent : function() {
		this.callParent();
		var self = this;
	}
})

Ext.define('iih.mr.wr.mr.view.MrWriteView', {
	extend:  Xap.ej.template.BaseTemplate ,

	requires: [],

	alias:'widget.mrwriteview',
	id:'mrwriteview',
	layout:'border',
	xapConfig: {
		blocks: {
			'content': {
				xclass: 'iih.mr.wr.mr.view.MrDocEditView',
				region:'center',
				flex:1
			},
			'helper': {
			    xclass: 'iih.po.com.view.RightEditView',
			    workscene:'mr',
			    region:'east',
			    split: true,
                collapsible: true,
                collapsed: true,
                header:false,
                width: 250
			}
		}
	}
});
Ext.define('iih.mr.wr.omr.action.OmrTemplateSearchAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override
	*/
	execute: function(context) {
		//科室下拉列表中的最新数据，改变下拉值时触发
		var opType=this.getOwner().ownerCt.ownerCt.ownerCt.ownerCt.opType;
		if(opType&&(opType=='reSelectTemp'||opType=='reSelectMr')){
			var createomrview=this.getOwner().ownerCt.ownerCt.ownerCt.ownerCt;
			var mrDocNmText=createomrview.down('[name=mrNm]');
	        mrDocNmText.setVisible(false);
	        var logicSmtTimeDateFiled=createomrview.down('[name=logicSmtDate]');
	        logicSmtTimeDateFiled.setVisible(false);
	        var higherLvlEmpId=createomrview.down('[name=higherLvlEmpId]');
	        higherLvlEmpId.setVisible(false);
		}
		var newValue = context.newValue;
	    this.prepareOperations(context.operations,newValue);
    },
    prepareOperations: function(operations,newValue) {
        var block = this.getBlock('condition');
        var condition = block.getData();
        var mainDiCd = IMER_GLOBAL.mainDiCd;
        var departCode = IMER_GLOBAL.department.code;//登陆科室编码
        var userCode = IMER_GLOBAL.user.code;//登陆用户
        var hospitalArea = IMER_GLOBAL.hospitalArea.code;//全院
        
        var url = this.url;
        if(condition) {
        	var cond = condition;
        	var ownerCode = "";
        	if(condition.dept){
        		//如果newValue不为undefined则为切换科室时触发的init操作
        		if(newValue!=undefined){
	        		ownerCode = ownerCode + "," + newValue;
	        	}else{
	        		if(condition.deptCode){
		        		ownerCode = ownerCode + "," + cond.deptCode;
		        	}else{
		        		ownerCode = ownerCode + "," + departCode;
		        	}
	        	}
        	}
        	if(condition.personal){
        		ownerCode = ownerCode + "," + userCode;
        	}
        	if(condition.all){
        		ownerCode = ownerCode  + "," + hospitalArea;
        	}
            ownerCode=ownerCode.substr(1);
        	
        	var typeCode = condition.typeCode;
        	var templateNm = condition.templateNm;
        	
        	if(typeCode==""||typeCode=="ALL"){
        		cond = {'mrCategoryCode':condition.mrCategoryCode,'ownerCode':ownerCode,'name':templateNm}
        	}else{
        		cond = {'typeCode':condition.typeCode,'ownerCode':ownerCode,'name':templateNm}
        	}
            var qs = Ext.Object.toQueryString(cond);
            if(qs){
                url += '?' + qs;
            }
        }
        url=url+'&addSignLevel=1&mainDiCode='+mainDiCd+'&signDeptCode='+departCode+'&statusCode=MRM07.05&enTypeCode=ENM01.01&pageNum=1&pageSize=100000';
        var operation = {
            url: url,
            method: 'get',
            condition: condition,
            scope: this,
            success: this.onSuccess
        };
        operations.push(operation);
    },
    onSuccess: function(operation) {
        var block = this.getBlock('result');
        if(operation.result.dataList){
        	block.setData(operation.result.dataList);
        }else{
        	block.setData([]);
        }
		var grid = block.down('xapgrid');
		if(grid&&grid.store.data.length>0){
			grid.getSelectionModel().select(0,false,true);
			var select = grid.getSelectionModel().getSelection()[0];
			grid.fireEvent('itemclick',grid, select, null, 0, null, null);
		}
    }
});

Ext.define('iih.mr.wr.omr.action.OmrTypeSearchAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override
	*/
	execute: function(context) {
	    this.prepareOperations(context.operations);
    },
    prepareOperations: function(operations) {
        var block = this.getOwner().getBlock('condition');
        var mrCustClaCd=block.down('[name=mrCategoryCode]').getValue();
        var condition={"mrTypeCustomCategoryCd":mrCustClaCd,"enTypeCd":'ENM01.01'};
        var url = this.url;
        /*if(condition) {
            var qs = Ext.Object.toQueryString(condition);
            if(qs) {
                url += '?'+qs;
            }
        }*/
        var operation = {
                url: url,
                method: 'get',
                params: condition,
                scope: this,
                success: this.onSuccess
                // fail: this.onFail
            };
        operations.push(operation);
    },
    onSuccess: function(operation) {
    	var owner=this.getOwner()
        var block = this.getOwner().getBlock('condition');
        var mrTypeCd=block.down('[name=typeCode]');
    	if(operation.result.dataList){
    		var mrTypeCd2=owner.mrTypeCd;
            mrTypeCd.setData(operation.result.dataList);
            if('MRM16.18'==mrTypeCd2){
            	owner.mrTypeCd=undefined;
            	mrTypeCd.select('MRM16.18');
            }else{
            	mrTypeCd.select('ALL');
            }
            var result = this.getOwner();
            var initChain = result.getActionChain('init');
            initChain.execute();
            //if(mrCustClaCd!='ALL')mrTypeCd.expand();
        }
    }
});

Ext.define('iih.mr.wr.omr.action.OmrCustClaSearchAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override
	*/
	execute: function(context) {
	    this.prepareOperations(context.operations);
    },
    prepareOperations: function(operations) {
        var url = this.url+'?enTypeCd=ENM01.01';
        var operation = {
                url: url,
                method: 'get',
                scope: this,
                success: this.onSuccess
            };
        operations.push(operation);
    },
    onSuccess: function(operation) {
        var block = this.getOwner().getBlock('condition');
        var mrCustClaCd=block.down('[name=mrCategoryCode]');
        var mrTypeCd=block.down('[name=typeCode]');
        //为辅助录入赋值 
        var mrDeptCode=block.down('[name=deptCode]');
        var departCode = IMER_GLOBAL.department.code;//登陆科室编码
        mrDeptCode.select(departCode);
        
        var owner=this.getOwner();	
        var properties = owner.ownerCt.ownerCt.ownerCt.ownerCt.getLayer(Xap.ej.block.Layer.PROPERTIES);
        mrCustClaCd.setData(operation.result.data.mrTypeCustomCategorys);
        mrTypeCd.setData(operation.result.data.mrTypes);
		//树节点选择病历分类编号
        if(properties.data){
        	var ccatCode = properties.data.ccatCode;
        	if(operation.result.data){
                //给病历类型分类赋值
                	var searchTemplateConfig=operation.result.data.searchTemplateConfig;
                	if('1'==searchTemplateConfig){
						mrCustClaCd.select('MRM14.03');
                		owner.mrTypeCd='MRM16.18';
                	}else{
						if(ccatCode&&ccatCode!='merge'){
                			mrCustClaCd.select(ccatCode);
						}else{
							mrCustClaCd.select('MRM14.09');
						}
                	}
                var result = this.getOwner();
                var initChain = result.getActionChain('init');
                initChain.execute();
            }else{
				if(ccatCode&&ccatCode!='merge'){
                	mrCustClaCd.select(ccatCode);
				}else{
					mrCustClaCd.select('MRM14.09');
				}
			}
        }else{
        	var searchTemplateConfig=operation.result.data.searchTemplateConfig;
        	if('1'==searchTemplateConfig){
        		mrCustClaCd.select('MRM14.03');
        		owner.mrTypeCd='MRM16.18';
        		console.log(createmrblock);
        	}else{
        		mrCustClaCd.select('MRM14.09');
        	}
        }
    }
});
Ext.define('iih.mr.wr.omr.action.CheckChangeAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override
	*/
	execute: function(context) {
		var block = this.getOwner().getBlock('condition');
	    var personal=block.down('[name=personal]');
	    var dept=block.down('[name=dept]');
	    var all=block.down('[name=all]');
	    
		var checkPersonal =personal.getValue();
		var checkDept =dept.getValue();
		var checkAll =all.getValue();
		 
		var sum = 0;
		var sdte = '';
		if(checkPersonal.personal){
			sum++;
			sdte = 'personal';
		}
		if(checkDept.dept){
			sum++;
			sdte = 'dept';
		}
		if(checkAll.all){
			sum++;
			sdte = 'all';
		}
		var name = context.event.from.name;
		//如果三个组件只选了一个,则最后一个设置为只读
		if(sum==1){
			var checkbox=block.down('[name='+sdte+']');
//			console.log(checkbox);
			checkbox.items.items[0].readOnly = true;
		}else{
			personal.items.items[0].readOnly = false;
			dept.items.items[0].readOnly = false;
			all.items.items[0].readOnly = false;
		}
		if(name=='dept'){
			var block = this.getOwner().getBlock('condition');
	        var deptCode=block.down('[name=deptCode]');
	        //登陆科室编码
	        //var departCode = IMER_GLOBAL.department.code;
	        deptCode.select("");
	        if(deptCode.disabled){
	        	deptCode.setDisabled(false);
	        }else{
	        	deptCode.setDisabled(true);
	        };
		}
        var result = this.getOwner();
        var initChain = result.getActionChain('init');
        initChain.execute();
    }
});

Ext.define('iih.mr.wr.omr.action.OmrTemplateSelectAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override
	*/
	execute: function(context) {
		var owner=this.getOwner();
		var content = owner.ownerCt.ownerCt.ownerCt;
		var confim=content.down('button[name=confim]');
		confim.setDisabled(false);
	    var rb = this.getBlock('result');
        var grid = rb.down('xapgrid'); 
        var selected=grid.getSelectionModel().getSelection();
        var mrDocNm=selected[0].data.name;
        var mrDocNmText=content.down('[name=mrNm]');
        mrDocNmText.setValue(mrDocNm);
        var logicSmtTimeDateFiled=content.down('[name=logicSmtDate]');
        logicSmtTimeDateFiled.setValue(new Date());
        var mrTypeCode=selected[0].data.mrTypeCode;
        
        var higherLvlEmpId=content.down('[name=higherLvlEmpId]');
        
        if(mrTypeCode=='MRM16.19'||mrTypeCode=='MRM16.20'){//上级医师查房记录
        	var higherLvlEmpNm = higherLvlEmpId.getRawValue();
        	mrDocNmText.setRawValue(higherLvlEmpNm+" "+mrDocNm);
            //设置只读
            higherLvlEmpId.setDisabled(false);
        }else{
        	higherLvlEmpId.select('');
            //设置只读
            higherLvlEmpId.setDisabled(true);
        }
    }
});

Ext.define('iih.mr.wr.omr.action.OmrTemplateDblclickAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	execute: function(context) {
		var bottom = this.getOwner().ownerCt.ownerCt.ownerCt.ownerCt;
		var chain = bottom.getActionChain('confim');
        if(chain) {
            chain.execute();
        }
	}     
});

Ext.define('iih.mr.wr.omr.view.OmrTemplateSelectView',{
	extend :  Xap.ej.template.BaseTemplate ,

	           
	                                             
	                                                        
		                                               
		                                           
		                                              
		                                        
	  

	alias:'widget.omrtemplateselectview',

	layout : {
		type: 'vbox',
		align : 'stretch'
	},
	height:335,
	xapConfig: {
		blocks: {
		    'condition': {
                xclass: 'iih.mr.wr.mr.block.MrTemplateSearchConditionBlock',
                height:85
            },
			'result': {
				xclass: 'iih.mr.wr.mr.block.WrTemplateListBlock'
				//height:250
			}
		},

		actions: {
		    'init':{
		        xclass:'iih.mr.wr.omr.action.OmrTemplateSearchAction',
		        url:'mr/tpl/template',
		        blocks:{
		            result:'result',
		            condition:'condition'
		        }
		    },
		    'select':{
                xclass:'iih.mr.wr.omr.action.OmrTemplateSelectAction',
                url:'mr/create/init',
                blocks:{
                    result:'result'
                }
            },
            'confim':{
                xclass:'iih.mr.wr.omr.action.OmrTemplateDblclickAction'
            },
            'initMrCustCla':{ 
                xclass:'iih.mr.wr.omr.action.OmrCustClaSearchAction',
                url:'mr/create/init',

                blocks:{
                    result:'condition'
                }
            },
            'searchMrType':{
                xclass:'iih.mr.wr.omr.action.OmrTypeSearchAction',
                url:'mrtypes',
                blocks:{
                    result:'condition'
                }
            },
            'checkChange':{
                xclass:'iih.mr.wr.omr.action.CheckChangeAction',
                blocks:{
                    result:'condition'
                }
            },
            'enterPress':{
                xclass:'iih.mr.wr.mr.action.EnterPressAction',
                blocks:{
                    result:'condition'
                }
            }
		},

		chains: {
		    'init':['init'],
		    'select':['select'],
		    'confim':['confim'],
		    'creatMrDoc':['creatMrDoc'],
		    'initMrCustCla':['initMrCustCla'],
		    'searchMrType':['searchMrType'],
		    'checkChange':['checkChange'],
		    'enterPress':['enterPress']
		},

		connections: {
		    'result':[/*{
		        event:'afterrender',
		        chain:'init'
		    },*/{
                selector: 'xapgrid',
                event: 'itemclick',
                chain: 'select'
            },{
            	selector: 'xapgrid',
                event: 'itemdblclick',
                chain: 'confim'
            }],
            'condition':[{
                event:'afterrender',
                chain:'initMrCustCla'
            },{
                selector: 'xapcombobox[name=mrCategoryCode]',
                event: 'change',
                chain: 'searchMrType'
            },{
                selector: 'xapcombobox[name=typeCode]',
                event: 'change',
                chain: 'init'
            },{
                selector: 'xapcheckboxgroup[name=personal]',
                event: 'change',
                chain: 'checkChange'
            },{
                selector: 'xapcheckboxgroup[name=dept]',
                event: 'change',
                chain: 'checkChange'
            },{
                selector: 'comboxgrid[name=deptCode]',
                event: 'change',
                chain: 'init'
            },{
                selector: 'xapcheckboxgroup[name=all]',
                event: 'change',
                chain: 'checkChange'
            },{
                selector: 'xaptextfield[name=templateNm]',
                event: 'specialkey',
                chain: 'enterPress'
            }]
		}
	}
})
Ext.define('iih.mr.wr.omr.block.OmrDocPropertyBlock',{
	extend :  Xap.ej.block.FormBlock ,

	           
		                                 
                                         
                                        
                                                    
	  
	alias:'widget.omrdocpropertyblock',
	id:'omrdocpropertyblock',
	/*
     * layout:{ type: 'table', columns: 2, //width: 1024, tableAttrs: { border:
     * 0, cellpadding: 4, // cellspacing: 1, width: '100%' }, tdAttrs: { valign:
     * 'left' }},
     */
	layout:{
		type: 'table',
		columns: 3,
		tableAttrs: {
			border: 0,
			//cellpadding: 2,
			width: '100%'
		},
		tdAttrs: {
			valign: 'left'
		}
	},
	/*buttons:[{
            xtype: "button",
            name: 'close',
            method:'close',
            text: '关闭',
            iconCls: 'icon-close'
        },{
            xtype: "button",
            name: 'confim',
            method:'confim',
            text: '确认',
            disabled:true,
            iconCls: 'icon-OK'
        },{
            xtype: "button",
            name: 'confimUpPro',
            method:'confimUpPro',
            text: '确认',
            iconCls: 'icon-OK'
        },{
            xtype: "button",
            name: 'cancel',
            method:'cancel',
            text: '取消' ,
            iconCls: 'icon-cancel' 
    }],*/
	
	items: [/*,{
		xtype:'xaptextfield',
		name:'jobTitleCd',
		padding:'10 0 0 15',
		fieldLabel:'职称',
		labelWidth:60,
		queryMode: 'local',
		readOnly:true,
		disabled:true
	},*/{
		xtype:'xaptextfield',
		name:'mrNm',
		fieldLabel:'病历标题',
		labelWidth:60,
//		hidden:true,
		width:250,
//		colspan:2,
		padding:'5 0 0 15'
	},{
		xtype:'datetimefield',
		name:'logicSmtDate',
		fieldLabel:'业务时间',
		labelWidth:60,
		width:210,
		padding:'5 0 0 22'
	},{
		xtype:'xapcombobox',
		name:'higherLvlEmpId',
		padding:'5 0 0 15',
		fieldLabel:'上级查房医师',
		labelWidth:80,
		editable:false,
		width:200,
		disabled:true,
		queryMode: 'local',
		displayField: 'name',
		valueField: 'id'
	}/*,{
		xtype:'xapcombobox',
		name:'relevance',
		fieldLabel:'关联医嘱',
		labelWidth:60,
		queryMode: 'local',
		disabled:true,
		padding:'10 0 0 15',
		displayField: 'name',
		valueField: 'abbr'
	}*/],
	setData: function(data) {
        this.callParent(arguments);
    },
    getData: function() {
        this.callParent(arguments);
    }
})
Ext.define('iih.mr.wr.omr.action.ConfimCreateOmrDocAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	doExecute: function(context) {
		var owner=this.getOwner();
		var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
		var opType=properties.data.opType;
		var tab=owner.getBlock('content').down('xaptabpanel');
		var activeTab=tab.getActiveTab();
		var tabName=activeTab.name;
		//病历文书类型
		var typeCode;
		if(tabName=='pastmrselectview'){
			var mr=owner.getBlock('content').down('pastmrselectview').getBlock('right').medicalRecord;
			if(!mr){
				XapMessageBox.info('请选择一份既往病历！');
				return;
			}
			typeCode=mr.typeCode;
		}else if(tabName=='createomrdocview'){
			var grid= this.getBlock('content').down('createomrdocview').getBlock('content').down('xapgrid');
			var rb = grid.getSelectionModel().getSelection(); 
			if(rb.length == 0){
				XapMessageBox.info('请先选一个模板！');
	            return
	        }else{
	        	typeCode = rb[0].data.mrTypeCode;
	        }
		}else if(tabName=='csakrview'){
			var csaDiAndMrTemplateBlock=Ext.getCmp('csaDiAndMrTemplateBlock');
			var csakrview=Ext.getCmp('csakrview');
			var csaTreeBlock=csakrview.getBlock('left');
			var csaTree=csaTreeBlock.down('xaptree');
			var treeNode = csaTree.getSelectionModel().getSelection();
			var text=treeNode[0].raw.text;
			var diCode=treeNode[0].raw.diCode;
	        var diGrid = csaDiAndMrTemplateBlock.down('xapgrid[action=digrid]');
	        var mrGrid = csaDiAndMrTemplateBlock.down('xapgrid[action=mrgrid]');
	        
	        var diSelModel=diGrid.getSelectionModel(); 
	        var mrSelModel=mrGrid.getSelectionModel();
	        
	        var diSelection = diSelModel.getSelection();
	        var mrSelection = mrSelModel.getSelection();
	        if(diSelection.length==0&&text!='通用'&&diCode!='*'){
	        	XapMessageBox.info('请选择诊断记录!');
	        	return;
	        }
	        if(mrSelection.length == 0){
	        	XapMessageBox.info('请先选一个模板！');
	            return;
	        }
	        console.log(mrSelection);
//			alert(mrSelection.length);
			typeCode = mrSelection[0].data.mrTypeCode;
		}
		
		if(opType&&opType=='reSelectTemp'){
			var right = properties.data.omrDocEditPage;
            if(right){
      			delete right.mrTpCcatCd;
      			var objView=right.down("objectview");
      			if(objView){
      				right.remove(objView);
      			}
				var tab=owner.getBlock('content').down('xaptabpanel');
				var activeTab=tab.getActiveTab();
				var tabName=activeTab.name;
				if(tabName=='pastmrselectview'){
					var mr=owner.getBlock('content').down('pastmrselectview').getBlock('right').medicalRecord;
					right.opType = 'reSelectMr';
					right.fileData=mr.fileData;
					right.medicalRecord.templeCode=mr.templeCode;
				}else if(tabName=='createomrdocview'){
					var grid = this.getBlock('content').down('createomrdocview').getBlock('content').down('xapgrid');
			        var rb = grid.getSelectionModel().getSelection(); 
			        var data=rb[0].data;
			        right.medicalRecord.templeCode=data.code;
			        right.tempFilePk=data.filePk;
					right.opType = 'reSelectTemp';
				}else if(tabName=='csakrview'){
					var csaDiAndMrTemplateBlock=Ext.getCmp('csaDiAndMrTemplateBlock');
//			        var diGrid = csaDiAndMrTemplateBlock.down('xapgrid[action=digrid]');
			        var mrGrid = csaDiAndMrTemplateBlock.down('xapgrid[action=mrgrid]');
			        
//			        var diSelModel=diGrid.getSelectionModel(); 
			        var mrSelModel=mrGrid.getSelectionModel();
			        
//			        var diSelection = diSelModel.getSelection();
			        var mrSelection = mrSelModel.getSelection();
			        right.medicalRecord.templeCode=mrSelection[0].data.mrTemplateCode;
			        right.tempFilePk=mrSelection[0].data.filePk;
					right.opType = 'reSelectTemp';
//					alert(mrSelection.length);
				}
				
		        var initChain =  right.getActionChain('init');
		        initChain.execute();
          	}
            owner.ownerCt.close();
            return
		}
		
		//就诊号
		var encounterSn = IMER_GLOBAL.encounterSn;
		var data = {'typeCode':typeCode,'encounterPk':encounterSn}
		this.prepareOperations(context.operations,data);
		
	},
    prepareOperations: function(operations,data) {
        var url = 'omr/canCreate';
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            method: METHODS.METHOD_CREATE,
            data:data,
            condition: null,
            scope: this,
            success: this.onSuccess
        };
        operations.push(operation);
    },
    onSuccess: function(operation) {

    	var form= this.getBlock('content').getForm();
    	var data =form.getValues();
    	var owner=this.getOwner();
    	var tab=owner.getBlock('content').down('xaptabpanel');
		var activeTab=tab.getActiveTab();
		var tabName=activeTab.name;
		var typecode;
		var mrTypeCustomCode;
		var diagnosisModels = [];
		if(tabName=='pastmrselectview'){
			var mr=owner.getBlock('content').down('pastmrselectview').getBlock('right').medicalRecord;
			if(!mr){
				XapMessageBox.info('请选择一份既往病历！');
				return;
			}
			typeCode=mr.typeCode;
			mrTypeCustomCode=mr.mrTypeCustomCode;
		}else if(tabName=='createomrdocview'){
			var grid = this.getBlock('content').down('createomrdocview').getBlock('content').down('xapgrid');
		    var rb = grid.getSelectionModel().getSelection(); 
		    var conditionBlock=this.getBlock('content').down('createomrdocview').getBlock('content').getBlock('condition');
		    var mrCustClaCd=conditionBlock.down('[name=mrCategoryCode]');
		    mrTypeCustomCode=mrCustClaCd.getValue();
//			if(rb.length == 0){
//				XapMessageBox.info('请先选一个模板！');
//	            return
//	        }else{
	        	typeCode = rb[0].data.mrTypeCode;
	        	var rbData=rb[0].data;
	        	data.code=rbData.code;
	        	data.mrTypeCustomCode=mrTypeCustomCode;
	            if(data && rbData){
	                for(var p in rbData){
	                    data[p] = rbData[p];
	                }
	             }
//	        }
		}else if(tabName=='csakrview'){
			var csaDiAndMrTemplateBlock=Ext.getCmp('csaDiAndMrTemplateBlock');
	        var diGrid = csaDiAndMrTemplateBlock.down('xapgrid[action=digrid]');
	        var mrGrid = csaDiAndMrTemplateBlock.down('xapgrid[action=mrgrid]');
	        
	        var diSelModel=diGrid.getSelectionModel(); 
	        var mrSelModel=mrGrid.getSelectionModel();
	        
	        var diSelection = diSelModel.getSelection();
	        var mrSelection = mrSelModel.getSelection();
	        /*if(mrSelection.length == 0){
	        	XapMessageBox.info('请先选一个模板！');
	            return;
	        }*/
	        /*if(diSelection.length==0){
	        	XapMessageBox.info('请选择诊断记录!');
	        	return;
	        }else{*/
	        	for(var i=0;i<diSelection.length;i++){
	        		//返回的诊断结果应该包含ownerType,ownerCd.
	        		var node = {
		          		      'diNm':diSelection[i].data.diName,
		    	       	      'diEmpNm':IMER_GLOBAL.user.name,
		    	       	      'diEmpCd':IMER_GLOBAL.user.code,
		    	       	      'diTime':'',
		    	       	      'diCd':diSelection[i].data.diCode,
		    				  'diSn':'',
		    				  'icdCd':diSelection[i].data.icdCode,
		    				  'setOwnerTypeCd':diSelection[i].data.ownerType,
		              	      'setOwnerCd':diSelection[i].data.ownerCode,
		    	        	   leaf:true	 
		             };
	        		
	        		diagnosisModels.push(node);
	        	}
	        
			typeCode = mrSelection[0].data.mrTypeCode;
			data.mrTypeCode=typeCode;
			data.filePk=mrSelection[0].data.filePk;
			data.code=mrSelection[0].data.mrTemplateCode;
		}
            if(typecode=='MRM16.19'||typecode=='MRM16.20'){
            	  if(data.higherLvlEmpId==''){
            		  XapMessageBox.info('请选择上级查房医师！');
            		  return
            	  }
            }
        	if(data==undefined){
                XapMessageBox.info('请填写必要属性！');
                return
            }
            if(data.mrNm==''){
                XapMessageBox.info('请填写病历文书名称！');
                return
            }
            if(data.logicSmtDate==''){
                XapMessageBox.info('请填写业务时间！');
                return
            }
            var outDiagnosisView = Ext.getCmp('outdiagnosisview');
            if(outDiagnosisView){
            	outDiagnosisView.csaInsertDiagnosis(diagnosisModels);
            }
            var higherLvlEmpId = this.getBlock('content').down('[name=higherLvlEmpId]');
            var superiorDoctorName='';
            if(higherLvlEmpId){
            	superiorDoctorName=higherLvlEmpId.rawValue.substring(0,higherLvlEmpId.rawValue.indexOf(' '));
            }
            var medicalRecord={filePk:data.filePk,
            		name:data.mrNm,
            		encounterPk:IMER_GLOBAL.encounterSn,
            		bizTime:data.logicSmtDate,
            		typeCode:data.mrTypeCode,
            		mrTypeCustomCode:mrTypeCustomCode,
            		signLevelCode:data.signLevelCode,
            		superiorDoctorId:data.higherLvlEmpId,
            		superiorDoctorName:superiorDoctorName,
            		templeCode:data.code};
            var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
		    //得到文书编辑器页面
            var right = properties.data.omrDocEditPage;
            if(right){
      			delete right.mrTpCcatCd;
      			var objView=right.down("objectview");
      			if(objView){
      				right.remove(objView);
      			}
				var tab=owner.getBlock('content').down('xaptabpanel');
				var activeTab=tab.getActiveTab();
				var tabName=activeTab.name;
				if(tabName=='pastmrselectview'){
					var mr=owner.getBlock('content').down('pastmrselectview').getBlock('right').medicalRecord;
					right.opType = 'newFromPastMr';
					right.fileData=mr.fileData;
					medicalRecord.typeCode=mr.typeCode;
					medicalRecord.signLevelCode=mr.signLevelCode;
					medicalRecord.encounterPk=mr.encounterPk;
					medicalRecord.templeCode=mr.templeCode;
				}else if(tabName=='createomrdocview'||tabName=='csakrview'){
					right.opType = 'new';
				}
				
				right.medicalRecord=medicalRecord;
		        var initChain =  right.getActionChain('init');
		        initChain.execute();
          	}
            
            owner.ownerCt.close();
        
    
    }       
});

Ext.define('iih.mr.wr.omr.action.InitOmrDocPropertyAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override
	*/
	execute: function(context) {
	    /*if(this.getOwner().ownerCt.ownerCt==undefined){//从病历文书属性进来
	        if(undefined!=context.mrSn){
	            if(context.from=='editor'){//从编辑器打开属性
	                var block = this.getOwner().getBlock('content');
	                var close=block.down('button[name=close]');
	                close.setVisible(false);
	                var confim=block.down('button[name=confim]');
	                confim.setVisible(false);
	                var higherLvlEmpId=block.down('[name=higherLvlEmpId]');
	                higherLvlEmpId.setReadOnly(true);
	                var mrNm=block.down('[name=mrNm]');
	                mrNm.setReadOnly(true);
	            }else{//从病历文书列表打开属性
	                this.setReadonly();
	            }
	            this.getOwner().mrPk=context.mrSn;
	            this.initMrDocProperty(context.operations,context.mrSn);
	        }
	    }else{//从新建病历文书进来*/
	        this.initHigherLvlEmpId(context.operations);
//	    }
    },
    initHigherLvlEmpId: function(operations) {
        var url = this.url+'?deptCd='+IMER_GLOBAL.department.code;
        var operation = {
            url: url,
            method: 'get',
            scope: this,
            success: this.onSuccess
        };
        operations.push(operation);
    },
    onSuccess: function(operation) {
    	
        var block = this.getOwner().getBlock('content');
        var higherLvlEmpId=block.down('[name=higherLvlEmpId]');
        if(operation.result.data.employees){
            higherLvlEmpId.setData(operation.result.data.employees);
        }
    },
    initMrDocProperty: function(operations,mrSn) {
        var url = 'mr/'+mrSn+'?withFile=false';
        var operation = {
                url: url,
                method: 'get',
                scope: this,
                success: this.onSearchSuccess
        };
        operations.push(operation);
    },
    onSearchSuccess: function(operation) {
        var block = this.getOwner().getBlock('content');
        var logicSmtDate=block.down('[name=logicSmtDate]');
        logicSmtDate.setValue(operation.result.data.bizTime);
        var mrNm=block.down('[name=mrNm]');
        mrNm.setValue(operation.result.data.name);
        var higherLvlEmpId=block.down('[name=higherLvlEmpId]');
        var jobTitleCd=block.down('[name=jobTitleCd]');
        var typeCode = operation.result.data.typeCode;
        if("MRM16.19"==typeCode||"MRM16.20"==typeCode){
            higherLvlEmpId.setValue(operation.result.data.higherLvlEmpId);
            jobTitleCd.setValue(operation.result.data.jobTitleCd);
        }/*else{
            higherLvlEmpId.setVisible(false);
            jobTitleCd.setVisible(false);
        }*/
    },
    setReadonly: function() {
        var block = this.getOwner().getBlock('content');
        var higherLvlEmpId=block.down('[name=higherLvlEmpId]');
        higherLvlEmpId.setReadOnly(true);
        var mrNm=block.down('[name=mrNm]');
        mrNm.setReadOnly(true);
        var logicSmtDate=block.down('[name=logicSmtDate]');
        logicSmtDate.setReadOnly(true);
        var cancel=block.down('button[name=cancel]');
        cancel.setVisible(false);
        var confim=block.down('button[name=confim]');
        confim.setVisible(false);
        var confimUpPro=block.down('button[name=confimUpPro]');
        confimUpPro.setVisible(false);
    }
});

Ext.define('iih.mr.wr.omr.action.ModifyOmrProAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	 * @Override
	 */
	execute: function(context) {
	    var operations = context.operations;
        if(!operations) {
            return;
        }
	    var page=this.getOwner();
	    var form= this.getBlock('content').getForm();
	    var data =form.getValues();
	    var mr=page.mr;
	    mr.bizTime=data.logicSmtDate;
	    mr.name=data.mrNm;
	    mr.superiorDoctorId=data.higherLvlEmpId;
	    mr.mastDoctorCd=data.masterDoctorName;
	    mr.dirDoctorCd=data.dirDoctorName;
        this.openPrepareOperations(operations, mr);
    },
    
    openPrepareOperations: function(operations,data) {
        var METHODS = this.getInvocationMethods();
        var url=this.url+'/'+data.mrPk;
        var operation = {
            url: url,
            method: METHODS.METHOD_UPDATE,
            data:data,
            scope: this,
            success: this.onOpenSuccess,
            fail: this.onFail
        };
        operations.push(operation);
    },
    onOpenSuccess: function(operation) {
//    	var mrDocEditView=this.getOwner().mrDocEditView;
//    	if(mrDocEditView){
//    		mrDocEditView.medicalRecord=operation.result.data;
////    		console.log(mrDocEditView);
//    		mrDocEditView.up('workareapageview').getActiveTab().tab.setText(operation.result.data.name);
//    	}
//    	var mrDocListView = this.getOwner().mrDocListView;
//    	if(mrDocListView){
//    		var chain = mrDocListView.getActionChain('init');
//            if(chain) {
//                chain.execute();
//            }
//    	}
        
        this.getOwner().ownerCt.close();
    },
    onFail: function(operation) {
        Ext.Msg.alert('提示','保存失败!');
    }
});

Ext.define('iih.mr.wr.omr.view.OmrDocPropertyView',{
	extend :  Xap.ej.template.BaseTemplate ,

	           
	                                              
  	                                                            
	                                                    
	                                                    
	                                                
	                                               
	  

	alias:'widget.omrdocpropertyview',
	
	layout:'fit',
	
	xapConfig: {
		blocks: {
		    'content': {
                xclass: 'iih.mr.wr.omr.block.OmrDocPropertyBlock',
                height:100
            }
		},

		actions: {
		    'init': { 
		    	xclass: 'iih.mr.wr.omr.action.InitOmrDocPropertyAction',
		        url:'mr/create/init',
		        blocks: {
		            content:'content'
		        }
		    }/*,
		    'initjobTitle': { 
                xclass: 'iih.mr.wr.mr.action.InitjobTitleAction',
                blocks: {
                    content:'content'
                }
            }*/,
            'confim':{
                xclass:'iih.mr.wr.omr.action.ConfimCreateOmrDocAction',
                url:'mr_doc_file',
                blocks:{
                    content:'content'
                }
            },
            'confimUpPro':{
                xclass:'iih.mr.wr.omr.action.ModifyOmrProAction',
                url:'mr_doc_file',
                blocks:{
                    content:'content'
                }
            },
		    'cancel': {
		        xclass: 'iih.mr.wr.mr.action.CancelCreateMrDocAction',
		        //url:'cancelTemplatePropertyEdit',
		        blocks: {
		            content: 'content'
		        }
		    }
		},

		chains: {
		    'init': ['init'],
//		    'initjobTitle': ['initjobTitle'],
            'confim': ['confim'],
            'confimUpPro': ['confimUpPro'],
            'cancel': ['cancel']
		},

		connections: {
		    'content':[{
                event:'afterrender',
                chain:'init'
            }/*,{    
                //确认按钮（新建病历选择模板属性）
                selector: 'button[method=confim]',
                event: 'click',
                chain: 'confim'
            },{    
                //确认按钮（修改病历属性）
                selector: 'button[method=confimUpPro]',
                event: 'click',
                chain: 'confimUpPro'
            },{    
                //取消按钮
                selector: 'button[method=cancel]',
                event: 'click',
                chain: 'cancel'
            },{    
                //关闭按钮
                selector: 'button[method=close]',
                event: 'click',
                chain: 'cancel'
            },{    
                //上级医师
                selector: 'xapcombobox[name=higherLvlEmpId]',
                event: 'change',
                chain: 'initjobTitle'
            }*/]
		}
	}
})
Ext.define('iih.mr.wr.omr.view.CreateOmrDocView',{
	extend :  Xap.ej.template.BaseTemplate ,

	           
	                                               
	                                            
		                                              
	  

	alias:'widget.createomrdocview',

	xapConfig: {
		blocks: {
		    'content': {
                xclass: 'iih.mr.wr.omr.view.OmrTemplateSelectView',
                height:427
            }/*,
			'bottom': {
				xclass: 'iih.mr.wr.omr.view.OmrDocPropertyView',
				height:120
			}*/
		}
	}
})
/** 
 *Panel模板
 * @extends Ext.panel.Panel
 * @author ：dan_zhang<dan_zhang@founder.com>
 */
Ext.define('Xap.ej.block.PanelBlock', {
	extend:  Ext.panel.Panel ,
	alias: 'widget.xapblockpanel',
	
	            
		                              
		                      
		                           
	  

	initComponent : function() {
		this.callParent();
		this.initBlock();
		this.refreshLayers();
	},
	/*
	 * 打开等待遮罩层
	 * author chenyajie
	 */
	openMask : function() {
		this.getEl( ).mask('正在处理中，请稍候......'); 
	},
	/*
	 * 关闭等待遮罩层
	 * author chenyajie
	 */
	closeMask : function() {
		this.getEl( ).unmask(); 
	},
	/*
	 * 初始化Block，考虑在afterrender事件后需要进行事件绑定时被调用
	 */
	initBlock : Ext.emptyFn,

	refreshLayers: Ext.emptyFn,

	getData : Ext.emptyFn,

	setData : Ext.emptyFn,

	getLayer: function(name) {
		if(!name)
			return null;
		if(!this.layers) {
			this.layers = {};
		}
		var l = this.layers[name];
		// canvas层是全局的
		if(!l) {
			// TODO 插件Layer工厂
			var layerFactory = Xap.getLayerFactory();
			l = layerFactory.createLayer(name, this);
			this.layers[name] = l;
		}
		return l;
	},

	isValid : Ext.emptyFn,

	connect : function() {
		var obj, event, chain;
		var length = arguments.length;
		if(length >= 3) {
			var selector = arguments[0];
			obj = this.down(selector);
			event = arguments[1];
			chain = arguments[2];
		}
		else if(length == 2) {
			obj = this;
			event = arguments[0];
			chain = arguments[1];
		}
		/* var obj = this.down(selector);
		if(!obj) {
			obj = this;
		}*/
		if(!event || !chain)
			// TODO log
			return;
		// TODO 避免重复监听一个事件
		obj.on(event, function() {
			Xap.debug('Event[' + event + '] begin...');
			chain.execute({
				event: {
					from: obj,
					name: event,
					arguments: arguments
				}
			});
			Xap.debug('Event[' + event + '] end.');
		});
	},

	// TODO 实现
	disconnect : Ext.emptyFn
});
Ext.define('iih.mr.wr.omr.block.PastMrDocTreeBlock',{
	extend :  Xap.ej.block.PanelBlock ,
	
	           
	                                      
	                                          
	  
	alias:'widget.outmrdoctreeblock',

	layout: 'fit',
	
	items: [{
		xtype:'xaptree',
		border:true,
		ifSelect:true,
		autoScroll:true,
		height:400,
		rootVisible: false
	}],
	
	tbar:[
	      {
	            itemId: 'encounterCombox',
	            xtype: 'xapcombobox',
	            emptyText: '请选择就诊',
	            labelAlign: 'right',
	            editable:false,
	            maxWidth: 300,
	            flex:1,
	            allowBlank: true,
	            forceSelection: true/*,
	            listeners:{
	                change : function(combo,newValue,oldValue) {
	                    var block = combo.up('assistantblock');
	                    var tabpanel = block.down('xaptabpanel');
	                    var tabs = tabpanel.items.items;
	                    for (var i = 0; i < tabs.length; i++) {
	                        var tab = tabs[i];
	                        tab.refresh = false;
	                    };
	                    var tab = tabpanel.getActiveTab();
	                    tab.fireEvent("changeEncounter",newValue);
	                    tab.refresh = true;
	                }
	            }*/
	        }
    ],
	
    setData: function(data) {
	    var tree = this.down('xaptree');
	    var myobj=eval(data); 
	    tree.setData(myobj);
	},
    getData: function() {
        return null;
    },
    setEncouterData: function(data){
        var combo = this.down('xapcombobox[itemId=encounterCombox]');
        if(combo){
            combo.clearValue();
            if(data){
                var array = new Array();
                Ext.each(data,function(rec){
                    if(rec){
                        var time = Ext.Date.parse(rec.currentDeptIntoTime, 'time');
                        var value = Ext.Date.format(time, 'Y-m-d H:i');
                        //var value = Ext.util.Format.date(rec.currentDeptIntoTime, "Y-m-d H:i:s");
                        value = value + '_';
                        value = value + rec.encounterTypeName;
                        if(rec.currentMainDiagnosisName){
                            value = value + '_';
                            value = value + rec.currentMainDiagnosisName;
                        }
                        array.push({'text':value,'value':rec.pk});
                    }
                });
                combo.setData(array);
                //var record = combo.getStore().getAt(0);
                //combo.select(record);
                combo.setValue(IMER_GLOBAL.encounterSn);
            }
        }
    }
    
})
Ext.define('iih.mr.wr.omr.action.EncounterListInitAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
    * @Override
    */
    doExecute: function(context) {
        this.callParent();
        if(!IMER_GLOBAL.patientId)
            return;
        var operations = context.operations;
        var url = this.url||'mr/ens';
        var mclass = null;
        var condition = {
            patientId: IMER_GLOBAL.patientId,
            workScreen: '2'
        };
        var qs = Ext.Object.toQueryString(condition);
        url += '?' + qs;
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: mclass,
            method: METHODS.METHOD_GET,
            condition: condition,
            scope: this,
            success: this.onSuccess
        };
        operations.push(operation);
    },
    
    onSuccess: function(operation) {
        var m = operation.result;
		if(m){
		    var block = this.getBlock('left');
		    if(block)
		        block.setEncouterData(m.dataList);
		    else
		        this.setEncouterData(m.dataList);
		}
    },
    
    setEncouterData: function(data){
        var combo = this.combo;
        if(combo){
            combo.clearValue();
            if(data){
                var array = new Array();
                Ext.each(data,function(rec){
                    if(rec){
                        var time = Ext.Date.parse(rec.currentDeptIntoTime, 'time');
                        var value = Ext.Date.format(time, 'Y-m-d H:i');
                        //var value = Ext.util.Format.date(rec.currentDeptIntoTime, "Y-m-d H:i:s");
                        value = value + '_';
                        value = value + rec.encounterTypeName;
                        if(rec.currentMainDiagnosisName){
                            value = value + '_';
                            value = value + rec.currentMainDiagnosisName;
                        }
                        array.push({'text':value,'value':rec.pk});
                    }
                });
                combo.setData(array);
                //var record = combo.getStore().getAt(0);
                //combo.select(record);
                
                combo.setValue(IMER_GLOBAL.encounterSn);
            }
        }
    }
});
Ext.define('iih.mr.wr.omr.action.PastMrTreeInitAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	                                 
	
	execute: function(context) {
	    this.showLoading();
        var operations = context.operations;  
        var encounterCombobox=this.getBlock('left').down('xapcombobox');
        var enPk=encounterCombobox.getValue();
        if(enPk==undefined){
        	enPk = IMER_GLOBAL.encounterSn;
        }
        var url = this.url+"?encounterPk="+enPk+'&showAllCourse=1';  
        var mclass = null;        
        var operation = {
            url: url,
            mclass: mclass,
            method: 'get',
            condition: null,
            scope: this,
            success: this.onSuccess
        };
        operations.push(operation);  
    }, 

    onSuccess: function(operation) {
        var block = this.getBlock('left');
//        var right=this.getOwner().getBlock('right');
//        var owner=this.getOwner();
//        var mr=right.medicalRecord;
        var m = operation;
        if(m.result.data.children){
        	block.setData(m.result.data.children);
        }else{
        	block.setData([]);
        }
    }  
});
Ext.define('iih.mr.wr.omr.action.PastMrDocTreeNodeChangeAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override
	*/
	execute: function(context) { 
		 var rb = this.getBlock('result').down('xaptree');
		 rb.disable();
		 var treeNode = rb.getSelectionModel().getSelection();
         var mrPk = treeNode[0].raw.mrPk;
         var mrTpCcatCode=treeNode[0].raw.mrTpCcatCd;
         var owner = this.getOwner();
         setTimeout(function() {
        	 if(rb.isDisabled()){
            	 rb.enable();
        	 }
         },350);
         var mrDocNmText=owner.ownerCt.ownerCt.down('[name=mrNm]');
         var logicSmtTimeDateFiled=owner.ownerCt.ownerCt.down('[name=logicSmtDate]');
         if(mrPk){
        	var mr=treeNode[0].raw;
            var mrDocNm=mr.nm;
            mrDocNmText.setValue(mrDocNm);
            logicSmtTimeDateFiled.setValue(new Date());
          	var right = owner.getBlock('right');
          	if(right){
          		var mrSn = right.mrSn;
          		if(mrPk!=mrSn){
          			delete right.mrTpCcatCd;
          			var objView=right.down("objectview");
          			right.mrSn = mrPk;
          			right.opType = 'readonly';
          			if(objView){
  						right.remove(objView);
          			}
          			setTimeout(function() {
	 			        	var initChain =  right.getActionChain('init');
	 			        	initChain.execute();
	 			    },150);
          		}
          	}
          }else{
        	  mrDocNmText.setValue(null);
        	  logicSmtTimeDateFiled.setValue(null);
         	var right = owner.getBlock('right');
         	if(right){
//         		var mrTpCcatCd = right.mrTpCcatCd;
//         		if(mrTpCcatCode!=mrTpCcatCd){
         			delete right.mrSn;
         			delete right.medicalRecord;
         			var objView=right.down("objectview");
          			if(objView){
          				right.remove(objView);
          			}
//			        right.mrTpCcatCd = mrTpCcatCode;
//			        right.opType = 'readonly';
//			        var initChain =  right.getActionChain('init');
//			        initChain.execute();
//         		}
         	}
         }
    }
});

Ext.define('iih.mr.wr.omr.view.PastMrSelectView', {
	extend:  Xap.ej.stl.view.LeftRightContainerTemplate ,

	requires: [],
	alias:'widget.pastmrselectview',

	xapConfig: {
		blocks: {
			'left': {
				xclass: 'iih.mr.wr.omr.block.PastMrDocTreeBlock',
				width:210
            },
			'right': {
				xclass: 'iih.mr.wr.mr.view.MrDocEditView'
			}
		},
        actions: {
            'initEncounterList': {
            	xclass: 'iih.mr.wr.omr.action.EncounterListInitAction',
//                xclass: 'iih.po.com.action.AssistantInitAction',
                url: 'mr/ens',
                blocks:{
                	left: 'left'
                }
            },
            'pastMrTreeInit': {
            	xclass: 'iih.mr.wr.omr.action.PastMrTreeInitAction',
//                xclass: 'iih.po.com.action.AssistantInitAction',
                url: 'mr_doc_tree/mrs',
                blocks:{
                	left: 'left'
                }
            },
            'treeNodeChange': {
                xclass: 'iih.mr.wr.omr.action.PastMrDocTreeNodeChangeAction',
                blocks: {
                    result: 'left'
                }
            }
        },
		chains: {
            'initEncounterList':['initEncounterList'],
            'pastMrTreeInit':['pastMrTreeInit'],
            'treeNodeChange': ['treeNodeChange']
        },
        connections: {
            'left': [{
//                selector: 'combo[itemId=encounterCombox]',
                event: 'afterrender',
                chain: 'initEncounterList'
            },{
                selector: 'combo[itemId=encounterCombox]',
                event: 'change',
                chain: 'pastMrTreeInit'
            },{
                selector: 'xaptree',
                event: 'itemclick',
                chain: 'treeNodeChange'
		    }]
        }
     }
});
Ext.define('iih.mr.wr.omr.block.CreateMrBlock',{
    extend :  Xap.ej.block.FormBlock ,
    
                                          
                                                     
                                                     
                                               

    alias:'widget.createmrblock',
    id:'createmrblock',
    border:false,
	buttons:[{
            xtype: "button",
            name: 'confim',
            method:'confim',
            text: '确认',
            disable:true,
            iconCls: 'icon-OK'
        },{
            xtype: "button",
            name: 'cancel',
            method:'cancel',
            text: '取消' ,
            iconCls: 'icon-cancel' 
    }],
    items:[{
        xtype:'xaptabpanel',
        layout: 'fit',
        border:false,
        items:[{
            title:'按组套选择',
            xtype:'csakrview',
            name:'csakrview',
            height:427,
            visable:false,
//            layout: 'fit',
            border:false,
            autoScroll:true
        },{
            title:'按类别选择',
            name:'createomrdocview',
            xtype:'createomrdocview',
//            layout: 'border',
            border:false,
            autoScroll:true
        },{
            title:'既往病历选择',
            name:'pastmrselectview',
            xtype:'pastmrselectview',
//            layout: 'fit',
            border:false,
            autoScroll:true
        }]
    },{
        xtype:'omrdocpropertyview',
//        layout: 'border',
        border:true
    }]
})
Ext.define('iih.mr.wr.omr.view.CreateOmrView',{
	extend :  Xap.ej.template.BaseTemplate ,

	           
	                                       
	  

	alias:'widget.createomrview',

	xapConfig: {
		blocks: {
		    'content': {
                xclass: 'iih.mr.wr.omr.block.CreateMrBlock',
                height:515
            }
		},
        actions: {
        	'init': {
				xclass: 'iih.mr.wr.mr.action.MrTemplateInitAction'
            },
            'confim':{
                xclass:'iih.mr.wr.omr.action.ConfimCreateOmrDocAction',
                url:'mr_doc_file',
                blocks:{
                    content:'content'
                }
            },
		    'cancel': {
		        xclass: 'iih.mr.wr.mr.action.CancelCreateMrDocAction',
		        //url:'cancelTemplatePropertyEdit',
		        blocks: {
		            content: 'content'
		        }
		    }
        },  
        chains: {
        	'init': ['init'],
        	'confim': ['confim'],
            'cancel': ['cancel']
        },
        connections: {
        	'content':[{    
                //确认按钮（新建病历选择模板属性）
                selector: 'button[method=confim]',
                event: 'click',
                chain: 'confim'
            },{    
                //取消按钮
                selector: 'button[method=cancel]',
                event: 'click',
                chain: 'cancel'
            }]
        }
	}
})
Ext.define('iih.mr.wr.omr.action.CreateNmrDocAction', {
	extend:  Xap.ej.action.ServiceInvocation ,

	                                              
	                                                 
	                                                  
	defaultConfig: {
	    width: 800,
	    height: 600,
	    layout : 'fit',
	    modal: true
	},	
	/*
	* @Override
	*/
	execute: function(context) {
		var block = this.getBlock('result');
		var me=this;
		var tree=block.down('xaptree');
		var omrDocEditPage=this.getOwner().getBlock('right');
		var select = tree.getSelectionModel().getSelection();
		var workpageview = this.getOwner().ownerCt.items.items[1];
		var ccatCode = '';
		if(select.length>0&&select[0].raw&&select[0].raw.mrTypeCustomCode){
			ccatCode = select[0].raw.mrTypeCustomCode;
		}else if(select.length>0){
			ccatCode = select[0].raw.id;
		};
		var opType=context.opType;
		var title='新建病历';
		if(opType&&'reSelectTemp'==opType){
			title='重新选择模板';
		}
    	var config = {
    	    modal: true,           
    		width: 850,
    		height:550,
    		title :title,
    		contentConfig: {
    			xtype: 'createomrview',
    			initChain: {
    				name: 'init',
    				context: {
    					id:ccatCode,
    					opType:opType,
    					omrDocEditPage:omrDocEditPage,
    					workpageview:workpageview
    				}
    			}
    		}
    	};
		me.createWindow(config,context);
    },
    
    createWindow:function(context,context2){
        if(this.viewConfig) {
            var config = this.viewConfig;
            Xap.create(config).show();
        }
        else if(context && context.contentConfig && context.contentConfig.xtype) {
            // TODO xtype?
            var windowConfig = Ext.apply({}, this.defaultConfig);
            if(context.width) {
                windowConfig.width = context.width;
                context.width = null;
            }
            if(context.height) {
                windowConfig.height = context.height;
                context.height = null;
            }
            if(context.title) {
                windowConfig.title = context.title;
                context.title = null;
            }

            // 弹出窗口
            var window = Ext.create('Ext.window.Window', windowConfig);

            var contentConfig = context.contentConfig;
            var initChainConfig = contentConfig.initChain;
            contentConfig.initChain = null;
            
            window.add(contentConfig);
            var createmrblock=Ext.getCmp('createmrblock');
            var url = this.url+'/'+IMER_CONSTANT.CSA_ENABLE;
            var operation = {
                    url: url,
                    method: 'get',
                    scope: this,
                    success: function(result){
                    	var dataList=result.result.dataList;
                    	var csaEnable='0';//默认不启用组套
                    	if(dataList.length==1){
                    		csaEnable=dataList[0].value;
                    	}
                    	if('1'!=csaEnable){
                			createmrblock.items.items[0].remove(0);
                		}
                        window.show();
                        // 调用初始化Action
                        if(initChainConfig) {
                            var content = window.down(contentConfig.xtype);
                            var chain = content.getActionChain(initChainConfig.name);
                            if(chain) {
                                var ctx = initChainConfig.context || {};
                                ctx.parentWindow = window;
                                chain.execute(ctx);
                            }
                        }
                    }
                };
            context2.operations.push(operation);
        }
    }
});

Ext.define('iih.mr.wr.nmr.action.HasEditConfirmAction', {
	extend:  Xap.ej.action.ServiceInvocation ,

	requires: [],
	/*
	* @Override
	*/
	execute: function(context) {
		//验证新建前是否修该过文档
		var owner=this.getOwner();
		var nmrDocEditPage=this.getOwner().getBlock('right');
		var callback=function(){
			var create=owner.getActionChain('create');
			create.execute();
		};
		if(nmrDocEditPage.hasEdit()){
			XapMessageBox.confirm('是否保存对当前病历的修改？',
	            function(btn, text){
	                if (btn == 'yes') {
	                	var saveActionChain=nmrDocEditPage.getActionChain('emrSave');
	                	saveActionChain.execute({callback:callback});
	                } else if (btn == 'no') {
	                	callback();
	                } else if (btn == 'cancel') {
	                	
	                }
	            },nmrDocEditPage
	        );
		}else{
			callback();
		}
    }
});

Ext.define('iih.mr.wr.nmr.action.NmrCloseCreateAction', {
	extend:  Xap.ej.action.ServiceInvocation ,

	requires: [],
	/*
	* @Override
	*/
	execute: function(context) {
		var parent=this.getOwner();
		//parent.ownerCt.setWidth(200);
		//parent.ownerCt.setHeight(200)
		parent.ownerCt.close();
	}
});

Ext.define('iih.mr.wr.nmr.block.CreateNmrConditionBolck',{
	extend :  Xap.ej.block.FormBlock ,

	           
		                                          
		                           
		                                
		                                 
                                               
                                                    
	  

	alias:'widget.createnmrconditionbolck',
	
	layout: {
        type: 'table',
        columns: 9
    },
	items: [{
        xtype:'xapcombobox',
        name:'mrCategoryCode',
        colspan: 3,
        padding:'10 0 0 15',
        margin : '0 0 0 3',
        labelWidth:100,
        width:245,
        editable:false,
        allOptions: true,
        fieldLabel:'护理文书类型组',
        queryMode: 'local',
        comboData : [
         			{"value":"QAM06.02", "name":"一般患者护理记录单"},
         			{"value":"QAM06.05", "name":"危重患者护理记录单"},
         			{"value":"QAM06.04", "name":"特殊护理记录单"}
         		],
        displayField: 'name',
        valueField: 'code'
    },{
        xtype:'xapcombobox',
        name:'typeCode',
        padding:'10 0 0 20',
        labelWidth:80,
        width:260,
        colspan: 3,
        //value:'ALL',
        editable:false,
        allOptions: true,
        fieldLabel:'护理文书类型',
        queryMode: 'local',
        displayField: 'name',
        comboData : [
          			{"code":"QAM06.02", "name":"产前、产时护理记录单"},
          			{"code":"QAM06.05", "name":"产后护理记录单"},
          			{"code":"QAM06.04", "name":"新生儿护理记录单"}
          		],
        valueField: 'code'
    },{
        xtype: 'xaptextfield',
        padding:'10 0 0 10',
        name:'templateNm',
        labelWidth:80,
        colspan: 3,
        width:220,
        fieldLabel:'模板名称'
    },{
        xtype: 'xapcheckboxgroup',
        padding:'10 0 0 15',
        name:'personal',
        vertical: true,
        items: [
            { boxLabel: '个人', name: 'personal', inputValue: 'MDM08.03' ,checked:true}
        ]
    },{
        xtype: 'xapcheckboxgroup',
        padding:'10 0 0 10',
        name:'dept',
        vertical: true,
        items: [
            { boxLabel: '护区', name: 'dept', inputValue: 'MDM08.02',checked:true}
        ]
    },{
	      xtype:'comboxgrid',
	      name:'deptCode',
		  url: 'organization/keyword',//科室查询的url
		  listWidth:210,    //gird的宽度
		  width:140,        //combo的宽度
		  valueField : 'code',//科室编码的字段名
		  displayField: 'name',//科室名称的字段名
		  padding:'10 0 0 0',
		  columns: [{              //grid的column配置
			 text: '科室编码',
			 dataIndex: 'code',
			 width:60
		  },{
			 text: '科室',
			 flex:1,
			 dataIndex: 'name'
		  }],
		  callback:function(newValue,oldValue,record){  //在grid选择记录后的回调函数
		  	  var owner=this.ownerCt.ownerCt;
		      var chain = owner.getActionChain('init');
		      if(chain) {
		          chain.execute({
		          	 newValue:newValue
		          });
		      }
		  }
     },{
        xtype: 'xapcheckboxgroup',
        padding:'10 0 0 10',
        margin : '0 0 0 5',
        name:'all',
        vertical: true,
        items: [
            { boxLabel: '全院', name: 'all', inputValue: 'MDM08.01',checked:true }
        ]
    }]
});
Ext.define('iih.mr.wr.nmr.block.NmrGridListBlock',{
    extend :  Xap.ej.block.Block ,

               
                                     
                                                 
      

    alias:'widget.nmrgridlistblock',

   // layout: 'fit',

    items: [{
        title: '护理模板一览',
        
        //maxHeight: 800,
        
        xtype: 'xapgrid',
        
        CM_JR_Record: [
           {header: '模板id',dataIndex: 'code',hidden:true},
           {header: '文件主键',dataIndex: 'filePk',hidden:true},
           {header: '医疗记录类型编码',dataIndex: 'mrTypeCode',hidden:true},
//           {header: '模板标准编码',dataIndex: 'mrTplKc',hidden:true},
           {header: '医疗记录类型名称',dataIndex: 'mrTypeName',hidden:true},
           {header: '护理模板名称',dataIndex: 'name',field: 'textfield',type: 'string',flex:1},
           {header: '适用病种',dataIndex: 'diNames',field: 'textfield',type: 'string',width:150},
           {header: '所属',dataIndex: 'ownerName',field: 'textfield',type: 'string',width:150},
           {header: '审签级别编码',dataIndex: 'signLevelCode',hidden:true},
          // {header: '审签级别',dataIndex: 'signLevelName',field: 'textfield',type: 'string',width: 150}
        ],
        autoScroll:true,
        height:315
    }],

    setData: function(data) {
        var grid = this.down('xapgrid');
        if(grid){
        	grid.setData(data);
        }
    }
});
Ext.define('iih.mr.wr.nmr.block.NursingRecordsPropertyBlock', {
	extend :  Xap.ej.block.FormBlock ,

	                                                                                                                                                                 
	alias : 'widget.nursingrecordspropertyblock',
	id : 'nursingrecordspropertyblock',
	border : 0,
	layout : {
		type : 'table',
		columns : 3,
		tableAttrs : {
			border : 0,
			width : '100%'
		},
		tdAttrs : {
			valign : 'left'
		}
	},
	buttons : [ 
	{
		xtype : "button",
		name : 'confimUpPro',
		method : 'confimUpPro',
		text : '确认',
		iconCls : 'icon-OK'
	}, {
		xtype : "button",
		name : 'cancel',
		method : 'cancel',
		text : '取消',
		iconCls : 'icon-cancel'
	} ],
	items : [ {
		xtype : 'xaptextfield',
		name : 'mrNm',
		fieldLabel : '护理标题',
		labelWidth : 60,
		width : 250,
		padding : '5 0 0 15'
	}, {
		xtype : 'datetimefield',
		name : 'logicSmtDate',
		fieldLabel : '业务时间',
		labelWidth : 60,
		width : 210,
		padding : '5 0 0 22'
	}, {
		xtype : 'xapcombobox',
		name : 'higherLvlEmpId',
		padding : '5 0 0 15',
		fieldLabel : '上级查房医师',
		labelWidth : 80,
		editable : false,
		width : 200,
		disabled : true,
		queryMode : 'local',
		displayField : 'name',
		valueField : 'id'
	} ],
	setData : function(data) {
		this.callParent(arguments);
	},
	getData : function() {
		this.callParent(arguments);
	}
});
Ext.define('iih.mr.wr.nmr.view.CreateDocView', {
	extend:  Xap.ej.template.BaseTemplate ,

	requires: [
	],

	alias:'widget.createdocview',
	id:'createdocview',
	xapConfig: {
		blocks: {
			'condition':{
				xclass: 'iih.mr.wr.nmr.block.CreateNmrConditionBolck',
				height:85
			},
			'content':{
				xclass: 'iih.mr.wr.nmr.block.NmrGridListBlock',
			},
			'bottom':{
				xclass: 'iih.mr.wr.nmr.block.NursingRecordsPropertyBlock',
			}
//			'content':{里有上下部分
//				xclass: 'iih.mr.wr.nmr.view.NmrsingBottomGridView',
//				flex:2
//			}
		},
		
		actions: {
            'onClickCancel':{
            	xclass: 'iih.mr.wr.nmr.action.NmrCloseCreateAction',
            	 blocks: {
 		            content: 'content'
 		        }
            }
            
		},

		chains: {
			'onClickCancel':['onClickCancel']
		},

		connections: {
			'bottom':[
				{
	                selector: 'button[name=cancel]',
	                event: 'click',
	                chain: 'onClickCancel'
	            }]
				
			
		}
	},
	hasEdit: function() {
        var plugin = document.getElementById('iemrEditor');
        if (plugin != undefined &&plugin.valid&&plugin.IsModified()) {
            return true;
        } else {
            return false;
        }
    }
});
Ext.define('iih.mr.wr.nmr.action.NmrShowCreateAction', {
	extend:  Xap.ej.action.PopAction ,

	                                               
	

	execute: function(context) {
	        var config = {
                modal: true,           
                width: 850,
                height:500,
                title :'按护理类别选中',
                contentConfig: {
                    xtype: 'createdocview',
                    initChain: {
                       // name: 'search'
                    }
                }
            };
	    
    	
    	this.callParent([config]);
    }
});

Ext.define('iih.mr.wr.nmr.action.NmrTreeInitAction', {
	extend:  Xap.ej.action.ServiceInvocation ,

	requires: [],
	/*
	* @Override
	*/
	execute: function(context) {
		//alert();
		//验证新建前是否修该过文档
		var data="[{'id':1,'text':'aaa',children: [{ id: 'datagrid', text: 'DataGrid',leaf:1 },{ id: 'tree', text: 'Tree',leaf:1},{ id: 'treegrid', text: 'TreeGrid ',leaf:1 }]},{'id':2,'text':'bbb'},{'id':3,'text':'ccc'},{'id':4,'text':'ddd'},{'id':5,'text':'eee'},{'id':6,'text':'fff'}]";
		var view =this.getOwner();
		var Blocl=view.getBlock('left');
		Blocl.setData(data);
	}
});

Ext.define('iih.mr.wr.nmr.block.NursingRecordsTreeBlock',{
	extend :  Xap.ej.block.PanelBlock ,
	
	           
	                                      
	                                          
	  
	alias:'widget.nursingrecordstreeblock',

	layout: 'fit',
    
	items: [{
		xtype:'xaptree',
		border:false,
		ifSelect:true,
		autoScroll:true,
		height:245,
		rootVisible: false
	}],
	
	tbar:[{xtype:'button',iconCls: 'icon-Create',text:'新建',method: 'create'},
          {xtype:'button',iconCls: 'icon-Delete',id:'mrDelete',text:'删除',disabled:true,method: 'delete'},
          {xtype:'button',iconCls: 'icon-Property',text:'属性',disabled:true,method: 'property'},
          {xtype:'button',align: 'right',iconCls: 'icon-Create',text:'归档',method: 'complete',hidden:true},
          {xtype:'button',align: 'right',iconCls: 'icon-Delete',text:'取消归档',method: 'cancelComplete',hidden:true},
          {
              xtype: 'container',
              layout: {
                  type: 'hbox',
                  align: 'middle',
                  pack: 'end'
              },
              flex: 1,
              items:[{
                  xtype: 'tool',
                  type: 'refresh',
                  tooltip: '刷新',
                  callback:function(owner,tool){
                      var view = owner.up('nursingrecordsview');
                      var chain = view.getActionChain('treeInit');
                      chain.execute();
                  }
              },{
                  xtype: 'label',
                  width: 5
              },{
                  xtype: 'tool',
                  type: 'left',
                  callback:function(owner,tool){
                      var view = owner.up('nursingrecordsview');
                      var block = view.getBlock('left');
                      block.collapse();
                  }
              },{
                  xtype: 'label',
                  width: 5
              }]
          }
    ],
	
    setData: function(data) {
	    var tree = this.down('xaptree');
	    var myobj=eval(data); 
	    tree.setData(myobj);
	},
    getData: function() {
        return null;
    }
    
});
Ext.define('iih.mr.wr.nmr.view.NmrsingBottomGridView', {
	extend:  Xap.ej.template.BaseTemplate ,

	                                                                                                   
	  

	alias:'widget.nmrsingbottomgridview',
	id:'nmrsingbottomgridview',
	xapConfig: {
		blocks: {
			'condition':{
				xclass: 'iih.mr.wr.nmr.block.NmrGridListBlock'
			},
			
			'bottom':{
				
			xclass: 'iih.mr.wr.nmr.block.NursingRecordsPropertyBlock',
			}
		},
		
		actions: {
            
            
		},

		chains: {
		},

		connections: {
            
		}
	},
	hasEdit: function() {
        var plugin = document.getElementById('iemrEditor');
        if (plugin != undefined &&plugin.valid&&plugin.IsModified()) {
            return true;
        } else {
            return false;
        }
    }
});
Ext.define('iih.mr.wr.nmr.view.NursingRecordsContentView', {
    extend:  Xap.ej.template.BaseTemplate ,

    requires: [],
    alias: 'widget.nursingrecordscontentview',
    layout:  'fit',
    id:'nursingrecordscontentview',
    xapConfig: {
        blocks: {
            'content': {
                xclass: 'iih.mr.block.editor.MrDocEditBlock',
                flex: 1
            }
        },

        actions: {
//            'init': {
//                xclass: 'iih.mr.wr.omr.action.OutMrDocEditAction',
//                url:'omr',
//                blocks: {
//                    content: 'content'
//                }
//            }, 
//            'openMrDoc': {
//                xclass: 'iih.mr.wr.mr.action.OpenMrAction',
//                url: 'omr',
//                blocks: {
//                    content: 'content'
//                }
//            },
//            'emrCmdDispatch': {
//                xclass: 'iih.mr.action.editor.EmrCmdDispatchAction',
//                blocks: {
//                    content: 'content'
//                }
//            },
//            'editorCallBackAction': {
//                xclass: 'iih.mr.wr.omr.action.EditorCallBackAction',
//                url:'param',
//                blocks: {
//                    content: 'content'
//                }
//            },
//            'emrEditorOperator': {
//                xclass: 'iih.mr.action.editor.EmrEditorOperatorAction'
//            },
//            'emrSave': {
//                xclass: 'iih.mr.wr.omr.action.OmrDocSaveAction',
//                url: 'omr',
////                url: 'http://127.0.0.1:8081/mr',
//                blocks: {
//                    content: 'content'
//                }
//            },
//            'emrDocProperty': {
//                xclass: 'iih.mr.wr.mr.action.MrDocPropertyAction',
//                url: 'omr',
//                blocks: {
//                    content: 'content'
//                }
//            },
//            'emrSubmit':{
//                xclass: 'iih.mr.wr.omr.action.OmrDocSubmitAction',
//                url: 'submit/omr',
//                blocks: {
//                    content: 'content'
//                }
//            },
//            'emrSignDispose':{
//            	xclass: 'iih.mr.wr.mr.action.MrSignDisposeAction',
//                url: 'signUser',
//                blocks: {
//                    content: 'content'
//                }
//            },
//            'emrRevoke': {
//                xclass: 'iih.mr.wr.omr.action.OmrDocRevokeAction',
//                url: 'submit/omr',
//                blocks: {
//                    content: 'content'
//                }
//            },
//            'emrRefreshMacro': {
//                xclass: 'iih.mr.wr.omr.action.RefreshMacroAction',
//                url:'macroElement',
//                blocks: {
//                    content: 'content'
//                }
//            }/*,
//            'emrRefreshMrDocValue': {
//                xclass: 'iih.mr.wr.omr.action.RefreshMrDocValueAction',
//                url:'mrDocValue',
//                blocks: {
//                    content: 'content'
//                }
//            }*/,
//            'emrRefreshDiagnosis': {
//                xclass: 'iih.mr.wr.omr.action.RefreshMrDiagnosisAction',
//                url:'ei/diagnosises',
//                blocks: {
//                    content: 'content'
//                }
//            },
//            'emrRefreshOutpatientDisposal': {
//                xclass: 'iih.mr.wr.omr.action.RefreshPrescriptionAction',
//                url:'omr/prescription',
//                blocks: {
//                    content: 'content'
//                }
//            },
//            'getSystemConfig': {
//                xclass: 'iih.mr.wr.omr.action.GetSystemConfigAction',
//                url:'param',
//                blocks: {
//                    content: 'content'
//                }
//            },
//            'disabledOfficeToolBarAction': {
//                xclass: 'iih.mr.wr.omr.action.DisabledOfficeToolBarAction',
//                url:'param',
//                blocks: {
//                    content: 'content'
//                }
//            },
//            'emrNeatPrint': {
//                xclass: 'iih.mr.wr.omr.action.OmrDocNeatPrintAction',
//                url: 'mr_doc_file',
//                blocks: {
//                    content: 'content'
//                }
//            },
//            'submitAndRevokeCheck': {
//                xclass: 'iih.mr.wr.omr.action.OmrSubmitAndRevokeCheckAction',
//                url: 'param',
//                blocks: {
//                    content: 'content'
//                }
//            },
//            'mergeAllMr': {
//                xclass: 'iih.mr.wr.omr.action.MergeAllMrAction',
//                blocks: {
//                    content: 'content'
//                }
//            }/*,
//            'emrContinuePrint': {
//                xclass: 'iih.mr.wr.omr.action.OmrContinuePrintAction',
//                url: 'omrs',
//                blocks: {
//                    content: 'content'
//                }
//            },
//            'emrSelectContinuePrint': {
//                xclass: 'iih.mr.wr.omr.action.OmrSelectContinuePrintAction',
//                url: 'omrs',
//                blocks: {
//                    content: 'content'
//                }
//            },
//            'emrRefreshValues':{
//            	xclass: 'iih.mr.wr.omr.action.RefreshValuesAction',
//            	url: 'allValue',
//                blocks: {
//                    content: 'content'
//                }
//            },
//            'mergeAll':{
//            	xclass: 'iih.mr.wr.mr.action.MergeAllAction',
////            	url: 'allValue',
//                blocks: {
//                    content: 'content'
//                }
//            },
//            'closeProgress':{
//            	xclass: 'iih.mr.wr.mr.action.CloseProgressAction',
////            	url: 'allValue',
//                blocks: {
//                    content: 'content'
//                }
//            },
//            'upPro':{
//            	xclass: 'iih.mr.wr.mr.action.UpProAction',
////            	url: 'allValue',
//                blocks: {
//                    content: 'content'
//                }
//            }*/
        },

        chains: {
//            'init': ['init'],
//            'openMrDoc': ['openMrDoc'],
//            'emrRefreshOutpatientDisposal':['emrRefreshOutpatientDisposal'],
////            'upPro': ['upPro'],
//            'emrCmdDispatch': ['emrCmdDispatch'],
//            'emrSave': ['emrSave'],
//            'mergeAllMr': ['mergeAllMr'],
//            'closeProgress': ['closeProgress'],
//            'doSave': ['emrSave'],
//            'emrReadOnly': ['emrReadOnly'],
//            'emrEdit': ['emrEdit'],
//            'mergeAll': ['mergeAll'],
//            'emrDocProperty': ['emrDocProperty'],
//            'emrSubmit':['emrSubmit'],
//            'emrSignDispose':['emrSignDispose'],
//            'emrRevoke':['emrRevoke'],
//            'emrStartApprove':['emrStartApprove'],
//            'emrApprove':['emrSubmit'],
//            'emrReject':['emrReject'],
//            'emrAuditRevoke':['emrAuditRevoke'],
//            'emrSaveAsTemplate':['emrSaveAsTemplate'],
//            'emrRefreshMacro':['emrRefreshMacro'],
//            'emrRefreshReference':['emrRefreshMrDocValue'],
//            'emrRefreshValues':['emrRefreshValues'],
//            'emrRefreshMrDocValue':['emrRefreshMrDocValue'],
//            'emrRefreshDiagnosis':['emrRefreshDiagnosis'],
//            'disabledOfficeToolBarAction':['disabledOfficeToolBarAction'],
//            'editorCallBackAction':['editorCallBackAction'],
//            'emrPrint':['submitAndRevokeCheck'],
//            'emrContinuePrint':['emrContinuePrint'],
//            'getSystemConfig':['getSystemConfig'],
//            'emrNeatPrint':['emrNeatPrint']
        },

        connections: {
//            'content': [{
//                selector: 'button[method=editorEvent]',
//                event: 'editorEvent',
//                chain: 'emrCmdDispatch'
//            }/*, {
//                event: 'afterrender',
//                chain: 'init'
//            }*/]
        }
    },
    
//    initComponent : function() {
//        var me = this;
//        this.callParent();
//        var canvas = Xap.getCanvas();
//        this.relayEvents(canvas, ['refreshWorkArea']);
//        this.addListener('refreshWorkArea', function(config) {
//            var mrSn = config.viewConfig.mrSn;
//            var chain = me.getActionChain('openMrDoc');
////            chain.execute({mrSn:mrSn});
//        });
//    },
    
    hasEdit: function() {
        var plugin = document.getElementById('iemrEditor');
        if (plugin != undefined &&plugin.valid&&plugin.IsModified()) {
            return true;
        } else {
            return false;
        }
    },
});
Ext.define('iih.mr.wr.omr.action.HasEditConfirmAction', {
	extend:  Xap.ej.action.ServiceInvocation ,

	                                              
	                                                 
	                                                  
	/*
	* @Override
	*/
	execute: function(context) {
		var owner=this.getOwner();
		var omrDocEditPage=this.getOwner().getBlock('right');
		var callback=function(){
			var create=owner.getActionChain('create');
			create.execute();
		};
		if(omrDocEditPage.hasEdit()){
			XapMessageBox.confirm('是否保存对当前病历的修改？',
	            function(btn, text){
	                if (btn == 'yes') {
	                	var saveActionChain=omrDocEditPage.getActionChain('emrSave');
	                	saveActionChain.execute({callback:callback});
	                } else if (btn == 'no') {
	                	callback();
	                } else if (btn == 'cancel') {
	                	
	                }
	            },omrDocEditPage
	        );
		}else{
			callback();
		}
    }
});

Ext.define('iih.mr.wr.omr.action.CreateOmrDocAction', {
	extend:  Xap.ej.action.ServiceInvocation ,

	                                              
	                                                 
	                                                  
	defaultConfig: {
	    width: 800,
	    height: 600,
	    layout : 'fit',
	    modal: true
	},	
	/*
	* @Override
	*/
	execute: function(context) {
		var block = this.getBlock('result');
		var me=this;
		var tree=block.down('xaptree');
		var omrDocEditPage=this.getOwner().getBlock('right');
		var select = tree.getSelectionModel().getSelection();
		var workpageview = this.getOwner().ownerCt.items.items[1];
		var ccatCode = '';
		if(select.length>0&&select[0].raw&&select[0].raw.mrTypeCustomCode){
			ccatCode = select[0].raw.mrTypeCustomCode;
		}else if(select.length>0){
			ccatCode = select[0].raw.id;
		};
		var opType=context.opType;
		var title='新建病历';
		if(opType&&'reSelectTemp'==opType){
			title='重新选择模板';
		}
    	var config = {
    	    modal: true,           
    		width: 850,
    		height:550,
    		title :title,
    		contentConfig: {
    			xtype: 'createomrview',
    			initChain: {
    				name: 'init',
    				context: {
    					id:ccatCode,
    					opType:opType,
    					omrDocEditPage:omrDocEditPage,
    					workpageview:workpageview
    				}
    			}
    		}
    	};
		me.createWindow(config,context);
    },
    
    createWindow:function(context,context2){
        if(this.viewConfig) {
            var config = this.viewConfig;
            Xap.create(config).show();
        }
        else if(context && context.contentConfig && context.contentConfig.xtype) {
            // TODO xtype?
            var windowConfig = Ext.apply({}, this.defaultConfig);
            if(context.width) {
                windowConfig.width = context.width;
                context.width = null;
            }
            if(context.height) {
                windowConfig.height = context.height;
                context.height = null;
            }
            if(context.title) {
                windowConfig.title = context.title;
                context.title = null;
            }

            // 弹出窗口
            var window = Ext.create('Ext.window.Window', windowConfig);

            var contentConfig = context.contentConfig;
            var initChainConfig = contentConfig.initChain;
            contentConfig.initChain = null;
            
            window.add(contentConfig);
            var createmrblock=Ext.getCmp('createmrblock');
            var url = this.url+'/'+IMER_CONSTANT.CSA_ENABLE;
            var operation = {
                    url: url,
                    method: 'get',
                    scope: this,
                    success: function(result){
                    	var dataList=result.result.dataList;
                    	var csaEnable='0';//默认不启用组套
                    	if(dataList.length==1){
                    		csaEnable=dataList[0].value;
                    	}
                    	if('1'!=csaEnable){
                			createmrblock.items.items[0].remove(0);
                		}
                        window.show();
                        // 调用初始化Action
                        if(initChainConfig) {
                            var content = window.down(contentConfig.xtype);
                            var chain = content.getActionChain(initChainConfig.name);
                            if(chain) {
                                var ctx = initChainConfig.context || {};
                                ctx.parentWindow = window;
                                chain.execute(ctx);
                            }
                        }
                    }
                };
            context2.operations.push(operation);
        }
    }
});

Ext.define('iih.mr.wr.nmr.view.NursingRecordsView', {
	extend:  Xap.ej.template.BaseTemplate ,

	                                              

	alias:'widget.nursingrecordsview',
	id:'nursingrecordsview',
	layout:'border',
	xapConfig: {
		blocks: {
			'left': {//左边栏
				xclass: 'iih.mr.wr.nmr.block.NursingRecordsTreeBlock',
				region:'west',
				split: true,
                collapsible: true,
                header:false,
				width: 220
            },
			'right': {//中间默认打开文档用
				xclass: 'iih.mr.wr.nmr.view.NursingRecordsContentView',
				region:'center',
				flex:1
			},
			'helper': {//通用右边个人知识库
			    xclass: 'iih.po.com.view.RightEditView',
			    region:'east',
			    split: true,
                collapsible: true,
                collapsed: true,
                header:false,
                width: 250
			}
		},
		
		actions: {
//			'refresh': {
//				xclass: 'iih.mr.wr.omr.action.OutMrDocTreeInitAction',
//				url: 'omr/tree/mrs',
//				blocks: {
//					result: 'left'
//				}
//			},
			'treeInit': {
				xclass: 'iih.mr.wr.nmr.action.NmrTreeInitAction',
				//url: '/omr/tree/init',
				blocks: {
					result: 'left'
				}
			},
//			'amrGroupCreate': {
//				xclass: 'iih.mr.wr.omr.action.OmrAmrGroupCreateAction',
//				url: '/mr/amr/group/',
//				blocks: {
//					result: 'left'
//				}
//			},
//			'accordAmrGroupCheck': {
//				xclass: 'iih.mr.wr.omr.action.OmrAccordAmrGroupCheckAction',
//				url: '/mr/amr/group/',
//				blocks: {
//					result: 'left'
//				}
//			},
//			'toolbarsInit': {
//				xclass: 'iih.mr.wr.omr.action.OmrToolbarsInitAction',
//				url: '/mr/amr/',
//				blocks: {
//					result: 'left'
//				}
//			},
//            'treeNodeChange': {
//                xclass: 'iih.mr.wr.omr.action.OutMrDocTreeNodeChangeAction',
//                blocks: {
//                    result: 'left'
//                }
//            },
//            'createMenu': {
//                xclass: 'iih.mr.wr.omr.action.MenuCreateAction',
//                blocks: {
//                    result: 'left'
//                }
//            },
//            'delete': {
//                xclass: 'iih.mr.wr.omr.action.OmrDocDeleteAction',
//                url: 'omr',
//                blocks: {
//                    result: 'right'
//                }
//            },
            'hasEditConfirm': {//验证中间文档时否修改过
                xclass: 'iih.mr.wr.omr.action.HasEditConfirmAction',
               // url: 'omr',
                blocks: {
                    result: 'right'
                }
            },
//            'deleteConfirm': {
//                xclass: 'iih.mr.wr.omr.action.OmrDocDeleteConfirmAction',
//                url: 'omr',
//                blocks: {
//                    result: 'right'
//                }
//            },
            'create': {
                xclass: 'iih.mr.wr.omr.action.CreateOmrDocAction',
                url:'param',
                blocks:{
                    result:'left'
                }
            },
            'showCreateView':{
            	xclass: 'iih.mr.wr.nmr.action.NmrShowCreateAction',
            	 blocks:{
                   result:'left'
               }
            }
//            'createErpSign': {
//                xclass: 'iih.mr.wr.omr.action.CreateErpSingAction',
//                url:'param',
//                blocks:{
//                    result:'left'
//                }
//            },
//            'emrDocProperty': {
//                xclass: 'iih.mr.wr.omr.action.OmrDocPropertyAction',
//                url: 'omr',
//                blocks: {
//                    content: 'content'
//                }
//            },
//            'complete': {
//                xclass: 'iih.mr.wr.omr.action.CompleteOmrAction',
//                url: '/mr/archived/amr',
//                blocks: {
//                    content: 'content'
//                }
//            },
//            'doSave': {
//                xclass: 'iih.mr.wr.omr.action.OmrDoSaveAction',
////                url: '/mr/archived/amr',
//                blocks: {
//                    content: 'content'
//                }
//            },
//            'cancelComplete': {
//                xclass: 'iih.mr.wr.omr.action.CancelCompleteOmrAction',
//                url: '/mr/archived/amr',
//                blocks: {
//                    content: 'content'
//                }
//            },
//            'erpSignBtnStatus':{
//            	 xclass: 'iih.mr.wr.omr.action.ErpSignBtnStatusAction',
//                 url: 'param/set/getflagbykey',
//                 blocks: {
//                     content: 'content'
//                 }
//            }
		},

		chains: {
//			'refresh': ['refresh'],
			'treeInit':['treeInit'],
//			'doSave':['doSave'],
			'showCreateView':['showCreateView'],
			'hasEditConfirm':['hasEditConfirm'],
//			'amrGroupCreate':['amrGroupCreate'],
//			'accordAmrGroupCheck':['accordAmrGroupCheck'],
//			'toolbarsInit':['toolbarsInit'],
//			'complete': ['complete'],
//			'cancelComplete': ['cancelComplete'],
//			'treeNodeChange': ['treeNodeChange'],
//			'createMenu': ['createMenu'],
			'create': ['showCreateView'],
//            'emrDocProperty':['emrDocProperty'],
//            'delete': ['delete'],
//            'deleteConfirm':['deleteConfirm'],
//            'createErpSign':['createErpSign'],
//            'erpSignBtnStatus':['erpSignBtnStatus']
		},

		connections: {
			'left': [{
				event: 'afterrender',
				chain: 'treeInit'
			},
			//{
//                selector: 'xaptree',
//                event: 'itemclick',
//                chain: 'treeNodeChange'
//		    },{
//		    	selector: 'xaptree',
//		    	event: 'itemcontextmenu',
//		    	chain: 'createMenu'
//		    },{
//                selector: 'toolbar button[method=delete]',
//                event: 'click',
//                chain: 'deleteConfirm'
//            },
			{
                selector: 'toolbar button[method=create]',
                event: 'click',
                chain: 'hasEditConfirm'
            }
//				,{
//                selector: 'toolbar button[method=property]',
//                event: 'click',
//                chain: 'emrDocProperty'
//            },{
//                selector: 'toolbar button[method=complete]',
//                event: 'click',
//                chain: 'complete'
//            },{
//                selector: 'toolbar button[method=cancelComplete]',
//                event: 'click',
//                chain: 'cancelComplete'
            ]
		}
	},
//	initComponent : function() {
//		this.callParent();
//		this.addEvents("writeMrDoc");//为视图添加事件
//		this.addListener('writeMrDoc', function() {//添加监听事件
//			//写回病历
//			var plugin = document.getElementById('iemrEditor');
//			var iemrEditorRead = document.getElementById('iemrEditorRead');
//			console.log(plugin);
//			console.log(iemrEditorRead);
//			if(plugin!=null&&iemrEditorRead!=null)
//			{
//				if(!plugin.IsReadOnly()){
//					if(iemrEditorRead.HasSelection(0)){
//						iemrEditorRead.OfficeCopy();
//						plugin.OfficePaste();
//					}
//				}
//			}
//		});
//		this.addEvents("changeEncounter");//为视图添加刷新事件
//        this.addListener('changeEncounter', function(enPk){//添加监听事件
//        	var chainTree = this.getActionChain('treeInit');
//	        if(chainTree) {
//	            chainTree.execute({
//	            	enPk:enPk
//	            });
//	        }
//        });
//        this.addEvents("selectEncounter");//为视图添加刷新事件
//        this.addListener('selectEncounter', function(){//添加监听事件
//    		var accordAmrGroupCheck = this.getActionChain('accordAmrGroupCheck');
//	        if(accordAmrGroupCheck) {
//	        	accordAmrGroupCheck.execute({});
//	        };
//        });
//	},
	
	hasEdit: function() {
        var plugin = document.getElementById('iemrEditor');
        if (plugin != undefined &&plugin.valid&&plugin.IsModified()) {
            return true;
        } else {
            return false;
        }
    }
});
var FoxitPDFSDK=null;
Ext.define('iih.mr.wr.omr.action.BtnStaErpSignAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	/*
	 * @Override
	 */
	
	execute: function(context) {
		var erpSignType=context.erpSignType;
		if(erpSignType&&'serchErpSign'==erpSignType){
			//这是浏览签名
			var erpSignSaveBtn=Ext.getCmp('erpSignSaveBtn');
			erpSignSaveBtn.hide();
			var timePokeSignBtn=Ext.getCmp('timePokeSignBtn');
			timePokeSignBtn.hide();
			var fingerprintGatherBtn=Ext.getCmp('fingerprintGatherBtn');
			fingerprintGatherBtn.hide();
			var patientSignBtn=Ext.getCmp('patientSignBtn');
			patientSignBtn.hide();
			var doctorSignBtn=Ext.getCmp('doctorSignBtn');
			doctorSignBtn.hide();
			
			var FoxitPDFSDK = document.getElementById("FoxitPDFSDK");
            FoxitPDFSDK.UnLockActiveX("SDKAXYX9261","447767CD35DEC7D537F5C4514E1F9EE606BABA86");
			FoxitPDFSDK.CloseFile();
			FoxitPDFSDK.SetCurrentLanguage(6);
			var outmrdoceditview= Ext.getCmp('outmrdoceditview');
			var mr=outmrdoceditview.medicalRecord;
			var mrDocPdfFile=mr.caFileData;
			var base64DecodePath = 'C:\\base64Decode.pdf';
			//console.log(mrDocPdfFile);
			if(FoxitPDFSDK){
				if(mrDocPdfFile&&mrDocPdfFile.length>10){
					var savePath=FoxitPDFSDK.ReadBase64ToFile(mrDocPdfFile, base64DecodePath);
					FoxitPDFSDK.CloseFile();
					FoxitPDFSDK.OpenFile(base64DecodePath,'');
					FoxitPDFSDK.bHighlightFormFields = false;
				}else{
					Ext.MessageBox.alert('提示', '没有找到签名文件，该病历可能尚未签名！');
				}
			}else{
				Ext.MessageBox.alert('提示', 'CA阅读器ActiveX插件不可用，请重试！');
			}
		}else if(erpSignType&&'erpSign'==erpSignType){
			//电子签名
			if(context.pdfPath){
				this.foxit_sdk_initialize(context.pdfPath);
			}
		}		
	},
	foxit_sdk_initialize:function(pdfPath)
    {
		FoxitPDFSDK = document.getElementById("FoxitPDFSDK");
		FoxitPDFSDK.UnLockActiveX("SDKAXYX9261","447767CD35DEC7D537F5C4514E1F9EE606BABA86");
		//FoxitPDFSDK.SetCurrentLanguageByString("C:\\npactivex\\lang_zh_cn.xml");
		FoxitPDFSDK.CloseFile();
		FoxitPDFSDK.OpenFile(pdfPath,'');
		FoxitPDFSDK.SetCurrentLanguage(6);
		FoxitPDFSDK.bHighlightFormFields = false;
       //document.getElementById("FoxitPDFSDK").OpenFile( demoTestPDF,demoTestPDFPassword);
    },// 铅笔标注
    foxit_sdk_set_tool:function (tool)
	{
		FoxitPDFSDK = document.getElementById("FoxitPDFSDK");
		FoxitPDFSDK.CurrentTool = tool;
	},
	// Wacom医生手写签名
	foxit_sdk_wacom_doctor:function ()
    {

		// 启动Wacom面板
		var sigCtl = document.getElementById("sigCtl1");
		//var dc = new ActiveXObject("Florentis.DynamicCapture");
		var dc = document.getElementById("sigcapt");
		var rc = dc.Capture(sigCtl, "who", "why");
		switch( rc ) {
		case 0: // CaptureOK
			//alert("Signature captured successfully");
			var txtSignature = document.getElementById("txtSignature");
			flags = 0x2000 + 0x80000 + 0x400000; //SigObj.outputBase64 | SigObj.color32BPP | SigObj.encodeData
			b64 = sigCtl.Signature.RenderBitmap("", 200, 100, "image/png", 1, 0x000000, 0xffffff, 0.0, 0.0, flags );

			// 计算位置
			var isGetPosition = false;
			var left = 0;
			var top = 0;
			var pageIndex = 0;
			for (i = 0; i < FoxitPDFSDK.PageCount; i++) {
				var FindResult = FoxitPDFSDK.FindPageFirst(i, '医生签字', false, false);
				if (FindResult != null) {
					isGetPosition = true;
					// 返回的String格式：left top right bottom
					var rectString = FindResult.GetFindRectStringByIndex(0);
					// String转换为Array
					var rectArray = rectString.split(' ');
					// 插入图片
					// ‘患者或近亲属或法定代理人签字’，这段文字‘字’的下方为rect的right和bottom,
					// 需要向下偏移一定量，假设为50（可修改），再偏移图片的大小，
					var left = rectArray[2] - hDoctorImg - 50;
					var top = rectArray[3] - hDoctorImg; //rectArray[3] - offsetSign - hPatientImg - hDoctorImg;
					pageIndex = FindResult.GetFindPageNum();
					break ;
				}
			}
			FoxitPDFSDK.FindClose();
			
			// 建议，设置获取位置不成功时，的默认值。
			if (!isGetPosition) {
				left = FoxitPDFSDK.GetPageWidth(0) - wPatientImg;
				top = hFingerImg;
				pageIndex = FoxitPDFSDK.PageCount - 1; // 最后一页
			}

			// 添加图片（暂时不支持jpg的base64添加），参数可设置(图片大小在"sigCtl1" id上设置)
			var addimageRet = FoxitPDFSDK.AddImageByFileBase64(pageIndex, left, top, wDoctorImg, hDoctorImg, b64, 100, 0);
			break;
        case 1: // CaptureCancel
			alert("Signature capture cancelled");
			break;
        case 100: // CapturePadError
			alert("No capture service available");
			break;
        case 101: // CaptureError
			alert("Tablet Error");
			break;
        case 102: // CaptureIntegrityKeyInvalid
			alert("The integrity key parameter is invalid (obsolete)");
			break;
        case 103: // CaptureNotLicensed
			alert("No valid Signature Capture licence found");
			break;
        case 200: // CaptureAbort
			alert("Error - unable to parse document contents");
			break;
        default: 
			alert("Capture Error " + rc);
			break;
		}
    },
	// Wacom患者手写签名
    foxit_sdk_wacom_patient:function ()
    {
		// 启动Wacom面板
		var sigCtl = document.getElementById("sigCtl1");
		//var dc = new ActiveXObject("Florentis.DynamicCapture");
		var dc = document.getElementById("sigcapt");
		var rc = dc.Capture(sigCtl, "who", "why");
		switch( rc ) {
		case 0: // CaptureOK
			//alert("Signature captured successfully");
			var txtSignature = document.getElementById("txtSignature");
			flags = 0x2000 + 0x80000 + 0x400000; //SigObj.outputBase64 | SigObj.color32BPP | SigObj.encodeData
			b64 = sigCtl.Signature.RenderBitmap("", 300, 150, "image/png", 1, 0x000000, 0xffffff, 0.0, 0.0, flags );

			var isGetPosition = false;
			var left = 0;
			var top = 0;
			var pageIndex = 0;
			for (i = 0; i < FoxitPDFSDK.PageCount; i++) {
				var FindResult = FoxitPDFSDK.FindPageFirst(i, '患者或近亲属或法定代理人签字', false, false);
				if (FindResult != null) {
					isGetPosition = true;
					// 返回的String格式：left top right bottom
					var rectString = FindResult.GetFindRectStringByIndex(0);
					// String转换为Array
					var rectArray = rectString.split(' ');
					// 插入图片
					// ‘患者或近亲属或法定代理人签字’，这段文字‘字’的下方为rect的right和bottom,
					// 需要向下偏移一定量，假设为50（可修改），再偏移图片的大小
					var left = rectArray[2] - hPatientImg - offsetSign;
					if (left < 0)
					{
						left = rectArray[2];
					}
					var top = rectArray[3] - hPatientImg; // - offsetSign - hPatientImg;
					var pageIndex = FindResult.GetFindPageNum();
					//fingerLeft = rectArray[1];
					break ;
				}
			}
			FoxitPDFSDK.FindClose();
			
			// 建议，设置获取位置不成功时，的默认值。
			if (!isGetPosition) {
				left = FoxitPDFSDK.GetPageWidth(0) - wPatientImg;
				top = hFingerImg;
				pageIndex = FoxitPDFSDK.PageCount - 1; // 最后一页
			}
			
			// 患者指纹位置
			fingerLeft = left + wPatientImg + 10;
			fingerBottom = top - 20;
			// 添加图片（暂时不支持jpg的base64添加），参数可设置(图片大小在"sigCtl1" id上设置)
			var addimageRet = FoxitPDFSDK.AddImageByFileBase64(pageIndex, left, top, wPatientImg, hPatientImg, b64, 100, 0);

			break;
        case 1: // CaptureCancel
			alert("Signature capture cancelled");
			break;
        case 100: // CapturePadError
			alert("No capture service available");
			break;
        case 101: // CaptureError
			alert("Tablet Error");
			break;
        case 102: // CaptureIntegrityKeyInvalid
			alert("The integrity key parameter is invalid (obsolete)");
			break;
        case 103: // CaptureNotLicensed
			alert("No valid Signature Capture licence found");
			break;
        case 200: // CaptureAbort
			alert("Error - unable to parse document contents");
			break;
        default: 
			alert("Capture Error " + rc);
			break;
		}
    },
	
	// 时间戳签名
    foxit_sdk_ts_signature:function  ()
    {
        var sigField;

        FoxitPDFSDK = document.getElementById("FoxitPDFSDK");
        SigFieldMgr = FoxitPDFSDK.GetPDFSignatureMgr();

        //set the position to locate the signature.
        sigField = SigFieldMgr.Add( 0, 10, 60, 25, 44 );

        if( null==sigField)
        {
        	Ext.MessageBox.alert('提示', FoxitPDFSDK.GetLastSigModuleErrMsg());
        }

        //Set filter and subFilter if need.This mainly be used by customer algorithm.
        //when you signed by default algorithm they will be default set Filter with "Adobe.PPKLite" and SubFilter with "adbe.pkcs7.detached"
        sigField.Filter = 'Adobe.PPKLite';
        sigField.SubFilter = 'ETSI.RFC3161';

        //sign and save as pdf
		var tsOutputPath = "C:\\" + 'timestamp.pdf';
		// 其中User和Password的格式是：user:password
        var bRet = SigFieldMgr.SignDocumentTs( sigField, tsOutputPath, '10.1.6.195', '/tss/tsp', 8080, ':' );
        if(!bRet)
        {
        	//Ext.MessageBox.alert('提示', "签章失败.");
            SigFieldMgr.Remove(sigField);
			return false;
        }
        else
        {
			return true;
			 //Ext.MessageBox.alert('提示', "签章成功！");
        }
    },
	// 数据保存为Base64
    foxit_sdk_save_base64:function (value)
	{
		FuiMessageBox.confirm2('签名保存后将无法对病历进行修改和再次签名，请确认是否继续保存签名？', function(btn) {
            if (btn == 'yes') {
				var signresult = foxit_sdk_ts_signature(); 
				if(!signresult){
					Ext.MessageBox.alert('提示', '已签章或签章失败，病历保存失败！');
				   return ; 
				}
				FoxitPDFSDK = document.getElementById("FoxitPDFSDK");
				// 保存文件
				FoxitPDFSDK.Save();
				// 获得文件路径
				//var filePath = FoxitPDFSDK.FilePath;
				var filePath = "C:\\" + 'timestamp.pdf';
				// 转换为base64
				var base64 = FoxitPDFSDK.ReadFileToBase64(filePath);
				var data={'base64':base64};
				data.docId=docId;
				FuiPageFactory.submit({
			          serviceName: 'fi.clinical.mr.online.mr_doc_edit.MRDocEditService',
			          serviceMethodName: 'savePDF',
			          data: [data],
			          success: function(mrbMrDocFile) {
							var electronicSign=Ext.getCmp('electronicSign');
							electronicSign.setDisabled(true);
							var gridDoc = me.getMrDocGrid();
							var deleteBtn=gridDoc.down('button[action=delete]');
							deleteBtn.setDisabled(true);
							var emrDocDelete = window.iemr.extensions.constants[0].EMR_DOC_DELETE;
							var emrSave = window.iemr.extensions.constants[0].EMR_SAVE;
							var emrRefreshMacro = window.iemr.extensions.constants[0].EMR_REFRESH_MACRO;//刷新宏元素
							var emrRefreshDiagnosis = window.iemr.extensions.constants[0].EMR_REFRESH_DIAGNOSIS;//刷新诊断
							iemrEditor.SetCommandVisible(emrDocDelete, false);
							iemrEditor.SetCommandVisible(emrSave, false);
							iemrEditor.SetCommandVisible(emrRefreshMacro, false);
							iemrEditor.SetCommandVisible(emrRefreshDiagnosis, false);
							iemrEditor.SetReadOnly();
							iemrEditor.UpdateToolbar();
							docEditPage.data.updateCount = mrbMrDocFile.updateCount;
			          },
			          failure: function(data) {
//			              Ext.MessageBox.alert('提示', '保存失败！');
			          }
			    });
            }else if (btn == 'no') {
                return false;
            }
        });
	},
	// 指纹采集
	foxit_sdk_get_finger:function ()
    {
		MXOTOCX = document.getElementById("idMXOTOCX");
		var isMxUsbDevice = MXOTOCX.IsMxUsbDevice();
		if (isMxUsbDevice == -1) {
			alert("请插入指纹采集设备！");
			return ;
		}
		// 采集特征码
		var dwWaitTime = 5000; //超时时间（毫秒）
		var mxUsbGetTz = MXOTOCX.mxUsbGetTz(dwWaitTime);
		// 采集指纹图片
		var ret = MXOTOCX.mxGetTzImage(demoFingerBmp);
		
		FoxitPDFSDK = document.getElementById("FoxitPDFSDK");
		// 参数可设置
		//var left = FoxitPDFSDK.GetPageWidth(0) - wFingerImg;
		var top = 0;
		var left = 160; //fingerLeft; // FoxitPDFSDK.GetPageWidth(0) - 100;
		var bottom = fingerBottom; //FoxitPDFSDK.GetPageHeight(0) - 304;
		var lastPageIndex = FoxitPDFSDK.PageCount - 1; // 最后一页
		var addimageRet = FoxitPDFSDK.AddImageObject(lastPageIndex, left, bottom, wFingerImg, hFingerImg, demoFingerBmp, 100, 0);
    }
});

Ext.define('iih.mr.wr.omr.action.CancelCompleteOmrAction', {
	    extend:  Xap.ej.action.ServiceInvocation ,
	    
	    doExecute: function(context) {
			this.prepareOperations(context.operations);
		},
	    prepareOperations: function(operations) {
	        var url = this.url;
	        url = url+'/'+IMER_GLOBAL.encounterSn;  
	        var mclass = null;
	        var operation = {
	            url: url,
	            mclass: mclass,
	            method: 'delete',
	            condition: null,
	            scope: this,
	            success: this.onSuccess
	        };
	        operations.push(operation);
	    },
	    onSuccess: function(operation) {
	    	XapMessageBox.info('操作成功!');
	        var owner = this.getOwner();
	        var createBtn=owner.down('toolbar button[method=create]');
	        var finishBtn=owner.down('toolbar button[method=complete]');
	        var cancelComplete=owner.down('toolbar button[method=cancelComplete]');
	        cancelComplete.setDisabled(true);
			createBtn.setDisabled(false);
			finishBtn.setDisabled(false);
	    }
	});


Ext.define('iih.mr.wr.omr.action.CompleteOmrAction', {
	    extend:  Xap.ej.action.ServiceInvocation ,
	    
	    doExecute: function(context) {
			this.prepareOperations(context.operations);
		},
	    prepareOperations: function(operations) {
	        var url = this.url;
	        url = url+'/'+IMER_GLOBAL.encounterSn;  
	        var mclass = null;
	        var METHODS = this.getInvocationMethods();
	        var operation = {
	            url: url,
	            mclass: mclass,
	            method: METHODS.METHOD_CREATE,
	            condition: null,
	            scope: this,
	            success: this.onSuccess
	        };
	        operations.push(operation);
	    },
	    onSuccess: function(operation) {
	    	XapMessageBox.info('操作成功!');
	        var owner = this.getOwner();
	        var deleteBtn=owner.down('toolbar button[method=delete]');
	        var createBtn=owner.down('toolbar button[method=create]');
	        var finishBtn=owner.down('toolbar button[method=complete]');
			deleteBtn.setDisabled(true);
			createBtn.setDisabled(true);
			finishBtn.setDisabled(true);
			
			var patient={
	        	pk: IMER_GLOBAL.encounterSn
			};
			var canvas = Xap.getCanvas();
			canvas.fireEvent("updatePatient",{patient:patient});
			
	        var chain = owner.getActionChain('refresh');
	        if(chain) {
	            chain.execute();
	        }
	    }
	});


Ext.define('iih.mr.wr.omr.action.ConfirmErpSignAction', {
	extend :  iih.mr.wr.omr.action.BtnStaErpSignAction ,

	/*
	 * @Override
	 */
	execute : function(context) {
		var operations = context.operations;
		if (!operations) {
			return;
		}
		var self=this;
		XapMessageBox.confirm2('签名保存后将无法对病历进行修改和再次签名，请确认是否继续保存签名？', function(
				btn) {
			if (btn == 'yes') {
				var erpSiqnSave=self.getOwner().getActionChain("erpSiqnSave");
				erpSiqnSave.execute();
			}

		});
	}

});

Ext
		.define(
				'iih.mr.wr.omr.block.CreateErpSignBlock',
				{
					extend :  Xap.ej.block.PanelBlock ,

					alias : 'widget.createerpsignblock',
					id : 'createerpsignblock',
					border : false,
					buttons : [],
					items : [
							{
								xtype : "button",
								name : 'doctorSignBtn',
								text : '医生签名',
								width : 70,
								itemId : 'doctorSignBtn',
								id:'doctorSignBtn',
								margin : '5 5 5 8'
							},
							{
								xtype : "button",
								name : 'patientSignBtn',
								text : '患者签名',
								width : 70,
								itemId : 'patientSignBtn',
								id:'patientSignBtn',
								margin : '5 5 5 8'
							},
							{
								xtype : "button",
								name : 'fingerprintGatherBtn',
								text : '指纹采集',
								margin : '5 5 5 8',
								id:'fingerprintGatherBtn',
								width : 70,
								itemId : 'fingerprintGatherBtn'
							},
							{
								xtype : "button",
								name : 'timePokeSignBtn',
								text : '时间戳签名',
								margin : '5 5 5 8',
								width : 70,
								disabled:true,
								id:'timePokeSignBtn',
								itemId : 'timePokeSignBtn'
							},
							{
								xtype : "button",
								name : 'erpSignSaveBtn',
								margin : '5 5 5 8',
								width : 70,
								id:'erpSignSaveBtn',
								itemId : 'erpSignSaveBtn',
								text : '保存'
							},
							{
								items : [ {
									xtype : 'displayfield',
									name : 'templeName',
									fieldLabel : '',
									labelAlign : 'right',
									anchor : '100% 88%',
									width : 230,
									renderer : function(value) {
										return "<object id=\"FoxitPDFSDK\"  WIDTH=\"900px\" HEIGHT=\"490px\" clsid=\"{F53B7748-643C-4A78-8DBC-01A4855D1A10}\" TYPE=\"application/x-itst-activex\"></object>" +
				    						"<object id=\"idMXOTOCX\" clsid=\"{4E16E1BD-B562-48E3-813E-DC5CA566D94C}\" type=\"application/x-itst-activex\" height=0 width=0></object>"+
				    						"<object id=\"sigCtl1\" WIDTH=\"0\" HEIGHT=\"0\" clsid=\"{963B1D81-38B8-492E-ACBE-74801D009E9E}\" TYPE=\"application/x-itst-activex\">	</object>"+
											"<object id=\"sigcapt\" clsid=\"{E34F39B0-37EF-40B0-94CF-3FE20CF6AD5D}\"	TYPE=\"application/x-itst-activex\"></object>";
									}
								} ]
							} ]
				});
Ext.define('iih.mr.wr.omr.action.DoctorErpSignAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	 * @Override
	 */
	execute: function(context) {
		var FoxitPDFSDK = document.getElementById("FoxitPDFSDK");
		var wDoctorImg = 120;		// 医生手写签名图片的宽，在sigCtl1中设置，在患者图片上面
		var hDoctorImg = 40;		// 医生手写签名图片的高，在sigCtl1中设置
		// 启动Wacom面板
		var sigCtl = document.getElementById("sigCtl1");
		//var dc = new ActiveXObject("Florentis.DynamicCapture");
		var dc = document.getElementById("sigcapt");
		var rc = dc.Capture(sigCtl, "who", "why");
		switch( rc ) {
		case 0: // CaptureOK
			//alert("Signature captured successfully");
			var txtSignature = document.getElementById("txtSignature");
			var flags = 0x2000 + 0x80000 + 0x400000; //SigObj.outputBase64 | SigObj.color32BPP | SigObj.encodeData
			var b64 = sigCtl.Signature.RenderBitmap("", 200, 100, "image/png", 1, 0x000000, 0xffffff, 0.0, 0.0, flags );

			// 计算位置
			var isGetPosition = false;
			var left = 0;
			var top = 0;
			var pageIndex = 0;
			for (i = 0; i < FoxitPDFSDK.PageCount; i++) {
				var FindResult = FoxitPDFSDK.FindPageFirst(i, '医生签字', false, false);
				if (FindResult != null) {
					isGetPosition = true;
					// 返回的String格式：left top right bottom
					var rectString = FindResult.GetFindRectStringByIndex(0);
					// String转换为Array
					var rectArray = rectString.split(' ');
					// 插入图片
					// ‘患者或近亲属或法定代理人签字’，这段文字‘字’的下方为rect的right和bottom,
					// 需要向下偏移一定量，假设为50（可修改），再偏移图片的大小，
					var left = rectArray[2] - hDoctorImg - 50;
					var top = rectArray[3] - hDoctorImg; //rectArray[3] - offsetSign - hPatientImg - hDoctorImg;
					pageIndex = FindResult.GetFindPageNum();
					break ;
				}
			}
			FoxitPDFSDK.FindClose();
			
			// 建议，设置获取位置不成功时，的默认值。
			if (!isGetPosition) {
				left = FoxitPDFSDK.GetPageWidth(0) - wPatientImg;
				top = hFingerImg;
				pageIndex = FoxitPDFSDK.PageCount - 1; // 最后一页
			}

			// 添加图片（暂时不支持jpg的base64添加），参数可设置(图片大小在"sigCtl1" id上设置)
			var addimageRet = FoxitPDFSDK.AddImageByFileBase64(pageIndex, left, top, wDoctorImg, hDoctorImg, b64, 100, 0);
			break;
        case 1: // CaptureCancel
			Ext.Msg.alert("提示","Signature capture cancelled");
			break;
        case 100: // CapturePadError
        	Ext.Msg.alert("提示","No capture service available");
			break;
        case 101: // CaptureError
        	Ext.Msg.alert("提示","Tablet Error");
			break;
        case 102: // CaptureIntegrityKeyInvalid
        	Ext.Msg.alert("提示","The integrity key parameter is invalid (obsolete)");
			break;
        case 103: // CaptureNotLicensed
        	Ext.Msg.alert("提示","No valid Signature Capture licence found");
			break;
        case 200: // CaptureAbort
        	Ext.Msg.alert("提示","Error - unable to parse document contents");
			break;
        default: 
        	Ext.Msg.alert("提示","Capture Error " + rc);
			break;
		}
    
	}
});

Ext.define('iih.mr.wr.omr.action.ErpSignSaveAction', {
	extend:  iih.mr.wr.omr.action.BtnStaErpSignAction ,
	
	/*
	 * @Override
	 */
	execute: function(context) {
		var operations = context.operations;
//		var target = document.getElementById("target");
//		target.DeleteFile("D:\qq.txt");
//		console.info("删除完成");
//		return;
        if(!operations) {
            return;
        }
		var self=this;
		//XapMessageBox.confirm2('签名保存后将无法对病历进行修改和再次签名，请确认是否继续保存签名？', function(btn){
		//	if (btn == 'yes') {
				var signresult = self.foxit_sdk_ts_signature(); 
				if(!signresult){
					Ext.MessageBox.alert('提示', '已签章或签章失败，病历保存失败！');
				   return ; 
				}
				var FoxitPDFSDK = document.getElementById("FoxitPDFSDK");
				// 保存文件
				FoxitPDFSDK.Save();
				// 获得文件路径
				var filePath = FoxitPDFSDK.FilePath;
				//var filePath = "C:\\" + 'timestamp.pdf';
				// 转换为base64
				var base64 = FoxitPDFSDK.ReadFileToBase64(filePath);
				//取到mrpk和fileDate放入data传入后台
				var outmrdoceditview=Ext.getCmp('outmrdoceditview');
				var mr=outmrdoceditview.medicalRecord;
				mr.caFileData=base64;
				self.addPrepareOperations(operations, mr);
				/*FuiPageFactory.submit({
			          serviceName: 'fi.clinical.mr.online.mr_doc_edit.MRDocEditService',
			          serviceMethodName: 'savePDF',
			          data: [data],
			          success: function(mrbMrDocFile) {
							var electronicSign=Ext.getCmp('electronicSign');
							electronicSign.setDisabled(true);
							var gridDoc = me.getMrDocGrid();
							var deleteBtn=gridDoc.down('button[action=delete]');
							deleteBtn.setDisabled(true);
							var emrDocDelete = window.iemr.extensions.constants[0].EMR_DOC_DELETE;
							var emrSave = window.iemr.extensions.constants[0].EMR_SAVE;
							var emrRefreshMacro = window.iemr.extensions.constants[0].EMR_REFRESH_MACRO;//刷新宏元素
							var emrRefreshDiagnosis = window.iemr.extensions.constants[0].EMR_REFRESH_DIAGNOSIS;//刷新诊断
							iemrEditor.SetCommandVisible(emrDocDelete, false);
							iemrEditor.SetCommandVisible(emrSave, false);
							iemrEditor.SetCommandVisible(emrRefreshMacro, false);
							iemrEditor.SetCommandVisible(emrRefreshDiagnosis, false);
							iemrEditor.SetReadOnly();
							iemrEditor.UpdateToolbar();
							docEditPage.data.updateCount = mrbMrDocFile.updateCount;
			          },
			          failure: function(data) {
//			              Ext.MessageBox.alert('提示', '保存失败！');
			          }
			    });*/
           // }else if (btn == 'no') {
            //    return false;
           // }
		// 	});
	},
    addPrepareOperations: function(operations,data) {
        var METHODS = this.getInvocationMethods();
        var url=this.url;
        var operation = {
            url: url,
            method: METHODS.METHOD_CREATE,
            data:data,
            scope: this,
            success: this.onAddSuccess,
            fail: this.onFail
        };
        operations.push(operation);
    },
    onAddSuccess: function(returnData) {
    	var erpSignSaveBtn=Ext.getCmp('erpSignSaveBtn');
		erpSignSaveBtn.setDisabled(true);
		var timePokeSignBtn=Ext.getCmp('timePokeSignBtn');
		timePokeSignBtn.setDisabled(true);
		var fingerprintGatherBtn=Ext.getCmp('fingerprintGatherBtn');
		fingerprintGatherBtn.setDisabled(true);
		var patientSignBtn=Ext.getCmp('patientSignBtn');
		patientSignBtn.setDisabled(true);
		var doctorSignBtn=Ext.getCmp('doctorSignBtn');
		doctorSignBtn.setDisabled(true);
		var erpSignBtn=Ext.getCmp('erpSignBtn');
		erpSignBtn.setDisabled(true);
		var serchErpSignBtn=Ext.getCmp('serchErpSignBtn');
		serchErpSignBtn.setDisabled(false);
		var mrDelete=Ext.getCmp('mrDelete');
		mrDelete.setDisabled(true);
		var reSelectTempBtn=Ext.getCmp('reSelectTempBtn');
    	reSelectTempBtn.setDisabled(true);
		var plugin = document.getElementById('iemrEditor');
		var emrSave = 'com.founder.iemr.editor.toolbar:emrSave';//保存
        var emrSubmit = 'com.founder.iemr.editor.toolbar:emrSubmit';//提交
        var emrRevoke = 'com.founder.iemr.editor.toolbar:emrRevoke';//撤销
        var emrDocDelete = 'com.founder.iemr.editor.toolbar:emrDocDelete';//删除
        var emrRefreshMacro = 'com.founder.iemr.editor.toolbar:emrRefreshMacro';//刷新宏元素
        var emrRefreshDiagnosis = 'com.founder.iemr.editor.toolbar:emrRefreshDiagnosis';//刷新诊断
        var emrRefreshOutpatientDisposal='com.founder.iemr.editor.toolbar:emrRefreshOutpatientDisposal';//刷新门诊处置
        plugin.SetCommandEnable(emrSave, false);
        plugin.SetCommandEnable(emrSubmit, false);
        plugin.SetCommandEnable(emrRevoke, false);
        plugin.SetCommandEnable(emrDocDelete, false);
        plugin.SetCommandEnable(emrRefreshMacro, false);
        plugin.SetCommandEnable(emrRefreshDiagnosis, false);
        plugin.SetCommandEnable(emrRefreshOutpatientDisposal, false);
        plugin.SetReadOnly();
        plugin.UpdateToolbar();

    	Ext.MessageBox.alert('提示', '已签章成功！');
    }
});

Ext.define('iih.mr.wr.omr.action.PatientErpSignAction', {
	extend :  iih.mr.wr.omr.action.BtnStaErpSignAction ,

	/*
	 * @Override
	 */
	execute : function(context) {
		var offsetSign = 100;
		var FoxitPDFSDK = document.getElementById("FoxitPDFSDK");
		var operations = context.operations;
		if (!operations) {
			return;
		}
		var wPatientImg = 120;		// 患者手写签名图片的宽，在sigCtl1中设置，在指纹图片上面
		var hPatientImg = 40;		// 患者手写签名图片的高，在sigCtl1中设置
		var sigCtl = document.getElementById("sigCtl1");
		//var dc = new ActiveXObject("Florentis.DynamicCapture");
		var dc = document.getElementById("sigcapt");
		var rc = dc.Capture(sigCtl, "who", "why");
		switch( rc ) {
		case 0: // CaptureOK
			//alert("Signature captured successfully");
			var txtSignature = document.getElementById("txtSignature");
			var flags = 0x2000 + 0x80000 + 0x400000; //SigObj.outputBase64 | SigObj.color32BPP | SigObj.encodeData
			b64 = sigCtl.Signature.RenderBitmap("", 300, 150, "image/png", 1, 0x000000, 0xffffff, 0.0, 0.0, flags );

			var isGetPosition = false;
			var left = 0;
			var top = 0;
			var pageIndex = 0;
			for (i = 0; i < FoxitPDFSDK.PageCount; i++) {
				var FindResult = FoxitPDFSDK.FindPageFirst(i, '患者或近亲属或法定代理人签字', false, false);
				if (FindResult != null) {
					isGetPosition = true;
					// 返回的String格式：left top right bottom
					var rectString = FindResult.GetFindRectStringByIndex(0);
					// String转换为Array
					var rectArray = rectString.split(' ');
					// 插入图片
					// ‘患者或近亲属或法定代理人签字’，这段文字‘字’的下方为rect的right和bottom,
					// 需要向下偏移一定量，假设为50（可修改），再偏移图片的大小
					var left = rectArray[2] - hPatientImg - offsetSign;
					if (left < 0)
					{
						left = rectArray[2];
					}
					var top = rectArray[3] - hPatientImg; // - offsetSign - hPatientImg;
					var pageIndex = FindResult.GetFindPageNum();
					//fingerLeft = rectArray[1];
					break ;
				}
			}
			FoxitPDFSDK.FindClose();
			
			// 建议，设置获取位置不成功时，的默认值。
			if (!isGetPosition) {
				left = FoxitPDFSDK.GetPageWidth(0) - wPatientImg;
				top = hFingerImg;
				pageIndex = FoxitPDFSDK.PageCount - 1; // 最后一页
			}
			
			// 患者指纹位置
			fingerLeft = left + wPatientImg + 10;
			fingerBottom = top - 20;
			// 添加图片（暂时不支持jpg的base64添加），参数可设置(图片大小在"sigCtl1" id上设置)
			var addimageRet = FoxitPDFSDK.AddImageByFileBase64(pageIndex, left, top, wPatientImg, hPatientImg, b64, 100, 0);

			break;
        case 1: // CaptureCancel
        	Ext.Msg.alert("提示","Signature capture cancelled");
			break;
        case 100: // CapturePadError
        	Ext.Msg.alert("提示","No capture service available");
			break;
        case 101: // CaptureError
        	Ext.Msg.alert("提示","Tablet Error");
			break;
        case 102: // CaptureIntegrityKeyInvalid
        	Ext.Msg.alert("提示","The integrity key parameter is invalid (obsolete)");
			break;
        case 103: // CaptureNotLicensed
        	Ext.Msg.alert("提示","No valid Signature Capture licence found");
			break;
        case 200: // CaptureAbort
        	Ext.Msg.alert("提示","Error - unable to parse document contents");
			break;
        default: 
        	Ext.Msg.alert("提示","Capture Error " + rc);
			break;
		}
	}

});

Ext.define('iih.mr.wr.omr.action.FingerCollectErpSignAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	 * @Override
	 */
	execute: function(context) {
		var FoxitPDFSDK = document.getElementById("FoxitPDFSDK");
		var wFingerImg = 50;		// 指纹采集图像的宽（目前该设备是256，插入到PDF做50%缩小，可设置），在右下角
		var hFingerImg = 75;		// 指纹采集图像的高（目前该设备是304，插入到PDF做50%缩小，可设置）
		var demoFingerBmp = 'C:\\finger.bmp';
		MXOTOCX = document.getElementById("idMXOTOCX");
		var isMxUsbDevice = MXOTOCX.IsMxUsbDevice();
		if (isMxUsbDevice == -1) {
			alert("请插入指纹采集设备！");
			return ;
		}
		// 采集特征码
		var dwWaitTime = 5000; //超时时间（毫秒）
		var mxUsbGetTz = MXOTOCX.mxUsbGetTz(dwWaitTime);
		// 采集指纹图片
		var ret = MXOTOCX.mxGetTzImage(demoFingerBmp);
		
		// 参数可设置
		//var left = FoxitPDFSDK.GetPageWidth(0) - wFingerImg;
		var top = 0;
		var left = 160; //fingerLeft; // FoxitPDFSDK.GetPageWidth(0) - 100;
		var bottom = fingerBottom; //FoxitPDFSDK.GetPageHeight(0) - 304;
		var lastPageIndex = FoxitPDFSDK.PageCount - 1; // 最后一页
		var addimageRet = FoxitPDFSDK.AddImageObject(lastPageIndex, left, bottom, wFingerImg, hFingerImg, demoFingerBmp, 100, 0);
	}
});

Ext.define('iih.mr.wr.omr.action.TimestampErpSignErpSignAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	 * @Override
	 */
	execute: function(context) {
		var sigField;

        var FoxitPDFSDK = document.getElementById("FoxitPDFSDK");
        var SigFieldMgr = FoxitPDFSDK.GetPDFSignatureMgr();

        //set the position to locate the signature.
        sigField = SigFieldMgr.Add( 0, 10, 60, 25, 44 );

        if( null==sigField)
        {
        	Ext.MessageBox.alert('提示', FoxitPDFSDK.GetLastSigModuleErrMsg());
        }

        //Set filter and subFilter if need.This mainly be used by customer algorithm.
        //when you signed by default algorithm they will be default set Filter with "Adobe.PPKLite" and SubFilter with "adbe.pkcs7.detached"
        sigField.Filter = 'Adobe.PPKLite';
        sigField.SubFilter = 'ETSI.RFC3161';

        //sign and save as pdf
		var tsOutputPath = "C:\\" + 'timestamp.pdf';
		// 其中User和Password的格式是：user:password
        var bRet = SigFieldMgr.SignDocumentTs( sigField, tsOutputPath, '10.1.6.196', '/tss/tsp', 8080, ':' );
        if(!bRet)
        {
        	//Ext.MessageBox.alert('提示', "签章失败.");
            SigFieldMgr.Remove(sigField);
			return false;
        }
        else
        {
			return true;
			 //Ext.MessageBox.alert('提示', "签章成功！");
        }
	}
});

Ext.define('iih.mr.wr.omr.view.CreateErpSignView', {
	extend :  Xap.ej.template.BaseTemplate ,

	alias : 'widget.createerpsignview',
	id : 'createerpsignview',
	xapConfig : {
		blocks : {
			'content' : {
				xclass : 'iih.mr.wr.omr.block.CreateErpSignBlock',
				height : 600
			}
		},
		actions : {
			'init' : {
				xclass : 'iih.mr.wr.omr.action.BtnStaErpSignAction',
				blocks : {
					content : 'content'
				}
			},
			'doctorErpSign':{
				xclass : 'iih.mr.wr.omr.action.DoctorErpSignAction',
				blocks : {
					content : 'content'
				}
			},
			'erpSiqnSave':{
				xclass : 'iih.mr.wr.omr.action.ErpSignSaveAction',
				url:'omr/cafile',
				blocks : {
					content : 'content'
				}
			},
			'confirmErpSign':{
				xclass : 'iih.mr.wr.omr.action.ConfirmErpSignAction',
				blocks : {
					content : 'content'
				}
			},
			'patientErpSign':{
				xclass : 'iih.mr.wr.omr.action.PatientErpSignAction',
				blocks : {
					content : 'content'
				}
			},
			'fingerCollectErpSign':{
				xclass : 'iih.mr.wr.omr.action.FingerCollectErpSignAction',
				blocks : {
					content : 'content'
				}
			},
			'timestampErpSign':{
				xclass : 'iih.mr.wr.omr.action.TimestampErpSignErpSignAction',
				blocks : {
					content : 'content'
				}
			}
		},
		chains : {
			'init' : [ 'init' ],
			'doctorErpSign':['doctorErpSign'],
			'erpSiqnSave':['erpSiqnSave'],
			'confirmErpSign':['confirmErpSign'],
			'patientErpSign':['patientErpSign'],
			'fingerCollectErpSign':['fingerCollectErpSign'],
			'timestampErpSign':['timestampErpSign']
		},
		connections : {
			'content' : [ {
				selector : 'button[itemId=doctorSignBtn]',
				event : 'click',
				chain : 'doctorErpSign'
			},{
				selector : 'button[itemId=erpSignSaveBtn]',
				event : 'click',
				chain : 'confirmErpSign'
			},{
				selector : 'button[itemId=patientSignBtn]',
				event : 'click',
				chain : 'patientErpSign'
			},{
				selector : 'button[itemId=fingerprintGatherBtn]',
				event : 'click',
				chain : 'fingerCollectErpSign'
			},{
				selector : 'button[itemId=timePokeSignBtn]',
				event : 'click',
				chain : 'timestampErpSign'
			}]
		}
	}
});
Ext.define('iih.mr.wr.omr.action.CreateErpSingAction', {
	extend :  Xap.ej.action.PopAction ,
	                                                      
	id : 'createErpSingAction',
	/*
	 * @Override
	 */
	execute : function(context) {
		var erpSignType = context.erpSignType;
		var title = '浏览签名';
		if (erpSignType && 'erpSign' == erpSignType) {
			title = '电子签名';
		}
		var config = {
			modal : true,
			width : 915,
			height : erpSignType=='erpSign'?560:530,
			title : title,
			contentConfig : {
				xtype : 'createerpsignview',
				initChain : {
					name : 'init',
					context : context
				}
			}
		};
		this.callParent([ config ]);
		// var createerpsignview=Ext.getCmp('createErpSingAction');
		// createerpsignview.erpSignType=context.erpSignType;
	}

});

Ext.define('iih.mr.wr.omr.action.DisabledOfficeToolBarAction', {
    extend:  Xap.ej.action.ServiceInvocation ,
    
    /*
     * @Override
     */
    doExecute: function(context) {
        var operations = context.operations;
        var me=this;
        if(!operations) {
            return;
        }
        me.prepareOperations(operations);
    },
    
    prepareOperations: function(operations) {
        var url=this.url+'/SYSM01.7';
        var operation = {
            url: url,
            method: 'get',
            scope: this,
            success: this.onSuccess,
            fail: this.onFail
        };
        operations.push(operation);
    },
    onSuccess: function(operation) {
    	var me=this;
		var parms=operation.result.dataList;
		var submitRevokeEnable=true;//是否启用提交撤回流程，默认启用
		if(parms.length>0 ){
			if(parms[0].value!='1'){
				submitRevokeEnable=false;
			}
		}
		function intToBoolean(str){
        	if('1'==str){
        		return true;
        	}else{
        		return false;
        	}
        }
        var emrSave = 'com.founder.iemr.editor.toolbar:emrSave';//保存
        var emrSubmit = 'com.founder.iemr.editor.toolbar:emrSubmit';//提交
        var emrRevoke = 'com.founder.iemr.editor.toolbar:emrRevoke';//撤销
        var emrDocProperty='com.founder.iemr.editor.toolbar:emrDocProperty';//属性
        var emrStartApprove='com.founder.iemr.editor.toolbar:emrStartApprove';//开始审签
        var emrApprove='com.founder.iemr.editor.toolbar:emrApprove';//审签
        var emrAuditRevoke='com.founder.iemr.editor.toolbar:emrAuditRevoke';//审签撤回
        var emrReject = 'com.founder.iemr.editor.toolbar:emrReject';//驳回
        var emrDocDelete = 'com.founder.iemr.editor.toolbar:emrDocDelete';//删除
        var emrRefreshMacro = 'com.founder.iemr.editor.toolbar:emrRefreshMacro';//刷新宏元素
        var emrRefreshDiagnosis = 'com.founder.iemr.editor.toolbar:emrRefreshDiagnosis';//刷新诊断
        var emrImageLibraries = 'com.founder.iemr.editor.toolbar:emrImageLibraries';//插入图片
        var emrContinuePrint = 'com.founder.iemr.editor.toolbar:emrContinuePrint';//续打
        var emrSelectContinuePrint = 'com.founder.iemr.editor.toolbar:emrSelectContinuePrint';//选页打印
        var emrSaveAsTemplate = 'com.founder.iemr.editor.toolbar:emrSaveAsTemplate';//病历另存为模板
        var emrRefreshOutpatientDisposal='com.founder.iemr.editor.toolbar:emrRefreshOutpatientDisposal';//刷新门诊处置
//        var emrSelectContinuePrint = 'com.founder.iemr.editor.toolbar:emrSelectContinuePrint';//选页续打
//        var emrContinuePrint = 'com.founder.iemr.editor.toolbar:emrContinuePrint';//病历另存为模板
//        var iddMedocalHistory = '';//月经史公式编辑
        
        var mr=me.getOwner().medicalRecord;
        //重新选择模板按钮
        var reSelectTempBtn=Ext.getCmp('reSelectTempBtn');
        setTimeout(function() {
        	Ext.MessageBox.hide();
        },150);
        setTimeout(function() {
        	var plugin = document.getElementById('iemrEditor');
            var canSign=intToBoolean(mr.canSign);
            var canCancelSigned=intToBoolean(mr.canCancelSigned);
            var canUpdate=intToBoolean(mr.canUpdate);
            var canDelete=intToBoolean(mr.canDelete);
            var canEdit=intToBoolean(mr.canEdit);
            var canPrint=intToBoolean(mr.canPrint);
            var canErpSign=intToBoolean(mr.canErpSign);
//            var canContinuePrint=intToBoolean(mr.canContinuePrint);
            var canSaveAsTemplate=intToBoolean(mr.canSaveAsTemplate);
            if (mr.mrTypeCustomCode=='MRM14.03'){
    			plugin.SetCommandVisible(emrRefreshOutpatientDisposal,false);
    		}
        	if(me.getOwner().opType=='open'){
        		var mrDelete=Ext.getCmp('mrDelete');
        		mrDelete.setDisabled(!canDelete);
        		if(reSelectTempBtn){
        			reSelectTempBtn.setDisabled(!canEdit);
        		}
        		//plugin.SetCommandEnable(emrSaveAsTemplate,canSaveAsTemplate);
        		plugin.SetCommandEnable(emrSave,canUpdate);
        		plugin.SetCommandEnable(emrSubmit,canSign);
            	plugin.SetCommandEnable(emrRevoke,canCancelSigned);
            	plugin.SetCommandEnable(emrDocDelete,canDelete);
            	plugin.SetCommandEnable(emrRefreshDiagnosis,canEdit);
            	plugin.SetCommandEnable(emrRefreshMacro,canEdit);
            	plugin.SetCommandEnable(emrImageLibraries,canEdit);
            	plugin.SetCommandEnable(emrRefreshOutpatientDisposal,canEdit);
            	plugin.SetCommandVisible(emrSelectContinuePrint,false);
            	var erpSignBtn=Ext.getCmp('erpSignBtn');
            	erpSignBtn.setDisabled(!canErpSign);
            	var serchErpSignBtn=Ext.getCmp('serchErpSignBtn');
            	if(mr.caFileData&&mr.caFileData.length>100){
            		serchErpSignBtn.setDisabled(false);
            	}else{
            		serchErpSignBtn.setDisabled(true);
            	}
            }else{
            	plugin.SetCommandEnable(emrDocProperty,false);
            	plugin.SetCommandEnable(emrRevoke,false);
            	plugin.SetCommandEnable(emrDocDelete,false);
            	if(reSelectTempBtn){
        			reSelectTempBtn.setDisabled(true);
        		}
//            	plugin.SetCommandEnable(emrContinuePrint,false);
            }
        	plugin.SetCommandVisible(emrContinuePrint,false);
        	plugin.SetCommandVisible(emrSubmit,submitRevokeEnable);
        	plugin.SetCommandVisible(emrRevoke,submitRevokeEnable);
        	plugin.UpdateToolbar();
        },450);
    }
});

Ext.define('iih.mr.wr.omr.action.EditorCallBackAction', {
    extend:  Xap.ej.action.ServiceInvocation ,

    
    /*
    * @Override
    */
    execute: function(context) {
    	var self=this;
    	var operations = context.operations;
        if(!operations) {
            return;
        }
    	var opType=this.getOwner().opType;
    	
    	var gui = require('nw.gui');
		var win = gui.Window.get();
		var page = this.getOwner();
		win.on('close', function() {
			var a=this;
			var plugin = document.getElementById('iemrEditor');
			if(plugin&&plugin.valid&&plugin.IsModified()){
//				alert('当前对病历所做修改未保存，是否保存？');
				var close=function(){
					a.close(true);
				};
				XapMessageBox.confirm('是否保存对当前病历的修改？',
			            function(btn, text){
			                if (btn == 'yes') {
			                	var saveActionChain=page.getActionChain('emrSave');
			                	saveActionChain.execute({callback:close});
			                } else if (btn == 'no') {
			                	close();
			                } else if (btn == 'cancel') {
			                }
			            },win
			        );
	        }else{
				a.close(true);
			}
		});
    	if(opType.indexOf('new')>-1){
    		setTimeout(function() {
    			var plugin = document.getElementById('iemrEditor');
    			plugin.EnableOCX(false);
    			plugin.ImportMacroValue('MR.M.013.D.26', IMER_GLOBAL.user.name);//进行签名
    			//设置编辑器按钮状态
        		var disabledOfficeToolBarAction=self.getOwner().getActionChain("disabledOfficeToolBarAction");
        		disabledOfficeToolBarAction.execute();
        		
        		//刷新宏元素
        		var emrRefreshMacro=self.getOwner().getActionChain("emrRefreshMacro");
        		emrRefreshMacro.execute();
        		
        		var emrRefreshDiagnosis=self.getOwner().getActionChain("emrRefreshDiagnosis");
        		emrRefreshDiagnosis.execute();
        		
        		/*var emrRefreshPrescription=self.getOwner().getActionChain("emrRefreshOutpatientDisposal");
        		emrRefreshPrescription.execute();*/
   		 	},450);
    		self.prepareOperations(operations);
    		//设置newF为1，则刷新宏元素后会自动刷新引用元素
    		self.getOwner().newF=1;
    		
    	}else if ('open'==opType){
            //设置编辑器按钮状态
    		var disabledOfficeToolBarAction=self.getOwner().getActionChain("disabledOfficeToolBarAction");
    		disabledOfficeToolBarAction.execute();
    	}else if ('reSelect'==opType){
    		this.getOwner().opType='open';
    		setTimeout(function() {
    			var plugin = document.getElementById('iemrEditor');
    			plugin.ImportMacroValue('MR.M.013.D.26', IMER_GLOBAL.user.name);//进行签名
   		 	},400);
    		
    		
    		//设置编辑器按钮状态
    		var disabledOfficeToolBarAction=self.getOwner().getActionChain("disabledOfficeToolBarAction");
    		disabledOfficeToolBarAction.execute();
    		
    		//刷新宏元素
    		var emrRefreshMacro=this.getOwner().getActionChain("emrRefreshMacro");
    		emrRefreshMacro.execute();
    		
    		var emrRefreshDiagnosis=this.getOwner().getActionChain("emrRefreshDiagnosis");
    		emrRefreshDiagnosis.execute();
    		self.prepareOperations(operations);
    	}
    	setTimeout(function() {
    		var plugin = document.getElementById('iemrEditor');
    		plugin.GotoMark('');
//    		plugin.SwitchRedline(2, IMER_GLOBAL.user.name);
//    		plugin.ShowRedline(0);
//    		plugin.SetModified(false);
    		plugin.EnableOCX(true);
		},700);
    },
    
    prepareOperations: function(operations) {
        var url=this.url+'/SYSM01.6';
        var operation = {
            url: url,
            method: 'get',
            scope: this,
            success: this.onSuccess,
            fail: this.onFail
        };
        operations.push(operation);
    },
    onSuccess: function(operation) {
		var parms=operation.result.dataList;
		console.log(parms);
		console.log(IMER_GLOBAL.department.code);
		for(parm in parms ){
			if(parms[parm].value==IMER_GLOBAL.department.code){
				//如果当前科室设置了不自动刷新处方，则退出此方法，不执行刷新处方的chain
				return;
			}
		}
		console.log('emrRefreshPrescription');
		var emrRefreshPrescription=this.getOwner().getActionChain("emrRefreshOutpatientDisposal");
		emrRefreshPrescription.execute();
    }
});

Ext.define('iih.mr.wr.omr.action.ErpSignBtnStatusAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	 * @Override
	 */
	execute: function(context) {
		var operations = context.operations;
        if(!operations) {
            return;
        }
        
		this.addPrepareOperations(operations);
				
	},
    addPrepareOperations: function(operations,data) {
        var METHODS = this.getInvocationMethods();
        var url=this.url+"?key=GULOU_CA_ENABLED";
        var operation = {
            url: url,
            method: 'get',
            //data:data,
            scope: this,
            success: this.onAddSuccess,
            fail: this.onFail
        };
        operations.push(operation);
    },
    onAddSuccess: function(returnData) {
    	 var res = returnData.result.data;
//    	 if(res && res.length>0){
    		 var serchErpSignBtn=Ext.getCmp('serchErpSignBtn');
    		 var erpSignBtn=Ext.getCmp('erpSignBtn');
    		 //IMER_GLOBAL.department.code
//    		 for(var i=0;i<res.length;i++){
    			 if(res == '1'){
    				 //显示
    				 serchErpSignBtn.show();
    				 erpSignBtn.show();
//    				 break;
    			 }
//    		 }
    		 
//    	 }
    }
});

Ext.define('iih.mr.wr.omr.action.GetSystemConfigAction', {
    extend:  Xap.ej.action.ServiceInvocation ,
    
    /*
     * @Override
     */
    execute: function(context) {
        var operations = context.operations;
        if(!operations) {
            return;
        }
        this.prepareOperations(operations);
    },
    
    prepareOperations: function(operations) {
    		var url=this.url+'/SYSM01.6';
            var operation = {
                url: url,
                method: 'get',
                scope: this,
                success: this.onSuccess
            };
            operations.push(operation);
    },
    onSuccess: function(operation) {
    	var configs=operation.result.dataList;
    	var mr=this.getOwner().medicalRecord;
    	if(mr.mrTypeCustomCode=='MRM14.09'){
        	var config=null;
    		var f=true;
    		if(configs){
    			for(i in configs){
    				config=configs[i];
    				if(config.value==IMER_GLOBAL.department.code){
    					f=false;
    				}
    			}
    		}
    		if(f){
    			var emrRefreshOutpatientDisposal = this.getOwner().getActionChain('emrRefreshOutpatientDisposal');
    			emrRefreshOutpatientDisposal.execute();
    		}
        }
    }
});

Ext.define('iih.mr.wr.omr.action.InitOmrDocPropertyEditAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override
	*/
	execute: function(context) {
		this.getOwner().mrPk=context.mrSn;
//		console.log('eeeeeeeee');
//		console.log(context);
		this.getOwner().mrDocListView=context.mrDocListView;
		this.getOwner().mrDocEditView=context.mrDocEditView;
        this.initMrDocProperty(context.operations,context.mrSn);
    },
    initMrDocProperty: function(operations,mrSn) {
        var url = 'omr/'+mrSn+'?withFile=false';
        var operation = {
                url: url,
                method: 'get',
                scope: this,
                success: this.onSearchSuccess
        };
        operations.push(operation);
    },
    onSearchSuccess: function(operation) {
    	var owner=this.getOwner();
    	this.getOwner().mr=operation.result.data;
    	var mr=this.getOwner().mr;
        var block = this.getOwner().getBlock('content');
        var confimUpPro=block.down('[name=confimUpPro]');
        var cancel=block.down('[name=cancel]');
        var close=block.down('[name=close]');
//        var higherLvlEmpId=block.down('[name=higherLvlEmpId]');
//        higherLvlEmpId.setDisabled(true);
        if(!('MRM04.01'==mr.statusCode&&mr.canEdit==1)){
//        	confimUpPro.setVisible(false);
        	close.setVisible(true);
//        	var higherLvlEmpId=block.down('[name=higherLvlEmpId]');
//            var typeCode = mr.typeCode;
//        	if("MRM16.19"==typeCode||"MRM16.20"==typeCode){
//                higherLvlEmpId.setValue(mr.superiorDoctorName);
//            }
        }else{
//        	var mrDocPropertyEditInitComboxAction=owner.getActionChain('mrDocPropertyEditInitComboxAction');
//        	mrDocPropertyEditInitComboxAction.execute();
        	confimUpPro.setVisible(true);
        	cancel.setVisible(true);
        }
        var mrType=block.down('[name=mrType]');
        mrType.setValue(mr.typeName);
        mrType.setDisabled(true);
        var bizTime=block.down('[name=logicSmtDate]');
        bizTime.setValue(mr.bizTime);
        bizTime.setDisabled(true);
        var createUserName=block.down('[name=createUserName]');
        createUserName.setValue(mr.createUserName);
        createUserName.setDisabled(true);
        var templeName=block.down('[name=templeName]');
        templeName.setValue(mr.templeName);
        var a=document.getElementById('temp');
        a.onclick = function showmsg(){ 
        	var templateProperty=owner.getActionChain('templateProperty');
        	templateProperty.execute();
        }; 
//        a.addEventListener("onclick ",function(){alert(123);});
//        templeName.setDisabled(true);
        var createTime=block.down('[name=createTime]');
        createTime.setValue(mr.crtTime);
        createTime.setDisabled(true);
//        var masterDoctorName=block.down('[name=masterDoctorName]');
//        masterDoctorName.setValue(mr.masterDoctorName);
//        masterDoctorName.setDisabled(true);
//        var mastDoctorDate=block.down('[name=mastDoctorDate]');
//        mastDoctorDate.setValue(mr.mastDoctorDate);
//        mastDoctorDate.setDisabled(true);
        var mrNm=block.down('[name=mrNm]');
        mrNm.setDisabled(true);
        mrNm.setValue(mr.name);
        
        var statusName=block.down('[name=statusName]');
        statusName.setValue(mr.statusName);
        statusName.setDisabled(true);
//        var qaStatusName=block.down('[name=qaStatusName]');
//        qaStatusName.setValue(mr.qaStatusName);
//        qaStatusName.setDisabled(true);
        var completedFlag=block.down('[name=completedFlag]');
        completedFlag.setValue(mr.completedFlag==1?'已完成':'未完成');
        completedFlag.setDisabled(true);
//        var signLevelName=block.down('[name=signLevelName]');
//        signLevelName.setValue(mr.signLevelName);
//        signLevelName.setDisabled(true);
        var submitName=block.down('[name=submitName]');
        submitName.setValue(mr.submitName);
        submitName.setDisabled(true);
        var submitDate=block.down('[name=submitDate]');
        submitDate.setValue(mr.submitDate);
        submitDate.setDisabled(true);
//        var logicSubmitTime=block.down('[name=logicSubmitTime]');
//        logicSubmitTime.setValue(mr.submitDate);
//        logicSubmitTime.setDisabled(true);
        var deptName=block.down('[name=deptName]');
        deptName.setValue(mr.deptName);
        deptName.setDisabled(true);
//        var treatDoctorName=block.down('[name=treatDoctorName]');
//        treatDoctorName.setValue(mr.treatDoctorName);
//        treatDoctorName.setDisabled(true);
//        var dirDoctorName=block.down('[name=dirDoctorName]');
//        dirDoctorName.setValue(mr.dirDoctorName);
//        dirDoctorName.setDisabled(true);
//        var dirDoctorDate=block.down('[name=dirDoctorDate]');
//        dirDoctorDate.setValue(mr.dirDoctorDate);
//        dirDoctorDate.setDisabled(true);
//        var lastUpdateUserName=block.down('[name=lastUpdateUserName]');
//        lastUpdateUserName.setValue(mr.lastUpdateUserName);
//        lastUpdateUserName.setDisabled(true);
//        var lastUpdateTime=block.down('[name=lastUpdateTime]');
//        lastUpdateTime.setValue(mr.lastUpdateTime);
//        lastUpdateTime.setDisabled(true);
        if('MRM04.01'==mr.statusCode&&mr.canEdit==1){
        	mrNm.setDisabled(false);
        	bizTime.setDisabled(false);
        }
    }
});

Ext.define('iih.mr.wr.omr.action.MenuCreateAction', {
    extend:  Xap.ej.action.Action ,
    
    requires: [],
    
    /*
    * @Override
    */
    execute: function(context) {
        var event = context.event;
        var view = this.getOwner();
        if(event) {
            var args = event.arguments;
            var e = args[4];
            e.preventDefault();  
            e.stopEvent();
            //树节点
            var mr = args[1].raw;
            var deleteBtn=view.down('toolbar button[method=delete]');
            var property=view.down('toolbar button[method=property]');
            var create=view.down('toolbar button[method=create]');
//            console.log(mr);
            var deleteDisabled=true;
            var propertyDisabled=true;
            var canCreate=create.disabled;
            if(1==mr.canDelete){
            	deleteDisabled=false;
            	deleteBtn.setDisabled(false);
            }else{
            	deleteBtn.setDisabled(true);
            }
            if(mr.mrPk){
            	propertyDisabled=false;
            	property.setDisabled(false);
            }else{
            	property.setDisabled(true);
            }
            var nodemenu = new Ext.menu.Menu({  
                floating : true,  
                items : [{  
                    text : "新建",
                    icon: 'css/images/icons/Create.png',
                    disabled: canCreate,
                    handler : function() {  
                    	var create =  view.getActionChain('create');
                    	create.execute();
                    } 
                },{  
                    text : "删除",
                    icon: 'css/images/icons/delete.png',
                    disabled: deleteDisabled,
                    handler : function() {  
                    	var deleteConfirm =  view.getActionChain('deleteConfirm');
                    	deleteConfirm.execute();
                    } 
                },{  
                    text : "属性",
                    icon: 'css/images/icons/property.png',
                    disabled: propertyDisabled,
                    handler : function() {  
                    	var emrDocProperty =  view.getActionChain('emrDocProperty');
                    	emrDocProperty.execute();
                    } 
                }]
            });
            nodemenu.showAt(e.getXY());
        }
    }
});
Ext.define('iih.mr.wr.omr.action.MergeAllMrAction', {
    extend:  iih.mr.action.editor.EmrEditorOperatorAction ,
    
    /*
     * @Override
     */
    execute: function(context) {
    	var me=this;
        var mrList=this.getOwner().mrList;
        setTimeout(function() {
        	var plugin = document.getElementById('iemrEditor');
            for(var i=0;i<mrList.length;i++){
            	if(i>0){
            		var fileData=mrList[i].fileData;
            		plugin.InsertFromString(fileData,1);
            	}
            }
            var emrSave = 'com.founder.iemr.editor.toolbar:emrSave';//保存
            var emrSubmit = 'com.founder.iemr.editor.toolbar:emrSubmit';//提交
            var emrRevoke = 'com.founder.iemr.editor.toolbar:emrRevoke';//撤销
            var emrDocProperty='com.founder.iemr.editor.toolbar:emrDocProperty';//属性
            var emrStartApprove='com.founder.iemr.editor.toolbar:emrStartApprove';//开始审签
            var emrApprove='com.founder.iemr.editor.toolbar:emrApprove';//审签
            var emrAuditRevoke='com.founder.iemr.editor.toolbar:emrAuditRevoke';//审签撤回
            var emrReject = 'com.founder.iemr.editor.toolbar:emrReject';//驳回
            var emrDocDelete = 'com.founder.iemr.editor.toolbar:emrDocDelete';//删除
            var emrRefreshMacro = 'com.founder.iemr.editor.toolbar:emrRefreshMacro';//刷新宏元素
            var emrRefreshDiagnosis = 'com.founder.iemr.editor.toolbar:emrRefreshDiagnosis';//刷新诊断
            var emrImageLibraries = 'com.founder.iemr.editor.toolbar:emrImageLibraries';//插入图片
            var emrContinuePrint = 'com.founder.iemr.editor.toolbar:emrContinuePrint';//续打
            var emrSelectContinuePrint = 'com.founder.iemr.editor.toolbar:emrSelectContinuePrint';//选页打印
            var emrSaveAsTemplate = 'com.founder.iemr.editor.toolbar:emrSaveAsTemplate';//病历另存为模板
            var emrRefreshOutpatientDisposal='com.founder.iemr.editor.toolbar:emrRefreshOutpatientDisposal';//刷新门诊处置
            setTimeout(function() {
    			plugin.SetCommandVisible(emrSave,false);
    			plugin.SetCommandVisible(emrContinuePrint,false);
                plugin.SetCommandVisible(emrSubmit,false);
                plugin.SetCommandVisible(emrRevoke,false);
                plugin.SetCommandVisible(emrDocDelete,false);
                plugin.SetCommandVisible('com.founder.iemr.editor.toolbar:emrNeatPrint',false);
                plugin.SetCommandVisible(emrRefreshMacro,false);
                plugin.SetCommandVisible(emrRefreshDiagnosis,false);
                plugin.SetCommandVisible(emrImageLibraries,false);
                plugin.SetCommandVisible(emrRefreshOutpatientDisposal,false);
//                plugin.SetCommandVisible(emrRefreshMacro,false);
                
                //删除空区域
                var sections = plugin.GetSections();
                var sectionNames="";
				for(var i=0;i<sections.length;i++){
					if(sectionNames==""){
						sectionNames=sections[i];
					}else{
						sectionNames=sectionNames+'\n'+sections[i];
					}
				}
				var emptySectionNames=new Array(0);
				if(sectionNames.length>0){
	                var sectionContents = plugin.ExportSections(sectionNames);
	                var sectionContentsJson=JSON.parse(sectionContents);
	                for(var i=0;i<sections.length;i++){
	                	var secionName=sections[i];
	                	var sectionContent=sectionContentsJson[secionName];
	                	var newContent=sectionContent.replace(secionName+':','');
	                	newContent=newContent.replace(secionName+'：','');
	                	if(!newContent||newContent.length==0){
	                		emptySectionNames.push(secionName);
	                	}
	                	if(emptySectionNames.length>0){
	                		plugin.RemoveSections(emptySectionNames);//删除空白区域
	                	}
	                }
				}
                //删除空表格
                var tabList = plugin.GetTables();
    			var arrayObj = new Array(0);
    			if(tabList){                	    		
    				for(var i=0;i<tabList.length;i++){
    					var tabName = tabList[i];
    					var tabContent =plugin.ExportTable(tabName);
    					if(!(tabContent&&tabContent.length>0)){
    						arrayObj.push(tabName);
    					}
    				}
    			} 
    			plugin.RemoveTables(arrayObj);//删除空白表格
    			plugin.SetModified(false);
    			plugin.SetReadOnly();
    			setTimeout(function() {
    				plugin.UpdateToolbar();
    				me.closeProgress();
            		plugin.ShowOCX(true);
    			},250);
    		}, 250);
        },200);
    }
});

Ext.define('iih.mr.wr.omr.action.OmrAccordAmrGroupCheckAction', {
	    extend:  Xap.ej.action.ServiceInvocation ,
	    
	    doExecute: function(context) {
			this.prepareOperations(context.operations);
		},
	    prepareOperations: function(operations) {
	        var url = this.url;
	        if(!IMER_GLOBAL.encounterSn){
	        	return;
	        }
	        url = url+'/'+IMER_GLOBAL.encounterSn;  
	        var mclass = null;
	        var METHODS = this.getInvocationMethods();
	        var operation = {
	            url: url,
	            mclass: mclass,
	            method: METHODS.METHOD_GET,
	            condition: null,
	            scope: this,
	            success: this.onSuccess
	        };
	        operations.push(operation);
	    },
	    onSuccess: function(operation) {
	    	var owner=this.getOwner();
	    	var accordAmrGroup=operation.result.data.accordAmrGroup;
	    	if(accordAmrGroup){
	    		XapMessageBox.confirm2('检测到上次就诊在三天内，是否续诊？', function(id){
    				if(id=='yes'){
    					var amrGroupCreate = owner.getActionChain('amrGroupCreate');
    					amrGroupCreate.execute();
    				}else{
    					var treeInit = owner.getActionChain('treeInit');
    					treeInit.execute();
    				}
    			});
	    	}else{
	    		var treeInit = owner.getActionChain('treeInit');
				treeInit.execute();
	    	}
	    }
	});


Ext.define('iih.mr.wr.omr.action.OmrAmrGroupCreateAction', {
	    extend:  Xap.ej.action.ServiceInvocation ,
	    
	    doExecute: function(context) {
			this.prepareOperations(context.operations);
		},
	    prepareOperations: function(operations) {
	        var url = this.url;
	        url = url+'/'+IMER_GLOBAL.encounterSn;  
	        var mclass = null;
	        var METHODS = this.getInvocationMethods();
	        var operation = {
	            url: url,
	            mclass: mclass,
	            method: METHODS.METHOD_CREATE,
	            condition: null,
	            scope: this,
	            success: this.onSuccess
	        };
	        operations.push(operation);
	    },
	    onSuccess: function(operation) {
	    	var owner=this.getOwner();
			var treeInit = owner.getActionChain('treeInit');
			treeInit.execute();
			var outdiagnosisview=Ext.getCmp('outdiagnosisview');
			outdiagnosisview.fireEvent('selectEncounter');
	    }
	});


Ext.define('iih.mr.wr.omr.action.OmrDoSaveAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	 * @Override
	 */
	execute: function(context) {
		/*var owner=this.getOwner();
		var mrEditView=owner.getBlock('right');
		var doSaveChain =  mrEditView.getActionChain('doSave');
		if(doSaveChain){
			doSaveChain.execute();
		}*/
		
	    var view = this.getOwner();
        var block = view.down('outmrdoceditview');
        block._tabPanel = view._tabPanel;
        block._removeTab = view._removeTab;
        block._removeTab.ensureRemove = true;
        var chain = block.getActionChain('emrSave');
        chain.callBack = this.getOwner().getActionChain('doSave').callBack;
        chain.execute();
    }
});

Ext.define('iih.mr.wr.omr.action.OmrDocDeleteAction', {
    extend:  Xap.ej.action.ServiceInvocation ,
    
    doExecute: function(context) {
    	var self=this;
    	var owner = self.getOwner();
		var left=owner.getBlock('left');
		var mrTree=left.down("xaptree");
		var treeNode = mrTree.getSelectionModel().getSelection();		
		var parNode = treeNode[0].data.parentId;
		owner.parNode=parNode;
		var mr=treeNode[0].raw;
        var data={
            	mrPk:mr.mrPk,
            	encounterPk:mr.enPk,
            	updateCount:mr.updateCount
            };
		self.prepareOperations(context.operations,data);
	},
    prepareOperations: function(operations,datas) {
        var url = this.url;
        url += '/' + datas.mrPk;       
        var mclass = null;
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: mclass,
            method: METHODS.METHOD_DELETE,
            condition: null,
            data:datas,
            scope: this,
            success: this.onSuccess
        };
        operations.push(operation);
    },
    onSuccess: function(operation) {
        var owner = this.getOwner();
        
        var deleteBtn=owner.down('toolbar button[method=delete]');
     	var property=owner.down('toolbar button[method=property]');
     	property.setDisabled(true);
     	deleteBtn.setDisabled(true);
        var chain = owner.getActionChain('refresh');
        if(chain) {
            chain.execute({from:'delete'});
        }
    }
});
Ext.define('iih.mr.wr.omr.action.OmrDocDeleteConfirmAction', {
    extend:  Xap.ej.action.ServiceInvocation ,
    
    doExecute: function(context) {
    	var self=this;
    	var owner = self.getOwner();
		var left=owner.getBlock('left');
		var mrTree=left.down("xaptree");
		var treeNode = mrTree.getSelectionModel().getSelection();
		if(treeNode&&treeNode.length>0){
			var mr=treeNode[0].raw;
	        if(IMER_GLOBAL.encounterSn!=mr.encounterPk){
	        	XapMessageBox.info('非本次就诊的病历不可删除!');
	        	return;
	        }
		}
		
		XapMessageBox.confirm2('是否确定删除？', function(id){
			if(id=='yes'){
				var owner = self.getOwner();
		        var chain = owner.getActionChain('delete');
		        if(chain){
		        	chain.execute(context);
		        }
			}
		});
	}
});

Ext.define('iih.mr.wr.omr.action.OmrDocNeatPrintAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	 * @Override
	 */
	execute: function(context) {
		var plugin = document.getElementById('iemrEditor');
	    if(plugin.IsModified()){
            Ext.MessageBox.alert('提示', '当前修改未保存，请保存后重试！');
        }else{
        	var tabList = plugin.GetTables();
	    	var arrayObj = new Array(0);
	    	var emptyParagNames = new Array(0);
	    	if(tabList){                	    		
	    		for(var i=0;i<tabList.length;i++){
    	    		var tabName = tabList[i];
    	    		var tabContent =plugin.ExportTable(tabName);
    	    		if(!(tabContent&&tabContent.length>0)){
    	    			arrayObj.push(tabName);
    	    		}
    	    	}
	    	}                	    	
	    	plugin.PrintEx(emptyParagNames,arrayObj);
	        //审签后设置编辑器为只读
//	        plugin.SetReadOnly();
        }
    }
});

Ext.define('iih.mr.wr.omr.block.OmrDocPropertyEditBlock',{
	extend :  Xap.ej.block.FormBlock ,

	           
		                                 
                                         
                                        
                                                    
	  
	alias:'widget.omrdocpropertyeditblock',
	/*
     * layout:{ type: 'table', columns: 2, //width: 1024, tableAttrs: { border:
     * 0, cellpadding: 4, // cellspacing: 1, width: '100%' }, tdAttrs: { valign:
     * 'left' }},
     */
	layout:{
		type: 'table',
		columns: 2,
		tableAttrs: {
			border: 0,
			width: '100%'
		},
        tdAttrs: {
            valign: 'left'
        }
	},
	buttons:[{
            xtype: "button",
            name: 'confimUpPro',
            method:'confimUpPro',
            hidden:true,
            text: '确认',
            iconCls: 'icon-OK'
        },{
            xtype: "button",
            name: 'close',
            hidden:true,
            method:'close',
            text: '关闭',
            iconCls: 'icon-close'
        },{
            xtype: "button",
            name: 'cancel',
            hidden:true,
            method:'cancel',
            text: '取消',
            iconCls: 'icon-cancel'
        }],
	
	items: [{
		xtype:'xaptextfield',
		name:'mrNm',
		fieldLabel:'病 历 名 称',
		labelAlign:'left',
		labelWidth:80,
		width:503,
		colspan:2,
		padding:'15 0 0 30'
	},{
		xtype:'xaptextfield',
		name:'mrType',
		fieldLabel:'病 历 类 型',
		labelWidth:80,
		width:230,
//		colspan:2,
		padding:'5 0 0 30'
	},{
		xtype:'datetimefield',
		name:'logicSmtDate',
		fieldLabel:'业 务 时 间',
		labelAlign:'right',
		labelWidth:80,
		width:230,
//		colspan:2,
		padding:'5 0 0 10'
	},{
		xtype:'xaptextfield',
		name:'completedFlag',
		fieldLabel:'是 否 完 成',
		labelWidth:80,
		width:230,
//		colspan:2,
		padding:'5 0 0 30'
	}/*,{
		xtype:'xapcombobox',
		name:'higherLvlEmpId',
		fieldLabel:'查 房 医 师',
		labelAlign:'right',
		editable:false,
		readOnly:true,
		labelWidth:80,
		width:230,
		queryMode: 'local',
		displayField: 'name',
		valueField: 'id',
		padding:'5 0 0 30'
	}*/,{
		xtype:'xaptextfield',
		name:'statusName',
		fieldLabel:'病 历 状 态',
		labelWidth:80,
		width:230,
//		colspan:2,
		padding:'5 0 0 10'
	}/*,{
		xtype:'xaptextfield',
		name:'qaStatusName',
		fieldLabel:'终末质控状态',
		labelWidth:80,
		width:230,
//		colspan:2,
		padding:'5 10 0 0'
	}*/,/*{
		xtype:'xaptextfield',
		name:'signLevelName',
		fieldLabel:'审 签 级 别',
		labelWidth:80,
		width:230,
//		colspan:2,
		padding:'5 0 0 10'
	},*/{
		xtype:'xapdisplayfield',
		name:'templeName',
		fieldLabel:'模 板 名 称',
		labelAlign:'right',
		labelWidth:80,
		width:230,
//		colspan:2,
		padding:'5 0 0 30',
		renderer:function(value){
			if(value){
				return "<a class='link' href='#' id='temp'>"+value+"</a>";
			}
	    }
	}/*,{
		xtype:'datetimefield',
		name:'logicSubmitTime',
		fieldLabel:'逻辑提交时间',
		labelAlign:'right',
		labelWidth:80,
		width:230,
//		colspan:2,
		padding:'5 0 0 10'
	}*/,{
		xtype:'xaptextfield',
		name:'submitName',
		fieldLabel:'提    交    人',
		labelWidth:80,
		width:230,
//		colspan:2,
		padding:'5 0 0 10'
	},{
		xtype:'datetimefield',
		name:'submitDate',
		fieldLabel:'提 交 时 间',
		labelAlign:'right',
		labelWidth:80,
		width:230,
//		colspan:2,
		padding:'5 0 0 30'
	},{
		xtype:'xaptextfield',
		name:'deptName',
		fieldLabel:'所 属 科 室',
		labelWidth:80,
		width:230,
//		colspan:2,
		padding:'5 0 0 10'
	}/*,{
		xtype:'xaptextfield',
		name:'treatDoctorName',
		fieldLabel:'经 治 医 师',
		labelWidth:80,
		width:230,
//		colspan:2,
		padding:'5 0 0 10'
	},{
		xtype:'xapcombobox',
		name:'masterDoctorName',
		labelAlign:'right',
		queryMode: 'local',
		displayField: 'name',
		editable:false,
		valueField: 'id',
		fieldLabel:'主 治 医 师',
		labelWidth:80,
		width:230,
//		colspan:2,
		padding:'5 0 0 30'
	},{
		xtype:'datetimefield',
		name:'mastDoctorDate',
		labelAlign:'right',
		fieldLabel:'二级审签时间',
		labelWidth:80,
		width:230,
//		colspan:2,
		padding:'5 0 0 10'
	},{
		xtype:'xapcombobox',
		name:'dirDoctorName',
		labelAlign:'right',
		queryMode: 'local',
		displayField: 'name',
		valueField: 'id',
		name:'dirDoctorName',
		editable:false,
		fieldLabel:'主 任 医 师',
		labelWidth:80,
		width:230,
//		colspan:2,
		padding:'5 0 0 30'
	},{
		xtype:'datetimefield',
		name:'dirDoctorDate',
		labelAlign:'right',
		fieldLabel:'三级审签时间',
		labelWidth:80,
		width:230,
//		colspan:2,
		padding:'5 0 0 10'
	}*/,{
		xtype:'datetimefield',
		name:'createTime',
		fieldLabel:'创 建 时 间',
		labelAlign:'right',
		labelWidth:80,
		width:230,
//		colspan:2,
		padding:'5 0 0 30'
	},{
		xtype:'xaptextfield',
		name:'createUserName',
		fieldLabel:'创&nbsp;&nbsp;建&nbsp;&nbsp;人',
		labelWidth:80,
		width:230,
//		colspan:2,
		padding:'5 0 0 10'
	}/*,{
		xtype:'xaptextfield',
		name:'lastUpdateUserName',
		fieldLabel:'最后修改人',
		labelWidth:80,
		width:230,
//		colspan:2,
		padding:'5 0 0 30'
	},{
		xtype:'datetimefield',
		name:'lastUpdateTime',
		fieldLabel:'最后修改时间',
		labelAlign:'right',
		labelWidth:80,
		width:230,
//		colspan:2,
		padding:'5 0 0 10'
	}*/],
	setData: function(data) {
        this.callParent(arguments);
    },
    getData: function() {
        this.callParent(arguments);
    }
})
Ext.define('iih.mr.wr.omr.view.OmrDocPropertyEditView',{
	extend :  Xap.ej.stl.view.SingleRecordEditTemplate ,

	           
	                                                  
	                                                    
	                                             
	  

	alias:'widget.omrdocpropertyeditview',
	
	layout:'fit',
	
	xapConfig: {
		blocks: {
		    'content': {
                xclass: 'iih.mr.wr.omr.block.OmrDocPropertyEditBlock',
                height:150
            }
		},
		actions: {
		    'init': { 
		    	xclass: 'iih.mr.wr.omr.action.InitOmrDocPropertyEditAction',
		        url:'mr/create/init',
		        blocks: {
		            content:'content'
		        }
		    }/*,
		    'initjobTitle': { 
                xclass: 'iih.mr.wr.mr.action.InitjobTitleAction',
                blocks: {
                    content:'content'
                }
            },
		    'initCombox': { 
                xclass: 'iih.mr.wr.mr.action.InitComboxAction',
                blocks: {
                    content:'content'
                }
            }*/,
            'confimUpPro':{
                xclass:'iih.mr.wr.omr.action.ModifyOmrProAction',
                url:'omr',
                blocks:{
                    content:'content'
                }
            },
		    'cancel': {
		        xclass: 'iih.mr.wr.mr.action.CancelCreateMrDocAction',
		        //url:'cancelTemplatePropertyEdit',
		        blocks: {
		            content: 'content'
		        }
		    },
            'templateProperty': {
                xclass: 'iih.mr.wr.mr.action.MrTemplatePropertyInitAction',
                url:'mr/tpl/template',
                blocks: {
                    content: 'content'
                }
            }/*,
            'mrDocPropertyEditInitComboxAction': {
                xclass: 'iih.mr.wr.mr.action.MrDocPropertyEditInitComboxAction',
                url:'/app/sup/doctors',
                blocks: {
                    content: 'content'
                }
            }*/
		},

		chains: {
		    'init': ['init'],
//		    'initjobTitle': ['initjobTitle'],
            'confimUpPro': ['confimUpPro'],
//            'mrDocPropertyEditInitComboxAction': ['mrDocPropertyEditInitComboxAction'],
            'cancel': ['cancel'],
            'templateProperty':['templateProperty']
		},

		connections: {
		    'content':[/*{
                event:'afterrender',
                chain:'init'
            },*/{    
                //确认按钮（修改病历属性）
                selector: 'button[method=confimUpPro]',
                event: 'click',
                chain: 'confimUpPro'
            },{    
                //关闭按钮
                selector: 'button[method=close]',
                event: 'click',
                chain: 'cancel'
            },{    
                //取消按钮
                selector: 'button[method=cancel]',
                event: 'click',
                chain: 'cancel'
            },{
                selector: 'xapdisplayfield[name=templeName]',
                event: 'click',
                chain: 'templateProperty'
            },{    
                //上级医师
                selector: 'xapcombobox[name=higherLvlEmpId]',
                event: 'change',
                chain: 'initjobTitle'
            }]
		}
	}
})
Ext.define('iih.mr.wr.omr.action.OmrDocPropertyAction', {
    extend:  Xap.ej.action.PopAction ,

                                                            
    
    execute: function(context) {
        var left = this.getOwner().getBlock('left');
//        var context={mrSn:null};
        if(undefined!=left){//从病历文书树进来
//        	context.mrDocListView=this.getOwner();
            var mrTree = left.down('xaptree'); 
            var selected=mrTree.getSelectionModel().getSelection();
            var mr=selected[0].raw;
            context.mrSn=mr.mrPk;
//            XapMessageBox.info("请选择一条记录！");
        }else{//从编辑器菜单进来
            var mrDocEditView=this.getOwner();
//          console.log('rrrrrrrr');
//          console.log(mrDocEditView);
            context.mrSn=mrDocEditView.mrSn;
            context.mrDocEditView=mrDocEditView,
            context.from='editor';
            }
            if(null!=context.mrSn){
                var config = {
                    modal: true,           
                    width: 580,
                    height:300,
                    title :'病历属性',
                    contentConfig: {
                        xtype:'omrdocpropertyeditview',
                        initChain: {
                            name: 'init',
                            context: context
                        }
                    }
                };
                this.callParent([config]);
            }
    	}
});

Ext.define('iih.mr.wr.omr.action.OmrDocRevokeAction', {
    extend:  Xap.ej.action.ServiceInvocation ,
    
    /*
     * @Override
     */
    execute: function(context) {
        var operations = context.operations;
        if(!operations) {
            return;
        }
        this.showSubmitProgressBar('iemrEditor');
        var plugin = document.getElementById('iemrEditor');
        plugin.EnableOCX(false);
        var opType=this.getOwner().opType;
        plugin.SetCommandEnable('com.founder.iemr.editor.toolbar:emrRevoke',false);
        if(opType!=undefined){
            var medicalRecord=this.getOwner().medicalRecord;
            plugin.EditDocument();//设置为可编辑模式（因只读状态对编辑器进行的修改SaveToString无法得到）
            plugin.ClearMacroValue('MR.M.013.D.26');// 清空一级签名
//            plugin.SetModified(true);
            medicalRecord.fileData=plugin.SaveToString();
            if(opType=='new'){
                Ext.Msg.alert("提示","只有已经提交的病历才可撤回！");
            }else if(opType=='open'){
                this.openPrepareOperations(operations, medicalRecord);
            }
        }
    },
    
    openPrepareOperations: function(operations,medicalRecord) {
        var METHODS = this.getInvocationMethods();
        var url=this.url+'/'+medicalRecord.mrPk;
        var operation = {
            url: url,
            method: METHODS.METHOD_DELETE,
            data:medicalRecord,
            scope: this,
            success: this.onOpenSuccess,
            fail: this.onFail
        };
        operations.push(operation);
    },
    onOpenSuccess: function(operation) {
    	this.getOwner().medicalRecord=operation.result.data;
        var plugin = document.getElementById('iemrEditor');
        plugin.EnableOCX(true);
//        plugin.EditDocument();
   		var disabledOfficeToolBarAction=this.getOwner().getActionChain("disabledOfficeToolBarAction");
		disabledOfficeToolBarAction.execute();
    },
    onFail: function(operation) {
        Ext.Msg.alert("提示",'撤回失败!');
    }
});

Ext.define('iih.mr.wr.omr.action.OmrDocSaveAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	 * @Override
	 */
	execute: function(context) {
	    var operations = context.operations;
        if(!operations) {
            return;
        }
        if(context.callback){
        	this.getOwner().callback=context.callback;
        }else{
        	this.getOwner().callback=undefined;
        }
	    var plugin = document.getElementById('iemrEditor');
	    plugin.EnableOCX(false);
	    plugin.SetCommandEnable('com.founder.iemr.editor.toolbar:emrSave', false);
	    plugin.SetCommandEnable('com.founder.iemr.editor.toolbar:emrSubmit',false);
	    plugin.SetCommandEnable('com.founder.iemr.editor.toolbar:emrDocDelete',false);
        plugin.SetCommandEnable('com.founder.iemr.editor.toolbar:emrDocProperty',false);
        setTimeout(function() {
        	plugin.SetCommandEnable('com.founder.iemr.editor.toolbar:emrSave', true);
    	    plugin.SetCommandEnable('com.founder.iemr.editor.toolbar:emrSubmit',true);
    	    plugin.SetCommandEnable('com.founder.iemr.editor.toolbar:emrDocDelete',true);
            plugin.SetCommandEnable('com.founder.iemr.editor.toolbar:emrDocProperty',true);
        },500);
	    var opType=this.getOwner().opType;
	    if(opType!=undefined){
	        var medicalRecord=this.getOwner().medicalRecord;
	        medicalRecord.fileData=plugin.SaveToString();
//	        medicalRecord.docContent=plugin.ExportText();
//	        medicalRecord.actionType='save';
	        var referenceElem=plugin.GetSourceReferenceElem();
//	        console.log(referenceElem);
	        if(referenceElem.length>0){
	            var referenceElemJson=JSON.parse(referenceElem);
	            medicalRecord.referenceElem=referenceElemJson;//得到文档中的引用元素及值
	        }
	        this.showSubmitProgressBar('iemrEditor');
            if(opType.indexOf('new')>-1){
                this.addPrepareOperations(operations,medicalRecord);
            }else if(opType=='open'){
            	if(Ext.isEmpty(medicalRecord.mrPk,false)){
            		this.addPrepareOperations(operations,medicalRecord);
            	}else{
            		this.openPrepareOperations(operations, medicalRecord);
            	}
            }else if(opType=='reform'){
                this.openPrepareOperations(operations, medicalRecord);
            }else{
            	Ext.Msg.alert('提示','opType：【'+opType+'】不符合要求，只能为【new】、【open】、【reform】！');
            }
        }else{
        	Ext.Msg.alert('提示','opType不能为空！');
        }
    },
    
    addPrepareOperations: function(operations,data) {
        var METHODS = this.getInvocationMethods();
        var url=this.url;
        var operation = {
            url: url,
            method: METHODS.METHOD_CREATE,
            data:data,
            scope: this,
            success: this.onAddSuccess,
            fail: this.onFail
        };
        operations.push(operation);
    },
    
    openPrepareOperations: function(operations,medicalRecord) {
        var METHODS = this.getInvocationMethods();
        var url=this.url+'/'+medicalRecord.mrPk;
        var operation = {
            url: url,
            method: METHODS.METHOD_UPDATE,
            data:medicalRecord,
            scope: this,
            success: this.onOpenSuccess,
            fail: this.onFail
        };
        operations.push(operation);
    },
    onOpenSuccess: function(returnData) {
        var plugin = document.getElementById('iemrEditor');
        plugin.EnableOCX(true);
        plugin.SetCommandEnable('com.founder.iemr.editor.toolbar:emrSave', true);
        plugin.SetCommandEnable('com.founder.iemr.editor.toolbar:emrSubmit',true);
        this.getOwner().medicalRecord=returnData.result.data;
        this.callback();
//        Ext.Msg.alert('提示','保存成功!');
    },
    onAddSuccess: function(returnData) {
    	var refresh = this.getOwner().ownerCt.getActionChain('refresh');
    	refresh.execute({from:'addSuccess'});
        var plugin = document.getElementById('iemrEditor');
        plugin.EnableOCX(true);
        this.getOwner().opType='open';
        this.getOwner().medicalRecord=returnData.result.data;
        this.getOwner().mrSn=returnData.result.data.mrPk;
        plugin.SetCommandEnable('com.founder.iemr.editor.toolbar:emrSubmit',true);
        plugin.SetCommandEnable('com.founder.iemr.editor.toolbar:emrSave', true);
        plugin.SetCommandEnable('com.founder.iemr.editor.toolbar:emrDocDelete',true);
        plugin.SetCommandEnable('com.founder.iemr.editor.toolbar:emrDocProperty',true);
        //重新选择模板按钮
        var reSelectTempBtn=Ext.getCmp('reSelectTempBtn');
        if(reSelectTempBtn){
			reSelectTempBtn.setDisabled(false);
		}
      //电子签名按钮
        var erpSignBtn=Ext.getCmp('erpSignBtn');
        if(erpSignBtn){
        	erpSignBtn.setDisabled(false);
		}
        this.callback();
    },
    onFail: function(operation) {
    	 plugin.SetCommandEnable('com.founder.iemr.editor.toolbar:emrSave', true);
    	 plugin.UpdateToolbar();
        Ext.Msg.alert('提示','保存失败!');
    },
    callback: function() {
    	if(this.getOwner().callback){
        	var callback=this.getOwner().callback;
        	callback();
        }
   }
});

Ext.define('iih.mr.wr.omr.action.OmrDocSubmitAction', {
    extend:  Xap.ej.action.ServiceInvocation ,
    
    /*
     * @Override
     */
    execute: function(context) {
        var operations = context.operations;
        if(!operations) {
            return;
        }
        
        var medicalRecord=this.getOwner().medicalRecord;
        //如果文档为提交状态，则不执行提交，直接进行打印
        if('emrSubmit'!=this.cmd&&(!medicalRecord||medicalRecord.statusCode=='MRM04.02')){
        	//执行整洁打印
            var emrNeatPrint = this.getOwner().getActionChain('emrNeatPrint');
            if(emrNeatPrint) {
            	emrNeatPrint.execute();
            }
            return;
        }
        var userName=IMER_GLOBAL.user.name;
        var plugin = document.getElementById('iemrEditor');
        plugin.EnableOCX(false);
        var opType=this.getOwner().opType;
        if(opType!=undefined){
        	this.showSubmitProgressBar();
            var macroIdOld='MR.M.013.D.26';
            plugin.ImportMacroValue(macroIdOld, userName);//进行签名
            medicalRecord.fileData=plugin.SaveToString();
            var referenceElem=plugin.GetSourceReferenceElem();
	        console.log(referenceElem);
	        if(referenceElem.length>0){
	            var referenceElemJson=JSON.parse(referenceElem);
	            medicalRecord.referenceElem=referenceElemJson;//得到文档中的引用元素及值
	        }
            if(opType=='new'){
                this.addPrepareOperations(operations,medicalRecord);
            }else if(opType=='open'){
                this.openPrepareOperations(operations, medicalRecord);
            }
        }
    },
    
    addPrepareOperations: function(operations,medicalRecord) {
    	medicalRecord.statusCode='MRM04.02';
        var METHODS = this.getInvocationMethods();
        var url='omr';
        var operation = {
            url: url,
            method: METHODS.METHOD_CREATE,
            data:medicalRecord,
            scope: this,
            success: this.onAddSuccess,
            fail: this.onFail
        };
        operations.push(operation);
    },
    
    openPrepareOperations: function(operations,medicalRecord) {
        var METHODS = this.getInvocationMethods();
        var url=this.url+'/'+medicalRecord.mrPk;
        var operation = {
            url: url,
            method: METHODS.METHOD_CREATE,
            data:medicalRecord,
            scope: this,
            success: this.onOpenSuccess,
            fail: this.onFail
        };
        operations.push(operation);
    },
    onOpenSuccess: function(returnData) {
        var plugin = document.getElementById('iemrEditor');
        plugin.EnableOCX(true);
        this.getOwner().medicalRecord=returnData.result.data;
        plugin.SetReadOnly();
        var owner = this.getOwner();
        var chain = owner.getActionChain('disabledOfficeToolBarAction');
        if(chain) {
            chain.execute();
        }
        if('emrSubmit'==this.cmd){
        	this.callback();
        	return;
        }
        var emrNeatPrint = owner.getActionChain('emrNeatPrint');
        if(emrNeatPrint) {
        	emrNeatPrint.execute();
        }
//        Ext.Msg.alert('提示','提交成功!');
    },
    onAddSuccess: function(returnData) {
    	var refresh = this.getOwner().ownerCt.getActionChain('refresh');
    	refresh.execute({from:'addSuccess'});
        this.getOwner().opType='open';
        this.getOwner().mrSn=returnData.result.data.mrPk;
        this.getOwner().medicalRecord=returnData.result.data;
        var plugin = document.getElementById('iemrEditor');
        plugin.EnableOCX(true);
        plugin.SetCommandEnable('com.founder.iemr.editor.toolbar:emrDocProperty',true);
        plugin.SetReadOnly();
        //更改按钮状态
        var owner = this.getOwner();
        //执行工具栏控制
        var chain = owner.getActionChain('disabledOfficeToolBarAction');
        if(chain) {
            chain.execute();
        }
        if('emrSubmit'==this.cmd){
        	this.callback();
        	return;
        }
        //执行整洁打印
        var emrNeatPrint = owner.getActionChain('emrNeatPrint');
        if(emrNeatPrint) {
        	emrNeatPrint.execute();
        }
        this.callback();
    },
    onFail: function(operation) {
        Ext.Msg.alert('提示','提交失败!');
    },
    callback: function() {
    	if(this.getOwner().callback){
        	var callback=this.getOwner().callback;
        	callback();
        }
   }
});

Ext.define('iih.mr.wr.omr.action.OmrSubmitAndRevokeCheckAction', {
    extend:  Xap.ej.action.ServiceInvocation ,
    
    /*
     * @Override
     */
    execute: function(context) {
        var operations = context.operations;
        var cmd=context.event.arguments[0];
        this.cmd=cmd;
        if(!operations) {
            return;
        }
        this.prepareOperations(operations);
    },
    prepareOperations: function(operations) {
        var url=this.url+'/SYSM01.7';
        var operation = {
            url: url,
            method: 'get',
            scope: this,
            success: this.onSuccess,
            fail: this.onFail
        };
        operations.push(operation);
    },
    onSuccess: function(operation) {
    	var me=this;
    	var parms=operation.result.dataList;
		for(parm in parms ){
			if(parms[parm].value=='0'){
				var emrNeatPrint = me.getOwner().getActionChain('emrNeatPrint');
	            if(emrNeatPrint) {
	            	emrNeatPrint.execute();
	            }
			}else{
				var emrSubmit = me.getOwner().getActionChain('emrSubmit');
	            if(emrSubmit) {
	            	emrSubmit.execute();
	            }
			}
		}
    }
});

Ext.define('iih.mr.wr.omr.action.OmrToolbarsInitAction', {
	    extend:  Xap.ej.action.ServiceInvocation ,
	    
	    doExecute: function(context) {
			this.prepareOperations(context.operations);
		},
	    prepareOperations: function(operations) {
	        var url = this.url;
	        url = url+''+IMER_GLOBAL.encounterSn;  
	        var mclass = null;
	        var operation = {
	            url: url,
	            mclass: mclass,
	            method: 'get',
	            condition: null,
	            scope: this,
	            success: this.onSuccess
	        };
	        operations.push(operation);
	    },
	    onSuccess: function(operation) {
	        var owner = this.getOwner();
	        var amr=operation.result.data;
	        var deleteBtn=owner.down('toolbar button[method=delete]');
	        var createBtn=owner.down('toolbar button[method=create]');
	        var finishBtn=owner.down('toolbar button[method=complete]');
	        var cancelComplete=owner.down('toolbar button[method=cancelComplete]');
	        if(amr&&'MRM22.01'!=amr.statusCode){
	        	deleteBtn.setDisabled(true);
				createBtn.setDisabled(true);
				finishBtn.setDisabled(true);
				cancelComplete.setDisabled(false);
	        }else{
	        	deleteBtn.setDisabled(false);
				createBtn.setDisabled(false);
				finishBtn.setDisabled(false);
		        cancelComplete.setDisabled(true);
	        }
	    }
	});


Ext.define('iih.mr.wr.omr.action.OutMrDocEditAction', {
	extend:  iih.mr.action.editor.EmrEditorOperatorAction ,
	
	                                                 
	/*
	* @Override
	*/
	execute: function(context) {
	    Ext.useShims=true;
	    var a=Ext.getCmp('outmrwriteview');
	    var b=a.ownerCt.ownerCt;
	    b.ownerCt.hideMode='offsets';
    	var operations = context.operations;
    	if(!operations) {
            return;
        }
    	var opType=this.getOwner().opType;
    	if(opType!=undefined){
    		var rs = this.getBlock('content');   
    		if(opType!='readonly'){
    			this.addEditorEvent(rs);
            	this.showProgress();//显示进度条
    		}
            if(opType=='new'){//创建新病历
                var filePk=this.getOwner().medicalRecord.filePk;//得到模板文件pk
                this.addPrepareOperations(operations,filePk);
            }else if(opType=='newFromPastMr'){
                var mrDocEditPage=this.getOwner();
                var params={
                        'objectId':'iemrEditor',
                        'sstream':this.getOwner().fileData,
                        'mr_mode':4,
                        'readonly':'false',
                        'callBackAction':'editorCallBackAction'
                };
                this.insertWriter(mrDocEditPage,params);
            	
            }else if(opType=='reSelectMr'){
                var mrDocEditPage=this.getOwner();
                mrDocEditPage.opType='reSelect';
                var params={
                        'objectId':'iemrEditor',
                        'sstream':this.getOwner().fileData,
                        'mr_mode':4,
                        'readonly':'false',
                        'callBackAction':'editorCallBackAction'
                };
                this.insertWriter(mrDocEditPage,params);
            	
            }else if(opType=='reSelectTemp'){
                var mrDocEditPage=this.getOwner();
                mrDocEditPage.opType='reSelect';
                var tempFilePk=mrDocEditPage.tempFilePk;//得到模板文件pk
                this.reSelectTempPrepareOperations(operations,tempFilePk);
            	
            }else if(opType=='open'){//打开已有病历
                var mrSn=this.getOwner().mrSn;//得到文书pk
                var a=new Date();
                console.log('%c'+a+':'+a.getMilliseconds()+'毫秒     开始调用后台服务获取【'+mrSn+'】的文件......','color: #86CC00; background-color: black; font-size: 20px; padding: 3px;');
                this.openPrepareOperations(operations, mrSn);
            }else if(opType=='merge'){//打开已有病历
            	var reSelectTempBtn=Ext.getCmp('reSelectTempBtn');
            	reSelectTempBtn.setDisabled(true);
                this.openAllPrepareOperations(operations);
            }else if(opType=='readonly'){//只读浏览病历
                var mrTpCcatCd=this.getOwner().mrTpCcatCd;//得到医疗记录类型组pk
                var mrSn=this.getOwner().mrSn;//得到文书pk
                if(mrSn){
                	this.readPrepareOperations(operations, mrSn);
                }else if(mrTpCcatCd){
                	this.showProgress();//显示进度条
                	this.readPrepareOperations2(operations, mrTpCcatCd);
                }
            }
        }
    },
    openPrepareOperations: function(operations, mrSn) {
        var url = this.url+'/'+mrSn+'?withFile=true';
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            method: METHODS.METHOD_GET,
            scope: this,
            success: this.onOpenSuccess
        };
        operations.push(operation);
    },
    openAllPrepareOperations: function(operations) {
    	var encounterSn = IMER_GLOBAL.encounterSn;
        var url = 'omrs'+'?encounterPk='+encounterSn+'&withFile=true&merge=true';
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            method: METHODS.METHOD_GET,
            scope: this,
            success: this.onOpenAllSuccess
        };
        operations.push(operation);
    },
    readPrepareOperations: function(operations, mrSn) {
    	var url = this.url+'/'+mrSn+'?withFile=true';
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            method: METHODS.METHOD_GET,
            scope: this,
            success: this.onReadSuccess
        };
        operations.push(operation);
    },
    readPrepareOperations2: function(operations, mrTpCcatCd) {
    	var encounterSn = IMER_GLOBAL.encounterSn;
    	var url='mrs'+'?withFile=1&encounterPk='+encounterSn+'&mrTypeCustomCode='+mrTpCcatCd;
//    	var url = 'mrs'+'/'+mrSn+'?withFile=true';
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            method: METHODS.METHOD_GET,
            scope: this,
            success: this.onReadSuccess2
        };
        operations.push(operation);
    },
    onOpenSuccess: function(operation) {
//      var self=this;
    	var medicalRecord=operation.result.data;
    	var fileData=medicalRecord.fileData;
    	var a=new Date();
    	console.log('%c'+a+':'+a.getMilliseconds()+'毫秒     得到后台返回【'+medicalRecord.mrPk+'】的文件：'+fileData.substring(0,20),'color: #86CC00; background-color: black; font-size: 20px; padding: 3px;');
    	var mrDocEditPage=this.getOwner();
    	mrDocEditPage.medicalRecord=medicalRecord;
      
    	//根据medicalRecord属性判断当前用户是否要用编辑模式打开
    	var readonlyF=true;
    	if(medicalRecord.canEdit&&1==medicalRecord.canEdit){
    		readonlyF=false;
    	}
    	//初始化编辑器参数
    	var params={
    			'objectId':'iemrEditor',
    			'sstream':medicalRecord.fileData,
    			'mr_mode':4,//编辑器打开模式，1为书写模式，2为模板编辑模式，3为浏览模式
    			'readonly':readonlyF,//是否以只读方式打开文档
    			'callBackAction':'editorCallBackAction'//编辑器加载完成后要执行的回调Action
    	};
    	//将编辑器插入当前page
    	this.insertWriter(mrDocEditPage,params);
    },
    onOpenAllSuccess: function(operation) {
    	var mrList=operation.result.dataList;
    	var mrDocEditPage=this.getOwner();
    	mrDocEditPage.mrList=mrList;
    	if(mrList&&mrList.length>0){
    		var mrFirst=mrList[0];
    		//初始化编辑器参数
        	var params={
        			'objectId':'iemrEditor',
        			'sstream':mrFirst.fileData,
        			'mr_mode':4,//编辑器打开模式，1为书写模式，2为模板编辑模式，3为浏览模式
        			'readonly':false,//是否以只读方式打开文档
        			'hidden':true,
        			'callBackAction':'mergeAllMr'//编辑器加载完成后要执行的回调Action
        	};
        	//将编辑器插入当前page
        	this.insertWriter(mrDocEditPage,params);
    	}else{
    		this.closeProgress();
    		XapMessageBox.info('没有需要合并的病历!');
    	}
    },
    
    onReadSuccess: function(operation) {
        var self=this;
        var mrDocEditPage=self.getOwner();
        mrDocEditPage.medicalRecord=operation.result.data;
        mrDocEditPage.fireEvent('editorOpened', operation.result.data);
        var params={
                'objectId':'iemrEditorRead',
                'sstream':operation.result.data.fileData,
                'mr_mode':3,
                'readonly':true,
                'callBackAction':'closeProgress'
        };
        self.insertWriter(mrDocEditPage,params);
    },
    
    onReadSuccess2: function(operation) {
        var self=this;
        var mrDocEditPage=self.getOwner();
        var mrs=operation.result.dataList;
        mrDocEditPage.mrs=mrs;
        mrDocEditPage.fireEvent('editorOpened', operation.result.dataList);
        if(mrs.length>0){
        	var params={
                    'objectId':'iemrEditorRead',
                    'sstream':mrs[0].fileData,
                    'mr_mode':4,
                    'readonly':false,
                    'hidden':true,
                    'callBackAction':'mergeAll'
            };
            self.insertWriter(mrDocEditPage,params);
        }
        
    },
    addPrepareOperations: function(operations,filePk) {
        var url = 'mr/basefile/'+filePk;
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            method: METHODS.METHOD_GET,
            scope: this,
            success: this.onAddSuccess
        };
        operations.push(operation);
    },
    reSelectTempPrepareOperations: function(operations,filePk) {
        var url = 'mr/basefile/'+filePk;
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            method: METHODS.METHOD_GET,
            scope: this,
            success: this.onReSelectTempSuccess
        };
        operations.push(operation);
    },
    addPrepareOperationsFromPastMr: function(operations,filePk) {
        var url = 'mr/file/'+filePk;
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            method: METHODS.METHOD_GET,
            scope: this,
            success: this.onAddSuccessFromPastMr
        };
        operations.push(operation);
    },
    onAddSuccess: function(operation) {
        var self=this;
        var data=operation.result.data;
        var mrDocEditPage=self.getOwner();
        var params={
                'objectId':'iemrEditor',
                'sstream':data.odtFile,
                'mr_mode':4,
                'readonly':'false',
                'callBackAction':'editorCallBackAction'
        };
        this.insertWriter(mrDocEditPage,params);
    },
    onReSelectTempSuccess: function(operation) {
        var self=this;
        var data=operation.result.data;
        var mrDocEditPage=self.getOwner();
        var params={
                'objectId':'iemrEditor',
                'sstream':data.odtFile,
                'mr_mode':4,
                'readonly':'false',
                'callBackAction':'editorCallBackAction'
        };
        this.insertWriter(mrDocEditPage,params);
    },
    onAddSuccessFromPastMr: function(operation) {
        var self=this;
        var pasrMr=operation.result.data;
        var mrDocEditPage=self.getOwner();
        var params={
                'objectId':'iemrEditor',
                'sstream':pasrMr.fileData,
                'mr_mode':4,
                'readonly':'false',
                'callBackAction':'editorCallBackAction'
        };
        this.insertWriter(mrDocEditPage,params);
    },
    refreshTop:function(medicalRecord){
    	 var canvas = Xap.getCanvas();
         canvas.fireEvent("updatePatient",{patient:medicalRecord.amr});
    }
    
});

Ext.define('iih.mr.wr.omr.action.OutMrDocTreeInitAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	                                 
	
	execute: function(context) {
		this.from=context.from;
        var operations = context.operations;  
       
        var enPk = context.enPk;
        if(enPk==undefined){
        	if(IMER_GLOBAL.encounterSn&&IMER_GLOBAL.encounterSn!=null){
        		enPk = IMER_GLOBAL.encounterSn;
        	}else{
        		return;
        	}
        }
        this.showLoading();
        var toolbarsInitAction=this.getOwner().getActionChain('toolbarsInit');
        toolbarsInitAction.execute();
        var url = this.url+"?encounterPk="+enPk+'&showAllCourse=1';  
        var mclass = null;        
        var operation = {
            url: url,
            mclass: mclass,
            method: 'get',
            condition: null,
            scope: this,
            success: this.onSuccess
        };
        operations.push(operation);  
    }, 

    onSuccess: function(operation) {
        var block = this.getBlock('result');
        var right=this.getOwner().getBlock('right');
        var owner=this.getOwner();
        if(this.from&&('addSuccess'!=this.from||this.from=='delete')){
//        	var right=this.getOwner().getBlock('right');
            var objView=right.down("objectview");
    		if(objView){
    			right.remove(objView);
    			delete right.mrSn;
    			delete right.medicalRecord;
    		}
    	}
        var mr=right.medicalRecord;//当前打开的病历
        var reSelectTempBtn=Ext.getCmp('reSelectTempBtn');
        var m = operation;
        if(m.result.data.children){
        	block.setData(m.result.data.children);
        	var tree = block.down('xaptree');
        	if(mr&&mr.mrPk){
        		tree.selectById(mr.mrPk);
        		var rb = tree.getSelectionModel().getSelection();              
                if(rb){
                	var treeNode = rb[0];
                	if(treeNode&&treeNode.data.parentId!=null&&treeNode.data.parentId!=undefined){
                		tree.selectById(treeNode.data.parentId);
                		var rb2 = tree.getSelectionModel().getSelection();
                		var parNode=rb2[0];
                		parNode.expand();
                		tree.selectById(mr.mrPk);
                		var deleteBtn=owner.down('toolbar button[method=delete]');
                		if(mr.canDelete=='1'){
                			deleteBtn.setDisabled(false);
                		}else{
                			deleteBtn.setDisabled(true);
                		}
                    	var property=owner.down('toolbar button[method=property]');
                    	property.setDisabled(false);
                    }
                }
        	}else{
        		var parNode=owner.parNode;
        		if(parNode){
        			tree.selectById(parNode);
        		}else{
        			tree.selectById('MRM14.09');
        		}
        		
        		var rb = tree.getSelectionModel().getSelection();
        		if(rb.length>0){
                	var treeNode = rb[0];
                	if(treeNode.childNodes.length>0){
                    	treeNode.expand();
                    	if(!parNode){
                    		parNode=treeNode.data.id;
                    	}
                    	if(parNode=='MRM14.09'){
                    		var id= treeNode.data.children[0].id;
                        	if(id){
                        		var mr=treeNode.data.children[0];
                        		var deleteBtn=owner.down('toolbar button[method=delete]');
                        		if(mr.canDelete=='1'){
                        			deleteBtn.setDisabled(false);
                        		}else{
                        			deleteBtn.setDisabled(true);
                        		}
                        		tree.selectById(id);
                        		var treeNodeChange=this.getOwner().getActionChain('treeNodeChange');
                        		treeNodeChange.execute();
                        	}
                    	}else{
                    		reSelectTempBtn.setDisabled(true);
                    	}
                    }else{
            			reSelectTempBtn.setDisabled(true);
                    }
        		}else{
        			reSelectTempBtn.setDisabled(true);
        		}                    
        	}
        }else{
        	block.setData([]);
        	var tree = block.down('xaptree');
        	tree.getSelectionModel().deselectAll();
        	var deleteBtn=owner.down('toolbar button[method=delete]');
           	var property=owner.down('toolbar button[method=property]');
           	deleteBtn.setDisabled(true);
           	property.setDisabled(true);
           	var reSelectTempBtn=Ext.getCmp('reSelectTempBtn');
        	reSelectTempBtn.setDisabled(true);
        	if(IMER_GLOBAL.encounterSn){
        		var createAction=this.getOwner().getActionChain('create');
            	createAction.execute();
        	}
        }
    }  
});
Ext.define('iih.mr.wr.omr.action.OutMrDocTreeNodeChangeAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override
	*/
	execute: function(context) { 
		 var rb = this.getBlock('result').down('xaptree');
		 var treeNode = rb.getSelectionModel().getSelection();
         var merge = treeNode[0].raw.merge;
         var mrPk = treeNode[0].raw.mrPk;
         var mrTpCcatCode=treeNode[0].raw.mrTpCcatCd;
         var owner = this.getOwner();
         setTimeout(function() {
        	 if(rb.isDisabled()){
            	 rb.enable();
        	 }
         },350);
         if(mrPk){
        	rb.disable();
        	var mr=treeNode[0].raw;
        	var deleteBtn=owner.down('toolbar button[method=delete]');
           	var property=owner.down('toolbar button[method=property]');
           	property.setDisabled(false);
           	if(1==mr.canDelete){
           		deleteBtn.setDisabled(false);
           	}else{
           		deleteBtn.setDisabled(true);
           	}
          	var right = owner.getBlock('right');
          	if(right){
          		var mrSn = right.mrSn;
          		if(mrPk!=mrSn){
          			delete right.mrTpCcatCd;
          			var objView=right.down("objectview");
          			if(objView){
          				var callback=function(){
      						right.remove(objView);
      						right.mrSn = mrPk;
      	 			        right.opType = 'open';
      	 			        setTimeout(function() {
      	 			        	var initChain =  right.getActionChain('init');
      	 			        	initChain.execute();
      	 			        },150);
      	 			        
      					};
          				if(right.hasEdit()){
          					XapMessageBox.confirm('是否保存对当前病历的修改？',
          				            function(btn, text){
          				                if (btn == 'yes') {
          				                	var saveActionChain=right.getActionChain('emrSave');
          				                	saveActionChain.execute({callback:callback});
          				                } else if (btn == 'no') {
          				                	callback();
          				                } else if (btn == 'cancel') {
          				                	
          				                }
          				            },right
          				        );
          				}else{
          					callback();
          				}
          				
          			}else{
          				right.mrSn = mrPk;
  	 			        right.opType = 'open';
  	 			        var initChain =  right.getActionChain('init');
  	 			        initChain.execute();
          			}
          		}
          	}
          }else if(mrTpCcatCode){
        	  rb.disable();
        	  var right = owner.getBlock('right');
        	  var create=owner.down('toolbar button[method=create]');
        	  var deleteBtn=owner.down('toolbar button[method=delete]');
        	  var property=owner.down('toolbar button[method=property]');
        	  property.setDisabled(true);
        	  deleteBtn.setDisabled(true);
        	  create.setDisabled(true);
        	  if(right){
        		  var mrTpCcatCd = right.mrTpCcatCd;
        		  if(mrTpCcatCode!=mrTpCcatCd){
        			  delete right.mrSn;
        			  /*if(right.items.items[0]){
          					right.remove(right.items.items[0]);
          				}*/
        			  var objView=right.down("objectview");
        			  if(objView){
        				  right.remove(objView);
        			  }
        			  right.mrTpCcatCd = mrTpCcatCode;
        			  right.opType = 'open';
        			  var initChain =  right.getActionChain('init');
        			  initChain.execute();
        		  }
        	  }
         }else if(merge){
         	rb.disable();
           	var right = owner.getBlock('right');
           	var create=owner.down('toolbar button[method=create]');
           	var deleteBtn=owner.down('toolbar button[method=delete]');
           	var property=owner.down('toolbar button[method=property]');
           	property.setDisabled(true);
           	deleteBtn.setDisabled(true);
           	create.setDisabled(false);
           	if(right){
           		delete right.mrSn;
           		delete right.medicalRecord;
           		var opType = right.opType;
           		if(opType!='merge'){
           			var objView=right.down("objectview");
        			if(objView){
        				right.remove(objView);
        			}
  			        right.opType = 'merge';
  			        var initChain =  right.getActionChain('init');
  			        initChain.execute();
           		}
           	}
        	 
         }else{
//        	var create=owner.down('toolbar button[method=create]');
          	var deleteBtn=owner.down('toolbar button[method=delete]');
          	var property=owner.down('toolbar button[method=property]');
          	property.setDisabled(true);
          	deleteBtn.setDisabled(true);
//          	create.setDisabled(true);
         }
    }
});

Ext.define('iih.mr.wr.omr.action.OutMrTreeInitAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	                                 
	
	execute: function(context) {
		this.from=context.from;
	    
        var operations = context.operations; 
        var owner=this.getOwner();
        owner.ownerCt.ownerCt.addListener('hide', function(enPk){
        	var reSelectTempBtn=Ext.getCmp('reSelectTempBtn');
        	reSelectTempBtn.hide();
        	var erpSignBtn=Ext.getCmp('erpSignBtn');
        	erpSignBtn.hide();
        	var serchErpSignBtn=Ext.getCmp('serchErpSignBtn');
        	serchErpSignBtn.hide();
	    });
        owner.ownerCt.ownerCt.addListener('show', function(enPk){
        	var reSelectTempBtn=Ext.getCmp('reSelectTempBtn');
        	reSelectTempBtn.show();
        	var erpSignBtn=Ext.getCmp('erpSignBtn');
        	erpSignBtn.show();
        	var serchErpSignBtn=Ext.getCmp('serchErpSignBtn');
        	serchErpSignBtn.show();
	    });   
        var enPk = context.enPk;
        if(enPk==undefined){
        	if(IMER_GLOBAL.encounterSn){
        		enPk = IMER_GLOBAL.encounterSn;
        		this.showLoading();
        	}else{
        		return
        	}
        }else{
        	this.showLoading();
        }
        var toolbarsInitAction=this.getOwner().getActionChain('toolbarsInit');
        toolbarsInitAction.execute();
        var erpSignBtnStatusAction=this.getOwner().getActionChain('erpSignBtnStatus');
        erpSignBtnStatusAction.execute();
        var url = this.url+"?encounterPk="+enPk+'&showAllCourse=1';  
        var mclass = null;        
        var operation = {
            url: url,
            mclass: mclass,
            method: 'get',
            condition: null,
            scope: this,
            success: this.onSuccess
        };
        operations.push(operation);  
    }, 

    onSuccess: function(operation) {
        var block = this.getBlock('result');
        var right=this.getOwner().getBlock('right');
        var owner=this.getOwner();
//        if('addSuccess'!=this.from){//当不是新建保存成功刷新时需要关闭编辑器，执行此段代码
            var objView=right.down("objectview");
    		if(objView){
    			right.remove(objView);
    			delete right.mrSn;
    			delete right.medicalRecord;
    		}
//    	}
//        var mr=right.medicalRecord;
        var m = operation;
        if(m.result.data.children){
        	block.setData(m.result.data.children);
        	var tree = block.down('xaptree');
//        	if(mr&&mr.mrPk){
//        		tree.selectById(mr.mrPk);
//        		var rb = tree.getSelectionModel().getSelection();
//                var treeNode = rb[0];
//                if(rb){
//                	if(treeNode&&treeNode.parentNode){
//                    	treeNode.parentNode.expand();
//                    	var property=owner.down('toolbar button[method=property]');
//                    	property.setDisabled(false);
//                    }
//                }
//        	}else{
    		tree.selectById('MRM14.09');

        	var reSelectTempBtn=Ext.getCmp('reSelectTempBtn');
    		var rb = tree.getSelectionModel().getSelection();
    		if(rb&&rb.length>0){
    		var treeNode = rb[0];
            	if(treeNode&&treeNode.childNodes.length>0){
                	treeNode.expand();
                	var id= treeNode.data.children[0].id;
                	if(id){
                		var mr=treeNode.data.children[0];
                		var deleteBtn=owner.down('toolbar button[method=delete]');
                		if(mr.canDelete=='1'){
                			deleteBtn.setDisabled(false);
                		}else{
                			deleteBtn.setDisabled(true);
                		}
                		tree.selectById(id);
                		var treeNodeChange=this.getOwner().getActionChain('treeNodeChange');
                		treeNodeChange.execute();
                	}
                	
                }else{
                   	if(reSelectTempBtn){
            			reSelectTempBtn.setDisabled(true);
            		}
                }
            }else{
               	if(reSelectTempBtn){
        			reSelectTempBtn.setDisabled(true);
        		}
            }
//        	}
        }else{
        	block.setData([]);
        	var tree = block.down('xaptree');
        	tree.getSelectionModel().deselectAll();
        	var deleteBtn=owner.down('toolbar button[method=delete]');
           	var property=owner.down('toolbar button[method=property]');
           	deleteBtn.setDisabled(true);
           	property.setDisabled(true);
           	var reSelectTempBtn=Ext.getCmp('reSelectTempBtn');
           	if(reSelectTempBtn){
    			reSelectTempBtn.setDisabled(true);
    		}
        	var medicalRecord=m.result.data.medicalRecord;
        	if(medicalRecord){//medicalRecord有值代表有默认模板，有默认模板则进行创建病历
        		right.opType = 'new';
        		right.medicalRecord=medicalRecord;
        		var initChain =  right.getActionChain('init');
		        initChain.execute();
        	}else{//否则弹出新建病历对话框
            	if(IMER_GLOBAL.encounterSn){
            		var createAction=this.getOwner().getActionChain('create');
                	createAction.execute();
            	}
        	}
        }
    }  
});
Ext.define('iih.mr.wr.omr.action.RefreshMacroAction', {
    extend:  Xap.ej.action.ServiceInvocation ,
    
    /*
     * @Override
     */
    execute: function(context) {
        var operations = context.operations;
        if(!operations) {
            return;
        }
//        Ext.Msg.alert("提示",'刷新宏元素成功!');
        this.prepareOperations(operations);
    },
    
    prepareOperations: function(operations) {
        
        var condition=this.getOwner().medicalRecord;
        condition.opType=this.getOwner().opType;
        var url=this.url+'?opType='+condition.opType+'&encounterPk='+condition.encounterPk+'&typeCode='+condition.typeCode+'&mrPk='+condition.mrPk;
        var operation = {
            url: url,
            method: 'get',
            condition: condition,
            scope: this,
            success: this.onSuccess,
            fail: this.onFail
        };
        operations.push(operation);
    },
    onSuccess: function(operation) {
        var plugin = document.getElementById('iemrEditor');
//        console.log(operation);
        this.refreshMacroElement(plugin,operation.result.data);
//        Ext.Msg.alert("提示",'刷新宏元素成功!');
    },
    onFail: function(operation) {
        Ext.Msg.alert("提示",'获取宏元素失败!');
    },
    refreshMacroElement:function(plugin,macroElementValue){
        var self=this;
        var data = this.getOwner().medicalRecord;
        function trim(str) {
            if (typeof str == "string") {
                str = str.replace(/^(\s|\u00A0)+/, '');
                for ( var i = str.length - 1; i >= 0; i--) {
                    if (/\S/.test(str.charAt(i))) {
                        str = str.substring(0, i + 1);
                        break;
                    }
                }
            }
            return str;
        };
        function nullToNbsp(str) {
            if (str == null||str.length==0) {
                str = '&nbsp;';
            }
            return str;
        };
        function rtrim(str){ //删除右边的空格
        	return str.replace(/(\s*$)/g,"");
        };
        Date.prototype.format = function(fmt)   
        {
          var o = {   
            "M+" : this.getMonth()+1,                 //月份   
            "d+" : this.getDate(),                    //日   
            "h+" : this.getHours(),                   //小时   
            "m+" : this.getMinutes(),                 //分   
            "s+" : this.getSeconds(),                 //秒   
            "q+" : Math.floor((this.getMonth()+3)/3), //季度   
            "S"  : this.getMilliseconds()             //毫秒   
          };   
          if(/(y+)/.test(fmt))   
            fmt=fmt.replace(RegExp.$1, (this.getFullYear()+"").substr(4 - RegExp.$1.length));   
          for(var k in o)   
            if(new RegExp("("+ k +")").test(fmt))   
          fmt = fmt.replace(RegExp.$1, (RegExp.$1.length==1) ? (o[k]) : (("00"+ o[k]).substr((""+ o[k]).length)));   
          return fmt;   
        }  
        function getFormatDate(date, pattern) {
            if (date == undefined) {
                date = new Date();
            }
            if (pattern == undefined) {
                pattern = "yyyy-MM-dd hh:mm:ss";
            }
            return date.format(pattern);
        };
        var patient = macroElementValue.patient;
        var encounter = macroElementValue.amr;
//        console.log(encounter);
        var temperature=macroElementValue.vitalsign;//生命体征
        var allMacroIds = plugin.GetAllMacro();//获取文档中所有的宏元素id
        var sAllMacroValue = null;//所有宏元素的值
        var allMacroIdKeys = null;//所有宏元素的key（ID）
        var unKnownMacros = '';//未知宏元素id
        var macroConstants = IMER_CONSTANT;//常量
        var allMacroIdsArray = allMacroIds.split("\n");//将宏元素id转换成数组以便遍历
        if(patient){
            self.disposeBySex(plugin, patient.sexCd);//根据性别特殊处理
        }
        for ( var i = 0; i < allMacroIdsArray.length; i++) {
            var macroId = allMacroIdsArray[i];
            var macroValue = null;
            switch (macroId) {
            case macroConstants.MR_ELEMENT_CD_1:
                macroValue = patient.nm; // 患者姓名
                break;
            case macroConstants.MR_ELEMENT_CD_2:// 性别名称
                macroValue = patient.sexNm;
                break;
            case macroConstants.MR_ELEMENT_CD_3: // 年龄
                macroValue = encounter.age;
                break;
            case macroConstants.MR_ELEMENT_CD_4:// 婚姻状况
                macroValue = patient.mariNm;
                break;
            case macroConstants.MR_ELEMENT_CD_5:// 民族
                macroValue = patient.nationNm;
                break;
            case macroConstants.MR_ELEMENT_CD_6:// 职业
                macroValue = patient.occuNm;
                break;
            case macroConstants.MR_ELEMENT_CD_7:// 出生地信息
                macroValue = patient.distNm;
                break;
            case macroConstants.MR_ELEMENT_CD_8:// 工作单位
                macroValue = patient.workOrgNm;
                break;
            case macroConstants.MR_ELEMENT_CD_9:// 身份证号
                macroValue = patient.idCardNo;
                break;
            case macroConstants.MR_ELEMENT_CD_10:// 现住址信息
                macroValue = patient.workAddr;
                break;
            case macroConstants.MR_ELEMENT_CD_11:// 患者电话
                macroValue = patient.telNo;
                break;
            case macroConstants.MR_ELEMENT_CD_12:// 暂时取的patientId
            	macroValue=patient.paId;
                break;
            case macroConstants.MR_ELEMENT_CD_13:// 住院号
                macroValue = encounter.inpatientNo;
                break;
            case macroConstants.MR_ELEMENT_CD_14:// 住院次数信息
                macroValue = encounter.encounterCount;
                break;
            case macroConstants.MR_ELEMENT_CD_15:// 床号
                macroValue = encounter.currentBedCode;
                break;
            case macroConstants.MR_ELEMENT_CD_16:// 入院时间
                if (encounter.receiveTime != undefined) {
                    macroValue = getFormatDate(new Date(encounter.receiveTime), 'yyyy-MM-dd hh:mm');
                }
                break;
            case macroConstants.MR_ELEMENT_CD_17:// 出院日期
                if (encounter.finishTime != undefined) {
                    macroValue = getFormatDate(new Date(encounter.finishTime), 'yyyy-MM-dd hh:mm');
                }
                break;
            case macroConstants.MR_ELEMENT_CD_18:// 科室
                macroValue = encounter.currentDeptName;
                break;
            case macroConstants.MR_ELEMENT_CD_19:// 病区
                macroValue = encounter.currentDeptName;
                break;
            case macroConstants.MR_ELEMENT_CD_20:// 国籍（不需要）
                break;
            case macroConstants.MR_ELEMENT_CD_21:// 邮编（暂不要）
                break;
            case macroConstants.MR_ELEMENT_CD_22:// 主要诊断（暂不要）
                break;
            case macroConstants.MR_ELEMENT_CD_23:// 费用类型（暂不要）
                break;
            case macroConstants.MR_ELEMENT_CD_24:// 主任医师签名（暂不要）
                break;
            case macroConstants.MR_ELEMENT_CD_25:// 主治医师签名（暂不要）
                break;
            case macroConstants.MR_ELEMENT_CD_26:// 管床医师签名（暂不要）
                break;
            case macroConstants.MR_ELEMENT_CD_27:// 业务时间
                if (data != undefined && data.bizTime != undefined) {
                    macroValue = getFormatDate(new Date(data.bizTime), 'yyyy-MM-dd hh:mm');
                }
                break;
            case macroConstants.MR_ELEMENT_CD_28:// 住院天数
                if (encounter.receiveTime != undefined) {
                    var inpDeptTime=new Date(encounter.receiveTime);
                    var endTime=new Date();
                    
                    if(encounter.encounterStatusCode=='ENM02.04'||encounter.encounterStatusCode=='ENM02.06'){
                    	endTime=new Date(encounter.finishTime);
                    }
                    macroValue=parseInt((endTime-inpDeptTime)/(24*60*60*1000))+1;
                }
                break;
            case macroConstants.MR_ELEMENT_CD_29:// 出生日期
                if (patient.birthday != undefined) {
                    macroValue=getFormatDate(new Date(patient.birthday), 'yyyy-MM-dd');
                }
                break;
            case macroConstants.MR_ELEMENT_CD_30:// 心率
                if (temperature.heartRate) {
                    macroValue=temperature.heartRate;
                }
                break;
            case macroConstants.MR_ELEMENT_CD_31:// 体重
                if (temperature.weight) {
                    macroValue=temperature.weight;
                }
                break;
            case macroConstants.MR_ELEMENT_CD_32:// 上级医生
                if (data != undefined && data.superiorDoctorName!= undefined) {
                    var higherLvlDoctorNm=data.superiorDoctorName;
                    if(higherLvlDoctorNm.indexOf(' ')>0){
                        macroValue=higherLvlDoctorNm.substring(0,higherLvlDoctorNm.indexOf(' '));
                    }else{
                        macroValue=higherLvlDoctorNm;
                    }
                }
                break;
            case macroConstants.MR_ELEMENT_CD_34:// 血氧
            	if (temperature.bldOxygen) {
                    macroValue=temperature.bldOxygen;
                }
                break;
            case macroConstants.MR_ELEMENT_CD_35://患者id
           	 	if(patient.paId!= undefined){
           	 		macroValue = patient.paId;
           	 	}
                break;
            case macroConstants.MR_ELEMENT_CD_36://就诊日期
           	 	if(encounter.receiveTime!= undefined){
           	 		macroValue = getFormatDate(new Date(encounter.receiveTime), 'yyyy-MM-dd hh:mm');
           	 	}
                break;
            case macroConstants.MR_ELEMENT_CD_101://体温
                if(temperature.temper){
                    macroValue=temperature.temper;
                }
                break;
            case macroConstants.MR_ELEMENT_CD_102://呼吸
                if(temperature.breathe){
                    macroValue=temperature.breathe;
                }
                break;
            case macroConstants.MR_ELEMENT_CD_103://脉搏
                if(temperature.pulse){
                    macroValue=temperature.pulse;
                }
                break;
            case macroConstants.MR_ELEMENT_CD_104://收缩压
                if(temperature.systolicPress){
                    macroValue=temperature.systolicPress;
                }
                break;
            case macroConstants.MR_ELEMENT_CD_105://舒张压
                if(temperature.diastolicPress){
                    macroValue=temperature.diastolicPress;
                }
                break;
            case macroConstants.MR_ELEMENT_CD_106://上级医师
            	var mr = this.getOwner().medicalRecord;
            	if(mr.superiorDoctorName&&null!=mr.superiorDoctorName){
                    macroValue=mr.superiorDoctorName;
                }
                break;
            case macroConstants.MR_ELEMENT_CD_106://上级医师
            	var mr = this.getOwner().medicalRecord;
            	if(mr.superiorDoctorName&&null!=mr.superiorDoctorName){
                    macroValue=mr.superiorDoctorName;
                }
                break;
            case macroConstants.MR_ELEMENT_CD_107://门诊卡号
            	macroValue = patient.encounterCardNo;
                break;
            case macroConstants.MR_ELEMENT_CD_110://急诊病历编号
                if(macroElementValue.emergencyMrNumber&&macroElementValue.emergencyMrNumber!= undefined){
                    macroValue=macroElementValue.emergencyMrNumber;
                }
                break;
            case macroConstants.MR_ELEMENT_CD_111://全部诊断
                if(macroElementValue.allDiagnosis&&macroElementValue.allDiagnosis!= undefined){
                    macroValue=macroElementValue.allDiagnosis;
                }
                break;
            default:
                if (unKnownMacros == '') {
                    unKnownMacros = macroId;
                } else {
                    unKnownMacros = unKnownMacros + ',' + macroId;
                }
            }
            if(macroId!='MR.M.013.D.24'&&macroId!='MR.M.013.D.25'&&macroId!='MR.M.013.D.26'){
            	macroValue=nullToNbsp(macroValue);
                macroValue=trim(macroValue);//delete spaces
            }
            if (macroValue != undefined && macroValue.length != 0) {
            	macroValue=macroValue+'';
            	macroValue=macroValue.replace('&nbsp;',' ');
                if (sAllMacroValue == null) {
                    sAllMacroValue = macroValue;
                } else {
                    sAllMacroValue = sAllMacroValue + '\n' + macroValue;
                }
                if (allMacroIdKeys == null) {
                    allMacroIdKeys = macroId;
                } else {
                    allMacroIdKeys = allMacroIdKeys + '\n' + macroId;
                }
            }
        }
        if (unKnownMacros.length > 1) {
            Ext.MessageBox.alert('错误', '文档中存在未识别的宏元素编码:' + unKnownMacros + '可能是文档中宏元素的版本不对，请联系管理员！');
        }
        if (null != allMacroIdKeys && null != sAllMacroValue){
        	console.log(allMacroIdKeys);
        	console.log(sAllMacroValue);
            plugin.ImportMacroValue(allMacroIdKeys, sAllMacroValue);
        }
        plugin.SetCommandEnable('com.founder.iemr.editor.toolbar:emrSave', true);
        plugin.UpdateToolbar();
        /*var count=this.getOwner().count;
        console.log('-------------------'+count);
        if(count&&count==2){
        	console.log('----------plugin.EnableOCX(true);---------'+count);
        	plugin.EnableOCX(true);
        }else{
        	this.getOwner().count=count+1;
        }*/
        /*if(this.getOwner().newF==1){
        	//刷新引用元素
   		 	setTimeout(function() {
   		 		var emrRefreshMrDocValue=self.getOwner().getActionChain("emrRefreshMrDocValue");
   		 		emrRefreshMrDocValue.execute();
   		 		self.getOwner().newF==0;
   		 	},100);
        }*/
    },
    /**
     * 性别特殊处理
     * plugin：编辑器插件对象
     * sexCode 男：M,女：F
     */
    disposeBySex: function(plugin,sexCode) {
//    	console.log('-----------------------执行月经史处理：'+sexCode);
        if(sexCode=='M'){
//        	console.log('-----------------------执行删除月经史：'+sexCode);
            plugin.RemoveNamedElement('生育史');
            plugin.RemoveNamedElement('月经史');
        }
    }
});

Ext.define('iih.mr.wr.omr.action.RefreshMrDiagnosisAction', {
    extend:  Xap.ej.action.ServiceInvocation ,
    
    /*
     * @Override
     */
    execute: function(context) {
        var operations = context.operations;
        if(!operations) {
            return;
        }
        this.prepareOperations(operations);
    },
    
    prepareOperations: function(operations) {
    	var medicalRecord=this.getOwner().medicalRecord;
    	if(medicalRecord){
    		var url=this.url+'?enPk='+medicalRecord.encounterPk;
            var operation = {
                url: url,
                method: 'get',
                scope: this,
                success: this.onSuccess,
                fail: this.onFail
            };
            operations.push(operation);
    	}
    },
    onSuccess: function(operation) {
        var plugin = document.getElementById('iemrEditor');
        var returnData=operation.result.dataList;
        var aData01 = '    ';
        for ( var i = 0; i < returnData.length; i++) {
            if(returnData[i].diTpCd == '04'){
                if(aData01 == '    '){
                    aData01 = returnData[i].longDiNm;
                }else{
                    aData01 = aData01 + '\n' + returnData[i].longDiNm;
                }
            }
            
        };
//        if(aData01 != null)
            plugin.RefreshSpecifyTable('门诊诊断表',2, aData01);
       /* var count=this.getOwner().count;
        console.log('-------------------'+count);
        if(count&&count==2){
        	console.log('----------plugin.EnableOCX(true);---------'+count);
        	plugin.EnableOCX(true);
        }else{
        	this.getOwner().count=count+1;
        }*/
    
    },
    onFail: function(operation) {
        Ext.Msg.alert("提示",'获取诊断失败，请重试！');
    }
});

Ext.define('iih.mr.wr.omr.action.RefreshPrescriptionAction', {
    extend:  Xap.ej.action.ServiceInvocation ,
    
    /*
     * @Override
     */
    execute: function(context) {
        var operations = context.operations;
        if(!operations) {
            return;
        }
        this.prepareOperations(operations);
    },
    
    prepareOperations: function(operations) {
    	var medicalRecord=this.getOwner().medicalRecord;
    	
        var url=this.url+'/'+medicalRecord.encounterPk;
        var operation = {
            url: url,
            method: 'get',
            scope: this,
            success: this.onSuccess,
            fail: this.onFail
        };
        operations.push(operation);
    },
    onSuccess: function(operation) {
        var plugin = document.getElementById('iemrEditor');
        var prescriptionsArr=operation.result.data.prescriptions;
        var disposals=operation.result.data.disposals;
        var prescriptionsTemplateOdtFile=operation.result.data.prescriptionsTemplateFile;
        this.importPrescription(plugin, prescriptionsArr, prescriptionsTemplateOdtFile,operation.result.data.prescriptionsSignTemplateFile);
        this.importAdvice(plugin, disposals);
        /*var count=this.getOwner().count;
        console.log('-------------------'+count);
        if(count&&count==2){
        	console.log('----------plugin.EnableOCX(true);---------'+count);
        	plugin.EnableOCX(true);
        }else{
        	this.getOwner().count=count+1;
        }*/
    },
    onFail: function(operation) {
        Ext.Msg.alert("提示",'获取处方处置失败，请重试！');
    },
    /**
     * 刷新门诊处置（包括检验，检查，诊疗）
     */
    importAdvice:function(plugin,disposals){
  	  	var all = null;
        for(var i=0;i<disposals.length;i++){
      	  if(all == null){
      		  all = disposals[i].svNm;
      		  if("03"==disposals[i].orTpCd){//03为门诊诊疗，可能有单位，需要特殊处理
      			  var freqNm='';
      			  if(disposals[i].freqNm !=undefined&& disposals[i].freqNm!=undefined){
      				freqNm=disposals[i].freqNm;
      			  }
      			  all = all+'          '+freqNm;
      		  }
      	  }else{
      		  all = all + '\n' + disposals[i].svNm;
      		  if("03"==disposals[i].orTpCd){
      			  var freqNm='';
          		  if(disposals[i].freqNm!=undefined&&disposals[i].freqNm!=undefined){
          			freqNm=disposals[i].freqNm;
          		  }
          		  all = all + '          '+freqNm;
      		  }
      	  }
        }
        if(all==null){
        	all=' ';
        }
//        if(all != null){
      	  plugin.RefreshSpecifyTable('门诊处置表',1, all);
//        }
    },
    /**
     * 刷新处方
     */
    importPrescription:function(plugin,prescriptionsArr,prescriptionsTemplateOdtFile,prescriptionsSignTemplateFile){
    	var prescriptionsStr = new Array(0);
    	if(null!=prescriptionsArr&&undefined!=prescriptionsArr){
    		if(prescriptionsArr.length>0){
    			if(null!=prescriptionsTemplateOdtFile&&undefined!=prescriptionsTemplateOdtFile){
//        			var prescriptionsStr = new Array(0);
        			for(var i = 0; i < prescriptionsArr.length; i++){
      					var specifDosage=prescriptionsArr[i].specifDosage;
      					if(specifDosage!=undefined&&specifDosage.indexOf('&nbsp')>0){
      						specifDosage=specifDosage.substr(0,specifDosage.indexOf('&nbsp'));
      					}
      					//增加门诊处方，分组
      					var specification=prescriptionsArr[i].specification==null?'':prescriptionsArr[i].specification;
            			var prescriptionStr = 'yp_zl_name\n'+prescriptionsArr[i].name+'\nspeci_dosage\n'+specifDosage+'\nfrename\n'+prescriptionsArr[i].frename+'\nyz_supply\n'+prescriptionsArr[i].supply+'\nspecification\n'+specification+'\nmz_charge_group\n'+prescriptionsArr[i].chargeGroup+'\ndrug_amount\n'+prescriptionsArr[i].drugAmount;
            			if(prescriptionsArr[i].parentOrderSn!=null&&prescriptionsArr[i].parentOrderSn!=undefined){
            				prescriptionStr=prescriptionStr+'\ngroup\n'+prescriptionsArr[i].parentOrderSn;
      					}else{
      						prescriptionStr=prescriptionStr+'\ngroup\n&nbsp';
      					}
            			prescriptionsStr.push(prescriptionStr);	
        			}
        			plugin.ImportPrescription('门诊处方表',prescriptionsTemplateOdtFile,prescriptionsStr,true);
        		  /*if('save'==type){
  				  		self.saveMrDoc(data,plugin);
  			  		}*/
    			}else{
    	        	Ext.MessageBox.alert('提示', '门诊处方表小模板不存在，无法刷新处方！');
    	        }
    		}else{
//    			var prescriptionStr = 'yp_zl_name\n'+'&nbsp'+'\nspeci_dosage\n'+'&nbsp'+'\nfrename\n'+'&nbsp'+'\nyz_supply\n'+
//    			'&nbsp'+'\nspecification\n'+'&nbsp'+'\nmz_charge_group\n'+'&nbsp'+'\ndrug_amount\n'+'&nbsp'+'\ngroup\n&nbsp';
//    			prescriptionsStr.push(prescriptionStr);	
    			var tabs = new Array(0);
    			tabs.push('门诊处方表');
    			plugin.RemoveTables(tabs);
    			plugin.InsertFromString(prescriptionsSignTemplateFile,0);
    			plugin.RemoveBlankPreTable('门诊处方表');
//    			plugin.ImportPrescription('门诊处方表',prescriptionsTemplateOdtFile,prescriptionsStr,true);
//    			Ext.MessageBox.alert('提示', '处方数据0条，不需要刷新！');
    		}
    		setTimeout(function() {
				plugin.GotoSection('主诉',true);
			}, 100);
    	}
    }
});

Ext.define('iih.mr.wr.omr.block.OutMrDocTreeBlock',{
	extend :  Xap.ej.block.PanelBlock ,
	
	           
	                                      
	                                          
	  
	alias:'widget.outmrdoctreeblock',

	layout: 'fit',
    
	items: [{
		xtype:'xaptree',
		border:false,
		ifSelect:true,
		autoScroll:true,
		height:245,
		rootVisible: false
	}],
	
	tbar:[{xtype:'button',iconCls: 'icon-Create',text:'新建',method: 'create'},
          {xtype:'button',iconCls: 'icon-Delete',id:'mrDelete',text:'删除',disabled:true,method: 'delete'},
          {xtype:'button',iconCls: 'icon-Property',text:'属性',disabled:true,method: 'property'},
          {xtype:'button',align: 'right',iconCls: 'icon-Create',text:'归档',method: 'complete',hidden:true},
          {xtype:'button',align: 'right',iconCls: 'icon-Delete',text:'取消归档',method: 'cancelComplete',hidden:true},
          {
              xtype: 'container',
              layout: {
                  type: 'hbox',
                  align: 'middle',
                  pack: 'end'
              },
              flex: 1,
              items:[{
                  xtype: 'tool',
                  type: 'refresh',
                  tooltip: '刷新',
                  callback:function(owner,tool){
                      var view = owner.up('outmrwriteview');
                      var chain = view.getActionChain('refresh');
                      chain.execute();
                  }
              },{
                  xtype: 'label',
                  width: 5
              },{
                  xtype: 'tool',
                  type: 'left',
                  callback:function(owner,tool){
                      var view = owner.up('outmrwriteview');
                      var block = view.getBlock('left');
                      block.collapse();
                  }
              },{
                  xtype: 'label',
                  width: 5
              }]
          }
    ],
	
    setData: function(data) {
	    var tree = this.down('xaptree');
	    var myobj=eval(data); 
	    tree.setData(myobj);
	},
    getData: function() {
        return null;
    }
    
})
Ext.define('iih.mr.wr.omr.view.OutMrDocEditView', {
    extend:  Xap.ej.template.BaseTemplate ,

    requires: [],
    alias: 'widget.outmrdoceditview',
    layout:  'fit',
    id:'outmrdoceditview',
    xapConfig: {
        blocks: {
            'content': {
                xclass: 'iih.mr.block.editor.MrDocEditBlock',
                flex: 1
            }
        },

        actions: {
            'init': {
                xclass: 'iih.mr.wr.omr.action.OutMrDocEditAction',
                url:'omr',
                blocks: {
                    content: 'content'
                }
            }, 
            'openMrDoc': {
                xclass: 'iih.mr.wr.mr.action.OpenMrAction',
                url: 'omr',
                blocks: {
                    content: 'content'
                }
            },
            'emrCmdDispatch': {
                xclass: 'iih.mr.action.editor.EmrCmdDispatchAction',
                blocks: {
                    content: 'content'
                }
            },
            'editorCallBackAction': {
                xclass: 'iih.mr.wr.omr.action.EditorCallBackAction',
                url:'param',
                blocks: {
                    content: 'content'
                }
            },
            'emrEditorOperator': {
                xclass: 'iih.mr.action.editor.EmrEditorOperatorAction'
            },
            'emrSave': {
                xclass: 'iih.mr.wr.omr.action.OmrDocSaveAction',
                url: 'omr',
//                url: 'http://127.0.0.1:8081/mr',
                blocks: {
                    content: 'content'
                }
            },
            'emrDocProperty': {
                xclass: 'iih.mr.wr.mr.action.MrDocPropertyAction',
                url: 'omr',
                blocks: {
                    content: 'content'
                }
            },
            'emrSubmit':{
                xclass: 'iih.mr.wr.omr.action.OmrDocSubmitAction',
                url: 'submit/omr',
                blocks: {
                    content: 'content'
                }
            },
            'emrSignDispose':{
            	xclass: 'iih.mr.wr.mr.action.MrSignDisposeAction',
                url: 'signUser',
                blocks: {
                    content: 'content'
                }
            },
            'emrRevoke': {
                xclass: 'iih.mr.wr.omr.action.OmrDocRevokeAction',
                url: 'submit/omr',
                blocks: {
                    content: 'content'
                }
            },
            'emrRefreshMacro': {
                xclass: 'iih.mr.wr.omr.action.RefreshMacroAction',
                url:'macroElement',
                blocks: {
                    content: 'content'
                }
            }/*,
            'emrRefreshMrDocValue': {
                xclass: 'iih.mr.wr.omr.action.RefreshMrDocValueAction',
                url:'mrDocValue',
                blocks: {
                    content: 'content'
                }
            }*/,
            'emrRefreshDiagnosis': {
                xclass: 'iih.mr.wr.omr.action.RefreshMrDiagnosisAction',
                url:'ei/diagnosises',
                blocks: {
                    content: 'content'
                }
            },
            'emrRefreshOutpatientDisposal': {
                xclass: 'iih.mr.wr.omr.action.RefreshPrescriptionAction',
                url:'omr/prescription',
                blocks: {
                    content: 'content'
                }
            },
            'getSystemConfig': {
                xclass: 'iih.mr.wr.omr.action.GetSystemConfigAction',
                url:'param',
                blocks: {
                    content: 'content'
                }
            },
            'disabledOfficeToolBarAction': {
                xclass: 'iih.mr.wr.omr.action.DisabledOfficeToolBarAction',
                url:'param',
                blocks: {
                    content: 'content'
                }
            },
            'emrNeatPrint': {
                xclass: 'iih.mr.wr.omr.action.OmrDocNeatPrintAction',
                url: 'mr_doc_file',
                blocks: {
                    content: 'content'
                }
            },
            'submitAndRevokeCheck': {
                xclass: 'iih.mr.wr.omr.action.OmrSubmitAndRevokeCheckAction',
                url: 'param',
                blocks: {
                    content: 'content'
                }
            },
            'mergeAllMr': {
                xclass: 'iih.mr.wr.omr.action.MergeAllMrAction',
                blocks: {
                    content: 'content'
                }
            }/*,
            'emrContinuePrint': {
                xclass: 'iih.mr.wr.omr.action.OmrContinuePrintAction',
                url: 'omrs',
                blocks: {
                    content: 'content'
                }
            },
            'emrSelectContinuePrint': {
                xclass: 'iih.mr.wr.omr.action.OmrSelectContinuePrintAction',
                url: 'omrs',
                blocks: {
                    content: 'content'
                }
            },
            'emrRefreshValues':{
            	xclass: 'iih.mr.wr.omr.action.RefreshValuesAction',
            	url: 'allValue',
                blocks: {
                    content: 'content'
                }
            },
            'mergeAll':{
            	xclass: 'iih.mr.wr.mr.action.MergeAllAction',
//            	url: 'allValue',
                blocks: {
                    content: 'content'
                }
            },
            'closeProgress':{
            	xclass: 'iih.mr.wr.mr.action.CloseProgressAction',
//            	url: 'allValue',
                blocks: {
                    content: 'content'
                }
            },
            'upPro':{
            	xclass: 'iih.mr.wr.mr.action.UpProAction',
//            	url: 'allValue',
                blocks: {
                    content: 'content'
                }
            }*/
        },

        chains: {
            'init': ['init'],
            'openMrDoc': ['openMrDoc'],
            'emrRefreshOutpatientDisposal':['emrRefreshOutpatientDisposal'],
//            'upPro': ['upPro'],
            'emrCmdDispatch': ['emrCmdDispatch'],
            'emrSave': ['emrSave'],
            'mergeAllMr': ['mergeAllMr'],
            'closeProgress': ['closeProgress'],
            'doSave': ['emrSave'],
            'emrReadOnly': ['emrReadOnly'],
            'emrEdit': ['emrEdit'],
            'mergeAll': ['mergeAll'],
            'emrDocProperty': ['emrDocProperty'],
            'emrSubmit':['emrSubmit'],
            'emrSignDispose':['emrSignDispose'],
            'emrRevoke':['emrRevoke'],
            'emrStartApprove':['emrStartApprove'],
            'emrApprove':['emrSubmit'],
            'emrReject':['emrReject'],
            'emrAuditRevoke':['emrAuditRevoke'],
            'emrSaveAsTemplate':['emrSaveAsTemplate'],
            'emrRefreshMacro':['emrRefreshMacro'],
            'emrRefreshReference':['emrRefreshMrDocValue'],
            'emrRefreshValues':['emrRefreshValues'],
            'emrRefreshMrDocValue':['emrRefreshMrDocValue'],
            'emrRefreshDiagnosis':['emrRefreshDiagnosis'],
            'disabledOfficeToolBarAction':['disabledOfficeToolBarAction'],
            'editorCallBackAction':['editorCallBackAction'],
            'emrPrint':['submitAndRevokeCheck'],
            'emrContinuePrint':['emrContinuePrint'],
            'getSystemConfig':['getSystemConfig'],
            'emrNeatPrint':['emrNeatPrint']
        },

        connections: {
            'content': [{
                selector: 'button[method=editorEvent]',
                event: 'editorEvent',
                chain: 'emrCmdDispatch'
            }/*, {
                event: 'afterrender',
                chain: 'init'
            }*/]
        }
    },
    
    initComponent : function() {
        var me = this;
        this.callParent();
        var canvas = Xap.getCanvas();
        this.relayEvents(canvas, ['refreshWorkArea']);
        this.addListener('refreshWorkArea', function(config) {
            var mrSn = config.viewConfig.mrSn;
            var chain = me.getActionChain('openMrDoc');
//            chain.execute({mrSn:mrSn});
        });
    },
    
    hasEdit: function() {
        var plugin = document.getElementById('iemrEditor');
        if (plugin != undefined &&plugin.valid&&plugin.IsModified()) {
            return true;
        } else {
            return false;
        }
    },
})
Ext.define('iih.mr.wr.omr.view.OutMrWriteView', {
	extend:  Xap.ej.template.BaseTemplate ,

	requires: [
//	    'iih.po.assistant.block.MrDocHelperTreeBlock',
//		'iih.mr.wr.mr.view.MrDocEditView',
//		'iih.po.assistant.action.MrDocTreeNodeChangeAction'
	],

	alias:'widget.outmrwriteview',
	id:'outmrwriteview',
	layout:'border',
	xapConfig: {
		blocks: {
			'left': {
				xclass: 'iih.mr.wr.omr.block.OutMrDocTreeBlock',
				region:'west',
				split: true,
                collapsible: true,
                header:false,
				width: 220
            },
			'right': {
				xclass: 'iih.mr.wr.omr.view.OutMrDocEditView',
				region:'center',
				flex:1
			},
			'helper': {
			    xclass: 'iih.po.com.view.RightEditView',
			    workscene:'mr',
			    region:'east',
			    split: true,
                collapsible: true,
                collapsed: true,
                header:false,
                width: 250
			}
		},
		
		actions: {
			'refresh': {
				xclass: 'iih.mr.wr.omr.action.OutMrDocTreeInitAction',
				url: 'omr/tree/mrs',
				blocks: {
					result: 'left'
				}
			},
			'treeInit': {
				xclass: 'iih.mr.wr.omr.action.OutMrTreeInitAction',
				url: '/omr/tree/init',
				blocks: {
					result: 'left'
				}
			},
			'amrGroupCreate': {
				xclass: 'iih.mr.wr.omr.action.OmrAmrGroupCreateAction',
				url: '/mr/amr/group/',
				blocks: {
					result: 'left'
				}
			},
			'accordAmrGroupCheck': {
				xclass: 'iih.mr.wr.omr.action.OmrAccordAmrGroupCheckAction',
				url: '/mr/amr/group/',
				blocks: {
					result: 'left'
				}
			},
			'toolbarsInit': {
				xclass: 'iih.mr.wr.omr.action.OmrToolbarsInitAction',
				url: '/mr/amr/',
				blocks: {
					result: 'left'
				}
			},
            'treeNodeChange': {
                xclass: 'iih.mr.wr.omr.action.OutMrDocTreeNodeChangeAction',
                blocks: {
                    result: 'left'
                }
            },
            'createMenu': {
                xclass: 'iih.mr.wr.omr.action.MenuCreateAction',
                blocks: {
                    result: 'left'
                }
            },
            'delete': {
                xclass: 'iih.mr.wr.omr.action.OmrDocDeleteAction',
                url: 'omr',
                blocks: {
                    result: 'right'
                }
            },
            'hasEditConfirm': {
                xclass: 'iih.mr.wr.omr.action.HasEditConfirmAction',
                url: 'omr',
                blocks: {
                    result: 'right'
                }
            },
            'deleteConfirm': {
                xclass: 'iih.mr.wr.omr.action.OmrDocDeleteConfirmAction',
                url: 'omr',
                blocks: {
                    result: 'right'
                }
            },
            'create': {
                xclass: 'iih.mr.wr.omr.action.CreateOmrDocAction',
                url:'param',
                blocks:{
                    result:'left'
                }
            },
            'createErpSign': {
                xclass: 'iih.mr.wr.omr.action.CreateErpSingAction',
                url:'param',
                blocks:{
                    result:'left'
                }
            },
            'emrDocProperty': {
                xclass: 'iih.mr.wr.omr.action.OmrDocPropertyAction',
                url: 'omr',
                blocks: {
                    content: 'content'
                }
            },
            'complete': {
                xclass: 'iih.mr.wr.omr.action.CompleteOmrAction',
                url: '/mr/archived/amr',
                blocks: {
                    content: 'content'
                }
            },
            'doSave': {
                xclass: 'iih.mr.wr.omr.action.OmrDoSaveAction',
//                url: '/mr/archived/amr',
                blocks: {
                    content: 'content'
                }
            },
            'cancelComplete': {
                xclass: 'iih.mr.wr.omr.action.CancelCompleteOmrAction',
                url: '/mr/archived/amr',
                blocks: {
                    content: 'content'
                }
            },
            'erpSignBtnStatus':{
            	 xclass: 'iih.mr.wr.omr.action.ErpSignBtnStatusAction',
                 url: 'param/set/getflagbykey',
                 blocks: {
                     content: 'content'
                 }
            }
		},

		chains: {
			'refresh': ['refresh'],
			'treeInit':['treeInit'],
			'doSave':['doSave'],
			'hasEditConfirm':['hasEditConfirm'],
			'amrGroupCreate':['amrGroupCreate'],
			'accordAmrGroupCheck':['accordAmrGroupCheck'],
			'toolbarsInit':['toolbarsInit'],
			'complete': ['complete'],
			'cancelComplete': ['cancelComplete'],
			'treeNodeChange': ['treeNodeChange'],
			'createMenu': ['createMenu'],
			'create': ['create'],
            'emrDocProperty':['emrDocProperty'],
            'delete': ['delete'],
            'deleteConfirm':['deleteConfirm'],
            'createErpSign':['createErpSign'],
            'erpSignBtnStatus':['erpSignBtnStatus']
		},

		connections: {
			'left': [{
				event: 'afterrender',
				chain: 'accordAmrGroupCheck'
			},{
                selector: 'xaptree',
                event: 'itemclick',
                chain: 'treeNodeChange'
		    },{
		    	selector: 'xaptree',
		    	event: 'itemcontextmenu',
		    	chain: 'createMenu'
		    },{
                selector: 'toolbar button[method=delete]',
                event: 'click',
                chain: 'deleteConfirm'
            },{
                selector: 'toolbar button[method=create]',
                event: 'click',
                chain: 'hasEditConfirm'
            },{
                selector: 'toolbar button[method=property]',
                event: 'click',
                chain: 'emrDocProperty'
            },{
                selector: 'toolbar button[method=complete]',
                event: 'click',
                chain: 'complete'
            },{
                selector: 'toolbar button[method=cancelComplete]',
                event: 'click',
                chain: 'cancelComplete'
            }]
		}
	},initComponent : function() {
		this.callParent();
		this.addEvents("writeMrDoc");//为视图添加事件
		this.addListener('writeMrDoc', function() {//添加监听事件
			//写回病历
			var plugin = document.getElementById('iemrEditor');
			var iemrEditorRead = document.getElementById('iemrEditorRead');
			console.log(plugin);
			console.log(iemrEditorRead);
			if(plugin!=null&&iemrEditorRead!=null)
			{
				if(!plugin.IsReadOnly()){
					if(iemrEditorRead.HasSelection(0)){
						iemrEditorRead.OfficeCopy();
						plugin.OfficePaste();
					}
				}
			}
		});
		this.addEvents("changeEncounter");//为视图添加刷新事件
        this.addListener('changeEncounter', function(enPk){//添加监听事件
        	var chainTree = this.getActionChain('treeInit');
	        if(chainTree) {
	            chainTree.execute({
	            	enPk:enPk
	            });
	        }
        });
        this.addEvents("selectEncounter");//为视图添加刷新事件
        this.addListener('selectEncounter', function(){//添加监听事件
    		var accordAmrGroupCheck = this.getActionChain('accordAmrGroupCheck');
	        if(accordAmrGroupCheck) {
	        	accordAmrGroupCheck.execute({});
	        };
        });
	},
	
	hasEdit: function() {
        var plugin = document.getElementById('iemrEditor');
        if (plugin != undefined &&plugin.valid&&plugin.IsModified()) {
            return true;
        } else {
            return false;
        }
    }
});
var IMER_GLOBAL = {
	//登录用户
	user:{
		code:'',
		name:''
	},
	//院区
	hospitalArea:{
		code:'',
		name:''
	},
	//科室
	department:{
		code:'',
		name:''
	},
	//门户
	portal:{
		code:'',
		name:''
	},
	//就诊
	encounterSn:'',
	//患者
	patientId:'',
	//主诊断编码
	mainDiCd:'',
	//整改通知书
	revisionCd:''
};
var locale = {
	login: {
		logo: '用户登录',
		portal: '门户：',
		username: '用户名：',
		password: '密码：',
		access: '登录',
		register: '用户注册',
		forgotten: '找回密码',
		back: '返回登录'
	},
	title: {
		'PO.M.001.D.OP': '一体化门诊医生工作站',
		'PO.M.001.D.EM': '一体化急诊医生工作站',
		'PO.M.001.D.OB' : '一体化留观医生工作站',
		'PO.M.001.D.IP': '一体化住院医生工作站',
		'PO.M.001.D.IN': '一体化住院护理系统',
		'PO.M.001.D.HQ': '一体化质控平台',
		'PO.M.001.D.SM': '系统管理平台',
		'PO.M.001.D.OPN': '一体化门诊护士工作站',
		'PO.M.001.D.EMN': '一体化急诊护士工作站',
		'PO.M.001.D.IPN': '一体化住院护士工作站',
		'PO.M.001.D.OBN': '一体化留观护士工作站',
		'PO.M.001.D.CPBM': '临床路径后台管理',
		'PO.M.001.D.MRBM': '病历后台管理',
		'PO.M.001.D.MRTE': '病历模板管理',
		'PO.M.001.D.MRWR': '病历书写/审签',
		'PO.M.001.D.MRQA': '病历质控管理',
		'PO.M.001.D.MRSA': '统计分析',
		'PO.M.001.D.SYSM': '系统管理'
	},
	tooltip: {
		close: '关闭',
		minimize: '最小化',
		maximize: '最大化',
		restore: '还原',
		up: '向上',
		down: '向下',
		gear: '配置',
		left: '向左',
		right: '向右',
		pin: '锁定',
		unpin: '解锁',
		next: '向后',
		prev: '向前',
		children: '子项',
		ancestor: '父项',
		refresh: '刷新',
		plus: '加号',
		minus: '减号',
		save: '保存',
		search: '搜索',
		help: '帮助',
		print: '打印',
		expand: '展开',
		collapse: '收起',
		tree: '树型',
		submit: '提交',
		list: '列表',
		clear: '清除',
		add: '新增',
		deletion: '删除',
		update: '更新',
		start: '启动',
		stop: '停止'
	},
	button: {
		skin: '换肤',
		close: '关闭',
		minimize: '最小化',
		maximize: '最大化',
		restore: '还原',
		add: '增加',
		update: '更新',
		deletion: '删除',
		save: '保存',
		submit: '提交',
		ok: '确定',
		cancel: '取消',
		search: '检索',
		reset: '重置',
		browser: '浏览',
		upload: '上传'
	},
	grid: {
		rownumber: '行号',
		add: '增加',
		deletion: '删除',
		addRecord: '增加记录',
		modifyRecord: '修改记录',
		more: '更多︾'
	},
	tree: {
		isLeaf: '是否叶子节点',
		yes: '是',
		no: '否'
	},
	mask: {
		loading: '加载中...'
	},
	messagebox: {
		confirm: '确认',
		confirmSave: '是否保存对当前页面的修改？',
		warn: '警告',
		info: '信息',
		error: '错误',
		success: '成功',
		fail: '失败',
		submit: '提交',
		ok: '确定',
		yes: '是',
		no: '否',
		cancel: '取消',
		detail: '详细',
		saving: '处理中...',
		savedSuccess: '处理成功',
		savedFailure: '处理失败'
	},
	message: {
		title: '消息',
		query: '消息查询',
		querySystem: '系统消息',
		queryUser: '用户消息',
		config: '消息配置',
		priority: '显示级别',
		priorityInfo: '(说明：该值及大于该值的消息全部显示)',
		view: '显示方式',
		viewFloat: '悬浮堆叠',
		viewFloatMerge: '悬浮合并',
		viewWindow: '窗口显示',
		url: '消息服务器',
		frequent: '频度(秒)',
		show: '即时显示',
		duration: '动画时间(秒)',
		last: '持续时间(秒)',
		showHide: '不显示',
		showShow: '显示',
		id: 'id',
		type: '类型',
		head: '标题',
		summary: '摘要',
		detail: '明细',
		level: '级别',
		force: '是否强制显示',
		sender: '发送者',
		date: '发送时间',
		configError: '配置项有错误项，请更正后再保存'
	},
	portlet: {
		error: '创建portlet失败'
	},
	contextMenu: {
		add: '增加',
		update: '编辑',
		deletion: '删除',
		save: '保存'
	},
	common: {
		pageInitFail: '页面初始化失败',
		index: '确定要返回主页吗？',
		logout:	'确定要注销吗？',
		dataFail: '获取数据失败',
		navigation: '导航栏',
		patient: '患者',
		functionality: '功能',
		templateFail: '创建模版失败',
		layoutFail: '创建布局失败',
		elementFail: '创建元素失败',
		pluginFail: '创建插件失败',
		portal: '我的门户'
	},
	dictionary: {
		nomatch: '未找到匹配值'
	},
	form: {
		remoteValidation: '远程验证失败',
		startValueValidation: '开始值不能大于结束值',
		endValueValidation: '结束值不能小于开始值',
		invalidImg: '无效的图片文件：',
		copyNameImg: '重名的图片文件：',
		noHTML5Img: '浏览器不支持HTML5，无法预览图片。',
		errorRemoteFile: '服务器文件获取失败。',
		deleteRemoteFile: '确定删除该服务器文件?',
		noUploadFile: '没有文件需要上传。',
		uploading: '上传中...',
		invalid: '表单内容有错误'
	},
	combo: {
		all: '全部'
	},
	tab: {
		closeTabText: '关闭当前标签页',
		closeOthersTabsText: '关闭其他标签页',
		closeAllTabsText: '关闭所有标签页'
	},
	connect: {
		connectFailure: '连接失败。',
		serverFailure: '请求失败。',
		serverError: '服务器内部错误'
	},
	file: {
		name: function(value) {
			if (!value) {
				return '';
			}
			return '名称：\t' + value.substring(0, value.lastIndexOf('.'));
		},
		type: function(value) {
			if (!value) {
				return '';
			}
			if (value.indexOf('image') == 0) {
				value = value.substring(6);
			} else {
				value = value.substring(value.lastIndexOf('.') + 1);
			}
			return '类型：\t' + value;
		},
		size: function(value) {
			if (!value) {
				return '';
			}
			var i = 0;
			var unit = ['Byte', 'KB', 'MB', 'GB', 'TB', 'UNKNOWN'];
			while (value > 1024) {
				value = Math.floor(value/1024);
				if (++i == 5) {
					value = '';
					break;
				}
			}
			return '大小：\t' + value + unit[i];
		}
	},
	date: {
		year: '年',
		month: '月',
		day: '日',
		hour: '时',
		minute: '分',
		second: '秒'
	},
	query: {
		menu: '选择查询项',
		result: '查询结果'
	},
	topMenu: {
		home: '主页',
		logout: '注销',
		config: '配置',
		help: '帮助'
	},
	patientnavigation: {
		search: '搜索：',
		bed: '床位号',
		order: '门诊号',
		name: '姓名',
		id: '证件号',
		minePatient: '我的患者',
		deptPatient: '科室患者',
		lastPatient: '最近患者',
		favoritePatient: '收藏患者',
		allPatient: '全部患者',
		noPatient: '没有患者信息显示',
		consultPatient: '会诊患者',
		outerPatient: '转出患者'
	},
	patientcomposite: {
		inPatientNo: '住院号：',
		outPatientNo: '门诊号：',
		emPatientNo: '急诊号：',
		insuranceCd: '医保：'
	},
	bedcomposite: {
		bedNo: '床',
		orderNo: '号',
		encStatusCd: '级',
		inCd: '住院号：',
		inDate: '入院日：'
	},
	patienttop: {
		sexCd: function(value) {
			return (value == 'M' || value == 'm') ? '男' : '女';
		},
		patientAge: function(value) {
			return value + '岁';
		},
		patientId: 		'患者ID：',
		bedNo: 			'床位号：',
		inpTime: 		'入院时间：',
		regEncTime: 	'就诊时间：',
		inpNo: 			'住院号：',
		outpNo: 		'门诊号：',
		emergencyNo: 	'急诊号',
		
		diagNm: '主诊断：',
		diag: '诊断',
		allergy: '药物过敏',
		notAccountCosts: '总费用：',
		prepayments: '余额：',
		oweLimit: '欠费下限：',
		unit: ' 元',
		list: '列表'
	},
	format: {
	    thousandSeparator: ',',
	    decimalSeparator: '.',
	    currenyPrecision: 2,
	    currencySign: '￥',
	    currencyAtEnd: false
	},
	console: {
		collectData: '收集数据的耗时：',
		getRemoteData: '获取服务端数据耗时：',
		dealData: '处理数据耗时：'
	}
};
Ext.define('iih.po.assistant.action.CancelEditMrKnowledgeAction', {
    extend:  Xap.ej.action.Action ,
    
    execute: function(context) {
        // 关闭窗口
        var owner = this.getOwner().ownerCt;
        owner.close();
    }
});

Ext.define('iih.po.assistant.action.CancelEditMrKnowledgeTypeAction', {
    extend:  Xap.ej.action.Action ,
    
    execute: function(context) {
    	var me = this;
        //关闭窗口
    	var owner = this.getOwner()
    	//得到grid，判断是否有未保存的修改。若存在提示保存。
    	var block = owner.getBlock('list');
        var grid=block.down('xapgrid');
	    //通过Store获取数据集方便判断
        var store = grid.getStore();
		var datas = store.getModifiedRecords();
		var deleted = store.removed;
    	//遍历判断被修改、和新建的记录添加到集合变量中
		var updateData=0;
    	for(var i=0;i<datas.length;i++){
    		if(datas[i].dirty){
    			updateData++;
    		}
    	}
    	for(var i=0;i<deleted.length;i++){
			updateData++;
    	}
    	if(updateData>0){
    		Ext.Msg.confirm("提示","还有未保存的数据,是否确认退出？",function(id){
    			if(id=='no'){
    				return;
    			}
    			if(id=='yes'){
    				me.freshType();//关闭画面，刷新类别
    			}
    		});
    	}else{
    		me.freshType();
    	}
	} ,
	//关闭画面，刷新类别
	freshType:function(){
		//关闭类别编辑画面
		var owner = this.getOwner();
		var ownerCt = owner.ownerCt;
        ownerCt.close();
        //初始化类别下拉列表
        var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
		var parentView = properties.data.parentView;
		var chain = parentView.getActionChain('init');
        if(chain) {
            chain.execute();
        }
	}
});

Ext.define('iih.po.com.block.AssistantBlock', {
    extend :  Xap.ej.block.FormBlock ,
    
                                                                           

    alias:'widget.assistantblock',

    layout: 'fit',
    
    border:false,
    
    items: [{
        xtype:'xaptabpanel',
        layout: 'fit',
        border:false,
        tabButtons: [{
            itemId: 'emrWriterId',
            xtype: 'textfield',
            hidden: true
        }, {
            xtype: 'label',
            width: 5
        }, {
            itemId: 'encounterCombox',
            xtype: 'xapcombobox',
            emptyText: '请选择就诊',
            labelAlign: 'right',
            editable:false,
            maxWidth: 300,
            flex:1,
            allowBlank: true,
            forceSelection: true,
            listeners:{
                change : function(combo,newValue,oldValue) {
                    var block = combo.up('assistantblock');
                    var tabpanel = block.down('xaptabpanel');
                    var tabs = tabpanel.items.items;
                    for (var i = 0; i < tabs.length; i++) {
                        var tab = tabs[i];
                        tab.refresh = false;
                    };
                    var tab = tabpanel.getActiveTab();
                    tab.fireEvent("changeEncounter",newValue);
                    tab.refresh = true;
                }
            }
        }, {
            xtype: 'label',
            width: 5
        }, {
            itemId: 'writeToMrDocButton',
            xtype: 'button',
            text: '写回病历',
            handler : function() {
                var block = this.up('assistantblock');
                var workArea = block.up('workpageview');
                var plugin = document.getElementById('iemrEditor');
                if(plugin && !plugin.IsReadOnly()){
                    var tab = block.down('xaptabpanel').getActiveTab();
                    tab.fireEvent("writeMrDoc");
                }else{
                    XapMessageBox.warn('病历是只读的！','',workArea);
                }
            }
        }, {
            xtype: 'label',
            width: 5
        }, {
            itemId: 'queryButton',
            xtype: 'button',
            text: '高级查询',
            handler : function() {
            	var block = this.up('assistantblock');
            	var tab = block.down('xaptabpanel').getActiveTab();
            	if(tab){
            		var chain = tab.getActionChain('searchwindowpopup');
                    chain.execute();
            	}
            }
        },{
            xtype: 'label',
            width: 5
        },{
            itemId: 'refresh',
            xtype: 'tool',
            type: 'refresh'
        },{
            xtype: 'label',
            width: 5
        },{
            itemId: 'up',
            hidden: false,
            xtype: 'tool',
            type: 'up'
        },{
            itemId: 'down',
            hidden: true,
            xtype: 'tool',
            type: 'down'
        },{
            xtype: 'label',
            width: 5
        }]
    }],
    
    initComponent: function() {
        this.callParent();
        var me = this;
        var tabpanel = this.down('xaptabpanel');
        if (tabpanel.tabButtons.length > 0 && !this.hideTabBar) {
            this.initTabButton();
        };
        
        var helpContent = me.down('xaptabpanel');
        var up = helpContent.down('tool[itemId=up]');
        var down = helpContent.down('tool[itemId=down]');
        down.addListener('click', function() {
            me.minimize();
            up.show();
            down.hide();
        });
        up.addListener('click', function() {
            me.maximize(300);
            up.hide();
            down.show();
        });
        var refresh = helpContent.down('tool[itemId=refresh]');
        refresh.addListener('click', function() {
            var tab = helpContent.getActiveTab();
            var mrCombo = helpContent.down('xapcombobox[itemId=encounterCombox]');
            var enNo = mrCombo.getValue();
            if(tab && enNo)
                tab.fireEvent("changeEncounter",enNo);
        });
        var tbar = helpContent.getTabBar();
        tbar.addListener('dblclick', function(tabBar, e) {
            var target=e.getTarget();
            if(e.getTarget().tagName.toLowerCase() == "div"){
                if(down.hidden==false){
                    me.minimize();
                    up.show();
                    down.hide();
                  }else{
                      me.maximize(300);
                    up.hide();
                    down.show();
                  }
            }
        });
        helpContent.addListener('tabchange', function(p,n,o) {
            var mrCombo = p.down('xapcombobox[itemId=encounterCombox]');
            mrCombo.setDisabled(!n.haveEncounter);
            var writeButton = p.down('button[itemId=writeToMrDocButton]');
            writeButton.setDisabled(!n.haveEncounter);
            var queryButton = p.down('button[itemId=queryButton]');
            queryButton.setDisabled(!n.isQuery);
            /*if(n.isQuery){
                queryButton.addListener('click', function() {
                    var chain = n.getActionChain('searchwindowpopup');
                    chain.execute();
                });
            };*/
            if(!n.refresh && mrCombo.getValue()){
                n.fireEvent("changeEncounter",mrCombo.getValue());
                n.refresh = true;
            }
        });
        //me.minimize();
        helpContent.setActiveTab(0);
    },
    
    initTabButton: function() {
        var tabpanel = this.down('xaptabpanel');
        tabpanel.getTabBar().add({
            xtype: 'container',
            layout: {
                type: 'hbox',
                align: 'middle',
                pack: 'end'
            },
            flex: 1,
            items: Ext.isArray(tabpanel.tabButtons) ? tabpanel.tabButtons : [tabpanel.tabButtons]
        });
    },
    
    maximize: function(h) {
        this.setHeight(h);
    },
    
    minimize: function() {
        this.setHeight(32);
    },
    
    setEncouterData: function(data){
        var combo = this.down('xapcombobox[itemId=encounterCombox]');
        if(combo){
            combo.clearValue();
            if(data){
                var array = new Array();
                Ext.each(data,function(rec){
                    if(rec){
                        var time = Ext.Date.parse(rec.currentDeptIntoTime, 'time');
                        var value = Ext.Date.format(time, 'Y-m-d H:i');
                        //var value = Ext.util.Format.date(rec.currentDeptIntoTime, "Y-m-d H:i:s");
                        value = value + '_';
                        value = value + rec.encounterTypeName;
                        if(rec.currentMainDiagnosisName){
                            value = value + '_';
                            value = value + rec.currentMainDiagnosisName;
                        }
                        array.push({'text':value,'value':rec.pk});
                    }
                });
                combo.setData(array);
                //var record = combo.getStore().getAt(0);
                //combo.select(record);
                combo.setValue(IMER_GLOBAL.encounterSn);
            }
        }
    }
})
Ext.define('iih.po.assistant.action.CompleteTaskAction', {
	extend :  Xap.ej.action.ServiceInvocation ,

	                                                                         
	
	doExecute: function(context) {
	    /*var app = Xap.getApp();
        app.baseUrl = "http://172.18.73.88:8081/";
        app.chainExecutor.baseUrl= "http://172.18.73.88:8081/";*/
        this.callParent();
        var taskPk = context.data.taskPk;
        var block = this.getBlock('content');
        var grid = block.down('xapgrid');
        var store = grid.getStore();
        var records = store.getModifiedRecords();
        var datasArr = [];
        for(var i=0;i<records.length;i++){
            datasArr.push(records[i].data);
        }
        var data = {taskPk:taskPk,taskArray:datasArr};
        var operations = context.operations;
        var url = this.url;
        var mclass = null;
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_UPDATE,
            condition: null,
            data:data,
            scope: this,
            success: this.onSuccess
        };
        operations.push(operation);
    },

	onSuccess : function(operation) {
		var view = this.getOwner();
		var chain = view.getActionChain('search');
		chain.execute();
	}
});

Ext.define('iih.po.assistant.action.CreateFragmentTplAction', {
	extend:  Xap.ej.action.ServiceInvocation ,	
	
	doExecute: function(context) {
	/*	var block = this.getBlock('center');
		//console.log(block);
		block.getForm().reset();
		var owner = this.getOwner();		
		
	
		var create = owner.down('[name=create]');
		var edit = owner.down('[name=edit]');
		var ddelete = owner.down('[name=delete]');		
		var save = owner.down('[name=save]');
		
		var ownerCd = owner.down('[name=ownerCd]');
		var fragmentTplTypeCd = owner.down('[name=fragmentTplTypeCd]');
		//var editBtn = owner.down('[method=editBtn]');
		var fragmentTplNm = owner.down('[name=fragmentTplNm]');
		
		var fromStatus = owner.down('[name=fromStatus]');
		var fragmentTplContent = owner.down('[name=fragmentTplContent]');
		create.setDisabled(true);
		edit.setDisabled(true);
		ddelete.setDisabled(true);
		save.setDisabled(false);
		
		ownerCd.setReadOnly(false);
		console.log(fragmentTplTypeCd);
		fragmentTplTypeCd.setDisabled(true);
		//编辑按钮可用
		//editBtn.setDisabled(false);
		fragmentTplNm.setReadOnly(false);
		fromStatus.setValue('fromCreate');
		fragmentTplContent.setReadOnly(false);*/
	},
    prepareOperations : function(operations) {
    	
    },
	onSuccess : function(operation) {
		
	}
});

Ext.define('iih.po.assistant.action.CreateKnowledgeTypeAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
    
    doExecute: function(context) {
    	var block = this.getOwner().getBlock('list');
    	//得到返回结果、填充数据
        var grid=block.down('xapgrid');
        //定义model
        Ext.define('FragmentTpl', {
	        extend:  Ext.data.Model ,
	        fields: ['fragmentTplTypeCd','fragmentTplTypeNm']
	    });
	    //创建record
        var record = Ext.create('FragmentTpl', {
            fragmentTplTypeCd:'',
            fragmentTplTypeNm:''
        });
        var store = grid.getStore();//得到grid的store
        //新建类别插入第一行
        store.insert(0, record);
        //刷新试图，行号重新排序
        grid.getView().refresh();
        //开启可编辑功能
        grid.getPlugin().startEdit(0,1);
	}
});
Ext.define('iih.po.assistant.block.EditKnowledgeBlock',{
	extend :  Xap.ej.block.FormBlock ,

	           
		                                 
		                                         
	  

	alias:'widget.editknowledgeblock',

	layout: {
        type: 'table',
        columns: 2
    },
	
	header:false,
	
	items:[{
	    	xtype:'xaptextfield',
	        name:'fragmentTplCd',
	        hidden:true
	    },{
    	xtype:'xapform',
    	border:0,
    	colspan:1,
    	width:300,
    	layout: 'hbox',
    	items:[{
	    	xtype:'xapcombobox',
	        name:'fragmentTplTypeCd',
	        padding:'10 0 10 10',
	        labelWidth:90,
	        editable:false,
	        labelAlign : 'right',
	        width:200,
	        fieldLabel:'类别',
	        displayField:'fragmentTplTypeNm',
            valueField:'fragmentTplTypeCd'
	    },{
	        xtype: "button",
	        name: 'edit',
	        method:'edit',
	        padding:'2 5 2 5',
            margin:'10 0 10 5',
	        text: '编辑类别'
	    }]
    },{
    	fieldLabel:'所属',
    	labelWidth:30,
	    labelAlign : 'left',
	    colspan:1,
    	xtype: 'xapradiogroup',
		method:'checkFlag',
		width:150,
		vertical: true,
		items: [
			{ boxLabel: '个人', name: 'ownerTypeCd', inputValue: 'MDM12.03',checked: true},
			{ boxLabel: '科室', name: 'ownerTypeCd', inputValue: 'MDM12.02'}
		]
    },{
    	xtype:'xaptextfield',
        name:'ownerCd',
        hidden:true
	},{
        xtype: 'xaptextfield',
        padding:'0 0 0 10',
        name:'fragmentTplNm',
        labelWidth:90,
        colspan: 2,
        width:400,
        fieldLabel:'名称'
    },{
		xtype: 'xaptextarea',
		fieldLabel:'个人知识库内容',
		labelAlign : 'right',
		labelWidth:90,
		name:'fragmentTplContent',
		padding: '5 10 5 10',
		colspan: 2,
		width:560,
		height : 207
	}],   
    buttons:[{
        xtype: "button",
        name: 'save',
        method:'save',
        text: '保存'
    },{
        xtype: "button",
        name: 'close',
        method:'close',
        text: '关闭'    
    }],
	setData: function(data) {
		
	}
})
Ext.define('iih.po.assistant.action.EditPersonKnowledgeInitAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	execute: function(context) {
		//用于关闭画面
		var parentView = context.parentView;
		//用于区别新建、编辑
		var method = context.method;
		//储存画面间参数
		var owner = this.getOwner();   
		if(parentView!=undefined&&method!=undefined){
			var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
	        properties.setData({
	        	parentView:parentView,
	        	method:method
	        });
		}
        //登陆用户
        var userCode = IMER_GLOBAL.user.code;
        //初始化个人知识库类别
		this.prepareOperations(context.operations,userCode);
	},
	prepareOperations: function(operations,userCode) {
		var url = this.url+'?userId='+userCode;//查询本人创建的类别
		var operation = {
			url: url,
			method: 'get',
			scope: this,
			success: this.onSuccess
		};
		operations.push(operation);
	},  
    onSuccess: function(operation) {
    	var data = operation.result.dataList;
    	var block = this.getOwner().getBlock('list');
    	//得到返回结果、为知识库类别下拉框填充数据
        var fragmentTplType=block.down('[name=fragmentTplTypeCd]');
        if(data){
            fragmentTplType.setData(data);
        }
    	
    	var owner=this.getOwner();
        var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
		var method = properties.data.method;
		//如果为编辑则查询选中数据
		if(method=='edit'){
			var chain = owner.getActionChain('prapareData');
	        if(chain) {
	            chain.execute();
	        }
		}
    } 
});
Ext.define('iih.po.assistant.action.PersonKnowledgePrapareDataAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	execute: function(context) {
		var owner=this.getOwner();
        var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
		var parentView = properties.data.parentView;
		
		var rb = parentView.getBlock('west');
		var grid = rb.down('xapgrid'); 
		//得到当前选中行
		var selected=grid.getSelectionModel().getSelection();
		var fragmentTplCd = selected[0].data.fragmentTplCd;
		//查询选中知识库详细信息
	    this.prepareOperations(context.operations,fragmentTplCd);
    },
    prepareOperations: function(operations,fragmentTplCd) {
        var url = 'knowledge';
        url += '/' + fragmentTplCd;       
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            method: METHODS.METHOD_GET,
            condition: null,
            scope: this,
            success: this.onSuccess
        };
        operations.push(operation);
    },
    onSuccess: function(operation) {
    	//得到返回结果，赋值
    	var data = operation.result.data;
    	var owner =this.getOwner();
		var form = owner.down('xapform'); 
		form.getForm().setValues(data);
    } 
});
Ext.define('iih.po.assistant.block.EditKnowledgeTypeBlock',{
	extend :  Xap.ej.block.FormBlock ,

	requires: [],

	alias:'widget.editknowledgetypeblock',

	header:false,
	items:[{
        xtype: 'xapgrid',
        border:false,
        tbar:[
        	{xtype:'button'/*,iconCls: 'icon-Create'*/,text:'新建',method: 'create'},
            {xtype:'button'/*,iconCls: 'icon-Property'*/,text:'编辑',method: 'edit'},
            {xtype:'button'/*,iconCls: 'icon-Delete'*/,text:'删除',method: 'delete'},
            {xtype:'button'/*,iconCls: 'icon-Delete'*/,text:'刷新',method: 'fresh'}
        ],
        autoScroll:true,
        CM_JR_Record: [
             {header: '类别编码',dataIndex: 'fragmentTplTypeCd',field: 'textfield' ,type: 'string',hidden:true,flex:1},
             {header: '类别名称',dataIndex: 'fragmentTplTypeNm',field: 'textfield' ,type: 'string',flex:1},
        	 {dataIndex: 'useCount',field: 'textfield' ,type: 'string',hidden:true,flex:1}
        ],
        height:239,
        plugins:[
        	Ext.create('Ext.grid.plugin.CellEditing',{
        		//clicksToEdit:1
        	})
        ]
    }],   
    buttons:[{
        xtype: "button",
        name: 'save',
        method:'save',
        text: '保存'    
    },{
        xtype: "button",
        name: 'close',
        method:'close',
        text: '关闭'    
    }],
	setData: function(data) {
		var grid = this.down('xapgrid');
        if(data){
        	grid.setData(data);
        }else{
        	grid.setData({});
        }
	}
})


Ext.define('iih.po.assistant.action.EditMrKnowledgeTypeInitAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	execute: function(context) {
		var owner = this.getOwner();
		var parentView = context.owner;
		if(parentView!=undefined){
			var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
	        properties.setData({
	        	parentView:context.owner
	        });
		}
		//登陆用户
        var userCode = IMER_GLOBAL.user.code;
        //初始化
		this.prepareOperations(context.operations,userCode);
	},
	prepareOperations: function(operations,userCode){
		var url = this.url+'?userId='+userCode;;
		var operation = {
			url: url,
			method: 'get',
			scope: this,
			success: this.onSuccess
		};
		operations.push(operation);
	},  
    onSuccess: function(operation) {
    	var data = operation.result.dataList;
    	var block = this.getOwner().getBlock('list');
    	//得到返回结果、填充数据
        block.setData(data);
    } 
});
Ext.define('iih.po.assistant.action.EditKnowledgeTypeAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
    
    doExecute: function(context) {
    	var block = this.getOwner().getBlock('list');//EditKnowledgeTypeBlock
        var grid=block.down('xapgrid');//类别grid
        //得到选中行
        var selected=grid.getView().getSelectedNodes();
        if(selected.length > 0){//若选择行数大于0，则开启编辑功能
			var rowIndex = selected[0].rowIndex;
	        //开启可编辑功能
	        grid.getPlugin().startEdit(rowIndex,1);
		}else {
			XapMessageBox.info("请选择一条记录！");
		}; 
	}
});
Ext.define('iih.po.assistant.action.DeleteKnowledgeTypeAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
    
    doExecute: function(context) {
    	var self=this;
		var block = this.getOwner().getBlock('list');//EditKnowledgeTypeBlock
        var grid=block.down('xapgrid');
        
		var selected=grid.getSelectionModel().getSelection();
		if(selected.length > 0){
			var useCount = selected[0].raw.useCount;//加载列表时从后台查出该类别当前使用次数
			if(useCount>0){//大于0时不可删除
				XapMessageBox.info("该类别已被使用，现不能删除！");
				return;
			}
			var selected=grid.getView().getSelectedNodes();
    		var rowIndex = selected[0].rowIndex;//选中数据的行号
    		var store = grid.getStore();//store
    		record = store.getAt(rowIndex);
    		//将删除的数据放入removed中，用于保存时使用
    		store.removed.push(record);
    		//删除数据
    		store.remove(record);//只删除store中的数据
    		//刷新视图，重新排序
    		grid.getView().refresh();
		}else {
			XapMessageBox.info("请选择一条记录！");
		}; 
	}
});
Ext.define('iih.po.assistant.action.SaveEditMrKnowledgeAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	doExecute: function(context) {
		var block = this.getOwner().getBlock('list');
        var grid=block.down('xapgrid');
	    //通过Store获取数据集方便判断
        var store = grid.getStore();
        //得到store中修改过的数据（新增、修改，此方法得不到删除过的数据）
		var datas = store.getModifiedRecords();
		//得到removed中的数据，为删除数据做准备，得到删除过的数据
		var deleted = store.removed;
    	//遍历判断被修改、和新建的记录添加到集合变量中
		var updateData= [];
    	for(var i=0;i<datas.length;i++){
    		if(datas[i].dirty){
    			var obj = new Object();
    			obj.fragmentTplTypeCd = datas[i].data.fragmentTplTypeCd;
    			obj.fragmentTplTypeNm = datas[i].data.fragmentTplTypeNm;
    			updateData.push(obj);
    		}
    	}
    	//遍历判断被删除的记录添加到集合变量中
    	var deleteData= [];
    	for(var i=0;i<deleted.length;i++){
			var obj = new Object();
			obj.fragmentTplTypeCd = deleted[i].data.fragmentTplTypeCd;
			obj.fragmentTplTypeNm = deleted[i].data.fragmentTplTypeNm;
			deleteData.push(obj);
    	}
    	//得到被修改、新建、删除的数据传入后台进行持久化操作
    	var updatas = {'updateData':updateData,'deleteData':deleteData};
    	var operations = context.operations;
    	if(!operations) {
    		return;
    	}
    	this.prepareOperations(operations,updatas);
	},    
    prepareOperations: function(operations,updatas) {
        var url = this.url;
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            method: METHODS.METHOD_UPDATE,
            condition: null,
            data:updatas,
            scope: this,
            success: this.onSuccess
        };
        operations.push(operation);
    },
    onSuccess: function() {
    	//保存成功，刷新
    	var owner=this.getOwner();
        var chain = owner.getActionChain('init');
        if(chain) {
            chain.execute();
        }
    }
});
Ext.define('iih.po.assistant.view.EditKnowledgeTypeView',{
	extend :  Xap.ej.template.BaseTemplate ,

   	layout: 'fit',
   	
   	alias:'widget.editknowledgetypeview',

   	xapConfig: {
   		blocks: {
   			'list': {
   				xclass: 'iih.po.assistant.block.EditKnowledgeTypeBlock'
	   		}
	    },
		actions: {	
			'init': {
				xclass: 'iih.po.assistant.action.EditMrKnowledgeTypeInitAction',
				url:'knowledgesType'
			},
            'create': {
                xclass: 'iih.po.assistant.action.CreateKnowledgeTypeAction'
            },
            'edit': {
                xclass: 'iih.po.assistant.action.EditKnowledgeTypeAction'
            },
            'delete': {
                xclass: 'iih.po.assistant.action.DeleteKnowledgeTypeAction',
                url:'knowledgesType'
            },
			'save': {
				xclass: 'iih.po.assistant.action.SaveEditMrKnowledgeAction',
				url:'knowledgesType'
			},
			'close': {
				xclass: 'iih.po.assistant.action.CancelEditMrKnowledgeTypeAction'
			}
		},
		chains: {	
			'init': ['init'],
			'create': ['create'],
			'edit': ['edit'],
			'delete': ['delete'],
			'save': ['save'],
			'close': ['close']
		},
		connections: {	
			'list': [{
                selector: 'toolbar button[method=create]',
                event: 'click',
                chain: 'create'
            },{
                selector: 'toolbar button[method=edit]',
                event: 'click',
                chain: 'edit'
            },{
                selector: 'toolbar button[method=delete]',
                event: 'click',
                chain: 'delete'
            },{
				selector: 'button[method=save]',
	            event: 'click',
	            chain: 'save'
	        },{
				selector: 'button[method=close]',
	            event: 'click',
	            chain: 'close'
	        },{
				selector: 'button[method=fresh]',
	            event: 'click',
	            chain: 'init'
	        }]	
		}
   	}
})
Ext.define('iih.po.assistant.action.EditPersonKnowledgeTypeAction', {
	extend:  Xap.ej.action.PopAction ,

	                                                          
	
	execute: function(context) {
		var owner = this.getOwner();
    	var config = {
    	    modal: true,           
    		width: 335,
    		height:300,
    		title :'编辑类别',
    		contentConfig: {
    			xtype: 'editknowledgetypeview',
    			initChain: {
    				name: 'init',
    				context: {
    					owner:owner
    				}
    			}
    		}
    	};
    	this.callParent([config]);
    }
});

Ext.define('iih.po.assistant.action.SaveFragmentTplAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	doExecute: function(context) {
	   this.callParent();    
	   var rs = this.getBlock('result').ownerCt;      
	   //向后台发送form表单   
	   var data =this.getBlock('result').getForm().getValues();
	   var ownerTypeCd = data.ownerTypeCd;
	   if(ownerTypeCd=="MDM12.03"){//个人
	   		data.ownerCd = IMER_GLOBAL.user.code;
	   }else if(ownerTypeCd=="MDM12.02"){//科室
	   		data.ownerCd = IMER_GLOBAL.department.code;
	   }
	   //判断当前操作是保存还是修改
	   var owner=this.getOwner();
	   var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
	   //create or edit
	   var method = properties.data.method;
	   if(data!=undefined||data!=null){
	   	   if(method=='create'){
	   	   	    this.createPrepareOperations(context.operations,data);
	   	   }else if(method=='edit'){
	   	   	    this.editPrepareOperations(context.operations,data);
	   	   }
	   }
	},    
    createPrepareOperations: function(operations,data) {
        var url = this.url;
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            method: METHODS.METHOD_CREATE,
            condition: null,
            data:data,
            scope: this,
            success: this.createOnSuccess
        };
        operations.push(operation);
    },
    createOnSuccess: function() {
    	var owner=this.getOwner();
    	//关闭当前页
    	var editView = owner.ownerCt;
        editView.close();
        //调用主页面个人知识库列表刷新
        var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
		//树节点选择病历分类编号
		var parentView = properties.data.parentView;
        var chain = parentView.getActionChain('init');
        if(chain) {
            chain.execute();
        }
        var center = parentView.getBlock('center');
		/*var grid = west.down('xapgrid[name=knoeledgeteGrid]');
		var result =grid.getSelectionModel().getSelection()[0].data;*/
    	var data =this.getBlock('result').getForm().getValues();
    	var knowledgeContent=data.fragmentTplContent;
		center.down('xaptextarea').setValue(knowledgeContent);
    },    
    editPrepareOperations: function(operations,data) {
        var url = this.url;
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            method: METHODS.METHOD_UPDATE,
            condition: null,
            data:data,
            scope: this,
            success: this.editOnSuccess
        };
        operations.push(operation);
    },
    editOnSuccess: function() {
    	var owner=this.getOwner();
    	var data =this.getBlock('result').getForm().getValues();
    	var knowledgeContent=data.fragmentTplContent;
    	//关闭当前页
    	var editView = owner.ownerCt;
        editView.close();
        //调用主页面个人知识库列表刷新
        var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
		//树节点选择病历分类编号
		var parentView = properties.data.parentView;
        var chain = parentView.getActionChain('init');
        if(chain) {
            chain.execute();
        }
        var center = parentView.getBlock('center');
		center.down('xaptextarea').setValue(knowledgeContent);
    } 
});
Ext.define('iih.po.assistant.view.EditKnowledgeView',{
	extend :  Xap.ej.template.BaseTemplate ,

   	layout: 'fit',
   	
   	alias:'widget.editknowledgeview',

   	xapConfig: {
   		blocks: {
   			'list': {
   				xclass: 'iih.po.assistant.block.EditKnowledgeBlock'
	   		}
	    },
		actions: {	
			'init':{
				xclass: 'iih.po.assistant.action.EditPersonKnowledgeInitAction',
				url:'knowledgesType'
			},
			'prapareData': {
				xclass: 'iih.po.assistant.action.PersonKnowledgePrapareDataAction',
				url:'knowledge'
			},
			'typeEdit': {
				xclass: 'iih.po.assistant.action.EditPersonKnowledgeTypeAction'
			},
			'close': {
				xclass: 'iih.po.assistant.action.CancelEditMrKnowledgeAction'
			},
			'save': {
				xclass: 'iih.po.assistant.action.SaveFragmentTplAction',
				url:'knowledge',
		        blocks: {
		            result:'list'
		        }
			}
		},
		chains: {	
			'init': ['init'],
			'typeEdit': ['typeEdit'],
			'prapareData': ['prapareData'],
			'close': ['close'],
			'save': ['save']
		},
		connections: {	
			'list': [{
				selector: 'button[method=edit]',
	            event: 'click',
	            chain: 'typeEdit'//编辑类别
	        },{
				selector: 'button[method=close]',
	            event: 'click',
	            chain: 'close'
	        },{
				selector: 'button[method=save]',
	            event: 'click',
	            chain: 'save'
	        }]	
		}
   	}
})
Ext.define('iih.po.assistant.action.CreateMrKnowledgeAction', {
	extend:  Xap.ej.action.PopAction ,

	                                                      
	
	execute: function(context) {
		//method得当前操作是edit或create
		var method = context.event.arguments[0].method;
		if(method=='edit'){
			var rb = this.getBlock('west');
			var grid = rb.down('xapgrid'); 
			//若为edit，得到当前选中行
			var selected=grid.getSelectionModel().getSelection();
			if(selected.length > 0){
				//判断选中的知识库的创建者与登陆者是否一致，一致时可进行修改，否则没有权限
				if(selected[0].raw.crtUserId!=IMER_GLOBAL.user.code){
					XapMessageBox.info("当前用户没有权限！");
					return;
				}
				var config = {
		    	    modal: true,           
		    		width: 603,
		    		height:357,
		    		title :'编辑',
		    		contentConfig: {
		    			xtype:'editknowledgeview',
		    			initChain: {
		    				name: 'init',
		    				context:{
		    					method:method,//当前操作edit
		    					parentView:this.getOwner()
		    				}
		    			}
		    		}
		    	};
			}else {
				XapMessageBox.info("请选择一条记录！");
			}; 
        }else{
        	var config = {
	    	    modal: true,           
	    		width: 603,
	    		height:351,
	    		title :'新建',
	    		contentConfig: {
	    			xtype:'editknowledgeview',
	    			initChain: {
	    				name: 'init',
	    				context:{
	    					method:method,//当前操作create
	    					parentView:this.getOwner()
	    				}
	    			}
	    		}
	    	};
        }
    	this.callParent([config]);
    }
});

Ext.define('iih.po.assistant.action.DeleteFragmentTplAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
    
    doExecute: function(context) {
	    var fragmentTplCd = context.fragmentTplCd;
    	this.prepareOperations(context.operations,fragmentTplCd);
	},
    prepareOperations: function(operations,fragmentTplCd) {
        var url = this.url;
        url += '/' + fragmentTplCd;       
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            method: METHODS.METHOD_DELETE,
            condition: null,
            scope: this,
            success: this.onSuccess
        };
        operations.push(operation);
    },
    onSuccess: function(operation) {
        var owner = this.getOwner();
        var chain = owner.getActionChain('init');
        if(chain) {
            chain.execute();
        }
        var center = owner.getBlock('center');
		center.down('xaptextarea').setValue();
    }
});
Ext.define('iih.po.assistant.action.DiagnosisHelperInitAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	                                 
	
	execute: function(context) {
	    this.showLoading();
		var enPk = context.enPk;
        if(enPk==undefined){
        	enPk = IMER_GLOBAL.encounterSn;
        }
    	var operations = context.operations;
    	if(!operations) {
    		return;
    	}
    	this.prepareOperations(operations,enPk);
    },

    prepareOperations: function(operations,enPk) {   
        
        var url = this.url+'?enPk='+enPk+'&currentPageIndex=1&pageSize=20';
        var METHODS = this.getInvocationMethods();
    	var operation = {
            url: url,
    		mclass: null,
    		method: METHODS.METHOD_GET,
    		condition: null,
    		scope: this,
    		success: this.onSuccess
    	};
    	operations.push(operation);
    },

    onSuccess: function(operation) {
        var block = this.getBlock('result');
        var m = operation.result;
        // TODO 数据格式就这样了？
        if(m instanceof Ext.data.Model) {
            block.setData({
                mclass: operation.mclass,
                data: m.getData(true)
            });
        }
        else {
            block.setData(m.dataList);
        }
    }
});
Ext.define('iih.po.assistant.action.FragmentCheckChangeAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	execute: function(context) {
		var block = this.getOwner().getBlock('west');//得到MrKnowledgeBlock
	    var personal=block.down('[name=personal]');//个人
	    var dept=block.down('[name=dept]');//科室
	    
		var checkPersonal =personal.getValue();
		var checkDept =dept.getValue();
		 
		var sum = 0;//用于判断一共选择了几个
		var sdte = '';//当只选择一个时，存放当前选择的名称
		if(checkPersonal){//如果个人选中sum自加
			sum++;
			sdte = 'personal';
		}
		if(checkDept){//如果科室选中sum自加
			sum++;
			sdte = 'dept';
		}
		//var name = context.event.from.name;
		if(sum==1){//如果两个组件只选了一个,则将选中的设置为只读
			var checkbox=block.down('[name='+sdte+']');
			checkbox.setReadOnly(true);
		}else{//否则取消只读设置
			personal.setReadOnly(false);
			dept.setReadOnly(false);
		}
		//初始化复选框后初始化个人知识库列表
        var result = this.getOwner();
        var initChain = result.getActionChain('init');
        initChain.execute();
    }
});

Ext.define('iih.po.assistant.action.FragmentGridclickAction', {
	extend:  Xap.ej.action.ServiceInvocation ,		
	/*
	* @Override
	*/
	doExecute: function(context) {
		this.callParent();
        var operations = context.operations;  
        var center = this.getBlock('center');
        var west = this.getBlock('west');
        //得到选择的值
		var grid = west.down('xapgrid[name=knoeledgeteGrid]');
		var result =grid.getSelectionModel().getSelection()[0].data;
		if(result){
			//将选择的值插入
			var fromStatus = center.down('xaptextarea').setValue(result.fragmentTplContent);
		}
	}
});

Ext.define('iih.po.assistant.action.FragmentTplTypeCdChangeAction', {
    extend:  Xap.ej.action.ServiceInvocation ,
	
	   doExecute: function(context) {
		    this.callParent();	
		    var owner = this.getOwner();  
	        var operations = context.operations;
	        //console.log(owner.down('[name=fragmentTplTypeCd]'));
	        var  fragmentTplTypeCd =owner.down('[name=fragmentTplTypeCd]').value;	
	        if(fragmentTplTypeCd==undefined){
	        	fragmentTplTypeCd="";
	        }else if(fragmentTplTypeCd=='ALL'){
	        	fragmentTplTypeCd="";
	        };	
	        this.prepareOperations(operations,fragmentTplTypeCd);  
	    }, 
	    prepareOperations: function(operations,fragmentTplTypeCd) {
	    	var empCd = window.userId;
	        var deptCd = window.deptCd;
	        var condition = '?empCd='+empCd+'&deptCd='+deptCd+'&fragmentTplTypeCd='+fragmentTplTypeCd;;  
	        var url = this.url + condition;    
	        var METHODS = this.getInvocationMethods();
	        var operation = {
	            url: url,
	            mclass: null,
	            method: METHODS.METHOD_GET,
	            condition: null,
	            data:condition,
	            scope: this,
	            success: this.onSuccess,
	            //fail: this.onFail
	        };
	        operations.push(operation);	    
		 },
		    
	    onSuccess: function(operation) {
	        var block = this.getBlock('result');
	        var m = operation.result;
			if(m){
				// TODO 数据格式就这样了？
				if(m instanceof Ext.data.Model) {
					block.setData({
						mclass: operation.mclass,
						data: m.getData(true)
					});
				}
				else {
					block.setData(m);
				}
			}
	    }    
	});

Ext.define('iih.po.assistant.action.FragmentTplTypeComboxAction', {
	extend:  Xap.ej.action.ServiceInvocation ,	
	
	doExecute: function(context) {
	    this.callParent();
        var operations = context.operations;      
        this.prepareOperations(operations);        
	},  
	 prepareOperations: function(operations) {
        var condition = '?empCd='+'1001'+'&deptCd='+'100023';       
        var url = this.url + condition;    
        console.log(url);
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_GET,
            condition: null,
            data:condition,
            scope: this,
            success: this.onSuccess,
            //fail: this.onFail
        };
        operations.push(operation);	    
	 },
	    
    onSuccess: function(operation) {
        //alert("FragmentTplTypeSearchAction");
        var block = this.getBlock('result').down('[name=fragmentTplTypeCd]');      
        var m = operation.result;
		if(m){
			// TODO 数据格式就这样了？
			if(m instanceof Ext.data.Model) {
				block.setData({
					mclass: operation.mclass,
					data: m.getData(true)
				});
			}
			else {
				block.setData(m);
			}
		}
    }    
});

Ext.define('iih.mr.tm.mr.action.FragmentTplTypeSearchAction', {
	extend:  Xap.ej.action.ServiceInvocation ,	
	
	doExecute: function(context) {
	    this.callParent();
        var operations = context.operations;      
        this.prepareOperations(operations);        
	},  
	 prepareOperations: function(operations) {
        var condition = '?empCd='+'1001'+'&deptCd='+'100023';       
        var url = this.url + condition;    
        console.log(url);
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_GET,
            condition: null,
            data:condition,
            scope: this,
            success: this.onSuccess,
            //fail: this.onFail
        };
        operations.push(operation);	    
	 },
	    
    onSuccess: function(operation) {
        //alert("FragmentTplTypeSearchAction");
        var block = this.getBlock('result');
        var m = operation.result;
		if(m){
			// TODO 数据格式就这样了？
			if(m instanceof Ext.data.Model) {
				block.setData({
					mclass: operation.mclass,
					data: m.getData(true)
				});
			}
			else {
				//console.log(m);
				block.setData(m);
			}
		}
    }    
});

Ext.define('iih.po.assistant.action.GetSelectFragmentTplAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
    
    doExecute: function(context) {
		var self=this;  
		var rb = this.getBlock('west');
		var grid = rb.down('xapgrid'); 
		var selected=grid.getSelectionModel().getSelection();
		if(selected.length > 0){
			if(selected[0].raw.crtUserId!=IMER_GLOBAL.user.code){
				XapMessageBox.info("当前用户没有权限！");
				return;
			}
			XapMessageBox.confirm2('是否确定删除？', function(id){
				if(id=='yes'){
			    	var owner = self.getOwner();
			        var chain = owner.getActionChain('delete');
			        if(chain) {
			            chain.execute({
			            	fragmentTplCd:selected[0].data.fragmentTplCd
			            });
			        }
				}
			});
		}else {
			XapMessageBox.info("请选择一条记录！");
		}; 
	}
});
Ext.define('iih.po.assistant.action.LabReportLeftListAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	                                 
	
	/*
	* @Override
	*/
	doExecute: function(context) {
	    this.showLoading();
		console.log('----------------LabReportLeftListAction-------------------');
		this.callParent();
        var operations = context.operations;      
        this.prepareOperations(operations,context);
    },
    prepareOperations : function(operations,context) {
    	var enPk = context.enPk||IMER_GLOBAL.encounterSn;//'838535';
    	var condition = '?enPk='+enPk+ '&currentPageIndex=1&pageSize=1000';   
        var url = this.url + condition;    
        console.log(url);
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_GET,
            condition: null,
            data:condition,
            scope: this,
            success: this.onSuccess,
            //fail: this.onFail
        };
        operations.push(operation);	 
    },
	onSuccess : function(operation) {
		//alert("success");
        var block = this.getBlock('west');
        var m = operation.result.dataList;
        // TODO 数据格式就这样了？
		if(m){
			if(m instanceof Ext.data.Model) {
				block.setData({
					mclass: operation.mclass,
					data: m.getData(true)
				});
			}else {
				//console.log(m);
				block.setData(m);
				var grid = block.down('xapgrid[name=labReportLeftList]');
				grid.getSelectionModel().select(0);
				var checkview = block.up('labreportview');
    		    var chain = checkview.getActionChain('center');
    		    chain.execute();
			}
		}
    }
});

Ext.define('iih.po.assistant.action.LabReportRightListAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	                                 
	
	/*
	* @Override
	*/
	doExecute: function(context) {
		console.log('----------------LabReportRightListAction-------------------');
		this.callParent();
        var operations = context.operations;      
        this.prepareOperations(operations);
    },
    prepareOperations : function(operations) {
    	var west = this.getBlock('west');
    	var grid = west.down('xapgrid[name=labReportLeftList]');
    	var records = grid.getSelectionModel().getSelection();
    	var labRpPk;
    	if(records.length>0){
    		labRpPk = records[0].get('labRpPk');
    		var condition = '?labRpPk='+labRpPk+ '&currentPageIndex=1&pageSize=25';   
            var url = this.url + condition;    
            console.log(url);
            var METHODS = this.getInvocationMethods();
            var operation = {
                url: url,
                mclass: null,
                method: METHODS.METHOD_GET,
                condition: null,
                data:condition,
                scope: this,
                success: this.onSuccess,
                //fail: this.onFail
            };
            operations.push(operation);	
    	}
    },
	onSuccess : function(operation) {
		//alert("success");
        var block = this.getBlock('center');
        var m = operation.result.dataList;
        //console.log(m);
		if(m){
			// TODO 数据格式就这样了？
			if(m instanceof Ext.data.Model) {
				block.setData({
					mclass: operation.mclass,
					data: m.getData(true)
				});
			}else {
				//console.log(m);				
				block.setData(m);
			}
		}
    }
});

Ext.define('iih.po.assistant.action.MrDocHelperTreeInitAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	                                 
	
	execute: function(context) {
	    this.showLoading();
        var operations = context.operations;  
        var enPk = context.enPk;
        if(enPk==undefined){
        	enPk = IMER_GLOBAL.encounterSn;
        }
        var url = this.url+"?encounterPk="+enPk+'&showAllCourse=1';  
//        alert(url);
//        console.log(url+'============');
        var mclass = null;        
        var operation = {
            url: url,
            mclass: mclass,
            method: 'get',
            condition: null,
            scope: this,
            success: this.onSuccess
        };
        operations.push(operation);  
    }, 

    onSuccess: function(operation) {
        var block = this.getBlock('result');
        var right = this.getOwner().getBlock('right');
        var objView=right.down("objectview");
			if(objView){
				right.remove(objView);
			}
        var m = operation;
        if(m.result.data.children){
        	block.setData(m.result.data.children);
        }else{
        	block.setData([]);
        }
        
    }  
});
Ext.define('iih.po.assistant.action.MrDocTreeNodeChangeAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override
	*/
	execute: function(context) { 
		var operations = context.operations;
    	if(!operations) {
            return;
        }
		 var rb = this.getBlock('result').down('xaptree');
//         	var tree=bolck.down('xaptree');
		 var treeNode = rb.getSelectionModel().getSelection();
         var mrPk = treeNode[0].raw.mrPk;
         var mrTpCcatCode=treeNode[0].raw.mrTpCcatCd;
         var owner = this.getOwner();
         setTimeout(function() {
        	 if(rb.isDisabled()){
        		 console.log('enable');
            	 rb.enable();
        	 }
         },350);
         if(mrPk){
        	 rb.disable();
          	var right = owner.getBlock('right');
          	if(right){
          		var mrSn = right.mrSn;
          		if(mrPk!=mrSn){
          			delete right.mrTpCcatCd;
          			right.mrSn = mrPk;
 			        right.opType = 'readonly';
// 			        var objView=right.down("objectview");
 			        var items=right.items.items;
 			        var l=items.length;
// 			        console.log(items.length);
// 			       	console.log('前');
// 			       	console.log(right.items.items.length);
 			       for(var i=0;i<l;i++){
// 			    	  console.log('第'+i+'次循环');
// 			    	 console.log(items);
 			    	   var ob=items[0];
// 			    	  console.log(ob.xtype);
 			    	   if(ob.xclass!='iih.mr.block.editor.MrDocEditBlock'){
 			    		  right.remove(ob);
// 			    		  console.log('right.remove(ob);');
 			    	   }
 			       }
// 			      console.log('后');
// 			     console.log(right.items.items.length);
//         			if(objView){
//         				right.remove(objView);
//         				console.log('right.remove(objView);');
// 			        }else{
// 			        	console.log('not ------right.remove(objView);');
// 			        }
 	 			    var initChain =  right.getActionChain('init');
 	 			    initChain.execute();	
          			/*if(right.items.items[0]){
          				right.remove(right.items.items[0]);
          			}*/
          		}
          	}
          }else if(mrTpCcatCode){
        	  rb.disable();
         	var right = owner.getBlock('right');
         	if(right){
         		var mrTpCcatCd = right.mrTpCcatCd;
         		if(mrTpCcatCode!=mrTpCcatCd){
         			delete right.mrSn;
         			var objView=right.down("objectview");
         			if(objView){
         				right.remove(objView);
 			        }
			        right.mrTpCcatCd = mrTpCcatCode;
			        right.opType = 'readonly';
			        var initChain =  right.getActionChain('init');
			        initChain.execute();
         		}
         	}
         }
    },
    readPrepareOperations: function(operations, mrSn) {
    	var url = '/mrfile/'+mrSn;
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            method: METHODS.METHOD_GET,
            scope: this,
            success: this.onReadSuccess
        };
        operations.push(operation);
    },
    onReadSuccess: function(operation) {
        var self=this;
        var mrDocEditPage=self.getOwner();
        mrDocEditPage.medicalRecord=operation.result.data;
//        console.log(mrDocEditPage.medicalRecord);
        var plugin = document.getElementById('iemrEditorRead');
	        if(plugin&&plugin.valid){
	        	plugin.OpenFromString(operation.result.data.fileData,3);
//	        	this.readPrepareOperations(operations, mrSn)
	        }else{
		        var initChain =  right.getActionChain('init');
		        initChain.execute();	
	        }
//        var params={
//                'objectId':'iemrEditorRead',
//                'sstream':operation.result.data.fileData,
//                'mr_mode':3,
//                'readonly':true,
//                'callBackAction':'closeProgress'
//        };
    }
});

Ext.define('iih.po.assistant.action.MrKnowledgeLoadTreeAction', {
	extend:  Xap.ej.action.ServiceInvocation ,

	doExecute: function(context) {  
        var operations = context.operations;        
        this.prepareOperations(operations);    
    }, 
    prepareOperations: function(operations) {
        var url = this.url+'?typeCode='+'MRM11.02';//+'?keyword='+'test'+'&'
        //alert(url);
        var mclass = null;        
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: mclass,
            method: METHODS.METHOD_GET,
            condition: null,
            scope: this,
            success: this.onSuccess
        };
        operations.push(operation);
    },
        
    onSuccess: function(operation) {
    	//alert("onSuccess");
        var block = this.getBlock('result');
        var m = operation; 
        //console.log(operation.result.root);
        // TODO 数据格式就这样了？
        if(m instanceof Ext.data.Model) {
        	block.setData({
				mclass: operation.mclass,
				data: m.getData(true)
			});
        }
        else {
        	block.setData(m.result.root);
        }
    }    

});

Ext.define('iih.po.assistant.action.ObservationLeftListAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	                                 
	
	/*
	* @Override
	*/
	doExecute: function(context) {
	    this.showLoading();
		console.log('----------------ObservationLeftListAction-------------------');
		this.callParent();
        var operations = context.operations;      
        this.prepareOperations(operations,context);
    },
    prepareOperations : function(operations,context) {
    	var enSn = context.enPk||IMER_GLOBAL.encounterSn;//'838535';
    	var condition = '?enPk='+enSn+ '&currentPageIndex=1&pageSize=1000';   
    	 var url = this.url + condition;    
        //console.log(url);
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_GET,
            condition: null,
            data:condition,
            scope: this,
            success: this.onSuccess,
            //fail: this.onFail
        };
        operations.push(operation);	 
    },
	onSuccess : function(operation) {
		//alert("success");
        var block = this.getBlock('west');
        var m = operation.result.dataList;
		if(m){
			// TODO 数据格式就这样了？
			if(m instanceof Ext.data.Model) {
				block.setData({
					mclass: operation.mclass,
					data: m.getData(true)
				});
			}else {
				block.setData(m);
				var grid = block.down('xapgrid[name=observationLeftList]');
				grid.getSelectionModel().select(0);
				var observationreportview = block.up('observationreportview');
    		    var chain = observationreportview.getActionChain('center');
    		    chain.execute();
			}
		}
    }
});

Ext.define('iih.po.assistant.action.ObservationRightAction', {
	extend:  Xap.ej.action.Action ,
	
	                                 
	
	/*
	* @Override
	*/
	execute: function(context) {
		console.log('----------------ObservationRightAction-------------------');
		this.callParent();
        var west = this.getBlock('west');
    	var grid = west.down('xapgrid[name=observationLeftList]');
    	var records = grid.getSelectionModel().getSelection();
    	var obImpr,/*obVal,obFndg,obDi,adv,*/center,obImprArea/*,obValArea,obFndgArea,obDiArea,advArea*/;
    	if(records.length>0){
    		obImpr = records[0].get('obImpr');
        	/*obVal = records[0].get('obVal');
        	obFndg = records[0].get('obFndg');
        	obDi = records[0].get('obDi');
        	adv = records[0].get('adv');*/
        	center = this.getBlock('center');
        	//console.log(center);
        	obImprArea = center.down('xaptextarea[name=obImpr]');
        	obImprArea.setValue(obImpr);
        	/*obValArea = center.down('xaptextarea[name=obVal]');
        	obValArea.setValue(obVal);
        	obFndgArea = center.down('xaptextarea[name=obFndg]');
        	obFndgArea.setValue(obFndg);
        	obDiArea = center.down('xaptextarea[name=obDi]');
        	obDiArea.setValue(obDi);
        	advArea = center.down('xaptextarea[name=adv]');
        	advArea.setValue(adv);*/
    	}
    }
});

Ext.define('iih.po.assistant.action.ObservationRightHandleTextAction', {
	extend:  Xap.ej.action.Action ,
	
	                                 
	
	/*
	* @Override
	*/
	execute: function(context) {
		console.log('---------------- ObservationRightHandleTextAction -------------------');
		this.callParent();
        var center = this.getBlock('center');
        //console.log(center);
        var texts = center.down('xaptextarea');
        //console.log(texts);
        var eve = context.event;
        //console.log(eve);
        var textarea = eve.arguments[0];
        //console.log(textarea);
        textarea.setFieldStyle({'background-image': 'none','background-color': '#D9D9D9'});
//    	this.selectedCmp = cmp;
    }
});

Ext.define('iih.po.assistant.action.OrderCheckchangeAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	                                 
	
	/*
	* @Override
	*/
	doExecute: function(context) {
		var block = this.getOwner().getBlock('orderlist');
	    var longterm = block.down('[name=longterm]').items.items[0];
	    var temporary = block.down('[name=temporary]').items.items[0];
	    
	  //判断是否选择了医嘱类型
	    if(longterm.checked && temporary.checked){
	    	longterm.readOnly = false;
	    	temporary.readOnly = false;
	    }else if(longterm.checked && !temporary.checked){
	    	longterm.readOnly = true;
	    	temporary.readOnly = false;
	    }else if(!longterm.checked && temporary.checked){
	    	longterm.readOnly = false;
	    	temporary.readOnly = true;
	    }
		
        var result = this.getOwner();
        var initChain = result.getActionChain('init');
        initChain.execute();
    }
});

Ext.define('iih.po.assistant.action.OrderListInitAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	                                 
	
	/*
	* @Override
	*/
	doExecute: function(context) {
	    this.showLoading();
		console.log('-------OrderListInitAction-------------------');
		this.callParent();
        var operations = context.operations;
        var data = {},longOrF = '',enTypeCode=IMER_CONSTANT.INPATIENT;
        var block = this.getOwner().getBlock('orderlist');
        var longterm = block.down('[name=longterm]').items.items[0];
	    var temporary = block.down('[name=temporary]').items.items[0];
	    //判断是否选择了医嘱类型
	    if(longterm.checked && temporary.checked){	    	
	    }else if(longterm.checked && !temporary.checked){
	    	longOrF = '1';
	    }else if(!longterm.checked && temporary.checked){
	    	longOrF = '0';
	    }
	    //判断就诊类型门诊和住院
	    if(IMER_GLOBAL.portal.code==IMER_CONSTANT.PORTAL_OUTP){//门诊
	    	enTypeCode = IMER_CONSTANT.OUTPATIENT;
	    }else if(IMER_GLOBAL.portal.code==IMER_CONSTANT.PORTAL_INP){//住院
	    	enTypeCode = IMER_CONSTANT.INPATIENT;
	    }
	    var enSn = context.enPk||IMER_GLOBAL.encounterSn;//'838535';
	    data.enSn = enSn;
	    data.longOrF = longOrF;
	    data.enTypeCode = enTypeCode;
        this.prepareOperations(operations,data);
    },
    prepareOperations : function(operations,data) {
    	var enSn = data.enSn;//'838535';
    	console.log('ensn = '+enSn);
    	//enSn = '239712';
    	var condition = '?enPk='+enSn+'&longOrF='+data.longOrF+ '&enTypeCode='+data.enTypeCode+ '&currentPageIndex=1&pageSize=1000';   
        var url = this.url + condition;   
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_GET,
            condition: null,
            data:condition,
            scope: this,
            success: this.onSuccess,
            //fail: this.onFail
        };
        operations.push(operation);	 
    },
    
	onSuccess : function(operation) {
		//alert("success");
        var block = this.getBlock('orderlist');
        var bar = block.down('toolbar');
      //判断就诊类型门诊和住院
	    if(IMER_GLOBAL.portal.code==IMER_CONSTANT.PORTAL_OUTP){//门诊
	    	bar.hide();
	    }else if(IMER_GLOBAL.portal.code==IMER_CONSTANT.PORTAL_INP){//住院
	    	bar.show();
	    }
        var m = operation.result.dataList;
		if(m){
			// TODO 数据格式就这样了？
			if(m instanceof Ext.data.Model) {
				block.setData({
					mclass: operation.mclass,
					data: m.getData(true)
				});
			}else {
				//console.log(m);
				block.setData(m);
			}
		}
    }
});

Ext.define('iih.po.assistant.action.PersonKnoeledgeSearchAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	execute: function(context) {
	    this.showLoading();
		this.prepareOperations(context.operations);
	},
	prepareOperations: function(operations) {
		var block = this.getOwner().getBlock('west');//得到MrKnowledgeBlock
		var personal=block.down('[name=personal]');//个人
	    var dept=block.down('[name=dept]');//科室
	    var name=block.down('xaptrigger[name=fragmentTplNm]');//名称
		var checkPersonal =personal.getValue();
		var checkDept =dept.getValue();
		var inName =name.getValue();
		var data = {'userId':IMER_GLOBAL.user.code,'deptCd':IMER_GLOBAL.department.code};
		if(checkPersonal){//传入后台，用于判断复选框的选择情况。
			data.personal="personal";
		}
		if(checkDept){
			data.dept="dept";
		}
		if(inName!=""){//按名称查询
			data.inName=inName;
		}
		//var url = this.url+'?userId='+IMER_GLOBAL.user.code+'&deptCd='+IMER_GLOBAL.department.code+'&searchData='+data;
		var url = this.url;
		var METHODS = this.getInvocationMethods();
		var operation = {
			url: url,
			method: METHODS.METHOD_UPDATE,
			data:data,
			scope: this,
			success: this.onSuccess
		};
		operations.push(operation);
	},
	onSuccess: function(operation) {
		//插入值
		var block = this.getBlock('result');
		if(operation.result.dataList){
			block.setData(operation.result.dataList);
		}else{
			block.setData({});
		}
	}    
});

Ext.define('iih.po.assistant.action.RefreshInpOrderAction', {
    extend:  Xap.ej.action.ServiceInvocation ,
    
    /*
     * @Override
     */
    execute: function(context) {
        var operations = context.operations;
        if(!operations) {
            return;
        }
        this.prepareOperations(operations);
    },
    
    prepareOperations: function(operations) {
    		var url=this.url+'/SYSM01.18';
            var operation = {
                url: url,
                method: 'get',
                scope: this,
                success: this.onSuccess
            };
            operations.push(operation);
    },
    onSuccess: function(operation) {
    	var configs=operation.result.dataList;
    	var grid = this.getBlock('orderlist').down('xapgrid');
		var selModel = grid.getSelectionModel();
        var records = selModel.getSelection();
        var tmp='';
		if(configs&&configs.length>0){
			var itemLinkSymbol='';
			var orSymbol='';
    		var orItems=new Array();
			for(i in configs){
				var config=configs[i];
				if(config.key=='ITEM_LINK_SYMBOL'){
					itemLinkSymbol=config.value;
				}else if(config.key=='ITEM_CONFIG'){
					if(config.value){
						orItems=config.value.split(",");
					}
				}else if(config.key=='OR_LINK_SYMBOL'){
					orSymbol=config.value;
				}
			}
	        for(var j=0; j<records.length;j++){
            	    if(j>0){
            	    	tmp = tmp +orSymbol;
            	    }
            	    for(h in orItems){
            	    	var item=records[j].raw[orItems[h]];
            	    	if(item){
            	    		if(h>0){
	            	    		tmp = tmp +itemLinkSymbol;
	            	    	}
	            	    	tmp = tmp + records[j].raw[orItems[h]];
            	    	}
            	    }
            }
		}else{
			 for(var j=0; j<records.length;j++){
				 if(j>0){
		    	    	tmp = tmp +'，'
		    	 }
		     	 tmp = tmp+' ' + records[j].get('svNm');
		     	 tmp = tmp+' ' + records[j].get('dosage');
		     	 tmp = tmp +' '+ records[j].get('freqNm');
			 }
		}
		var hisDocPlugin=document.getElementById('iemrEditor');
        hisDocPlugin.InsertText(tmp);
    }
});

Ext.define('iih.po.assistant.action.RefreshOutpatientDisposalAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
    
    doExecute: function(context) {
		var operations = context.operations;
    	if(!operations) {
    		return;
    	}
    	var data=this.getWriteStr();
    	this.data=data;
    	var hisDocPlugin=document.getElementById('iemrEditor');
		if(hisDocPlugin){
			if(data&&((data.chuzhi&&data.chuzhi.length>0)||(data.chufang&&data.chufang.length>0))){
				if(!hisDocPlugin.IsBlankLine()){
					Ext.MessageBox.show({
						title: '提示',
						msg: '当前位置不允许插入处方或处置，请回车，在新行中尝试插入!',
						buttons: Ext.MessageBox.OK,
						icon:'warning'
					});
				return;
				}
				this.prepareOperations(operations);
    		}
		}else{
			Ext.MessageBox.show({
				title: '提示',
			        msg: '未得到编辑器插件,请重新打开病历重试!',
			        buttons: Ext.MessageBox.OK,
			        icon:'warning'
			    });
		}
	},
	prepareOperations: function(operations) {
		var url = this.url;
	    var METHODS = this.getInvocationMethods();
		var operation = {
	        url: url,
			mclass: null,
			method: METHODS.METHOD_GET,
			condition: null,
			scope: this,
			success: this.onSuccess,
	        fail: this.onFail
		};
		operations.push(operation);
	},

	onSuccess: function(operation) {
		var temp=operation.result.data;
		var data=this.data;
		this.refreshOutpatientDisposal(data, temp);
	},
	onFail: function(operation) {
	},
    refreshOutpatientDisposal:function(data,mrTemplateModel){
    	function trim(str) {
            if (typeof str == "string") {
                str = str.replace(/^(\s|\u00A0)+/, '');
                for ( var i = str.length - 1; i >= 0; i--) {
                    if (/\S/.test(str.charAt(i))) {
                        str = str.substring(0, i + 1);
                        break;
                    }
                }
            }
            return str;
        };
    	var hisDocPlugin=document.getElementById('iemrEditor');
    	var tabList = hisDocPlugin.GetTables();
		var hasPresionGrid = 0;//0为无处方表格，1为有空表格，2为有处方数据的表格
    	var hasDisposalGrid = 0;
		if(tabList){                	    		
			for(var i=0;i<tabList.length;i++){
				if("门诊处方表"==tabList[i]){
					var content=hisDocPlugin.ExportTable("门诊处方表");
					if(content&&content.length>0){
						hasPresionGrid=2;
					}else{
						hasPresionGrid=1;
					}
				}else if("门诊处置表"==tabList[i]){
					var content=hisDocPlugin.ExportTable("门诊处置表");
					content=trim(content);
					if(content&&content.length>0){
						hasDisposalGrid=2;
					}else{
						hasDisposalGrid=1;
					}
				}
			}
		}
		if(data.chuzhi&&data.chufang&&data.chufang.length>0){
			if(hasDisposalGrid==0&&hasPresionGrid==0){//如果即没有处置表也没有处方表则插入占位表并执行刷新
				hisDocPlugin.InsertFromString(mrTemplateModel.prescriptionAndDisposeSignFile,0);//插入门诊处方及处置占位小模板
				hisDocPlugin.RefreshSpecifyTable('门诊处置表',1, data.chuzhi);
	    		hisDocPlugin.ImportPrescription('门诊处方表',mrTemplateModel.prescriptionFile,data.chufang,true);
			}else{
				if(hasDisposalGrid!=2&&hasPresionGrid!=2){
					if(hasDisposalGrid==0){
						hisDocPlugin.InsertFromString(mrTemplateModel.disposeSignFile,0);//插入门诊处置占位小模板
					}else if(hasPresionGrid==0){
						hisDocPlugin.InsertFromString(mrTemplateModel.prescriptionSignFile,0);//插入门诊处方占位小模板
					}
					hisDocPlugin.ImportPrescription('门诊处方表',mrTemplateModel.prescriptionFile,data.chufang,true);
					hisDocPlugin.RefreshSpecifyTable('门诊处置表',1, data.chuzhi);
				}else{
					console.log('hasDisposalGrid='+hasDisposalGrid+'，hasPresionGrid='+hasPresionGrid);
					if(hasDisposalGrid==2&&hasPresionGrid==2){
						hisDocPlugin.AppendTableRow('门诊处置表',1, data.chuzhi);
						hisDocPlugin.AppendPrescription('门诊处方表',mrTemplateModel.prescriptionFile,data.chufang,true);
					}else{
						if(hasDisposalGrid==2){
							hisDocPlugin.AppendTableRow('门诊处置表',1, data.chuzhi);
						}else if(hasDisposalGrid==0){
							console.log('hasDisposalGrid='+hasDisposalGrid);
							hisDocPlugin.InsertFromString(mrTemplateModel.disposeSignFile,0);//插入门诊处置占位小模板
							hisDocPlugin.RefreshSpecifyTable('门诊处置表',1, data.chuzhi);
						}else{
							hisDocPlugin.RefreshSpecifyTable('门诊处置表',1, data.chuzhi);
						}
						if(hasPresionGrid==2){
							console.log('hasPresionGrid='+hasPresionGrid);
							hisDocPlugin.AppendPrescription('门诊处方表',mrTemplateModel.prescriptionFile,data.chufang,true);
						}else if(hasPresionGrid==0){
							hisDocPlugin.InsertFromString(mrTemplateModel.prescriptionSignFile,0);//插入门诊处方占位小模板
							hisDocPlugin.ImportPrescription('门诊处方表',mrTemplateModel.prescriptionFile,data.chufang,true);
						}else{
							hisDocPlugin.ImportPrescription('门诊处方表',mrTemplateModel.prescriptionFile,data.chufang,true);
						}
					}
				}
			}
	    }else{
	    	if(data.chuzhi){
	    		if(hasDisposalGrid==0||hasDisposalGrid==1){
	    			if(hasDisposalGrid==0){
		    			hisDocPlugin.InsertFromString(mrTemplateModel.disposeSignFile,0);//插入门诊处置占位小模板
		    		}
	    			hisDocPlugin.RefreshSpecifyTable('门诊处置表',1, data.chuzhi);
	    		}else if(hasDisposalGrid==2){
	    			hisDocPlugin.AppendTableRow('门诊处置表',1, data.chuzhi);
	    		} 
	    	}else if(data.chufang&&data.chufang.length>0){
	    		if(hasPresionGrid==0||hasPresionGrid==1){
	    			if(hasPresionGrid==0){
	    				hisDocPlugin.InsertFromString(mrTemplateModel.prescriptionSignFile,0);//插入门诊处方占位小模板
		    		}
	    			hisDocPlugin.ImportPrescription('门诊处方表',mrTemplateModel.prescriptionFile,data.chufang,true);
	    		}else if(hasPresionGrid==2){
	    			hisDocPlugin.AppendPrescription('门诊处方表',mrTemplateModel.prescriptionFile,data.chufang,true);
	    		} 
	    	}
	    }
		hisDocPlugin.RemoveBlankPreTable('门诊处方表');
		hisDocPlugin.RemoveBlankPreTable('门诊处置表');
		hisDocPlugin.GotoMark("DOC_END");
    },
    getWriteStr:function(){
		var block = this.getBlock('orderlist');
    	var grid=block.down('xapgrid');
    	var re=grid.getSelectionModel().getSelection();
    	if(re&&re.length>0){
    		var records = new Array(0);
    		var selectRecords = re;
    		var len=re.length;
    		for(var j=0;j<len;j++){
	    		var minNum = selectRecords[0].raw.number;
	    		var minRow = 0;
	    		for(var i=0;i<selectRecords.length;i++){
	    		    if(selectRecords[i].raw.number<minNum){
	    		    	minNum = selectRecords[i].raw.number;
	    		    	minRow = i;
	    		    }
	    		}
	    		records.push(selectRecords[minRow]);
	    		selectRecords.splice(minRow, 1);
    		}
    		for(or in records){
    			for(or2 in records){
    				if(records[or].raw.orPk==records[or2].raw.parOrPk){
    					records[or].raw.parOrPk=records[or].raw.orPk;
    				}
    			}
    		}
    		
    		//数组 装处方数据
			var prescriptionsStr = new Array(0);
			//josn 装处方数据
			var all = null;
    		for(var i=0;i<records.length;i++){
				var orderTypeCd=records[i].raw.orTpCd;
				//处方
				if(orderTypeCd=='04'){
					var specifDosage=records[i].raw.dosage;//+records[i].raw.dosageUnitNm;
					if(!specifDosage){
						specifDosage='&nbsp';
					}
					
					var orNoteNm=records[i].raw.orNoteNm;
					if(!(orNoteNm&&orNoteNm.length>0)){
						orNoteNm='&nbsp';
					}
					var routeNm=records[i].raw.routeNm;
					if(!routeNm){
						routeNm='&nbsp';
					}
					var amount=records[i].raw.amount;
					if(!amount){
						amount='&nbsp';
					}
					if(records[i].raw.takeAmountUnitNm){
						amount=amount+records[i].raw.takeAmountUnitNm;
					}
					var freqNm=records[i].raw.freqNm;
					if(!freqNm){
						freqNm='&nbsp';
					}
					//增加门诊处方，分组
					var prescriptionStr = 'yp_zl_name\n'+records[i].raw.svNm+'\nspeci_dosage\n'+specifDosage+
					'\nfrename\n'+freqNm+'\nyz_supply\n'+routeNm+
					'\nspecification\n'+records[i].raw.spec+'\nmz_charge_group\n'+orNoteNm+
					'\ndrug_amount\n'+amount;
					if(records[i].raw.parOrPk!=null&&records[i].raw.parOrPk!=undefined&&records[i].raw.parOrPk!=''&&records[i].raw.parOrPk!='0'){
						prescriptionStr=prescriptionStr+'\ngroup\n'+records[i].raw.parOrPk;
					}else{
						prescriptionStr=prescriptionStr+'\ngroup\n&nbsp';
					}
					
					prescriptionsStr.push(prescriptionStr);
				}else if(orderTypeCd=='01'||orderTypeCd=='02'||orderTypeCd=='03'){
					//处置（包括检验，检查，诊疗）
					if(all == null){
			    		  all = records[i].raw.svNm;
			    		  if("03"==records[i].raw.orTpCd){//03为门诊诊疗，可能有单位，需要特殊处理
			    			  var orderExecFreqNm='';
			    			  if(records[i].raw.freqNm !=undefined&& records[i].raw.freqNm!=null){
			    					orderExecFreqNm=records[i].raw.freqNm;
			    			  }
			    			  all = all+'          '+orderExecFreqNm;
			    		  }
			    	  }else{
			    		  all = all + '\n' + records[i].raw.svNm;
			    		  if("03"==records[i].raw.orTpCd){
			    			  var orderExecFreqNm='';
			        		  if(records[i].raw.freqNm!=undefined&&records[i].raw.freqNm!=undefined){
			        			  orderExecFreqNm=records[i].raw.freqNm;
			        		  }
			        		  all = all + '          '+orderExecFreqNm;
			    		  }
			    	  }
				 }
  			}
		    return  {'chufang':prescriptionsStr,'chuzhi':all};
    	}else{
    		//todo 加弹出框页面会卡死掉
    		Ext.MessageBox.show({
    		    title: '提示',
    		    msg: '请选择要写回病历的条目！',
    		    buttons: Ext.MessageBox.OK,
    		    fn: function(){},
    		    icon: 'warning'
    		});
    		return false;
    	}
    }
});
Ext.define('iih.po.assistant.action.TodoListRefreshAction', {
	extend :  Xap.ej.action.ServiceInvocation ,

	                                              
	
	doExecute: function(context) {
        this.callParent();
        var operations = context.operations;
        var url = this.url;
        var mclass = null;
        var view = this.getOwner();
        var assistant = view.up('assistantblock');
        var condition = {
           tgtObCd: assistant.tgtObCd,
           tgtObPk: assistant.tgtObPk
        };
        var qs = Ext.Object.toQueryString(condition);
        url += '?' + qs;
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: mclass,
            method: METHODS.METHOD_GET,
            condition: condition,
            scope: this,
            success: this.onSuccess
        };
        operations.push(operation);
    },

	onSuccess : function(operation) {
		var block = this.getBlock('content');
		var m = operation.result;
		block.setData(m);
	}
});

Ext.define('iih.po.assistant.action.VitalSignInitAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	                                 
	
	execute: function(context) {
	    this.showLoading();
    	var operations = context.operations;
    	if(!operations) {
    		return;
    	}
    	this.prepareOperations(operations);
    },
    prepareOperations: function(operations) {
	    Date.prototype.Format = function (fmt) { //author: meizz 
	    var o = {
	        "M+": this.getMonth() + 1, //月份 
	        "d+": this.getDate(), //日 
	        "h+": this.getHours(), //小时 
	        "m+": this.getMinutes(), //分 
	        "s+": this.getSeconds(), //秒 
	        "q+": Math.floor((this.getMonth() + 3) / 3), //季度 
	        "S": this.getMilliseconds() //毫秒 
	    };
	    if (/(y+)/.test(fmt)) fmt = fmt.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length));
	    for (var k in o)
	    if (new RegExp("(" + k + ")").test(fmt)) fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : (("00" + o[k]).substr(("" + o[k]).length)));
	    	return fmt;
		}
		var curdate = new Date().Format("yyyy-MM-dd");
		var bDate = new Date();
		bDate.setDate(bDate.getDate()-7);
	    var encounterSn = IMER_GLOBAL.encounterSn;
 	//  var url = this.url+"?enPk=723551&acquisitionStartTime=2010-02-19 21:05:10.630&acquisitionStopTime=2020-02-19 21:05:10.630";
    	url = this.url;
    	var startTime = bDate.Format("yyyy-MM-dd") +" 00:00:00";
    	var endTime = curdate+" 23:59:59";
    	var params = {enPk:encounterSn,acquisitionStartTime:startTime,endTime:endTime};
    	var METHODS = this.getInvocationMethods();
    	var operation = {
            url: url,
    		mclass: null,
    		method: METHODS.METHOD_GET,
    		condition: null,
    		scope: this,
    		params:params,
    		success: this.onSuccess
    	};
    	operations.push(operation);
    },

    onSuccess: function(operation) {
    	//alert("onsuccess");
        var block = this.getBlock('result');
        var m = operation.result;
        // TODO 数据格式就这样了？
        if(m instanceof Ext.data.Model) {
            block.setData({
                mclass: operation.mclass,
                data: m.getData(true)
            });
        } else {
            block.setData(m);
        }
    }
});
Ext.define('iih.po.assistant.action.VitalSignSearchAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	                                 
	
	execute: function(context){
		var operations = context.operations;
    	if(!operations) {
    		return;
    	}
    	var date = context.date;
    	this.prepareOperations(operations,date);
    },

    prepareOperations: function(operations,date) {
    	var encounterSn = IMER_GLOBAL.encounterSn;
    	var startTime = date.beginTime+" 00:00:00";
    	var endTime = date.endTime+" 23:59:59";
    	var params = {enPk:encounterSn,acquisitionStartTime:startTime,acquisitionStopTime:endTime};
    	var url = "nu/vitalsigns";
        var METHODS = this.getInvocationMethods();
    	var operation = {
            url: url,
    		mclass: null,
    		method: METHODS.METHOD_GET,
    		condition: null,
    		params:params,
    		scope: this,
    		success: this.onSuccess,
            fail: this.onFail
    	};
    	operations.push(operation);
    },

    onSuccess: function(operation) {
    	//alert("onSuccess1");
        var block = this.getBlock('result');
        var m = operation.result;
        // TODO 数据格式就这样了？
        if(m instanceof Ext.data.Model) {
            block.setData({
                mclass: operation.mclass,
                data: m.getData(true)
            });
        }else{
            block.setData(m);
        }
    },
    onFail: function(operation) {
        alert("保存失败!");
    }
});
Ext.define('iih.po.assistant.action.VitalSignSearchCancelAction', {
    extend:  Xap.ej.action.Action ,

    /*
     * @Override
     */
    execute: function(context) {
        // 关闭窗口
        var owner = this.getOwner().ownerCt.ownerCt;// 从新建病历进来关闭此页面
        if (owner == null || owner == undefined) {
            this.getOwner().ownerCt.close();// 从病历属性进来关闭此页面
        } else {
            owner.close();
        }
    }
});

Ext.define('iih.po.assistant.action.VitalSignSearchInitAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	                                 
	
	execute: function(context) {
	    var owner = this.getOwner();
        var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
        properties.setData({
            parentWindow: context.parentWindow,
            sourceView: context.sourceView//,
           // encounterSn : context.encounterSn,
           // typeFlag:context.typeFlag
        });
		var DoctorAndEncounterSn=IMER_GLOBAL.user.code+IMER_GLOBAL.encounterSn;
		//var cookie1 = Ext.state.Manager.getProvider();
		//var cookie1 = Ext.state.CookieProvider();
		
		var cookie1 = new Ext.state.CookieProvider();  
 		Ext.state.Manager.setProvider(cookie1);  
 		var lastSearchDateValue = 'nodate';
 		lastSearchDateValue = cookie1.get(DoctorAndEncounterSn,'nodate');
        
        var block = this.getOwner().getBlock('content');
    	var beginTime = block.down('xapdatefield[name=beginTime]');
    	var endTime = block.down('xapdatefield[name=endTime]');
    	if(lastSearchDateValue=='nodate'){
	    	var curDate = new Date();
	    	var bDate = new Date();
	    	bDate.setDate(bDate.getDate() - 7);
	    	beginTime.setValue(bDate);
	    	endTime.setValue(curDate);
    	}
    	else{
    		beginTime.setValue(lastSearchDateValue.beginTime);
	    	endTime.setValue(lastSearchDateValue.endTime);
    	}
    }

});
Ext.define('iih.po.assistant.block.VitalSignHelperSearchBlock',{
    extend :  Xap.ej.block.FormBlock ,

                                                 

    alias:'widget.VitalSignHelperSearchBlock',

    layout: {
    	type: 'table',
        columns: 3,
        tableAttrs: {
            border: 0,
            cellpadding: 5,
            cellspacing: 1,
            width: '100%'
        },
        tdAttrs: {
            valign: 'center'
        }
    },

    items: [{
		xtype : 'tbspacer', //插入的空填充
		width : 400,
		colspan:3,
		height:20
	},{
        xtype: 'xapdatefield',
//        autoScroll:true,
        name:'beginTime',
        labelWidth:60,
        labelAlign:'right',
        editable:false,
        fieldLabel:'采集时间'
    },{
	  	xtype: 'xapdisplayfield',
		fieldLabel: '',
		vertical: true,
		name:'fenge',
		value: '~',
		margin:'0 0 0 0'
  },{
    	xtype: 'xapdatefield',
//      autoScroll:true,
    	name:'endTime',
    	labelWidth:60,
    	labelAlign:'right',
    	margin:'0 10 0 0',
    	editable:false
    },{
	  	xtype: 'xapdisplayfield',
		fieldLabel: '',
		colspan:3,
		vertical: true,
		name:'msgInfo',
		value: '',
		margin:'0 0 0 0'
  }],
    buttons:[{
        xtype: "button",
        name: 'Search',
        method:'Search',
        text: '查询'
    },{
        xtype: "button",
        name: 'Cancel',
        method:'Cancel',
        text: '关闭'    
    }],
	setData: function(data) {
	    alert("ok");
	    this.callParent(arguments);
	    
	    var date = this.down('xapdatefield');
	    var curDate = new Date();
		curDate = curDate.getTime();
		date = curDate;
		alert(curDate);
	    
	},
    getData: function() {
        this.callParent(arguments);
    }
});
Ext.define('iih.po.assistant.action.VitalSignSearchWindowSearchAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	                                 
	
	execute: function(context) {
		var owner = this.getOwner();//"VitalSignHelperSearchView"
        var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
        var data = properties.getData();
        var sourceView = properties.data.sourceView; 	//VitalSignHelperView
        var view = properties.data.parentWindow;
        var block = this.getBlock('result');
    	var beginTime = block.down('xapdatefield[name=beginTime]').rawValue;
    	var endTime = block.down('xapdatefield[name=endTime]').rawValue;
         /*var owner = this.getOwner().ownerCt.ownerCt;// 从新建病历进来关闭此页面
        if (owner == null || owner == undefined) {
            this.getOwner().ownerCt.close();// 从病历属性进来关闭此页面
        } else {
            owner.close();
        }*/
        var date = {},errorText;
        var msgInfo = view.down('xapdisplayfield[name=msgInfo]');
        date.beginTime = beginTime;
        date.endTime = endTime;
        var cookie = new Ext.state.CookieProvider();  
 		Ext.state.Manager.setProvider(cookie);  
		var DoctorAndEncounterSn = IMER_GLOBAL.user.code+IMER_GLOBAL.encounterSn;
		var beginDate,endDate;
		beginDate = new Date(beginTime);
		endDate = new Date(endTime);
		cookie.set(DoctorAndEncounterSn,date);
        var chain = sourceView.getActionChain('search');
        if((endDate.getTime()-beginDate.getTime())>=0){
        	endDate.setDate(endDate.getDate()-30);
        	if((endDate.getTime()-beginDate.getTime())<0){
        		view.close();
        		if(chain) {
                	chain.execute({date:date});
                }
        	}else{
        		errorText = '时间间隔不能超过30天！';
          		msgInfo.setValue('<font color=red>' + errorText + '</font>');
          		return;
        	}
        }else{
        	errorText = '开始时间不能大于结束时间！';
      		msgInfo.setValue('<font color=red>' + errorText + '</font>');
      		return;
        }
    }/*,

    prepareOperations: function(operations) {
        var url = this.url+"?enPk=723551&acquisitionStartTime=2010-02-19 21:05:10.630&acquisitionStopTime=2020-02-19 21:05:10.630";
        alert(url);
        //this.url+'?encounterSn=838535&currentPageIndex=1&acquisitionStartTime=2012-01-01%2000:00:00&acquisitionStopTime=2040-01-01%2023:59:59&pageSize=2&xmode=debug';
        var METHODS = this.getInvocationMethods();
    	var operation = {
            url: url,
    		mclass: null,
    		method: METHODS.METHOD_GET,
    		condition: null,
    		scope: this,
    		success: this.onSuccess,
            fail: this.onFail
    	};
    	operations.push(operation);
    },
    onSuccess: function(operation) {
    	alert("onSuccess");
        var block = this.getBlock('result');
        var m = operation.result;
        // TODO 数据格式就这样了？
        if(m instanceof Ext.data.Model) {
            block.setData({
                mclass: operation.mclass,
                data: m.getData(true)
            });
        } else {
            block.setData(m);
        }
    },
    onFail: function(operation) {
        alert("保存失败!");
    }*/
});
Ext.define('iih.po.assistant.view.VitalSignHelperSearchView', {
	extend :  Xap.ej.template.BaseTemplate ,

	           
		                                                    
		                                                            
		                                                     
		                                                    
	  

	alias:'widget.VitalSignHelperSearchView',

	xapConfig: {
		blocks: {
			'content': {
				xclass: 'iih.po.assistant.block.VitalSignHelperSearchBlock'
			}
        },
		actions: {
			'search': {
				xclass: 'iih.po.assistant.action.VitalSignSearchWindowSearchAction',
				url: 'acquisitionList',
				blocks: {
					result: 'content'
				}
			},
			'init': {
				xclass: 'iih.po.assistant.action.VitalSignSearchInitAction',
				blocks: {
					result: 'content'
				}
			},			
			'cancel': {
				xclass: 'iih.po.assistant.action.VitalSignSearchCancelAction',
				blocks: {
					result: 'content'
				}
			}
			
		},

		chains: {
			'search': ['search'],
			'cancel':['cancel'],
			'init':['init']
		},

		connections: {
			'content': [/*{
				event: 'afterrender',
				chain: 'init'
			},*/{
				selector: 'button[method=Search]',
                event: 'click',
				chain: 'search'
			},
			{
				selector: 'button[method=Cancel]',
                event: 'click',
				chain: 'cancel'
			}]
		}
	}
});

Ext.define('iih.po.assistant.action.VitalSignSearchWindowPopupAction', {
	extend:  Xap.ej.action.PopAction ,
	
	                                                              
	/*
	* @Override
	*/
	execute: function(context) {
	   //新建模板
        var config = {         
            modal: true,            
            height: 180,
            width: 420,
            title :'生命体征查询',
            contentConfig: {
            	//新建模板页面
                xtype: 'VitalSignHelperSearchView',
                initChain: {
                    name: 'init',
                    context: {
                        customerData: 'new',
                        sourceView: this.getOwner()
                    }
                }
            }
        };
        this.callParent([config]);    
    }
})


Ext.define('iih.po.assistant.block.DiagnosisHelperBlock',{
    extend :  Xap.ej.block.Block ,

                                                          

    alias:'widget.diagnosishelperblock',

    layout: 'fit',
    border: false,

    items: [{
        title: '',
		xtype: 'xapgrid',
		name: 'diagnosisHelperBlock',
		checkboxShow : true,
		showHeaderCheckbox:true,
		mode: 'SIMPLE',
		sortableColumns : false,
//        autoScroll:true,
        //height:250,
        CM_JR_Record : [
        	{header : '诊断类型',dataIndex : 'diTpNm',width:120},
        	{header : '诊断名称',dataIndex : 'diNm',width:220},
        	{header : '诊断编码',dataIndex : 'diCd',width:120},
        	{header : '诊断描述',dataIndex : 'addInfo',flex:1},
        	{header : '诊断日期',dataIndex : 'diTime',xtype: 'xapdatecolumn',width:150},
        	{header : '治疗结果编码',dataIndex : 'trtRstCd',width:150},
        	{header : '诊断类型编码',dataIndex : 'diTpCd',hidden:true,}
    	]
    }],
    
    setData: function(data) {
		var grid = this.down('xapgrid');
		if(grid)
		    grid.setData(data);
	},
    getData: function() {
        return null;
    }
});
Ext.define('iih.po.assistant.block.LabReportLeftListBlock',{
	extend :  Xap.ej.block.FormBlock ,

	           
		                                          
		                                 
	  

	alias:'widget.labreportleftlistblock',

	layout: 'fit',
	
	border: false,

	items: [{
		title: '',
		xtype: 'xapgrid',
		name: 'labReportLeftList',
		CM_JR_Record: [
			   {header: '报告时间',xtype:'xapdatecolumn',dataIndex: 'rlsTime',field: 'textfield',type: 'string',width:120},
               {header: '报告名称',dataIndex: 'labRpNm',field: 'textfield',type: 'string',width:200},
               {header: '报告医师',dataIndex: 'execDctNm',field: 'textfield',type: 'string',width:120},
               {header: '报告状态',dataIndex: 'labRpStaNm',field: 'textfield',type: 'string',width:100},
               {header: '报告单号',dataIndex: 'labRpNo',field: 'textfield',type: 'string',width:100},
               {header: '检查时间',xtype:'xapdatecolumn',dataIndex: 'execTime',field: 'textfield',type: 'string',width:120},
               {header: '申请医师',dataIndex: 'rqsDctNm',field: 'textfield',type: 'string',width:120},
               {header: '申请时间',xtype:'xapdatecolumn',dataIndex: 'rqsTime',field: 'textfield',type: 'string',width:120},
               {header: '编号',dataIndex: 'labRpPk',field: 'textfield',type: 'string',hidden:true}
		  ]
	}],

	setData: function(data) {
		var grid = this.down('xapgrid');
		grid.setData(data);
	},
    getData: function() {
        return null;
    }
})
Ext.define('iih.po.assistant.block.LabReportRightListBlock',{
	extend :  Xap.ej.block.FormBlock ,

	           
		                                         
	  

	alias:'widget.labreportrightlistblock',

	layout: 'fit',
	
	border: false,

	items: [{
		title: '',
		xtype: 'xapgrid',
		checkboxShow:true,
		showHeaderCheckbox:true,
        autoScroll:true,
        mode: "multi",
		CM_JR_Record: [
               {header: '项目名称',dataIndex: 'labItmNm',field: 'textfield',type: 'string',width:200},
               {header: '标识',dataIndex: 'labItmCompare',field: 'textfield',type: 'string',width:30},
               {header: '结果值',dataIndex: 'labItmVal',field: 'textfield',type: 'string',width:150},
               {header: '单位',dataIndex: 'labItmUnitNm',field: 'textfield',type: 'string',width:50},
               {header: '参考范围',dataIndex: 'referRange',field: 'textfield',type: 'string',width:150},
               {header: '备注',dataIndex: 'memo',field: 'textfield',type: 'string',flex:1},
               {header: 'Id',dataIndex: 'mrLabRpItmPk',hidden:true},
               {header: 'maxNrmlVal',dataIndex: 'maxNrmlVal',hidden:true},
               {header: 'minNrmlVal',dataIndex: 'minNrmlVal',hidden:true}
		 ]
	}],

	setData: function(data) {
		var grid = this.down('xapgrid');
		grid.setData(data);
	},
    getData: function() {
        return null;
    }
})
Ext.define('iih.po.assistant.block.MrDocHelperTreeBlock',{
	extend :  Xap.ej.block.PanelBlock ,
	
	           
	                                      
	                                          
	  
	alias:'widget.mrdochelpertreeblock',

	layout: 'fit',
    
	items: [{
		xtype:'xaptree',
		border:false,
		autoScroll:true,
		height:245,
		rootVisible: false
	}],
	
    setData: function(data) {
	    var tree = this.down('xaptree');
	    var myobj=eval(data);  
	    tree.setData(myobj);
	},
    getData: function() {
        return null;
    }
    
})
Ext.define('iih.po.assistant.block.MrKnowledgeBlock',{
	extend :  Xap.ej.block.FormBlock ,

	                                      
	                                           
	                                                 
	           
	alias:'widget.MrKnowledgeBlock',
	
	header:false,
	    
	items:[{		 
    	xtype:'panel',
    	tbar:[/*{
	    	xtype: 'xapcheckboxgroup',
			method:'checkFlag',
			width:100,
			vertical: true,
			items: [
				{ boxLabel: '个人', name: 'ownerTypeCd', inputValue: 'MDM12.03',checked: true},
				{ boxLabel: '科室', name: 'ownerTypeCd', inputValue: 'MDM12.02'}
			]
	    }*/{
		        xtype: 'xapcheckbox',
		        padding:'0 0 0 5',
		        name:'personal',
		        vertical: true,
		        boxLabel: '个人', 
		        inputValue: 'MDM12.03',
		        checked:true
		    },{
		        xtype: 'xapcheckbox',
		        padding:'0 0 0 5',
		        name:'dept',
		        vertical: true,
		        boxLabel: '科室',
		        inputValue: 'MDM12.02'
		    },{           
	            xtype: "xaptrigger",
	            name: 'fragmentTplNm',
                triggerBaseCls :'x-text-trigger', 
	            width:140,
	            margin: '0 2 0 2',
	            emptyText: "输入名称按回车检索"    
		    }	
    	],
		items:[{
           xtype:'xapgrid',
           name:'knoeledgeteGrid',
           height:240,
           ifSelect : true,
           selectBy: 'fragmentTplCd',
           CM_JR_Record: [
               {header: '个人知识库编码',dataIndex: 'fragmentTplCd',hidden:true},
               {header: '类别id',dataIndex: 'fragmentTplTypeCd',hidden:true},
               {header: '类别',dataIndex: 'fragmentTplTypeNm',field: 'textfield',type: 'string',width:60},
               {header: '名称',dataIndex: 'fragmentTplNm',field: 'textfield',type: 'string',width:115},
               {dataIndex: 'fragmentTplContent',hidden:true},
               {header: '所属',dataIndex: 'ownerTypeCd',field: 'textfield',type: 'string',width:80}
			]
       }]
	}],   
	
	setData: function(data) {	
		var grid = this.down('xapgrid');
	    grid.setData(data);
	}    
})
Ext.define('iih.po.assistant.block.ObservationLeftListBlock',{
	extend :  Xap.ej.block.FormBlock ,

	           
		                                         
	  

	alias:'widget.observationleftlistblock',

	layout: 'fit',
	
	border: false,

	items: [{
		title: '',
		xtype: 'xapgrid',
		name: 'observationLeftList',
		CM_JR_Record: [
			   {header: '报告时间',xtype:'xapdatecolumn',dataIndex: 'rlsTime',field: 'textfield',type: 'string',width:120},
               {header: '报告名称',dataIndex: 'obRpNm',field: 'textfield',type: 'string',width:200},
               {header: '报告医师',dataIndex: 'rlsUserNm',field: 'textfield',type: 'string',width:120},
               {header: '报告状态',dataIndex: 'obRpStaNm',field: 'textfield',type: 'string',width:100},
               {header: '报告单号',dataIndex: 'obRpNo',field: 'textfield',type: 'string',width:100},
               {header: '检查时间',xtype:'xapdatecolumn',dataIndex: 'execTime',field: 'textfield',type: 'string',width:120},
               {header: '申请医师',dataIndex: 'rqsDctNm',field: 'textfield',type: 'string',width:120},
               {header: '申请时间',xtype:'xapdatecolumn',dataIndex: 'rqsTime',field: 'textfield',type: 'string',width:120},
               {header: '检查印象',dataIndex: 'obImpr',field: 'textfield',type: 'string',hidden:true},
               {header: '测量结果',dataIndex: 'obVal',field: 'textfield',type: 'string',hidden:true},
               {header: '检查所见',dataIndex: 'obFndg',field: 'textfield',type: 'string',hidden:true},
               {header: '检查诊断',dataIndex: 'obDi',field: 'textfield',type: 'string',hidden:true},
               {header: '建议',dataIndex: 'adv',field: 'textfield',type: 'string',hidden:true}
          ]
	}],

	setData: function(data) {
		var grid = this.down('xapgrid');
		grid.setData(data);
	},
    getData: function() {
        return null;
    }
})
Ext.define('iih.po.assistant.block.ObservationRightBlock',{
	extend :  Xap.ej.block.FormBlock ,

	           
		                               
	  

	alias:'widget.observationrightblock',

	layout:{
		type: 'vbox',
        align: 'stretch',
	},
	
	autoScroll : true,
	
	//margin: '5 5 5 0',

	items: [{
			xtype: 'xaptextarea',
			name: 'obImpr',
			labelWidth:80,
			labelAlign:'right',
			fieldLabel:'检查结果',
			readOnly:true,
			margin:'5 15 0 0',
			rows:10,
			listeners:{
				focus : function(area, The, eOpts) {
					var center = this.up('observationrightblock');
					if(center.selectedCmp){
						center.selectedCmp.setFieldStyle({'background-image': 'url("images/form/text-bg.gif")','background-color': 'white'});
						center.selectedCmp=null;
					}
					area.setFieldStyle({'background-image': 'none','background-color': '#D9D9D9'});
					center.selectedCmp = area;
                }
            }
		}/*,{
			xtype: 'xaptextarea',
			name: 'obVal',
			labelWidth:80,
			labelAlign:'right',
			fieldLabel:'测量结果',
			readOnly:true,
			margin:'0 15 0 0',
			rows:3,
			listeners:{
				focus : function(area, The, eOpts) {
					var center = this.up('observationrightblock');
					if(center.selectedCmp){
						center.selectedCmp.setFieldStyle({'background-image': 'url("images/form/text-bg.gif")','background-color': 'white'});
						center.selectedCmp=null;
					}
					area.setFieldStyle({'background-image': 'none','background-color': '#D9D9D9'});
					center.selectedCmp = area;
                }
            }
		},{
			xtype: 'xaptextarea',
			name: 'obFndg',
			labelWidth:80,
			labelAlign:'right',
			fieldLabel:'检查所见',
			readOnly:true,
			margin:'0 15 0 0',
			rows:3,
			listeners:{
				focus : function(area, The, eOpts) {
					var center = this.up('observationrightblock');
					if(center.selectedCmp){
						center.selectedCmp.setFieldStyle({'background-image': 'url("images/form/text-bg.gif")','background-color': 'white'});
						center.selectedCmp=null;
					}
					area.setFieldStyle({'background-image': 'none','background-color': '#D9D9D9'});
					center.selectedCmp = area;
                }
            }
		},{
			xtype: 'xaptextarea',
			name: 'obDi',
			labelWidth:80,
			labelAlign:'right',
			fieldLabel:'检查诊断',
			readOnly:true,
			margin:'0 15 0 0',
			rows:3,
			listeners:{
				focus : function(area, The, eOpts) {
					var center = this.up('observationrightblock');
					if(center.selectedCmp){
						center.selectedCmp.setFieldStyle({'background-image': 'url("images/form/text-bg.gif")','background-color': 'white'});
						center.selectedCmp=null;
					}
					area.setFieldStyle({'background-image': 'none','background-color': '#D9D9D9'});
					center.selectedCmp = area;
                }
            }
		},{
			xtype: 'xaptextarea',
			name: 'adv',
			labelWidth:80,
			labelAlign:'right',
			fieldLabel:'建议',
			margin:'0 15 0 0',
			readOnly:true,
			rows:3,
			listeners:{
				focus : function(area, The, eOpts) {
					var center = this.up('observationrightblock');
					if(center.selectedCmp){
						center.selectedCmp.setFieldStyle({'background-image': 'url("images/form/text-bg.gif")','background-color': 'white'});
						center.selectedCmp=null;
					}
					area.setFieldStyle({'background-image': 'none','background-color': '#D9D9D9'});
					center.selectedCmp = area;
                }
            }
		}*/],

	setData: function(data) {
	    this.callParent(arguments);
	},
    getData: function() {
        this.callParent(arguments);
    }
})
Ext.define('iih.po.assistant.block.OrderListBlock',{
	extend :  Xap.ej.block.Block ,

	           
		                                         
	  

	alias:'widget.orderlistblock',

	layout: 'fit',
   
	items: [{
		title: '',
		xtype: 'xapgrid',
		checkboxShow : true,
		showHeaderCheckbox:true,
		sortableColumns : false,
		tbar:[{
	        xtype: 'xapcheckboxgroup',
	        margin:'5 10 0 5',
	        name:'longterm',
	        align:'left',
	        vertical: true,
	        items: [
	            { boxLabel: '长期', name: 'longterm', inputValue: 'order1' ,checked:true}
	        ]
	    },{
	        xtype: 'xapcheckboxgroup',
	        margin:'5 10 0 5',
	        name:'temporary',
	        vertical: true,
	        align:'left',
	        items: [
	            { boxLabel: '临时', name: 'temporary', inputValue: 'order2',checked:true}
	        ]
	    }],
		//simple点击行起作用，multi点击checkbox起作用
		mode: 'SIMPLE',
		CM_JR_Record: [
			   {header: '长/临',dataIndex: 'longOrNm',field: 'textfield',type: 'string',width:60},
               {header: '组',dataIndex: 'groupFlag',field: 'textfield',type: 'string',width:30},
               {header: '类型',dataIndex: 'orTpNm',field: 'textfield',type: 'string',width:80},
               {header: '医嘱',dataIndex: 'svNm',field: 'textfield',type: 'string',width:250},
               {header: '剂量',dataIndex: 'dosage',field: 'textfield',type: 'string',width:80},
               {header: '频率',dataIndex: 'freqNm',field: 'textfield',type: 'string',width:80},
               {header: '天数',dataIndex: 'persistDays',field: 'textfield',type: 'string',width:40},
               {header: '用法',dataIndex: 'routeNm',field: 'textfield',type: 'string',width:80},
               {header: '开始时间',dataIndex: 'orStdTime',field: 'textfield',xtype:'xapdatecolumn',width:150},
               {header: '结束时间',dataIndex: 'orStpTime',field: 'textfield',xtype:'xapdatecolumn',width:150},
               {header: '医嘱状态',dataIndex: 'orStaNm',field: 'textfield',type: 'string',width:80},
               {header: '嘱托',dataIndex: 'orNoteNm',field: 'textfield',type: 'string',flex:1}
               //{hidden: 'parOrPk',dataIndex: 'parOrPk',field: 'textfield',type: false,width:30}
		  ]
	}],

	setData: function(data) {
		var grid = this.down('xapgrid');
		grid.setData(data);
	},
    getData: function() {
        return null;
    }
})
Ext.define('iih.po.assistant.block.PersonKnowledgePropertyBlock',{
	extend :  Xap.ej.block.FormBlock ,

	           
                                        
                                    
	  

	alias:'widget.personknowledgepropertyblock',

	layout:'vbox',
	border:0,
	
	items: [{
        xtype: 'xaplabel',
        text: '个人知识库内容:',
        width : 130,
        padding: '8 10 8 10'
    },{
		xtype: 'xaptextarea',
		readOnly:true,
		name:'fragmentTplContent',
		padding: '0 10 8 10',
		width:925,
		height : 207
	}],
	buttons:[{
        xtype: "button",
        name: 'create',
        method:'create',
        text: '新建'
    },{
        xtype: "button",
        name: 'delete',
        method:'delete',
        text: '删除'
    },{
        xtype: "button",
        name: 'edit',
        method:'edit',
        text: '编辑'    
    }],  
	setData: function(data) {
	    this.callParent(arguments);
	}
})
Ext.define('iih.po.assistant.block.TodoListBlock',{
    extend :  Xap.ej.block.Block ,

                
                                   
                                                  
                                          
                                           
      
    
    alias : 'widget.todolistblock',
    
    layout: 'fit',
    
    items:  [{
        xtype:'xapgrid',
        overflowX:'auto',
        plugins: [
          Ext.create('Ext.grid.plugin.CellEditing', {
              clicksToEdit: 1
          })
        ],
        CM_JR_Record: [
          {xtype:'xapactioncolumn',
                text:'操作',
                layout: {
                    type: 'hbox',
                    align: 'middle'
                },
                width:60,
                defectStore: null,
                items: [
                    {
                        text:'完成',
                        getClass : function(v,m,record) {
                            if(record.data.taskStaCd==IMER_CONSTANT.TASK_STATUS_CD_3){
                                return 'x-hidden';
                            }                           
                        },
                        handler: function(view,rowIndex,colIndex,e,item ,record) {
                            var taskView = view.up('todolistview');
                            var chain = taskView.getActionChain('complete');
                            chain.execute({
                                data:record.data
                            });
                        }   
                    }
                ]
            },
            {dataIndex:'taskPk',hidden:true},
            {dataIndex:'qaFltPk',hidden:true},
            {header:'任务/问题描述',dataIndex:'des',width:150},
            {dataIndex:'segTpCd',hidden:true},
            {header:'段落名称',dataIndex:'segTpNm',width:90},
            {dataIndex:'taskStaCd',hidden:true},
            {header:'任务状态',dataIndex:'taskStaNm',width:80},
            {dataIndex:'fltFromCd',hidden:true},
            {header:'业务活动',dataIndex:'fltFromNm',width:80},
            {dataIndex:'sbmtDeptCd',hidden:true},
            {header:'提出科室',dataIndex:'sbmtDeptNm',width:100},
            {dataIndex:'sbmtUserId',hidden:true},
            {header:'提出人',dataIndex:'sbmtUserNm',width:80},
            {header:'提出时间',dataIndex:'sbmtTime',xtype:'xapdatecolumn',width:100},
            {header:'截止时间',dataIndex:'deadline',xtype:'xapdatecolumn',width:100},
            {header:'整改要求',dataIndex:'rfmReq',width:150},
            {header:'整改说明',dataIndex:'rfmDes',width:180,
                editor: new Ext.form.TextField({
                    allowBlank: false,
                    listeners: {
                        focus:function(me){
                            me.up('xapgrid').fireEvent('textfieldfocus');
                        },
                        blur: function(me){
                            me.up('xapgrid').fireEvent('textfieldblur', me.value);
                        }
                    }
                })  
            }
        ]
    }],

    setData: function(data) {
        var grid = this.down('xapgrid');
        if(data)
            grid.setData(data);
        else
            grid.setData({});
    }
});

Ext.define('iih.po.assistant.block.VitalSignHelperBlock',{
    extend :  Xap.ej.block.Block ,

                                           
    alias:'widget.vitalsignhelperblock',

    layout: 'fit',

    items: [{
        xtype: 'xapgrid',
		checkboxShow:true,
        autoScroll:true,
        mode: "multi",
        //mode: "simple",
        showHeaderCheckbox:true,
        CM_JR_Record : [
            {header : '采集时间',dataIndex : 'acquisitionDate',/*hidden:true,*/field : 'textfield',type : 'string',flex : 1/*,hidden:true*/},
        	{header : '体温(℃)',dataIndex : 'temper',field : 'textfield',type : 'string',flex : 1},
        	{header : '脉搏(次/分)',dataIndex : 'pulse',field : 'textfield',type : 'string',flex : 2},
        	{header : '呼吸(次/分)',dataIndex : 'breathe',field : 'textfield',type : 'string',flex : 1},
        	{header : '收缩压(mmHg)',dataIndex : 'systolicPress',field : 'textfield',type : 'string',flex : 2},
        	{header : '舒张压(mmHg)',dataIndex : 'diastolicPress',field : 'textfield',type : 'string',flex : 1},
    	]/*,
    	gridData:{
			'results':[
				{ 'acquisitionDate': '系统管理员', "bodyTemperature":"20(℃)",'pulse':"20" ,'breathe':"30",'systolicPressure':"150",'diagstolicPressure':"200"}
			]
        }*/
    }],
    setData : function(data) {
        var grid = this.down('xapgrid');
        if(data.dataList!=null)
        {
	        for(var i=0;i<data.dataList.length;i++)
	        {
	        	tmpString = data.dataList[i].acquisitionDate;
	        	var newacquisitionDate ="";
	        	
	        	if(tmpString!=null&&tmpString!="")
	        	{
	        		newacquisitionDate = tmpString.substring(0,16);//取值到分钟
	        	}
	        	data.dataList[i].acquisitionDate = newacquisitionDate;
	        }
        }
        grid.setData(data.dataList);
        //alert("blocksetdata")
    }
});
Ext.define('iih.po.assistant.view.DiagnosisHelperView', {
	extend :  Xap.ej.template.BaseTemplate ,
	
	alias:'widget.diagnosishelperview',

	          
		                                              
		                                                   
	  
	
	layout:'fit',

	xapConfig: {
		blocks: {
			'list': {
				xclass: 'iih.po.assistant.block.DiagnosisHelperBlock'
			}
		},
		actions: {
			'refresh': {
				xclass: 'iih.po.assistant.action.DiagnosisHelperInitAction',
				url: 'ei/diagnosises',
				blocks: {
					result: 'list'
				}
			}
		},

		chains: {
			'refresh': ['refresh']
		},

		connections: {
			'list': [/*{
				event: 'afterrender',
				chain: 'refresh'
			}*/]
		}
	},
	initComponent : function() {
		this.callParent();
		this.addEvents("changeEncounter");//为视图添加刷新事件
        this.addListener('changeEncounter', function(enPk){//添加监听事件
            var chainTree = this.getActionChain('refresh');
	        if(chainTree) {
	            chainTree.execute({
	            	enPk:enPk
	            });
	        }
        });
        this.addEvents("writeMrDoc");// 为视图添加事件
		this.addListener('writeMrDoc', function() {// 添加监听事件
			// 写回病历
			var hisDocPlugin = document.getElementById('iemrEditor');
			var block = this.down('diagnosishelperblock');
			if( hisDocPlugin != null &&  block != null){
			  if(!hisDocPlugin.IsReadOnly()){
				  var grid = block.down('xapgrid');
			      var selModel = grid.getSelectionModel();
			      var tmp ="";
			      var  isNotSelectedFirstRecord = false ;
			      for(var j =0 ; j< grid.store.data.length ;j++){

			    	  if(selModel.isSelected(j))
			    		  {
					    	  if(isNotSelectedFirstRecord){
					    		  tmp = tmp + "，";
					    	  }
					    	  tmp = tmp + grid.store.data.items[j].raw.longDiNm ;
					    	  isNotSelectedFirstRecord = true ;
			    		  }
		          }
			      //var rb = grid.getSelectionModel().getSelection(); 
			      hisDocPlugin.InsertText(tmp);
			    }else{
				   
			    }
		    }
		});
	}
})
/**
 * @author tian_yuyan<tian_yuyan@founder.com>
 * @docauthor tian_yuyan<tian_yuyan@founder.com>
 * 该模板是border布局的容器模板。
 */
Ext.define('Xap.ej.stl.view.BorderTemplate', {
	extend :  Xap.ej.template.BaseTemplate ,

	            
		                                  
	  

	alias : 'widget.xapbordertemplate',

	border : 0,

	layout: 'border', 
	
	defaultXapConfig: {
		blocks: {	
			/*
			 * south,east,north,南,东,北三种布局默认不加到模板中，
			 * 如果有需要，需要在实现中自己实现
			/*'south': {				
				region:'south', 
				height:0
			},*/
			//west布局，默认宽度为250可自行修改
			'west': {
				xclass: 'Xap.ej.element.panel.Panel',
				header:false,
				region:'west',
				split: true,
				collapsible: true, 
				width:250
			},
			//center布局，必须存在,否则extjs4后会报错
			'center': {
				xclass: 'Xap.ej.element.panel.Panel',				
				region: 'center', 
				margins: '0 5 0 0', 
				flex:1
			}
		}
	},

	initBlock : function() {
		this.callParent();
	},

	doCheckXapConfig: function() {
		// TODO 必须包括的Action等等...
	},
	
	//getWestBlock,getCenterBlock,默认提供拿到'west'和'center'的block方法
	getWestBlock : function() {
		return this.getBlock('west');
	},
	
	getCenterBlock : function() {
		return this.getBlock('center');
	}
});

/**
 * 功能名称：智能助手-检验报告 author：liulei
 */
Ext.define('iih.po.assistant.view.LabReportView', {
	extend :  Xap.ej.stl.view.BorderTemplate ,

	requires : [],

	alias : 'widget.labreportview',

	xapConfig : {
		blocks : {
			'west' : {
				xclass : 'iih.po.assistant.block.LabReportLeftListBlock',
				header : false,
				width : 320
			},
			'center' : {
				xclass : 'iih.po.assistant.block.LabReportRightListBlock',
				flex : 1
			}
		},
		actions : {
			'west' : {
				xclass : 'iih.po.assistant.action.LabReportLeftListAction',
				url : 'ei/lab/reports',
				blocks : {
					west : 'west'
				}
			},
			'center' : {
				xclass : 'iih.po.assistant.action.LabReportRightListAction',
				url : 'ei/lab/report/items',
				blocks : {
					center : 'center',
					west : 'west'
				}
			}
		},

		chains : {
			'west' : [ 'west' ],
			'center' : [ 'center' ]
		},

		connections : {
			'west' : [{// 加载数据
				event : 'afterrender',
				chain : 'west'
			}, {// 加载数据
				selector : 'xapgrid[name=labReportLeftList]',
				event : 'cellclick',
				chain : 'center'
			} ]
		}
	},
	initComponent : function() {
		this.callParent();
		this.addEvents("writeMrDoc");// 为视图添加事件
		this.addListener('writeMrDoc', function() {// 添加监听事件
			// 写回病历
			var hisDocPlugin = document.getElementById('iemrEditor');
			var block = this.down('labreportrightlistblock');
			var grid = block.down('xapgrid');
			var selModel = grid.getSelectionModel();
			var records = selModel.getSelection();
			
			var tmp = "",item;
			for ( var j = 0; j < records.length; j++) {
				tmp = tmp + records[j].get('labItmNm')+"  ";
				tmp = tmp + records[j].get('labItmVal');
				item = records[j].get('labItmCompare');
				tmp = tmp + records[j].get('labItmUnitNm');
				/*if(!Ext.isEmpty(item,false)){
					if(item!='-'){
						if(item.indexOf('↓')!=-1){
							tmp = tmp + ' ↓';
						}else if(item.indexOf('↑')!=-1){
							tmp = tmp + ' ↑';
						}
						
					}
				}*/
				if(j<(records.length-1)){
					tmp = tmp + " ，";
				};
			}
			if (!Ext.isEmpty(tmp, false)) {
				hisDocPlugin.InsertText(tmp);
			}else{
				var message = '请先选记录再进行写回！';
	            XapMessageBox.info(message);
			}
		});
		//增加就诊切换的查询
		this.addEvents("changeEncounter");//为视图添加刷新事件
        this.addListener('changeEncounter', function(enPk){//添加监听事件
            //查询action
        	var chain = this.getActionChain('west');
        	chain.execute({
        		'enPk':enPk
        	});
        });
	}

})
/**
 * @author dan_zhang
 * @docauthor dan_zhang
 * 该模板是可以手动改变大小的模板。
 */
Ext.define('Xap.ej.stl.view.LeftRightSplitTemplate', {
	extend :  Xap.ej.template.BaseTemplate ,

	            
		                                  
	  

	alias : 'widget.xapleftrightsplittemplate',

	border : 0,

	layout: 'border', 
	
	defaultXapConfig: {
		blocks: {	
			//west布局，默认宽度为100可自行修改
			'left': {
				xclass: 'Xap.ej.element.panel.Panel',
				header:false,
				region:'west',
				split: true,
				collapsible: true
			},
			//center布局，必须存在,否则extjs4后会报错
			'right': {
				xclass: 'Xap.ej.element.panel.Panel',				
				region: 'center'
			}
		}
	},

	initBlock : function() {
		this.callParent();
	},

	doCheckXapConfig: function() {
		// TODO 必须包括的Action等等...
	},
	
	//getWestBlock,getCenterBlock,默认提供拿到'west'和'center'的block方法
	getWestBlock : function() {
		return this.getBlock('west');
	},
	
	getCenterBlock : function() {
		return this.getBlock('center');
	}
});

Ext.define('iih.po.assistant.view.MrDocHelperView', {
	extend:  Xap.ej.stl.view.LeftRightSplitTemplate ,

	           
	                                                  
		                                  
		                                                   
	  

	alias:'widget.mrdochelperview',

	xapConfig: {
		blocks: {
			'left': {
				xclass: 'iih.po.assistant.block.MrDocHelperTreeBlock',
				width: 220
            },
			'right': {
				xclass: 'iih.mr.wr.mr.view.MrDocEditView'
			}
		},
		
		actions: {
			'refresh': {
				xclass: 'iih.po.assistant.action.MrDocHelperTreeInitAction',
				url: 'mr_doc_tree/mrs',
				blocks: {
					result: 'left'
				}
			},
            'treeNodeChange': {
                xclass: 'iih.po.assistant.action.MrDocTreeNodeChangeAction',
                blocks: {
                    result: 'left'
                }
            }
		},

		chains: {
			'refresh': ['refresh'],
			'treeNodeChange': ['treeNodeChange']
		},

		connections: {
			'left': [/*{
				event: 'afterrender',
				chain: 'refresh'
			},*/{
                selector: 'xaptree',
                event: 'itemclick',
                chain: 'treeNodeChange'
		    }]
		}
     },initComponent : function() {
		this.callParent();
		this.addEvents("writeMrDoc");//为视图添加事件
		this.addListener('writeMrDoc', function() {//添加监听事件
			//写回病历
			var plugin = document.getElementById('iemrEditor');
			var iemrEditorRead = document.getElementById('iemrEditorRead');
			if(plugin!=null&&iemrEditorRead!=null)
			{
				if(!plugin.IsReadOnly()){
					if(iemrEditorRead.HasSelection(0)){
						iemrEditorRead.OfficeCopy();
						plugin.OfficePaste();
					}
				}
			}
		});
		this.addEvents("changeEncounter");//为视图添加刷新事件
        this.addListener('changeEncounter', function(enPk){//添加监听事件
        	var chainTree = this.getActionChain('refresh');
	        if(chainTree) {
	            chainTree.execute({
	            	enPk:enPk
	            });
	        }
        });
	}
});
/**
 * 功能名称：智能助手-检查报告 author：liulei
 */
Ext.define('iih.po.assistant.view.ObservationReportView', {
	extend :  Xap.ej.stl.view.BorderTemplate ,

	             
	                                                                 
	                                                              
  	                                                                       
	               

	alias : 'widget.observationreportview',

	xapConfig : {
		blocks : {
			'west' : {
				xclass : 'iih.po.assistant.block.ObservationLeftListBlock',
				header : false,
				width : 320
			},
			'center' : {
				xclass : 'iih.po.assistant.block.ObservationRightBlock',
				flex : 1
			}
		},
		actions : {
			'west' : {
				xclass : 'iih.po.assistant.action.ObservationLeftListAction',
				url : 'ei/ob/reports',
				blocks : {
					west : 'west'
				}
			},
			'center' : {
				xclass : 'iih.po.assistant.action.ObservationRightAction',
				blocks : {
					center : 'center',
					west : 'west'
				}
			}/*,
			'handleText' : {
				xclass : 'iih.po.assistant.action.ObservationRightHandleTextAction',
				blocks : {
					center : 'center'
				}
			}*/
		},

		chains : {
			'west' : [ 'west' ],
			'center' : [ 'center' ]/*,
			'handleText' : [ 'handleText' ]*/
		},

		connections : {
			'west' : [ /*{// 加载数据
				event : 'afterrender',
				chain : 'west'
			},*/ {// 加载数据
				selector : 'xapgrid[name=observationLeftList]',
				event : 'cellclick',
				chain : 'center'
			} ]/*,
			'center' : [ {// 加载数据
				selector : 'xaptextarea',
				event : 'focus',
				chain : 'handleText'
			}]*/
		}
	},
	initComponent : function() {
		this.callParent();
		this.addEvents("writeMrDoc");// 为视图添加事件
		this.addListener('writeMrDoc', function() {// 添加监听事件
			// 写回病历
			var hisDocPlugin = document.getElementById('iemrEditor');
			var block = this.down('observationrightblock');
			var textArea = block.selectedCmp;
			var tmp;
			if(textArea!=undefined && !Ext.isEmpty(textArea, false)){
				tmp = textArea.value;
				if(!Ext.isEmpty(tmp, false)){
					hisDocPlugin.InsertText(tmp);
				}
			}else{
				var message = '请先选记录再进行写回！';
	            XapMessageBox.info(message);
			}
		});
		//增加就诊切换的查询
		this.addEvents("changeEncounter");//为视图添加刷新事件
        this.addListener('changeEncounter', function(enPk){//添加监听事件
            //查询action
        	var chain = this.getActionChain('west');
        	chain.execute({
        		'enPk':enPk
        	});
        });
	}

})
/**
 *   功能名称：智能助手-医嘱
 *   author：liulei
 */
Ext.define('iih.po.assistant.view.OrderListView', {
	extend:  Xap.ej.template.BaseTemplate ,

	           
	                                                         
	                                                           
	             

	alias:'widget.orderlistview',
	
	layout:'fit',

	xapConfig: {
		blocks: {
		    'orderlist': {
		    	xclass: 'iih.po.assistant.block.OrderListBlock'
            }
		},
		actions: {
			'init': {
				xclass: 'iih.po.assistant.action.OrderListInitAction',
				url:'orders',
				blocks:{
					orderlist: 'orderlist'
				}
			},
			'checkChange': {
				xclass: 'iih.po.assistant.action.OrderCheckchangeAction',
//				url:'orders',
				blocks:{
					orderlist: 'orderlist'
				}
			},
			'refreshOutpatientDisposal': {
				xclass: 'iih.po.assistant.action.RefreshOutpatientDisposalAction',
				url:'mr/tpl/outdisposal',
				blocks:{
					orderlist: 'orderlist'
				}
			},
			'refreshInpOrder': {
				xclass: 'iih.po.assistant.action.RefreshInpOrderAction',
				url:'param',
				blocks:{
					orderlist: 'orderlist'
				}
			}
		},

		chains: {
			'init':['init'],
			'refreshOutpatientDisposal':['refreshOutpatientDisposal'],
			'refreshInpOrder':['refreshInpOrder'],
			'checkChange':['checkChange']
		},

		connections: {
			'orderlist': [{
                selector: 'xapcheckboxgroup[name=longterm]',
                event: 'change',
                chain: 'checkChange'
            },{
                selector: 'xapcheckboxgroup[name=temporary]',
                event: 'change',
                chain: 'checkChange'
            }]
		}
	},	
	
	initComponent : function() {

		this.callParent();
		var me = this;
		 this.addEvents("writeMrDoc");//为视图添加事件
		 this.addListener('writeMrDoc', function() {//添加监听事件
		        //写回病历
			 var hisDocPlugin=document.getElementById('iemrEditor');
			 var block = this.getBlock('orderlist');
			  if( hisDocPlugin != null &&  block != null){
				  if(!hisDocPlugin.IsReadOnly()){
					  if('XAPM06.08'==IMER_GLOBAL.portal.code||'XAPM06.01'==IMER_GLOBAL.portal.code){
						  //门诊书写时医嘱需要特殊处理
						  var refreshOutpatientDisposal = this.getActionChain('refreshOutpatientDisposal');
						  refreshOutpatientDisposal.execute();
					  }else{
						  //住院书写时医嘱需要特殊处理
						  var refreshInpOrder = this.getActionChain('refreshInpOrder');
						  refreshInpOrder.execute();
						  /*
						  var grid = block.down('xapgrid');
					         var selModel = grid.getSelectionModel();
					         var records = selModel.getSelection();
					         console.log('---------------------------');
					         console.log(records);
							 var tmp ="";
				             for(var j=0; j<records.length;j++){
				            	   //tmp = tmp + records[j].get('longOrNm');
				            	   //tmp = tmp + records[j].get('groupFlag');
				            	   //tmp = tmp + records[j].get('orTpNm');
				            	    if(j>0){
				            	    	tmp = tmp +'，'
				            	    }
				            	   tmp = tmp+' ' + records[j].get('svNm');
				            	   tmp = tmp+' ' + records[j].get('dosage');
				            	   tmp = tmp +' '+ records[j].get('freqNm');
				            }
							 //var rb = grid.getSelectionModel().getSelection(); 
				             hisDocPlugin.InsertText(tmp);
				             */
					  }
				  }else{
					   //只读状态不响应
				  }
			    }
		    });
		 this.addEvents("changeEncounter");//为视图添加刷新事件
         this.addListener('changeEncounter', function(enPk){//添加监听事件
             //查询action
        	 var chain = me.getActionChain('init');
        	 chain.execute({
        	     'enPk':enPk
        	 });
         });

	}
})
Ext.define('iih.po.assistant.view.PersonKnowledgeView',{
	extend :  Xap.ej.stl.view.BorderTemplate ,

	                                                             
			                                                          
	
	alias:'widget.personknowledgeview',
	
	xapConfig: {
		blocks: {
			'west': {
				xclass: 'iih.po.assistant.block.MrKnowledgeBlock'						
			},
			'center':{
				xclass: 'iih.po.assistant.block.PersonKnowledgePropertyBlock'
			}
		},
		actions: {	
			'init': {
                xclass: 'iih.po.assistant.action.PersonKnoeledgeSearchAction',
				url: 'knowledges',
				blocks: {
				   result:'west'
				}           
			},
		    'select':{
                xclass:'iih.po.assistant.action.FragmentGridclickAction',
                url:'mr',
                blocks:{
                    west:'west',
				    center:'center'
                }
            },
		    'getSelect':{
                xclass:'iih.po.assistant.action.GetSelectFragmentTplAction',
                blocks:{
                    west:'west'
                }
            },
		    'delete':{
                xclass:'iih.po.assistant.action.DeleteFragmentTplAction',
                url:'knowledge',
                blocks:{
                    west:'west'
                }
            },
		    'edit':{
                xclass:'iih.po.assistant.action.CreateMrKnowledgeAction',
                blocks:{
                    west:'west'
                }
            },
            'checkChange':{
                xclass:'iih.po.assistant.action.FragmentCheckChangeAction'/*,
                blocks:{
                    west:'west'
                }*/
            },
            'enterPress':{
                xclass:'iih.mr.wr.mr.action.EnterPressAction',
                blocks:{
                    result:'condition'
                }
            }
            
		},
		chains: {	
			'init': ['init'],
			'select': ['select'],
			'delete': ['delete'],
			'getSelect': ['getSelect'],
			'edit': ['edit'],
			'checkChange': ['checkChange'],
			'enterPress':['enterPress']
		},

		connections: {
			'west': [/*{
				event: 'afterrender',
				chain: 'checkChange'//checkChange中有对复选框初始化的操作(初始化为至少选择一个)，然后调用init初始化
			},*/{
				selector: 'xapgrid',
                event: 'itemclick',
                chain: 'select'
            },{
                selector: 'xapcheckbox[name=personal]',
                event: 'change',
                chain: 'checkChange'
            },{
                selector: 'xapcheckbox[name=dept]',
                event: 'change',
                chain: 'checkChange'
            },{
                selector: 'xaptrigger[name=fragmentTplNm]',
                event: 'onTriggerClick',
                chain: 'init'
			},{
                selector: 'xaptrigger[name=fragmentTplNm]',
                event: 'specialkey',
                chain: 'enterPress'//回车键检索
            }],
			'center': [{
				selector: 'button[method=create]',
				event: 'click',
				chain: 'edit'//新建
			},{
				selector: 'button[method=delete]',
				event: 'click',
				chain: 'getSelect'//得到选择对象，后执行删除操作
			},{
				selector: 'button[method=edit]',
				event: 'click',
				chain: 'edit'//编辑
			}]		
		}
	},
   	initComponent : function() {
		this.callParent();
		var me = this;
		this.addEvents("writeMrDoc");//为视图添加事件
		this.addListener('writeMrDoc', function(){//添加监听事件
			//写回病历
			var hisDocPlugin=document.getElementById('iemrEditor');
			if(!hisDocPlugin.IsReadOnly()){
				var centerBlock = this.getBlock('center');
				var value = centerBlock.down('xaptextarea').value;
				var ta=centerBlock.down('xaptextarea').inputEl.dom;
				var s=ta.selectionStart;
				var e=ta.selectionEnd;
				var text=value.substring(s,e);
				var westBlock = this.getBlock('west');
				var grid = westBlock.down('xapgrid');
				var records = grid.getSelectionModel().getSelection();
				if(records.length>0||text.length>0||value.length>0){
					if(text.length>0){
						hisDocPlugin.InsertText(text);
					}else{
						hisDocPlugin.InsertText(value);
					}
				}else{
					XapMessageBox.info("请选择一条记录！");

//					Ext.Msg.alert("提示","请选择一条记录！");
				}
			}
		});
		this.addEvents("changeEncounter");//为视图添加刷新事件
        this.addListener('changeEncounter', function(enPk){//添加监听事件
            //查询action
            var chain = me.getActionChain('init');
            chain.execute({
                'enPk':enPk
            });
        });
	}
})
Ext.define('iih.po.assistant.view.TodoListView', {
    extend :  Xap.ej.template.BaseTemplate ,

    requires : [],

    alias : 'widget.todolistview',

    layout: 'fit',
    
    xapConfig : {
        blocks : {
            'content' : {
                xclass : 'iih.po.assistant.block.TodoListBlock'
            }
        },
        actions: {
            'search': {
                xclass: 'iih.po.assistant.action.TodoListRefreshAction',
                url: 'searchTask',
                blocks: {
                    content: 'content'
                }
            },
            'complete': {
                xclass: 'iih.po.assistant.action.CompleteTaskAction',
                url: 'completeTask',
                blocks: {
                    content: 'content'
                }
            }
        },
        chains: {
            'search': ['search'],
            'complete':['complete']
        },

        connections: {
            'content': [{
                event: 'afterrender',
                chain: 'search'
            }]
        }
    }
});
Ext.define('iih.po.assistant.view.VitalSignHelperView', {
	extend :  Xap.ej.template.BaseTemplate ,

	           
		                                              
		                                              
		                                                           
		                                               
	  
	
	alias:'widget.vitalsignhelperview',
	layout:'fit',
	
	xapConfig: {
		blocks: {
			'list': {
				xclass: 'iih.po.assistant.block.VitalSignHelperBlock'
			}
        },
		actions: {
			'refresh': {
				xclass: 'iih.po.assistant.action.VitalSignInitAction',
				url: 'nu/vitalsigns',
				blocks: {
					result: 'list'
				}
			},
			'searchwindowpopup': {
				xclass: 'iih.po.assistant.action.VitalSignSearchWindowPopupAction',
				blocks: {
					result: 'list'
				}
			},
			'search': {
				xclass: 'iih.po.assistant.action.VitalSignSearchAction',
				blocks: {
					result: 'list'
				}
			}
			
		},

		chains: {
			'refresh': ['refresh'],
			'search':['search'],
			'searchwindowpopup':['searchwindowpopup']
		},

		connections: {
			'list': [/*{
				event: 'afterrender',
				chain: 'refresh'
			},{
				selector: 'button[method=Search]',
                event: 'click',
				chain: 'searchwindowpopup'
			}*/]
			
		}
	},
	initComponent : function() {
		var me = this;
        this.callParent();
        this.addEvents("writeMrDoc");//为视图添加事件
	    this.addListener('writeMrDoc', function() {//添加监听事件
	        //写回病历
	        var block = this.getBlock('list');
	       	var grid = block.down('xapgrid');
	        var selModel = grid.getSelectionModel();
	       	var records = selModel.getSelection();
	   		if(records.length>0){
	   			var str="",acDate = [],bodyT = [],pulse = [],breathe = [],sysP = [],diaP = [];
	   			for(var i=0; i<records.length;i++){
	   				acDate[i] = records[i].get("acquisitionDate");
	   				bodyT[i] = records[i].get("temper");
	   				pulse[i]  = records[i].get("pulse");
	   				breathe[i] = records[i].get("breathe");
	   				sysP[i] = records[i].get("systolicPress");
	   				diaP[i] = records[i].get("diastolicPress");
	   			}
	   			for(var i=0; i<acDate.length;i++){
	   				for(var  j = 0 ;j < acDate.length - i - 1; j++){
	   					var temp1,temp2,temp3,temp4,temp5,temp6;
	   					if(acDate[j] > acDate[j+1]){
	   						temp1 = acDate[j];
	   						acDate[j] = acDate[j+1];
	   						acDate[j+1] = temp1;
	   						
	   						temp2 = bodyT[j];
	   						bodyT[j] = bodyT[j+1];
	   						bodyT[j+1] = temp2;
	   						
	   						temp3 = pulse[j];
	   						pulse[j] = pulse[j+1];
	   						pulse[j+1] = temp3;
	   						
	   						temp4 = breathe[j];
	   						breathe[j] = breathe[j+1];
	   						breathe[j+1] = temp4;
	   						
	   						temp5 = sysP[j];
	   						sysP[j] = sysP[j+1];
	   						sysP[j+1] = temp5;
	   						
	   						temp6 = diaP[j];
	   						diaP[j] = diaP[j+1];
	   						diaP[j+1] = temp6;
	   					}
	   				}
	   			}
	   			var bodyTemperature,pulseRul,breatheRul,systolicPressure,diagstolicPressure;
	   			for(var i=0; i<records.length;i++){
	   				var strBuf="";
	   				bodyTemperature = bodyT[i];
	   				pulseRul  = pulse[i];
	   				breatheRul = breathe[i];
	   				systolicPressure = sysP[i];
	   				diagstolicPressure = diaP[i];
	   				if(bodyTemperature != null && bodyTemperature.length > 0){
	                   strBuf = strBuf+"  T"+bodyTemperature+"℃";
	   				}
	   				if(pulseRul != null && pulseRul.length > 0){
	                   if(!Ext.isEmpty(strBuf,false)){
	                	   strBuf = strBuf+"， P"+pulseRul+"次/分";
	            	   }else{
	            		   strBuf = strBuf+"  P"+pulseRul+"次/分";
	            	   }
	   				}
	   				if(breatheRul != null && breatheRul.length > 0){
	            	   if(!Ext.isEmpty(strBuf,false)){
	            		   strBuf = strBuf+"，R"+breatheRul+"次/分";
	            	   }else{
	            		   strBuf = strBuf+"  R"+breatheRul+"次/分";
	            	   }
	   				}
	   				if(systolicPressure != null && systolicPressure.length > 0){
	            	   if(!Ext.isEmpty(strBuf,false)){
	            		   strBuf = strBuf+"，  BP"+systolicPressure+"/"+diagstolicPressure+"mmHg";
	            	   }else{
	            		   strBuf = strBuf+"  BP"+systolicPressure+"/"+diagstolicPressure+"mmHg";
	            	   }
	                   
	   				}
	   				if(i>0){
	                   str=str+"； ";
	   				}
	   				str = str+strBuf;
	   			}
	   		}else{
	             var message = '请先选记录再进行写回！';
	             XapMessageBox.info(message);
	             return;
	   		}  
	        // alert(str);
	   		var plugin = document.getElementById('iemrEditor');
	       	if(plugin!=null){
	       		plugin.InsertText(str);
	       	}else{
	       		var message = '未获取编辑器控件！';
	            XapMessageBox.info(message);
	       	}
		});
	    this.addEvents("changeEncounter");//为视图添加刷新事件
        this.addListener('changeEncounter', function(enPk){//添加监听事件
            //查询action
       	 	var chain = me.getActionChain('refresh');
       	 	chain.execute({
       	 		'enPk':enPk
       	 	});
        });
	}
});
Ext.define('Xap.ej.Net', {
	singleton: true,
	
	mixins: {
		observable:  Ext.util.Observable 
	},

	constructor: function (config) {
		this.mixins.observable.constructor.call(this, config);
		this.addEvents(
			'data'
		);
	},

	open: function(config) {
		var me = this;
		var port = 8890;
		if(config && config.port) {
			port = config.port;
		}
		var netMgr = this.netMgr;
		if(!netMgr) {
			throw 'do not support native net function';
		}
		netMgr.open({
			port: port
		});
		netMgr.on('connection', function(conn) {
			conn.on('data', function(data) {
				me.fireEvent('data', conn, data);
			});
		});
	}
});
/**
 * @author wujunhui<wu.junhui@founder.com>
 * @docauthor wujunhui<wu.junhui@founder.com>
 * 该模板用于数据检索。
 */
Ext.define('Xap.ej.stl.view.SearchTemplate', {
	extend :  Xap.ej.template.BaseTemplate ,

	            
		                                   
		                            
		                                      
	  

	alias : 'widget.xapsearchtemplate',

	border : 0,

	layout : {
		type: 'vbox',
		align : 'stretch'
	},
	
	defaultXapConfig: {
		blocks: {
			'condition': {
				xclass: 'Xap.ej.stl.view.PlaceHolderBlock',
				height:100
			},
			
			'toolbar': {
				xclass: 'Xap.ej.block.ToolbarBlock',
				items: [{
					xtype: 'button',
					text: '检索',
					action: 'search'
				}, {
					xtype: 'button',
					text: '重置',
					action: 'reset'
				}]
			},

			'result': {
				xclass: 'Xap.ej.stl.view.PlaceHolderBlock',
				flex:1
			}
		},

		actions: {
			'search': {
				xclass: 'Xap.ej.stl.action.SimpleSearchAction',
				blocks: {
					condition: 'condition',
					result: 'result'
				}
			}
		},

		chains: {
			'init': ['search'],
			'search': ['search']
		},

		connections: {
			'condition': [{
				// 如果selector为空，则取block本身为事件对象
				event: 'afterrender',
				chain: 'init'
			}], 
			
			'toolbar': [{
				selector: 'button[action=search]',
				event: 'click',
				chain: 'search'
			}]
		}
	},

	initBlock : function() {
		this.callParent();
	},

	doCheckXapConfig: function() {
		// TODO 必须包括的Action等等...
	},

	getConditionBlock : function() {
		return this.getBlock('condition');
	},
	
	getToolbarBlock : function() {
		return this.getBlock('toolbar');
	},
	
	getResultBlock : function() {
		return this.getBlock('result');
	}
});

Ext.define('iih.sy.userinfo.block.UserInfoLeftBlock',{
	extend :  Xap.ej.block.FormBlock ,
	
	           
		   		                                
		   		                                    
				                          
		   	  

	alias:'widget.userinfoleftblock',
	layout: {
		type: 'table',
		columns: 2,
		//width: 1024,
		tableAttrs: {
            border: 0,
            cellpadding: 0,
            cellspacing: 1
//            width: '100%',
//            height:73
        },
        tdAttrs: {
            valign: 'left'
        }
	},
	items: [
	    {
			xtype:'xaptextfield',
			width:140,
	        name:'userId',
	        labelWidth:60,
	        labelAlign:'right',
	        fieldLabel:'用户ID',
	        listeners:{
	        	specialkey : function(field, e) {  
	                if (e.getKey() == Ext.EventObject.ENTER) {  
	                    var view = this.up('userinfoleftlistview');
						var initChain = view.getActionChain('init');
						initChain.execute({}); 
	                }  
	            }
	        }
		},{
			xtype:'xaptextfield',
			width:150,
	        name:'name',
	        labelWidth:60,
	        labelAlign:'right',
	        fieldLabel:'用户名',
	        listeners:{
	        	specialkey : function(field, e) {  
	                if (e.getKey() == Ext.EventObject.ENTER) {  
	                    var view = this.up('userinfoleftlistview');
						var initChain = view.getActionChain('init');
						initChain.execute({}); 
	                }  
	            }
	        }
			
		},/*{ //辅助录入
	        xtype:'comboxgrid',
	        anchor: "90%",
	        width:140,
	        padding:'0 0 0 0',
	        name: 'curDeptNm',
			dataIndex : 'curDeptNm',
	        method:'dept',
	        fieldLabel:'所属科室',
	        labelWidth : 60,
			labelAlign : 'right',
	        valueField : 'value',
	        columns: [{
	            text: '科室编码',
	            dataIndex: 'value',
	            hidden:true
	        },{
	            text: '科室',
	            dataIndex: 'text'
	        }],
	        displayField: 'text',
	        serchParam:['keyword'],
	        parentXtype:'userinfoleftblock',
	        dictionary:'ownerCdLoad'
	 },*/{
			xtype:'comboxgrid',
			url: 'organization/keyword',//科室查询的url
	        anchor: "90%",
			listWidth:210,    //gird的宽度
			width:140,        //combo的宽度
	        padding:'0 0 0 0',
	        name: 'curDeptNm',
			dataIndex : 'curDeptNm',
	        method:'dept',
	        fieldLabel:'所属科室',
	        labelWidth : 60,
			labelAlign : 'right',
			valueField : 'code',//科室编码的字段名
			displayField: 'name',//科室名称的字段名
			columns: [{              //grid的column配置
			   text: '科室编码',
			   dataIndex: 'code',
			   width:60
			},{
			   text: '科室',
			   flex:1,
			   dataIndex: 'name'
			}],
			callback:function(newValue,oldValue,record){  //在grid选择记录后的回调函数
			    console.log(newValue);     //本次选择的科室编码
			    console.log(oldValue);     //上次选择的科室编码
			    console.log(record);       //本次选择的科室完整记录
			}
		},{
			xtype: "xapcombobox",
			width:150,
			name: 'statusCd',
			labelWidth:60,
	        labelAlign:'right',
			fieldLabel:'用户状态',
			dictionary:'XAPM01'
	}]
})
Ext.define('iih.sy.userinfo.block.UserInfoLeftGridBlock', {
	extend :  Xap.ej.block.Block ,

	                                          

	alias : 'widget.userinfoleftgridblock',

	layout : {
		type : 'table',
		border : '0',
		columns : 1,
		tableAttrs : {
			border : 0,
			cellpadding : 5,
			cellspacing : 1,
			width : '100%'
		},
		tdAttrs : {
			valign : 'left'
		}
	},

	items : [ {
		title : '用户列表',
		xtype : 'xapgrid',
		// pageShow : true,
		rownumShow : false,
		height : 430,
		// selType:'checkboxmodel',
		CM_JR_Record : [ {
			header : 'empId',
			dataIndex : 'employeeId',
			field : 'textfield',
			type : 'string',
			hidden:true
		},{
			header : 'xapUserPk',
			dataIndex : 'xapUserPk',
			field : 'textfield',
			type : 'string',
			hidden:true
		},{
			header : '用户ID',
			dataIndex : 'id',
			field : 'textfield',
			type : 'string',
			flex : 1
		}, {
			header : '用户名',
			dataIndex : 'name',
			field : 'textfield',
			type : 'string',
			flex : 1
		}, {
			header : '用户状态',
			dataIndex : 'statusName',
			field : 'textfield',
			type : 'string',
			flex : 1
		}, {
			header : '所属科室',
			dataIndex : 'serviceDepartName',
			field : 'textfield',
			type : 'string',
			flex : 1
		} ]
	} ],
	setData : function(data) {
		if (data) {
			var grid = this.down('xapgrid');
			if(grid){
				if (data.dataList == null) {
					grid.setData([]);
				} else {
					grid.setData(data.dataList);
				}
			}
		}
	}
})

Ext.define('iih.sy.userinfo.action.UserInfoLeftSearchAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override
	*/
	execute: function(context) {
		this. showLoading();
    	var owner = this.getOwner();
    	var operations = context.operations;
    	if(!operations) {
    		return;
    	}
    	this.prepareOperations(operations);
    },
    
    prepareOperations: function(operations) {
        var block = this.getBlock('condition');
        var orgCd = block.down('comboxgrid');
        if(orgCd.comboRecord){
        	orgCd = orgCd.comboRecord.value;
        }else{
        	orgCd = '';
        }
       // console(orgCd.comboRecord);
    	var condition = block.getData();
        var url = this.url;
        if(condition) {
            var qs = Ext.Object.toQueryString(condition);
            if(qs) {
                url += '?' + qs +'&orgCd=' + orgCd;
            }
            console.log(url);
        }
        var mclass = null;
        if(block.getModelClass) {
            mclass = block.getModelClass();
        }
    	var operation = {
            url: url,
    		mclass: mclass,
    		method: 'get',
    		condition: condition,
    		scope: this,
    		success: this.onSuccess
    	};
    	operations.push(operation);
    },

    onSuccess: function(operation) {
        var block = this.getBlock('result');
        var m = operation.result;
        // TODO 数据格式就这样了？
        if(m instanceof Ext.data.Model) {
            block.setData({
                mclass: operation.mclass,
                data: m.getData(true)
            });
        }
        else {
            block.setData(m);
        }
        // var r = rb.getData();
    }
});

Ext.define('iih.sy.userinfo.action.UserRightListAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override
	*/
	doExecute: function(context) {
		this.showLoading();
    	this.callParent();
    	var id;
    	var rowindex;
        var block = this.getBlock('result');// 当前页面是UserInfoLeftListView
    	if(context.event!=undefined){
    		 id = context.event.arguments[1].data.id;		//用户ID
    	}else{
    		 id = context.id;
    		 block.rowindex = context.rowindex;
    	}
        var operations = context.operations;
    	if(!operations) {
    		 return;
    	}
    	var url = this.url;
    	url += '/'+id;
    	var operation = {
            url: url,
    		method: 'get',
    		scope: this,
    		success: this.onSuccess
    	};
    	operations.push(operation);
    },
    onSuccess: function(operation) {
        var block = this.getBlock('result');// 当前页面是UserInfoLeftListView
        var deptGrid = block.down('xapgrid[name=deptgrid]');
        var roleGrid = block.down('xapgrid[name=rolegrid]'); //获取角色表
        var reviewform = block.down('xapform[name=reviewform]'); //获取审签级别
        var drcdctform = block.down('xapform[name=drcdctform]'); //默认三级医师
        console.log(deptGrid);
        var m = operation.result;
        // TODO 数据格式就这样了？
        if(m instanceof Ext.data.Model) {
            block.setData({
                mclass: operation.mclass,
                data: m.getData(true)
            });
        } else {
            block.setData(m.data);
        }
        deptGrid.getSelectionModel().deselectAll();
        var rowindex = block.rowindex;
        if(rowindex!=undefined){
        	deptGrid.getSelectionModel().select(rowindex,false,true);
        }else{
        	deptGrid.getSelectionModel().select(0,false,true);
        }
        var select = deptGrid.getSelectionModel().getSelection()[0];
        console.dir(select);
        if(select){
        	 deptGrid.fireEvent('comboxclick',deptGrid, select, null,0, null, null);
        	 deptGrid.searchParam = {'deptCd': IMER_GLOBAL.department.code};
        	 var signLvlCdR = reviewform.down('xapradiogroup').items.items;
             for(var i=0; i<signLvlCdR.length; i++){
             	if(signLvlCdR[i].inputValue==select.data.signLvlCd){
             		signLvlCdR[i].checked = true;
             		signLvlCdR[i].setValue(true);
             	}
             }
             drcdctform.setData(select.data);
        }else{
        	
    		 var r = {'deptCode' : '','deptName' : '','roleList' : [],'empDeptCd':'','signLvlCd':'','curDrcDctId':'','curDeputyDrcDctId':''};
        	 deptGrid.getStore().insert(0, r);
        	 
			 roleGrid.getSelectionModel().deselectAll(true); //清空已选中的	
			 reviewform.getForm().reset();//清空
			 drcdctform.getForm().reset();//清空
        }
    }
});

Ext.define('iih.sy.userinfo.view.UserInfoLeftListView',{
	extend :  Xap.ej.stl.view.SearchTemplate ,

	alias:'widget.userinfoleftlistview',
	
	           
		                                          
		                                              
		                                                  
		                                            
	  

	xapConfig: {
		blocks: {
			'condition':{
				xclass: 'iih.sy.userinfo.block.UserInfoLeftBlock',
				height:75
			},
			'toolbar': {
				xclass: 'Xap.ej.block.ToolbarBlock',
				items: [{
					xtype: 'button',
					text: '查询',
					iconCls: 'icon-Search',
					action: 'search'
				}]
			},
			'result':{
				xclass: 'iih.sy.userinfo.block.UserInfoLeftGridBlock'
			}
		},
		actions: {
			'init': {
				xclass: 'iih.sy.userinfo.action.UserInfoLeftSearchAction',
				//url: 'http://172.18.100.116:8081/dm-xap/users',
				url: 'users',
				blocks: {
					condition: 'condition',
					result: 'result'
				}
			}
		},

		chains: {
			'init':['init']
		},

		connections: {
			'result': [{
				event: 'afterrender',
				chain: 'init'
			}],
			'toolbar': [{
				selector: 'button[action=search]',
				event: 'click',
				chain: 'init'
			}]
		}
	}
})
var widthRate = 0.87
Ext.define('iih.sy.userinfo.block.UserRightLimitBlock', {
			extend :  Xap.ej.block.FormBlock ,

			                                            
					                                    
					                            

			alias : 'widget.userrightlimitblock',
			layout : {
				type : 'table',
				columns : 1,
				tableAttrs : {
					border : 0,
					cellpadding : 0,
					cellspacing : 1
					// width: '100%',
					// height:73
				},
				tdAttrs : {
					valign : 'left'
				}
			},
			items : [{
						xtype : 'xapcombobox',
//						labelWidth : 100,
//						labelAlign : 'right',
						name : 'prescribeLimit',
						fieldLabel : '处方权'
//						dictionary : 'DIM003'
//						width : 300 * widthRate

					}, {
						xtype : 'xapcombobox',
						labelWidth : 100,
						fieldLabel : '毒麻药权限'
					}, {
						xtype : 'xapcombobox',
						name : 'antibioticLimit',
						fieldLabel : '抗生素适用权限'
					}, {
						xtype : 'xapcombobox',
						name : 'operationRank',
						fieldLabel : '手术等级'
					}]
		})
var widthRate = 0.87
var tbRate = 0.87

Ext
		.define(
				'iih.sy.userinfo.block.UserInfoRightBlock',
				{
					extend :  Xap.ej.block.FormBlock ,
					                                             
							                                    
							                             
							                                       
							                                 
							                                             
							                                          
							                           
							                                              
					alias : 'widget.useinforightblock',

					layout : {
						type : 'table',
						border : 0,
						columns : 6,
						tableAttrs : {
							border : 0,
							cellpadding : 5,
							cellspacing : 1,
							width : '100%'
						},
						tdAttrs : {
							valign : 'left'
						}
					},

					title : "用户基本信息",
					items : [
							{
								xtype : 'xaptextfield',
								name : 'hiddenData',
								hidden : true
							},
							{
								xtype : 'xaptextfield',
								name : 'id',
								colspan : 2,
								labelWidth : 60,
								labelAlign : 'right',
								readOnly : true,
								fieldLabel : '用户ID'
							},
							{
								xtype : 'xaptextfield',
								labelWidth : 50,
								labelAlign : 'right',
								name : 'name',
								readOnly : true,
								fieldLabel : '姓名',
								width : 130 * tbRate
							},
							{
								labelWidth : 40,
								labelAlign : 'right',
								xtype : 'xapcombobox',
								name : 'sexName',
								readOnly : true,
								fieldLabel : '性別',
								colspan : 3,
								dictionary : 'MD002',
								width : 130 * tbRate
							},
							{
								colspan : 4,
								title : '角色列表',
								layout : {
									type : 'table',
									border : 1,
									columns : 4,
									tableAttrs : {
										border : 0,
										cellpadding : 3,
										cellspacing : 1
									},
									tdAttrs : {
										valign : 'left'
									}
								},
								items : [{ //出诊科室列表
											xtype : 'xapgrid',
											name : 'deptgrid',
											height : 440,
											width : 200,
											cid : 'useinforightGrid',
											url : '',
											rownumShow : false,
//											plugins : [ Ext.create('Ext.grid.plugin.CellEditing', { clicksToEdit : 1 }) ],
											listeners : {
												beforeedit : function(editor, e, eOpts) {
													if (e.field == 'organizationName') {
														if (e.record.data.flag == '0') {
															return false;
														} else {
															return true;
														}
													}
												},
												edit : function(editor, e) {
													if (e.field == 'organizationName') {
														e.record.data.flag = '0';
													}
												},
												cellclick : function(view, td, cellIndex, record, tr, rowIndex, e, eOpts) {
													if (cellIndex == '0' & (record.data.flag == '0' || record.data.flag == '' ) & record.data.roleList.length > 0) {
														this.fireEvent('comboxclick', this, record);
													} else if (cellIndex == '0' & record.data.organizationCode == "") {
														this.fireEvent( 'comboxclick', this, record);
													} else if (cellIndex == '0' & record.data.organizationCode == undefined) {
														this.fireEvent('comboxclick', this, record);
													}else if (cellIndex == '0' & (record.data.flag == '0' || record.data.flag == '' ) & record.data.roleList.length == 0) {
														this.fireEvent('comboxclick', this, record);
													}
													if (cellIndex == 1) {
														record.data.flag = '1';
														this.getPlugin().startEdit(rowIndex, 0);
														return false;
													}
												}
											},
											CM_JR_Record : [
													{
														header : '角色信息',
														name : 'roleList',
														dataIndex : 'roleList',
														hidden : true
													},
													{
														header : 'xxx',
														name : 'xx',
														dataIndex : 'flag',
														hidden : true
													},
													{
														header : 'xxx',
														name : 'xx',
														dataIndex : 'organizationCode',
														hidden : true
													},
													{
														header : '出诊科室',
														name : 'organizationName',
														dataIndex : 'organizationName',
														flag : '0',
														deptCode : '',
														flex : 1,
														editor : {
															xtype : 'comboxgrid',
															listWidth : 150,
															padding : '0 0 0 0',
															valueField : 'code',
															method : 'dept',
															columns : [
															{
																text : '科室编码',
																dataIndex : 'value',
																hidden : true
															},
															{
																text : '科室',
																flex : 1,
																dataIndex : 'text'
															} ],
															displayField : 'keyword',
															parentXtype : 'useinforightblock',
															dictionary : 'ownerCdLoad',
															callback : function(newValue, oldValue, record) {
																console.log(newValue);
																console.log(oldValue);
																console.log(record);
																var currGrid = this.up('xapgrid[name=deptgrid]');
																var currStore = currGrid.getStore();
																var datas = currStore.data.items;
																var b = false;
																for ( var i = 0; i < datas.length; i++) {
																	if ((datas[i].data.organizationCode == record.value)) {
																		b = true;
																		break;
																	}
																}

																if (b) {
																	Ext.MessageBox.show({
																		title : '提示',
																		msg : '重复录入',
																		icon : Ext.Msg.WARNING,
																		buttons : Ext.Msg.OK
																	});
																	this.clearValue();
																	var currGrid = this.up('xapgrid[name=deptgrid]');
																	var selModel = currGrid.getSelectionModel();
																	var recordRow = selModel.getSelection()[0];
																	recordRow.set('organizationCode', '');
																} else {
																	var currGrid = this.up('xapgrid[name=deptgrid]');
																	var selModel = currGrid.getSelectionModel();
																	var recordRow = selModel.getSelection()[0];
																	recordRow.set('organizationCode', record.value);
																	recordRow.set('organizationName', record.text);
																	if (record.value == 'NULL') {
																		recordRow.set('organizationCode', '');
																	} else {
																		recordRow.set('organizationCode', record.value);
																	}
																}
															}
														}
													},
													{
														xtype : 'xapactioncolumn',
														name : 'editRow',
														defectStore : null,
														width : 0
													},
													{
														xtype : 'xapactioncolumn',
														name : 'deleteRow',
														defectStore : null,
														width : 0
													}
													,{
														xtype : 'xapactioncolumn',
														name : 'empDeptCd',
														dataIndex : 'empDeptCd',
														deptCode : '',
														width : 0
													},{
														xtype : 'xapactioncolumn',
														name : 'signLvlCd',
														dataIndex : 'signLvlCd',
														deptCode : '',
														width : 0
													},{
														xtype : 'xapactioncolumn',
														name : 'curDrcDctId',
														dataIndex : 'curDrcDctId',
														deptCode : '',
														width : 0
													},{
														xtype : 'xapactioncolumn',
														name : 'curDeputyDrcDctId',
														dataIndex : 'curDeputyDrcDctId',
														deptCode : '',
														width : 0
													} ]
										},
										{ //角色列表
											xtype : 'xapgrid',
											name : 'rolegrid',
											mode : 'multi',
											checkOnly : true,
											height : 440,
											width : 200,
											colspan : 1,
											selType : 'cellmodel',
											checkboxShow : true,
											rownumShow : false,
											plugins : [ Ext.create('Xap.ej.element.grid.plugin.CellEditing') ],
											CM_JR_Record : [ {
												header : '角色Id',
												dataIndex : 'roleCode',
												hidden : true
											}, {
												header : '角色',
												dataIndex : 'roleName',
												width : 160 * widthRate,
												flex : 1
											}, {
												header : '用户角色主键',
												dataIndex : 'code',
												hidden : true
											} ]
										},
										{ //审签等级
											xtype : 'xapform',
											title:'审签等级',
											name : 'reviewform',
											height : 440,
											width : 200,
											items:[{
											       xtype: 'xapradiogroup',
											       layout:{
											    	   type: 'vbox',
											    	   align: 'left'
											       },
											       name: 'signLvlCd',
											       items: [
														{boxLabel: '一级审签', name: 'signLvlCd', inputValue: 'MRM02.02'},
														{boxLabel: '二级审签', name: 'signLvlCd', inputValue: 'MRM02.03'},
														{boxLabel: '三级审签', name: 'signLvlCd', inputValue: 'MRM02.04'}
													]
											}]
										},
										{ //默认三级医师
											xtype : 'xapform',
											title:'默认三级医师',
											name : 'drcdctform',
											height : 440,
											width : 200,
											items: [{
												xtype:'comboxgrid',
												url: 'employee',//人员查询的url
										        anchor: "90%",
												listWidth:210,    //gird的宽度
												width:140,        //combo的宽度
										        padding:'0 0 0 0',
										        name: 'curDeputyDrcDctId',
												dataIndex : 'curDeputyDrcDctId',
										        method:'employee',
										        fieldLabel:'二级医师',
										        labelWidth : 60,
												labelAlign : 'right',
												valueField : 'id',//用户编码的字段名
												displayField: 'name',//人员名称的字段名
												columns: [{              //grid的column配置
												   text: '人员编码',
												   dataIndex: 'id',
												   width:60
												},{
												   text: '医师姓名',
												   flex:1,
												   dataIndex: 'name'
												}],
												callback:function(newValue,oldValue,record){  //在grid选择记录后的回调函数
												    console.log(newValue);     //本次选择的科室编码
												    console.log(oldValue);     //上次选择的科室编码
												    console.log(record);       //本次选择的科室完整记录
												}
											},{
												xtype:'comboxgrid',
												url: 'employee',//人员查询的url
										        anchor: "90%",
												listWidth:210,    //gird的宽度
												width:140,        //combo的宽度
										        padding:'0 0 0 0',
										        name: 'curDrcDctId',
												dataIndex : 'curDrcDctId',
										        method:'employee',
										        fieldLabel:'三级医师',
										        labelWidth : 60,
												labelAlign : 'right',
												valueField : 'id',//用户编码的字段名
												displayField: 'name',//人员名称的字段名
												columns: [{              //grid的column配置
												   text: '人员编码',
												   dataIndex: 'id',
												   width:60
												},{
												   text: '医师姓名',
												   flex:1,
												   dataIndex: 'name'
												}],
												callback:function(newValue,oldValue,record){  //在grid选择记录后的回调函数
												    console.log(newValue);     //本次选择的科室编码
												    console.log(oldValue);     //上次选择的科室编码
												    console.log(record);       //本次选择的科室完整记录
												}
											}]
										}]
							}],
					setData : function(data) {
						if (data) {
							// 遍历data时使用
							var obj = new Object();
							var tempData = Ext.Object.merge(obj, data);

							var hiddenData = this.down('xaptextfield[name=hiddenData]');
							var deptgrid = this.down('xapgrid[name=deptgrid]');
							var displayOrgCodes = [];
							var displayResults = []; // 数据重新封装后给前端显示的数组
							hiddenData.setRawValue(data);
							var wardDepts = data.wardDeptList;

							for ( var i in wardDepts) {

								var wardDept = wardDepts[i];

								if (null != wardDept.deptCd&& !Ext.Array.contains(displayOrgCodes, wardDept.deptCd)) {

									var dept = new Object();
									dept['organizationCode'] = wardDept.deptCd;
									dept['organizationName'] = wardDept.nm;
									dept['empDeptCd'] = wardDept.empDeptCd;
									dept['signLvlCd'] = wardDept.signLvlCd;
									dept['curDrcDctId'] = wardDept.curDrcDctId;
									dept['curDeputyDrcDctId'] = wardDept.curDeputyDrcDctId;

									displayResults.push(dept);
									displayOrgCodes.push(wardDept.deptCd);
								}
							}
							/*var userRoles = data.userRoleList;

							for ( var i in userRoles) {

								var userRole = userRoles[i];

								if (null != userRole.organizationCode&& !Ext.Array.contains(displayOrgCodes, userRole.organizationCode)) {

									var dept = new Object();
									dept['organizationCode'] = userRole.organizationCode;
									dept['organizationName'] = userRole.organizationName;
									displayResults.push(dept);
									displayOrgCodes.push(userRole.organizationCode);
								}
							}*/
							var tempUserRoles = tempData.userRoleList;
							for ( var i in displayResults) {

								var singleResult = displayResults[i];// 分组过的机构编码
								var roleList = [];

								for ( var j = 0; j < tempUserRoles.length; j++) {

									var tempUserRole = tempUserRoles[j];
									var role = new Object();

									if (tempUserRole.organizationCode == singleResult.organizationCode) {
										role['roleCode'] = tempUserRole.roleCode;
										role['roleName'] = tempUserRole.roleName;
										role['code'] = tempUserRole.code; // 待确认
//										role['startTime'] = tempUserRole.startTime;
//										role['stopTime'] = tempUserRole.stopTime;
										role['organizationCode'] = tempUserRole.organizationCode;
										roleList.push(role);
										tempUserRoles.splice(j, 1);
										j = j - 1;
									}
								}
								displayResults[i].roleList = roleList;
								
							}
							
							deptgrid.setData(displayResults); // 给用户角色赋值
							this.getForm().setValues(data); // 给form表单赋值
						}
					},
					setGridData : function(data) {
						if (data) {
							var grid = this.down('xapgrid[name=rolegrid]');
							var dataList = data.dataList;
							for ( var i in dataList) {
								dataList[i]['roleCode'] = dataList[i].code;
								dataList[i]['roleName'] = dataList[i].name;
								dataList[i]['code'] = '';
							}
							grid.setData(dataList);
						}
					}
				})
Ext.define('iih.sy.userinfo.action.UserRightDeptDelAction', {
	extend:  Xap.ej.action.Action ,
	
	/*
	* @Override
	*/
	execute: function(context) {
    	this.callParent();
		var rb = this.getBlock('result');
		var grid = rb.down('xapgrid');
		var record = context.event.arguments[0];
		Ext.Msg.confirm("警告", "确定要删除吗？", function(button) {
                if (button == "yes") {
                	grid.getStore().remove(record);
                }
       })
	}
});

Ext.define('iih.sy.userinfo.action.DeptInsertRowAction', {
	extend:  Xap.ej.action.Action ,

	           
                               
      

    execute:function(context){
    	var deptGrid =  this.getBlock('result').down('xapgrid[name=deptgrid]');
    	var rowCount = deptGrid.getStore().getCount();
    	var lastrowindex = rowCount-1;//最后一行索引
    	var selectedGrid = context.event.arguments[0];
    	var rowindex = deptGrid.store.indexOf(selectedGrid);//获得选中的第一项在store内的行号
		var r = {'deptCode' : '','deptName' : '','roleList' : []};
    	if(rowCount==-1){
    		deptGrid.getStore().insert(0, r);
    	}else if(rowindex==lastrowindex){
    		deptGrid.getStore().insert(rowCount, r);
    	       // gridBlock.plugins[0].startEdit(0, 0);
    	}
       
    
    }

});

Ext.define('iih.sy.userinfo.action.RoleInitAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override
	*/
	execute: function(context) {
//    	this.callParent();
         var operations = context.operations;
    	 if(!operations) {
    		 return;
    	 }
    	 var url = this.url;
    	var operation = {
            url: url,
    		method: 'get',
    		scope: this,
    		success: this.onSuccess
    	};
    	operations.push(operation);
    },
    onSuccess: function(operation) {
        var block = this.getOwner().getBlock('right');// 当前block是UserInfoRightBlock
        var m = operation.result;
        // TODO 数据格式就这样了？
        if(m instanceof Ext.data.Model) {
            block.setGridData({
                mclass: operation.mclass,
                data: m.getData(true)
            });
        }
        else {
            block.setGridData(m);
        }
        // var r = rb.getData();
    }
});

Ext.define('iih.sy.userinfo.action.UserRightDeptEditAction', {
	extend:  Xap.ej.action.Action ,
	
	/*
	* @Override
	*/
	execute: function(context) {
    	this.callParent();
    	var record = context.event.arguments[0];
    	var rowIndex = context.event.arguments[1];
    	var cellIndex = context.event.arguments[2];
    	var rb = this.getBlock('result');
    	var grid = rb.down('xapgrid[name=deptgrid]');
    	/*record.data.flag = '1';
		var rb = this.getBlock('result');
		var grid = rb.down('xapgrid[name=deptgrid]');
//		grid.refresh();
		grid.getPlugin().startEdit(rowIndex,cellIndex-1);*/
    	if(cellIndex == '0' & record.data.flag == '0' & record.data.roleList.length > 0){
			this.fireEvent('comboxclick', this,record);
		}else if(cellIndex == '0' & record.data.deptCode == ""){
			this.fireEvent('comboxclick', this,record);
		}else if(cellIndex == '0' & record.data.deptCode == undefined){
			this.fireEvent('comboxclick', this,record);
		}
		if(cellIndex==1){
			record.data.flag = '1';
			grid.getPlugin().startEdit(rowIndex,0);
			return false;
		}
}
});

Ext.define('iih.sy.userinfo.action.ChooseRoleAction', {
			extend :  Xap.ej.action.ServiceInvocation ,

			requires : [],

			/*
			 * @Override
			 */
			execute : function(context) {
//				this.callParent();
				var rb = this.getBlock('result');
				var roleList = context.event.arguments[1].data.roleList; //获取科室表
				var deptGrid = rb.down('xapgrid[name=deptgrid]') //获取科室表
				var roleGrid = rb.down('xapgrid[name=rolegrid]') //获取角色表
		        var reviewform = rb.down('xapform[name=reviewform]'); //获取审签级别
		        var drcdctform = rb.down('xapform[name=drcdctform]'); //默认三级医师
				var roleData = roleGrid.getData();
				roleGrid.getSelectionModel().deselectAll(true); //清空已选中的
				reviewform.getForm().reset();//清空
				drcdctform.getForm().reset();//清空
				if(roleList.length > 0){
					for (i = 0; i < roleList.length; i++) {
						for(j=0;j<roleData.length;j++){
							if(roleList[i].roleCode == roleData[j].roleCode){
								roleGrid.getSelectionModel().select(j,true,true);//角色挨个选中
								roleData[j].code = roleList[i].code;
								//roleData[j].startUsetTime = roleList[i].startUsetTime;
								//roleData[j].stopUsetTime = roleList[i].stopUsetTime;
							}
						}
					}
				}
				var select = deptGrid.getSelectionModel().getSelection()[0];
				//deptGrid.searchParam = {'deptCd': IMER_GLOBAL.department.code};
				var curDeputyDrcDct = rb.down('comboxgrid[name=curDeputyDrcDctId]');
				curDeputyDrcDct.searchParam = {'deptCd': IMER_GLOBAL.department.code};
				var curDrcDct = rb.down('comboxgrid[name=curDrcDctId]');
				curDrcDct.searchParam = {'deptCd': IMER_GLOBAL.department.code};
				if(select){
				    curDeputyDrcDct.searchParam = {'deptCd': select.data.organizationCode};
				    curDrcDct.searchParam = {'deptCd': select.data.organizationCode};
					var signLvlCdR = reviewform.down('xapradiogroup').items.items;
		             for(var i=0; i<signLvlCdR.length; i++){
		             	if(signLvlCdR[i].inputValue==select.data.signLvlCd){
		             		signLvlCdR[i].checked = true;
		             		signLvlCdR[i].setValue(true);
		             	}
		             }
		            drcdctform.setData(select.data);
				}
			}
		});

Ext.define('iih.sy.userinfo.action.DeptSaveRoleAction', {
			extend :  Xap.ej.action.ServiceInvocation ,

			requires : [],

			/*
			 * @Override
			 */
			execute : function(context) {
				
				var rb = this.getBlock('result');
				var deptGrid = rb.down('xapgrid[name=deptgrid]'); //获取科室表
				var roleGrid = rb.down('xapgrid[name=rolegrid]') //获取角色表
				var rsDept = deptGrid.getSelectionModel().getSelection(); //获取选中的部门
				var rsRole = roleGrid.getSelectionModel().getSelection();//获取选中角色
		        var reviewform = rb.down('xapform[name=reviewform]'); //获取审签级别
		        var drcdctform = rb.down('xapform[name=drcdctform]'); //默认三级医师
				var deptStore = deptGrid.getStore();//获取业务科室的store
				var roleAll = [];
				
				if(rsDept.length > 0 && rsDept[0].data.organizationCode!=""){
					var selectDeptIndex = deptStore.indexOf(rsDept[0]);//获取选中行的索引		
					//角色
					for(i = 0;i < rsRole.length;i++){
						var obj = new Object();
			        	var role = Ext.Object.merge(obj, rsRole[i].data);
			        	//delete role['id'];
			        	roleAll.push(role);
						console.log(roleAll);
					}
					//审签等级
					var signLvlCdR = reviewform.down('xapradiogroup').items.items;
					var signLvlCd;
		             for(var i=0; i<signLvlCdR.length; i++){
		             	if(signLvlCdR[i].checked == true){
		             		signLvlCd = signLvlCdR[i].inputValue;
		             	}
		             }
					//默认三级医师
					var curDeputyDrcDctId = rsDept[0].data.curDeputyDrcDctId;
					var curDrcDctId = rsDept[0].data.curDrcDctId;
					var modRecord = deptStore.getAt(selectDeptIndex);
					modRecord.set('roleList',roleAll);
					modRecord.set('curDeputyDrcDctId',curDeputyDrcDctId);
					modRecord.set('curDrcDctId',curDrcDctId);
					modRecord.set('signLvlCd',signLvlCd);
				}else{
					roleGrid.getSelectionModel().deselectAll(true); //清空已选中的
					reviewform.getForm().reset();//清空
					drcdctform.getForm().reset();//清空
					var message = '请选择出诊科室！';
					XapMessageBox.info(message);
				}
			}
		});

Ext.define('iih.sy.userinfo.view.UserInfoContentView', {
			extend :  Xap.ej.stl.view.LeftRightContainerTemplate ,
			alias : 'widget.userinfocontentview',
			                                                        
					                                           
					                                                
					                                                  
					                                             
					                                              

			xapConfig : {
				blocks : {
					'left' : {
						xclass : 'iih.sy.userinfo.view.UserInfoLeftListView',
						width : 300
					},
					'right' : {
						xclass : 'iih.sy.userinfo.block.UserInfoRightBlock',
						flex : 1
					}
				},

					actions : {
						'init' : {
							xclass : 'iih.sy.userinfo.action.RoleInitAction',
							url: 'role',
							blocks : {
								result : 'right'
							}
						},
						'editRow' : {
							xclass : 'iih.sy.userinfo.action.UserRightDeptEditAction',
							blocks : {
								result : 'right'
							}
						},
						'deleteRow' : {
							xclass : 'iih.sy.userinfo.action.UserRightDeptDelAction',
							blocks : {
								result : 'right'
							}
						},
						'chooseRole' : {
							xclass : 'iih.sy.userinfo.action.ChooseRoleAction',
							url: 'choose_role_search',
							blocks : {
								result : 'right'
							}
						},
						'deptsaverole' : {
							xclass : 'iih.sy.userinfo.action.DeptSaveRoleAction',
							blocks : {
								result : 'right'
							}
						}
						,
						'userRightList': {
							xclass: 'iih.sy.userinfo.action.UserRightListAction',
							url: 'user',
							blocks: {
								condition: 'left',
								result: 'right'
							}
						},
						'deptInsertRow':{				
							xclass: 'iih.sy.userinfo.action.DeptInsertRowAction',
							blocks: {
								result: 'right'
							}
						}
						
					},

					chains : {
						'init' : ['init'],
						'editRow' : ['editRow'],
						'deleteRow' : ['deleteRow'],
						'chooseRole' : ['chooseRole'],
						'deptsaverole':['deptsaverole'],
						'userRightList': ['userRightList'],
						'deptInsertRow': ['deptInsertRow']

					},

					connections : {
						'left'	:[{
							selector: 'xapgrid',
							event: 'itemclick',
							chain: 'userRightList'
						}],
						'right' : [{
									event: 'afterrender',
									chain: 'init'
								}/*,{
									selector : 'xapactioncolumn[name=editRow]',
									event : 'editclick',
									chain : 'editRow'
								}*/,{
									selector : 'xapactioncolumn[name=deleteRow]',
									event : 'deleteclick',
									chain : 'deleteRow'
								},{
									selector : 'xapgrid',
									event : 'comboxclick',
									chain : 'chooseRole'
								},{
									selector : 'xapgrid[name=rolegrid]',
									event : 'selectionchange',
									chain : 'deptsaverole'
								},
								{
									selector : 'xapactioncolumn[name=editRow]',
									event: 'editclick',
									chain: 'deptInsertRow'
								}]
					}
				}
		});
Ext.define('iih.sy.userinfo.action.PopupUserToLeadAction', {
	extend:  Xap.ej.action.PopAction ,
	
	requires: [],
	
	/*
	* @Override
	*/
	execute: function(context) {
			console.log(this.getOwner()); //userinfomanageview
    	var config = {
    		width: 800,
    		contentConfig: {
    			xtype: 'usertoleadview',
    			initChain: {
    				name: 'init',
    				context: {
    					customerData: 'ttttt',
                        sourceView: this.getOwner()
    				}
    			}
    		}
    	};
    	this.callParent([config]);
    }
});

Ext.define('iih.sy.userinfo.action.UserSaveAction', {
	extend :  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override
	*/
	execute: function(context) {
    	var owner = this.getOwner();
        var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
    	
    	var operations = context.operations;
    	if(!operations) {
    		return;
    	}
    	this.prepareOperations(operations);
    },
    
    prepareOperations: function(operations) {
        var formBlock = this.getBlock('result').getBlock('right');
        var deptGrid = this.getBlock('result').down('xapgrid[name=deptgrid]');
        var reviewform = this.getBlock('result').down('xapform[name=reviewform]'); //获取审签级别
        var drcdctform = this.getBlock('result').down('xapform[name=drcdctform]'); //默认三级医师

        var select = deptGrid.getSelectionModel().getSelection()[0];
        if(select==undefined){
        	var message = '请选择出诊科室！';
            XapMessageBox.info(message);
            return;
        }
        var signLvlCdR = reviewform.down('xapradiogroup').items.items;
        var signLvlCd ;
        for(var i=0; i<signLvlCdR.length; i++){
        	if(signLvlCdR[i].checked==true){
        		signLvlCd = signLvlCdR[i].inputValue;
        	}
        }
        var curDeputyDrcDctIdR = drcdctform.down('comboxgrid[name=curDeputyDrcDctId]');
        var curDeputyDrcDctId = curDeputyDrcDctIdR.comboxHiddenValue;
        var curDrcDctIdR = drcdctform.down('comboxgrid[name=curDrcDctId]');
        var curDrcDctId = curDrcDctIdR.comboxHiddenValue;
        var userBaseInfo = formBlock.getData();
        var deptList = deptGrid.getData(); 
        var userRoleList = [];
        var wardDeptList = [];
    	for(var i in deptList){
    		var dept = deptList[i];
    		var roleList = dept.roleList;
    		for(var j in roleList){
    			 roleList[j]['organizationCode'] = dept.organizationCode;
    		}
    		Array.prototype.push.apply(userRoleList, roleList);
    		//或者 userRoleList.concat(roleList);
		}
    	wardDeptList[0] = {'empDeptCd':select.data.empDeptCd,'signLvlCd':signLvlCd,'curDrcDctId':curDrcDctId,'curDeputyDrcDctId':curDeputyDrcDctId};
	    	
    	var data = {'id':userBaseInfo.hiddenData.id, 'password':userBaseInfo.password, 'statusCode':userBaseInfo.statusCode, 'userRoleList':userRoleList, 'wardDeptList':wardDeptList};
    	console.log(data);
        var url = this.url;
        var METHODS = this.getInvocationMethods();
        var mclass = null;
    	var operation = {
            url: url + '/' + userBaseInfo.hiddenData.id,
    		mclass: mclass,
    		method: METHODS.METHOD_UPDATE,
    		data : data,
    		scope: this,
    		success: this.onSuccess,
            fail: this.onFail
    	};
    	operations.push(operation);
    },

    onSuccess: function(operation) {
        var block = this.getBlock('result');// 当前页面是UserInfoLeftListView
        var deptGrid = block.down('xapgrid[name=deptgrid]');
    	var rowCount = deptGrid.getStore().getCount();
    	var lastrowindex = rowCount-1;//最后一行索引
    	var selectedGrid = deptGrid.getSelectionModel().getSelection()[0];;
    	var rowindex = deptGrid.store.indexOf(selectedGrid);//获得选中的第一项在store内的行号
    	
        var owner = this.getOwner();
        var formBlock = this.getBlock('result').getBlock('right');
        var userBaseInfo = formBlock.getData();
        var contentView = owner.getBlock('top');
        var chain = contentView.getActionChain('userRightList');
    	if(chain) {
        	chain.execute({
        		id: userBaseInfo.hiddenData.id,
        		rowindex:rowindex
        	});
    	}
    	
        XapMessageBox.info("保存成功");
    },
    onFail: function(operation) {
        XapMessageBox.info("保存失败");
    }
});

Ext.define('iih.sy.userinfo.view.UserInfoManageView', {          
	   extend:  Xap.ej.template.BaseTemplate ,
    //extend: 'Xap.ej.stl.view.TopBottomContainerTemplate',
    alias: 'widget.userinfomanageview',                  
              
                                                       
                                                           
      		                                   
      		                            
      		                     
      		                              
      	  
	layout: {
        type : 'vbox',
        align : 'stretch'
    },
    xapConfig: {
    		blocks: {
    			'top':{ 
    				xclass:'iih.sy.userinfo.view.UserInfoContentView',
    				flex:1	
    			},
    			'bottom':{
    				xclass: 'Xap.ej.block.ToolbarBlock',
    				items: [{
    					xtype: 'xapbutton',
    					text: '保存',
    					action: 'saveuser',
    					keyBinding: { 
							key: 's', 
							ctrl: true, 
							alt: true
						}, 
    					iconCls: 'icon-save',
    					padding : '0 30 0 0'
    				}],
    				/*xtype: 'Xap.ej.block.xaptoolbarblock',
					items: [{
					    xtype: 'button',
					    iconCls: 'icon-Search',
					    text: '查询',
					    action: 'search'
					}],*/
    				height:30
    			}
    		},
    		
    		actions: {
    			'saveuser': {
    				xclass:'iih.sy.userinfo.action.UserSaveAction',
    				url: 'user',
    				blocks: {
    					condition: 'properties',
    					result: 'top'
    				}
    			}    			
    		},

    		chains: {
    			'saveuser':['saveuser']    			
    		},

    		connections: {
    			'bottom':[{
    				selector:'xapbutton[action=saveuser]',
    				event: 'click',
    				chain: 'saveuser'
    			}]
    		} 
    	}  	
});
Ext.define('iih.sy.userinfo.block.RoleLeftGridBlock', {
			extend :  Xap.ej.block.Block ,

			                                        

			alias : 'widget.roleleftgridblock',

			layout : {
				type : 'table',
				border : '0',
				columns : 1,
				tableAttrs : {
					border : 0,
					cellpadding : 5,
					cellspacing : 1,
					width : '100%'
				},
				tdAttrs : {
					valign : 'left'
				}
			},

			items : [{
				title : '角色列表',
				xtype : 'xapgrid',
				rownumShow : false,
				height : 560,
				CM_JR_Record : [{
					header : '角色ID',
					dataIndex : 'code',
					field : 'textfield',
					type : 'string',
					hidden : true
				}, {
					header : '角色名称',
					dataIndex : 'name',
					field : 'textfield',
					type : 'string',
					flex : 1
				}]
			}],
			setData : function(data) {
				if (data) {
					var grid = this.down('xapgrid');
					if (grid) {
						if (data.dataList == null) {
							grid.setData([]);
						} else {
							grid.setData(data.dataList);
						}
					}
				}
			}
		})

Ext.define('iih.sy.userinfo.block.ReportRightGridBlock', {
			extend :  Xap.ej.block.Block ,

			                                        

			alias : 'widget.reportrightgridblock',

			layout : {
				type : 'table',
				border : '0',
				columns : 1,
				tableAttrs : {
					border : 0,
					cellpadding : 5,
					cellspacing : 1,
					width : '100%'
				},
				tdAttrs : {
					valign : 'left'
				}
			},

			items : [{
				title : '报表列表',
				xtype : 'xapgrid',
				rownumShow : true,
				mode : 'multi',
				checkOnly : true,
				height : 560,
				selType : 'cellmodel',
				checkboxShow : true,
				plugins : [ Ext.create('Xap.ej.element.grid.plugin.CellEditing') ],
				CM_JR_Record : [{
					header : '报表ID',
					dataIndex : 'reportCd',
					field : 'textfield',
					type : 'string',
					hidden : true
				}, {
					header : '报表名称',
					dataIndex : 'reportName',
					field : 'textfield',
					type : 'string',
					flex : 1
				}, {
					header : '报表描述',
					dataIndex : 'reportDes',
					field : 'textfield',
					type : 'string',
					flex : 1
				}]
			}],
					
			setData : function(data) {
				if (data) {
					var grid = this.down('xapgrid');
					if (grid) {
						if (data.dataList == null) {
							grid.setData([]);
						} else {
							grid.setData(data.dataList);
						}
					}
				}
			}
		})

Ext.define('iih.sy.userinfo.action.ReportRoleInitAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	execute: function(context) {
        var operations = context.operations;
    	if(!operations) {
    		 return;
    	}
    	var url = this.url;
    	var operation = {
            url: url,
    		method: 'get',
    		scope: this,
    		success: this.onSuccess
    	};
    	operations.push(operation);
    },
    onSuccess: function(operation) {
        var block = this.getOwner().getBlock('left');
        var m = operation.result;
        if(m instanceof Ext.data.Model) {
//            block.setGridData({
            block.setData({
                mclass: operation.mclass,
                data: m.getData(true)
            });
        }else {
//            block.setGridData(m);
            block.setData(m);
        }
    }
});

Ext.define('iih.sy.userinfo.action.ReportListInitAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	execute: function(context) {
         var operations = context.operations;
    	 if(!operations) {
    		 return;
    	 }
    	 var url = this.url;
    	var operation = {
            url: url,
    		method: 'get',
    		scope: this,
    		success: this.onSuccess
    	};
    	operations.push(operation);
    },
    onSuccess: function(operation) {
        var block = this.getOwner().getBlock('right');
        var m = operation.result;
        if(m instanceof Ext.data.Model) {
            block.setData({
                mclass: operation.mclass,
                data: m.getData(true)
            });
        }else {
            block.setData(m);
        }
    }
});

Ext.define('iih.sy.userinfo.action.ChooseRoleReportsAction', {
	extend :  Xap.ej.action.ServiceInvocation ,

	requires : [],
	
	execute: function(context) {
        var operations = context.operations;
        var block = this.getOwner().getBlock('left');
        var reportGrid = block.down('xapgrid'); //获取角色列表
        var selModel = reportGrid.getSelectionModel();
	    var record = selModel.getSelection()[0];
        var roleCode = record.data.code;;//获取选中的角色ID
    	if(!operations) {
    		return;
    	}
    	var url = this.url;
    	url+= '?roleCode=' + roleCode;
    	var operation = {
            url: url,
    		method: 'get',
    		scope: this,
    		success: this.onSuccess
    	};
    	operations.push(operation);
    },
    onSuccess: function(operation) {
        var block = this.getOwner().getBlock('right');
        var m = operation.result;
        var reportGrid = block.down('xapgrid'); //获取报表列表
		var reportData = reportGrid.getData();  
		reportGrid.getSelectionModel().deselectAll(true); //清空已选中的
		var reportList = m.dataList;
		if(null != reportList && reportList.length > 0){
			for (i = 0; i < reportList.length; i++) {
				for(j=0;j<reportData.length;j++){
					if(reportList[i].reportCd == reportData[j].reportCd){
						reportGrid.getSelectionModel().select(j,true,true);//报表挨个选中
						reportData[j].code = reportList[i].code;
					}
				}
			}
		}
    }
});

Ext.define('iih.sy.userinfo.view.ReportRoleContentView', {
			extend :  Xap.ej.stl.view.LeftRightContainerTemplate ,
			alias : 'widget.reportrolecontentview',
			                                                      
					                                             
					                                              
					                                              
					                                                  

			xapConfig : {
				blocks : {
					'left' : {
						xclass : 'iih.sy.userinfo.block.RoleLeftGridBlock',
						width : 300
					},
					'right' : {
						xclass : 'iih.sy.userinfo.block.ReportRightGridBlock',
						flex : 1
					}
				},

				actions : {
					'init' : {
						xclass : 'iih.sy.userinfo.action.ReportRoleInitAction',
						url : 'role',
						blocks : {
							result : 'left'
						}
					},
					'reportRightList' : {
						xclass : 'iih.sy.userinfo.action.ReportListInitAction',
						url : '/role/reports',
						blocks : {
							result : 'right'
						}
					},
					'chooseRoleReports' : {
						xclass : 'iih.sy.userinfo.action.ChooseRoleReportsAction',
						url : '/role/choosereports',
						blocks : {
							result : 'right'
						}
					}
				},

				chains : {
					'init' : ['init'],
					'reportRightList' : ['reportRightList'],
					'chooseRoleReports' : ['chooseRoleReports']
				},

				connections : {
					'left' : [{
						event : 'afterrender',
						chain : 'init'
					},{
						selector : 'xapgrid',
						event : 'itemclick',
						chain : 'chooseRoleReports'
					}],
					'right' : [{
						event : 'afterrender',
						chain : 'reportRightList'
					}]
				}
			}
		});
Ext.define('iih.sy.userinfo.action.ReportSaveAction', {
	extend :  Xap.ej.action.ServiceInvocation ,
	
	execute: function(context) {
    	var owner = this.getOwner();
        var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
    	
    	var operations = context.operations;
    	if(!operations) {
    		return;
    	}
    	this.prepareOperations(operations);
    },
    
    prepareOperations: function(operations) {
        var roleGrid = this.getBlock('result').getBlock('left').down('xapgrid');
        var select = roleGrid.getSelectionModel().getSelection()[0];
        if(select==undefined){
        	var message = '请选择角色！';
            XapMessageBox.info(message);
            return;
        }
        var reportGrid = this.getBlock('result').getBlock('right').down('xapgrid');
        var reportList = reportGrid.getSelectionModel().getSelection();
        var roleReportList = [];
    	for(var i in reportList){
    		var report = reportList[i].data;
    		for(var j in report){
    			 report[j]['reportCd'] = report.reportCd;
    		}
    		roleReportList[i] = report;
		}
	    	
    	var data = {'roleCd':select.data.code, 'roleReportList':roleReportList};
    	console.log(data);
        var url = this.url;
        var METHODS = this.getInvocationMethods();
        var mclass = null;
    	var operation = {
            url: url + '/' + select.data.code,
    		mclass: mclass,
    		method: METHODS.METHOD_UPDATE,
    		data : data,
    		scope: this,
    		success: this.onSuccess,
            fail: this.onFail
    	};
    	operations.push(operation);
    },

    onSuccess: function(operation) {
        XapMessageBox.info("保存成功");
    },
    onFail: function(operation) {
        XapMessageBox.info("保存失败");
    }
});

Ext.define('iih.sy.userinfo.view.ReportRoleManageView', {          
	   extend:  Xap.ej.template.BaseTemplate ,
    alias: 'widget.reportrolemanageview',                  
              
                                                         
      		                                   
      		                            
      		                     
      		                              
      	  
	layout: {
        type : 'vbox',
        align : 'stretch'
    },
    xapConfig: {
    		blocks: {
    			'top':{ 
    				xclass:'iih.sy.userinfo.view.ReportRoleContentView',
    				flex:1	
    			},
    			'bottom':{
    				xclass: 'Xap.ej.block.ToolbarBlock',
    				items: [{
    					xtype: 'xapbutton',
    					text: '保存',
    					action: 'savereport',
    					keyBinding: { 
							key: 's', 
							ctrl: true, 
							alt: true
						}, 
    					iconCls: 'icon-save',
    					padding : '0 30 0 0'
    				}],
    				height:30
    			}
    		},
    		
    		actions: {
    			'savereport': {
    				xclass:'iih.sy.userinfo.action.ReportSaveAction',
    				url: '/role/savereport',
    				blocks: {
    					condition: 'properties',
    					result: 'top'
    				}
    			}    			
    		},

    		chains: {
    			'savereport':['savereport']    			
    		},

    		connections: {
    			'bottom':[{
    				selector:'xapbutton[action=savereport]',
    				event: 'click',
    				chain: 'savereport'
    			}]
    		} 
    	}  	
});
Ext.define('iih.sy.params.action.ParamsSetListInitAction', {
			extend :  Xap.ej.action.ServiceInvocation ,

	                                  

	/*
	 * @Override
	 */
	doExecute : function(context) {
		this.showLoading();
		this.callParent();
		var pageNum, pageSize;
		if(context.event!= undefined){
			if (context.event.name != 'afterrender') {
				pageNum = context.event.arguments[0];
				pageSize = context.event.arguments[1];
			} else {
				pageNum = 1;
				pageSize = 25;
			}
		}else{
			pageNum = context.pageNum;
			pageSize = context.pageSize;
		}
		
		var data = {
			pageNum : pageNum,
			pageSize : pageSize
		}
		var operations = context.operations;
		this.prepareOperations(operations, data);
	},

	prepareOperations : function(operations, data) {
		var pageNum = data.pageNum;
		var pageSize = data.pageSize;
		var url = this.url;
		url += '?pageNum=' + pageNum + '&pageSize=' + pageSize;
		var METHODS = this.getInvocationMethods();
		var operation = {
			url : url,
			mclass : null,
			method : METHODS.METHOD_GET,
			condition : null,
			data : null,
			scope : this,
			success : this.onSuccess,
			fail : this.onFail
		};
		operations.push(operation);
	},

	onFail : function(operation) {
		alert("查询失败");
	},
	onSuccess : function(operation) {
		// alert("success");
		var gridBlock = this.getBlock('result');
		var m = operation.result;
		// TODO 数据格式就这样了？
		if (m instanceof Ext.data.Model) {
			gridBlock.setData({
						mclass : operation.mclass,
						data : m.getData(true)
					});
		} else {
			gridBlock.setGridData(m);
			gridBlock.getSelectionModel().select(0)
		}
	}
});

Ext.define('iih.sy.params.action.ParamsSetEditInitAction', {
			extend :  Xap.ej.action.ServiceInvocation ,

	                                  

	/*
	 * @Override
	 */
	doExecute : function(context) {
		this.callParent();
		var operations = context.operations;
		var owner = this.getOwner();
        var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
		properties.setData({
            customerData: context.customerData,
            data:context.data,
            sourceView:context.sourceView, 
            block:context.block
        });
		if(context.customerData=='new'){
			
		}else if(context.customerData=='edit'){
			var data = context.data;
			this.prepareOperations(operations, data);
		}
	},

	prepareOperations : function(operations, data) {
		var paramCd = data.paramCd;
		var url = this.url;
		url += '/' + paramCd;
		var METHODS = this.getInvocationMethods();
		var operation = {
			url : url,
			mclass : null,
			method : METHODS.METHOD_GET,
			condition : null,
			data : null,
			scope : this,
			success : this.onSuccess,
			fail : this.onFail
		};
		operations.push(operation);
	},

	onFail : function(operation) {
		alert("查询失败");
	},
	onSuccess : function(operation) {
		var result = operation.result.data;
		console.log(result);
		var view =  this.getOwner();
		var paramCd = view.down('xaptextfield[name=paramCd]');
		var nm = view.down('xaptextfield[name=nm]');
		var codeGrid = view.down('[name=code]');
		var key = view.down('xaptextfield[name=key]');
		var value = view.down('xaptextfield[name=value]');
		var updCnt = view.down('xaptextfield[name=updCnt]');
		var memo = view.down('xaptextarea[name=memo]');
		paramCd.setValue(result.paramCd);
		nm.setValue(result.nm);
		var code = result.code;
		var codeName = result.codeName;
		codeGrid.setRecordData({code:code,codeName:codeName});
		key.setValue(result.key);
		value.setValue(result.value);
		updCnt.setValue(result.updCnt);
		memo.setValue(result.memo);
	}
});

Ext.define('iih.sy.params.action.CancelParamsSetEditAction', {
	extend:  Xap.ej.action.Action ,
	
	/*
	* @Override
	*/
	execute: function(context) {
       //关闭窗口
       var owner = this.getOwner().ownerCt;  
       owner.close();
    }
});

Ext.define('iih.sy.params.block.ParamsSetEditBlock',{
	extend :  Xap.ej.block.FormBlock ,

	           
                                        
                                            
                                         
                                       
	  

	alias:'widget.paramsseteditblock',

	layout: {
        type: 'table',
        columns: 1,
        tableAttrs: {
            border: 0,
            cellpadding: 5,
            cellspacing: 1,
            width: '100%'
        },
        tdAttrs: {
            valign: 'left'
        }
    },
    buttons:[{
        xtype: "button",
        name: 'confim',
        method:'confim',
        text: '确认',
        iconCls: 'icon-OK'
    },{
        xtype: "button",
        name: 'cancel',
        method:'cancel',
        text: '取消',
        iconCls: 'icon-cancel'
    }],
	items: [   
            {
            	xtype:'xaptextfield',
            	labelWidth:90,
            	labelAlign:'right',
            	name:'nm',
            	fieldLabel:'名称:'
            },{
                xtype:'comboxgrid',
                url: 'param/set/keyword',//科室查询的url
                fieldLabel:'编码:',
                labelWidth:90,
                labelAlign:'right',
                listWidth:280,    //gird的宽度
                name:'code', 
                searchParam: {'id': 'SYSM01'},
                width:245,        //combo的宽度
                valueField : 'code',//科室编码的字段名
                displayField: 'codeName',//科室名称的字段名
                columns: [{              //grid的column配置
                   text: '编码',
                   dataIndex: 'code',
                   width:100
                },{
                   text: '名字',
                   flex:1,
                   dataIndex: 'codeName'
                }],
                callback:function(newValue,oldValue,record){  //在grid选择记录后的回调函数
                    console.log(newValue);     //本次选择的科室编码
                    console.log(oldValue);     //上次选择的科室编码
                    console.log(record);       //本次选择的科室完整记录
                }     	
            },{
            	xtype:'xaptextfield',
            	labelWidth:90,
            	labelAlign:'right',
            	name:'key',
            	fieldLabel:'标识:'
            },{
            	xtype:'xaptextfield',
            	labelWidth:90,
            	labelAlign:'right',
            	name:'value',
            	fieldLabel:'值:'
            },{
            	xtype:'xaptextarea',
            	labelWidth:90,
            	height:40,
                labelAlign:'right',
                name :'memo',
                fieldLabel:'描述:',
                width:250
        },{
            	xtype:'xaptextfield',
            	labelWidth:90,
            	labelAlign:'right',
            	name:'paramCd',
            	hidden:true,
            	fieldLabel:'参数编码:'
            },{
            	xtype:'xaptextfield',
            	labelWidth:90,
            	labelAlign:'right',
            	name:'updCnt',
            	hidden:true,
            	fieldLabel:'修改次数:'
            }],
            
	setData: function(data) {
	    this.callParent(arguments);
	},
    getData: function() {
        this.callParent(arguments);
    }
    
})
Ext.define('iih.sy.params.action.ConfimParamsSetEditAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	doExecute: function(context) {
	   	this.callParent();
	   	console.log('--------------------- ConfimParamsSetEditAction -----------------------------');
	   	var operations = context.operations;
       	var properties = this.getOwner().getLayer(Xap.ej.block.Layer.PROPERTIES);
       	var data = {};
       	data.paramCd = properties.data.paramCd;
       	data.nm = properties.data.nm;
       	data.code = properties.data.code;
       	data.key = properties.data.key;
       	data.value = properties.data.value;
       	data.memo = properties.data.memo;
       	data.updCnt = properties.data.updCnt;
       	if(properties.data.customerData=='new'){
       		this.addOperations(operations,data);
       	}else if(properties.data.customerData=='edit'){
       		this.editOperations(operations,data);
       	}
       	var owner = this.getOwner().ownerCt;  
       	owner.close();
	},
    addOperations: function(operations,data) {
        var condition = data;
        var url = 'param/set/create';
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_CREATE,
            condition: null,
            data:condition,
            scope: this,
            success: this.onSuccess,
            fail: this.onFail
        };
        operations.push(operation);
    },
    onSuccess: function() {
        //调用模板列表刷新页面
        var properties = this.getOwner().getLayer(Xap.ej.block.Layer.PROPERTIES);
        var view = properties.data.sourceView;
    	var chain = view.getActionChain('init');
        var gridBlock = view.down('paramssetlistblock');
        var pageNum = gridBlock.currentPage;
        if(!chain) {
            //如果没找到chain执行结果
            console.log("faile");   
        }
        console.log(chain);
        if(chain) {
            chain.execute({
            	pageNum:pageNum,
            	pageSize:'25'
            });
        }
    },
    onFail: function(operation) {
        var message = '新增失败!!!';
        XapMessageBox.info(message);
    },    
    //修改
    editOperations: function(operations,data) {
    	var paramCd = data.paramCd;
        var url = this.url+'/'+paramCd;
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_UPDATE,
            condition: null,
            data:data,
            scope: this,
            success: this.editSuccess,
            fail: this.editFail
        };
        operations.push(operation);
    },
    editSuccess: function() {
        //调用模板列表刷新页面
        var properties = this.getOwner().getLayer(Xap.ej.block.Layer.PROPERTIES);
        var view = properties.data.sourceView;
    	var chain = view.getActionChain('init');
        var gridBlock = view.down('paramssetlistblock');
        var pageNum = gridBlock.currentPage;
        if(!chain) {
            //如果没找到chain执行结果
            console.log("faile");   
        }
        console.log(chain);
        if(chain) {
            chain.execute({
            	pageNum:pageNum,
            	pageSize:'25'
            });
        }
    },
    editFail: function(operation) {
        var message = '修改失败!!!';
        XapMessageBox.info(message);
    }
});

Ext.define('iih.sy.params.action.CheckParamsSetEditAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	doExecute: function(context) {
	   	this.callParent();
	   	console.log('--------------------- CheckParamsSetEditAction -----------------------------');
	   	var operations = context.operations;
       	var properties = this.getOwner().getLayer(Xap.ej.block.Layer.PROPERTIES);
       	var view = this.getOwner();
       	var owner = properties.data.sourceView;
       	var form = this.getBlock('result').getForm();
       	//拿到的form的value有问题       
       	var data = this.getBlock('result').getForm().getValues();
       	var message;
       	//判断非空验证
       	if(!Ext.isEmpty(data,false)){
       		if(!Ext.isEmpty(data.nm,false)){
       			if(!Ext.isEmpty(data.code,false)){
       				if(!Ext.isEmpty(data.key,false)){
           				if(!Ext.isEmpty(data.value,false)){
           					properties.data.paramCd = data.paramCd;
           					properties.data.nm = data.nm;
           					properties.data.code = data.code;
           					properties.data.key = data.key;
           					properties.data.value = data.value;
           					properties.data.memo = data.memo;
           					properties.data.updCnt = data.updCnt;
           					this.checkParamName(operations, data);
    		       		}else{
    		       			message = '值不能为空!!!';
            				XapMessageBox.info(message);
    		       		}
    	       		}else{
    	       			message = '标识不能为空!!!';
            			XapMessageBox.info(message);
    	       		}
       			}else{
       				message = '编码不能为空!!!';
        			XapMessageBox.info(message);
       			}
       		}else{
       			message = '名称不能为空!!!';
        		XapMessageBox.info(message);
       		}
       	}
	},
    //验证
    checkParamName: function(operations,data) {
    	var params = {};
    	params.nm = data.nm;
    	params.paramCd = data.paramCd;
    	params.code = data.code;
    	params.key = data.key;
        var url = this.url;
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_GET,
            condition: null,
            params: params,
            scope: this,
            success: this.checkSuccess,
            fail: this.checkFail
        };
        operations.push(operation);
    },
    checkSuccess: function(operation) {
        //调用模板列表刷新页面
        var view = this.getOwner();
    	var chain = view.getActionChain('confim');
    	var data = operation.result.data;
    	var msg = '';
    	if(data.nmExist =='0'){
    		if(data.ckExist ==null || data.ckExist =='' || data.ckExist =='0'){
    			chain.execute();
    		}else{
    			msg = '参数名称重复，请重新输入!!!';
        		XapMessageBox.info(msg);
    		}
    	}else{
    		msg = '参数名称重复，请重新输入!!!';
    		XapMessageBox.info(msg);
    	}
    },
    editFail: function(operation) {
        var message = '修改失败!!!';
        XapMessageBox.info(message);
    }
});

Ext.define('iih.sy.params.view.ParamsSetEditView',{
	extend :  Xap.ej.stl.view.SingleRecordEditTemplate ,

	           
				                                               
				                                                 
				                                              
	             
	alias:'widget.paramsseteditview',
	
	layout: 'fit',
	
	xapConfig: {
		blocks: {
			'content': {
				xclass: 'iih.sy.params.block.ParamsSetEditBlock'
			}
		},

		actions: {
			'init': { 
				xclass: 'iih.sy.params.action.ParamsSetEditInitAction',
				url: 'param/set/one',
				blocks: {
                    result:'content'
                }
			},
			'confim': {
                xclass: 'iih.sy.params.action.ConfimParamsSetEditAction',
                url:'param/set/update',
                blocks: {
                    result: 'content'
                }
            },
            'cancel': {
                xclass: 'iih.sy.params.action.CancelParamsSetEditAction',
                blocks: {
                    result: 'content'
                }
            },
            'check': {
                xclass: 'iih.sy.params.action.CheckParamsSetEditAction',
                url:'param/set/check',
                blocks: {
                    result: 'content'
                }
            }
		},

		chains: {
			'init': ['init'],
            'confim': ['confim'],
            'cancel': ['cancel'],
            'check': ['check']
		},

		connections: {
			'content': [{    
			    //加载数据
                event: 'afterrender',
                chain: 'init'
            },{    
                //确认按钮
                selector: 'button[method=confim]',
                event: 'click',
                chain: 'check'
            },{    
                //取消按钮
                selector: 'button[method=cancel]',
                event: 'click',
                chain: 'cancel'
            }]
		}
	},
	initComponent : function() {
		this.callParent();
	}
})
Ext.define('iih.sy.params.action.CreateParamsSetAction', {
	extend:  Xap.ej.action.PopAction ,
	
	                                                   
	/*
	* @Override
	*/
	execute: function(context) {
	   //新建模板
		console.log('---------------- CreateParamsSetAction --------------------');
	    var view = this.getOwner();	
	    var block = this.getBlock('result');
        var config = {         
            modal: true,            
            height: 290,
            width: 300,
            title :'新建参数',
            contentConfig: {
            	//新建模板页面
                xtype: 'paramsseteditview', 
                initChain: {
                    name: 'init',
                    context: {
                        customerData: 'new',
                        sourceView: view,
                        block:block
                    }
                }
            }
        };
        this.callParent([config]);    
    }
});

Ext.define('iih.sy.params.action.EditParamsSetAction', {
	extend:  Xap.ej.action.PopAction ,
	
	                                                   
	/*
	* @Override
	*/
	execute: function(context) {
	   //新建模板
		console.log('---------------- CreateParamsSetAction --------------------');
		this.callParent();
		var operations = context.operations;
		var view =this.getOwner();	
	    var block = this.getBlock('result');
		var grid = view.down('paramssetlistblock');
		var records = grid.getSelectionModel().getSelection();
		var data = {};
		if(records.length>0){
			data.paramCd = records[0].data.paramCd;
			var config = {         
	            modal: true,            
	            height: 290,
	            width: 350,
	            title :'编辑参数',
	            contentConfig: {
	            	//新建模板页面
	                xtype: 'paramsseteditview', 
	                initChain: {
	                    name: 'init',
	                    context: {
	                        customerData: 'edit',
	                        sourceView: view,
	                        block:block,
	                        data:data
	                    }
	                }
	            }
	        };
	        this.callParent([config]); 
		}else{
			var message = '请选择修改的参数!!!';
        	XapMessageBox.info(message);
		}
    }
});

Ext.define('iih.sy.params.action.ParamsSetRefreshAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override delete
	* 当删除前的列表个数大于等于待删除个数，根据列表grid.store.gridBlock.store.lastOptions 进行查询。树不做操作。
	* 当删除后个数0，按照左上角的条件进行刷新树和列表。
	*/
    doExecute: function(context) {
		this.showLoading();
		this.callParent();
		var pageNum, pageSize;
		var view =this.getOwner();	
		var grid = view.down('paramssetlistblock');
		if(context.event!= undefined){
			if (context.event.name == 'click') {
				pageNum = grid.currentPage;
				pageSize = 25;
			} else {
				pageNum = 1;
				pageSize = 25;
			}
		}else{
			pageNum = context.pageNum;
			pageSize = context.pageSize;
		}
		
		var data = {
			pageNum : pageNum,
			pageSize : pageSize
		}
		var operations = context.operations;
		this.prepareOperations(operations, data);
	},

	prepareOperations : function(operations, data) {
		var pageNum = data.pageNum;
		var pageSize = data.pageSize;
		var url = this.url;
		url += '?pageNum=' + pageNum + '&pageSize=' + pageSize;
		var METHODS = this.getInvocationMethods();
		var operation = {
			url : url,
			mclass : null,
			method : METHODS.METHOD_GET,
			condition : null,
			data : null,
			scope : this,
			success : this.onSuccess,
			fail : this.onFail
		};
		operations.push(operation);
	},

	onFail : function(operation) {
		alert("查询失败");
	},
	onSuccess : function(operation) {
		// alert("success");
		var gridBlock = this.getBlock('result');
		var m = operation.result;
		// TODO 数据格式就这样了？
		if (m instanceof Ext.data.Model) {
			gridBlock.setData({
						mclass : operation.mclass,
						data : m.getData(true)
					});
		} else {
			gridBlock.setGridData(m);
			gridBlock.getSelectionModel().select(0)
		}
	}
});

Ext.define('iih.sy.params.action.DeleteParamsSetAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override delete
	* 当删除前的列表个数大于等于待删除个数，根据列表grid.store.gridBlock.store.lastOptions 进行查询。树不做操作。
	* 当删除后个数0，按照左上角的条件进行刷新树和列表。
	*/
    doExecute: function(context) {
    	var self = this;
    	var grid = self.getOwner().down('paramssetlistblock');
        var rb = grid.getSelectionModel().getSelection();      
        if(rb.length == 0){
        	 var message = '请选择数据进行删除！！！';
             XapMessageBox.info(message);
        }else{
            var data ={};
            data.paramCd = rb[0].data.paramCd;
            self.prepareOperations(context.operations,data);
        }
    },

    prepareOperations: function(operations,data) {       
        var url = this.url+'/'+data.paramCd;     
        var mclass = null;       
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: mclass,
            method: METHODS.METHOD_DELETE,
            data:data,
            condition: null,
            scope: this,
            success: this.onSuccess
        };
        operations.push(operation);
    },
    
    onSuccess: function(operation) {
        //调用模板列表刷新页面
        var view = this.getOwner();
    	var chain = view.getActionChain('init');
        var grid = view.down('paramssetlistblock');
        var pageNum = grid.currentPage;
        if(!chain) {
            //如果没找到chain执行结果
            console.log("faile");   
        }
        if(chain) {
            chain.execute({
            	pageNum:pageNum,
            	pageSize:'25'
            });
        }
    }
});

Ext.define('iih.sy.params.block.ParamsSetListBlock',{
	extend :  Xap.ej.element.grid.Grid ,
	           	           
		                            
	                                     
	                                             
	  
	
	alias:'widget.paramssetlistblock',	
	
	mixins : [ Xap.ej.block.LayeredBlock ],
	
	name:'mrtemplatelistblock',
	layout: 'fit',
	checkboxShow : false,
	mode: 'simple',
	autoScroll:true,
	pageSize : 25,
	pageShow : true,
	ifSelect:true,
	selectBy: 'code' ,//主键dataIndex名称（默认是id）
		
	tbar:[
		{text: '新建',method: 'create',iconCls: 'icon-Create'},
		{text: '编辑',method: 'edit',iconCls: 'icon-Open'},
		{text: '删除',method: 'delete',iconCls: 'icon-Delete'},
		{text: '刷新内存',method: 'refresh',iconCls: 'icon-redefect'}
	],

	CM_JR_Record: [
				   {header: '名称',dataIndex: 'nm',width:300},
				   {header: '编码',dataIndex: 'codeName',width:100},
				   {header: '标识',dataIndex: 'key',width:90},
				   {header: '值',dataIndex: 'value',width:90},
				   {header: '描述',dataIndex: 'memo',width:500},
				   {header: '编码',dataIndex: 'code',width:100,hidden:true},
				   {header: '参数编码',dataIndex: 'paramCd',hidden:true}/*,			   
				   {header: '序号',dataIndex: 'sortNo',hidden:true},
				   {header: '拼音码',dataIndex: 'spellNo',width:100},//MRM16
                   {header: '五笔码',dataIndex: 'wubiNo',hidden:true},
	               {header: '更新次数',dataIndex: 'updCnt',width:100},
				   {header: '创建人',dataIndex: 'crtUserId',width:100},
	               {header: '创建时间',dataIndex: 'crtTime',xtype: 'xapdatecolumn',width:150},
	               {header: '创建部门',dataIndex: 'crtDeptCd',width:100},
	               {header: '最后更新时间',dataIndex: 'lastUpdTime',xtype: 'xapdatecolumn',width:150},
	               {header: '最后更新部门',dataIndex: 'lastUpdDeptCd',width:150},
	               {header: '最后更新人',dataIndex:'lastUpdUserId',hidden:true}*/
	],
	
	setGridData: function(data) {
	 	var dataList = data;
	 	if( null == data.dataList ){
	 		var totalList = {"total":0,"dataList":null};
	 		this.setPageData(totalList);
	 	}
	 	if(dataList){
		    	var totalList = {"total":data.total,"dataList":data.dataList};
		    	var pageNum = data.pageNum;
		    	if(pageNum == '1'){
			 		//console.log(totalList);
		    		this.setPageData(totalList);	//初始化赋值
		    	}else{
		    		//console.log("翻页");
		    		this.setData(data.dataList);	//翻页时赋值
		    	}
	 	}else{
	 		var totalList = {"total":data.total,"dataList":data.dataList};
	 		this.setPageData(totalList);
	 	}
	},
	initComponent: function() {
		this.callParent();
		this.initBlock();
		
	}
})
/**
 *   功能名称：智能助手-医嘱
 *   author：liulei
 */
Ext.define('iih.sy.params.view.ParamsSetListView', {
	extend:  Xap.ej.template.BaseTemplate ,

	           
				                                  
	           	                                               
	           	                                             
	           	                                           
	           	                                              
	           	                                            
	             

	alias:'widget.paramssetlistview',
	
	layout:'fit',

	xapConfig: {
		blocks: {
		    'paramslist': {
		    	xclass: 'iih.sy.params.block.ParamsSetListBlock'
            }
		},
		actions: {
			'init': {
				xclass: 'iih.sy.params.action.ParamsSetListInitAction',
				url:'param/set/list',
				blocks:{
					result: 'paramslist'
				}
			},
			'create': {
				xclass: 'iih.sy.params.action.CreateParamsSetAction',
				blocks:{
					result: 'paramslist'
				}
			},
			'edit': {
				xclass: 'iih.sy.params.action.EditParamsSetAction',
				blocks:{
					result: 'paramslist'
				}
			},
			'delete': {
				xclass: 'iih.sy.params.action.DeleteParamsSetAction',
				url:'param/set/delete',
				blocks:{
					result: 'paramslist'
				}
			},
			'refresh': {
				xclass: 'iih.sy.params.action.ParamsSetRefreshAction',
				url:'param/set/refresh',
				blocks:{
					result: 'paramslist'
				}
			}
		},

		chains: {
			'init':['init'],
			'create':['create'],
			'edit':['edit'],
			'refresh':['refresh'],
			'delete':['delete']
		},

		connections: {
			'paramslist': [{
					event: 'turnpage',//翻页操作
					chain: 'init'
			},{
					event: 'afterrender',
					chain: 'init'
			},{
					selector: 'button[method=create]',
					event: 'click',
					chain: 'create'
			},{
			},{
				selector: 'button[method=refresh]',
				event: 'click',
				chain: 'refresh'
			},{
					selector: 'button[method=edit]',
					event: 'click',
					chain: 'edit'
			}]
		}
	},
	
	initComponent : function() {
		this.callParent();
		var self = this;
		var grid = self.down('paramssetlistblock');
		var delBtn = grid.down('button[method=delete]');
		var msg = '确认删除？';
        delBtn.on('click',function(btn){
        	XapMessageBox.confirm2(msg, function(btn){
        		if(btn=='yes'){
        			var chainDel = self.getActionChain('delete');
        			chainDel.execute();
        		}
        	});
		});
	}
})
Ext.define('iih.po.com.block.DataSyncBlock', {
    extend :  Xap.ej.block.FormBlock ,
    
                                          
                                          
                                                 
                                                    

    alias:'widget.datasyncblock',

    layout: 'fit',
    
    border:false,
    
    tbar:[{
        xtype: 'button',
        text: '同步就诊',
        tooltip: '同步就诊',
        iconCls: 'icon-syncEn',
        action: 'syncEn'
    },{
        xtype: 'button',
        text: '同步科室/人员',
        tooltip: '同步科室/人员',
        iconCls: 'icon-syncDept',
        action: 'syncDept'
    },{
        xtype: 'button',
        text: ' 同步诊断',
        tooltip: '同步诊断',
        iconCls: 'icon-syncDi',
        action: 'syncDi'
    }],
    
    initComponent: function() {
        var me = this;
        me.callParent();
    }
})
Ext.define('iih.po.com.action.DataSyncAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
    * @Override
    */
    doExecute: function(context) {
        this.callParent();
        this.getOwner().openMask();
        var operations = context.operations;
        var url = this.url;
        var mclass = null;
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: mclass,
            method: METHODS.METHOD_GET,
            scope: this,
            success: this.onSuccess,
            failure: this.onFailure
        };
        operations.push(operation);
    },
    
    onSuccess: function(operation) {
        this.getOwner().closeMask();
        XapMessageBox.info('数据同步完成！','',this.getOwner());
    },
    
    onFailure: function(operation) {
        this.getOwner().closeMask();
        XapMessageBox.info('数据同步失败！','',this.getOwner());
    }
});
Ext.define('iih.po.com.view.DataSyncView', {
    extend :  Xap.ej.template.BaseTemplate ,

    requires: [],

    alias:'widget.datasyncview',

    layout: 'fit',
    
    border: 0,

    xapConfig: {
        blocks: {
            'content': {
                xclass: 'iih.po.com.block.DataSyncBlock'
            }
        },

        actions: {
            'syncDept': {
                xclass: 'iih.po.com.action.DataSyncAction',
                url: 'sync/xapbatch',
                blocks: {
                    portal: 'content'
                }
            },
            'syncAmr': {
                xclass: 'iih.po.com.action.DataSyncAction',
                url: 'sync/mramr',
                blocks: {
                    portal: 'content'
                }
            },
            'syncDi': {
                xclass: 'iih.po.com.action.DataSyncAction',
                url: 'sync/mddi',
                blocks: {
                    portal: 'content'
                }
            }
        },

        chains: {
            'syncDept': ['syncDept'],
            'syncAmr': ['syncAmr'],
            'syncDi': ['syncDi']
        },

        connections: {
            'content': [{
                selector: 'button[action=syncEn]',
                event: 'click',
                chain: 'syncAmr'
            },{
                selector: 'button[action=syncDept]',
                event: 'click',
                chain: 'syncDept'
            },{
                selector: 'button[action=syncDi]',
                event: 'click',
                chain: 'syncDi'
            }]
        }
    },
    
    initComponent : function() {
        var me = this;
        this.callParent();
    }
})
Ext.define('iih.po.com.PortalPlugin', {
	extend:  Xap.ej.platform.Plugin ,

	                         

	pluginConfig: {
		extensions: {
			'iih.po.workbench.view': [],
			'functionlist': [{
                cd:'XAPM07.05',
                baseMenu: true,
                text:'病历文书一览',
                xclass:'iih.mr.wr.mr.view.MrDocListView',
                viewConfig:{}
             },{
                 cd:'XAPM07.06',
                 baseMenu: true,
                 text:'诊断查询',
                 xclass:'iih.po.assistant.view.DiagnosisHelperView',
                 //xclass:'iih.mr.di.view.InDiagnosisView',
                 haveEncounter:true,
                 viewConfig:{}
             },{
                 cd:'XAPM07.92',
                 baseMenu: true,
                 text:'诊断录入',
                 xclass:'iih.mr.di.view.InDiagnosisView',
                 haveEncounter:true,
                 viewConfig:{}
             },{
                 cd:'XAPM07.07',
                 baseMenu: true,
                 text:'既往病历',
                 xclass:'iih.po.assistant.view.MrDocHelperView',
                 haveEncounter:true,
                 viewConfig:{}
             },{
                 cd:'XAPM07.08',
                 baseMenu: true,
                 text:'医嘱查询',
                 xclass:'iih.po.assistant.view.OrderListView',
                 haveEncounter:true,
                 viewConfig:{}
             },{
                 cd:'XAPM07.09',
                 baseMenu: true,
                 text:'检查信息',
                 xclass:'iih.po.assistant.view.ObservationReportView',
                 haveEncounter:true,
                 viewConfig:{}
             },{
                 cd:'XAPM07.10',
                 baseMenu: true,
                 text:'检验信息',
                 xclass:'iih.po.assistant.view.LabReportView',
                 haveEncounter:true,
                 viewConfig:{}
             },{
                 cd:'XAPM07.11',
                 baseMenu: true,
                 text:'生命体征',
                 xclass:'iih.po.assistant.view.VitalSignHelperView',
                 haveEncounter:true,
                 viewConfig:{}
             },{
                 cd:'XAPM07.12',
                 baseMenu: true,
                 text:'个人知识库',
                 xclass:'iih.po.assistant.view.PersonKnowledgeView',
                 haveEncounter:true,
                 viewConfig:{}
             },{
                 cd:'XAPM07.21',
                 baseMenu: true,
                 text:'环节整改通知',
                 xclass:'iih.mr.qa.process_qa_reform.view.ProcessRfmNotificationView',
                 viewConfig:{
                 	typeFlag: 1
                 }
             },{
                 cd:'XAPM07.43',
                 baseMenu: true,
                 text:'终末整改通知',
                 xclass:'iih.mr.qa.process_qa_reform.view.ProcessRfmNotificationView',
                 viewConfig:{
                 	typeFlag: 2
                 }
             },{
                 cd:'XAPM07.49',
                 baseMenu: true,
                 text:'科室整改通知',
                 xclass:'iih.mr.qa.process_qa_reform.view.ProcessRfmNotificationView',
                 viewConfig:{
                 	typeFlag: 3
                 }
             },{
                 cd:'XAPM07.22',
                 baseMenu: true,
                 text:'审签一览',
                 xclass:'iih.mr.wr.mr.view.MrSignListView',
                 viewConfig:{}
             },{
                cd:'XAPM07.23',
                baseMenu: true,
                text:'基础模板管理',
                resource: true,
                objcd: 'MRK01',
                xclass:'iih.mr.tm.bas.view.BasTemplateListView',
                viewConfig:{}
             },{
                 cd:'XAPM07.24',
                 baseMenu: true,
                 text:'组合元素模板管理',
                 resource: true,
                 objcd: 'MRK06',
                 xclass:'iih.mr.tm.gro.view.GroupElementSearchView',
                 viewConfig:{}
             },{
                 cd:'XAPM07.27',
                 baseMenu: true,
                 text:'病历模板管理',
                 resource: true,
                 objcd: 'MRK02',
                 xclass:'iih.mr.tm.mr.view.MrTemplateListView',
                 viewConfig:{
                     enTypeCode: 'ENM01.04'
                 }
             },{
                 cd:'XAPM07.83',
                 baseMenu: true,
                 text:'片段模板管理',
                 resource: true,
                 xclass:'iih.mr.tm.fr.view.FrTplListView'
             },{
                 cd:'XAPM07.32',
                 baseMenu: true,
                 text:'环节质控患者列表',
                 xclass:'iih.mr.qa.process_qa_patient.view.InProcessQAPatientListView',
                 viewConfig:{
                     typeFlag: 1
                 }
              },{
                  cd:'XAPM07.33',
                  baseMenu: true,
                  text:'环节质控追踪',
                  xclass:'iih.mr.qa.process_qa_track.view.ProcessQaNotificationView',
                  viewConfig:{
                      typeFlag: 1
                  }
              },{
                  cd:'XAPM07.67',
                  baseMenu: true,
                  text:'环节质控工作查询',
                  xclass:'iih.mr.qa.process_qa_search.view.InProcessWorkSearchView',
                  viewConfig:{
                      typeFlag: 1
                  }
              },{
                  cd:'XAPM07.71',
                  baseMenu: true,
                  text:'自动质控查询',
                  xclass:'iih.mr.qa.process_qa_auto_search.view.QaAutoSearchView',
                  viewConfig:{
                      typeFlag: 1
                  }
              },{
                 cd:'XAPM07.45',
                 baseMenu: true,
                 text:'待科室质控患者列表',
                 xclass:'iih.mr.qa.dept_qa_patient.view.DeptQAPatientListView',
                 viewConfig:{
                     typeFlag: 5
                 }
              },{
                 cd:'XAPM07.47',
                 baseMenu: true,
                 text:'待评分患者列表',  //科室质控
                 xclass:'iih.mr.qa.score.view.ScoreQAPatientListView',
                 viewConfig:{
                     typeFlag: 2
                 }
              },{
                 cd:'XAPM07.35',
                 baseMenu: true,
                 text:'终末质控患者列表',
                 xclass:'iih.mr.qa.terminal_qa_patient.view.TerminalQAPatientListView',
                 viewConfig:{
                     typeFlag: 2
                 }
             },{
                 cd:'XAPM07.36',
                 baseMenu: true,
                 text:'终末质控追踪',
                 xclass:'iih.mr.qa.process_qa_track.view.ProcessQaNotificationView',
                 viewConfig:{
                     typeFlag: 2
                 }
             },{
                 cd:'XAPM07.46',
                 baseMenu: true,
                 text:'科室质控追踪',
                 xclass:'iih.mr.qa.process_qa_track.view.ProcessQaNotificationView',
                 viewConfig:{
                     typeFlag: 3
                 }
             },{
                 cd:'XAPM07.56',
                 baseMenu: true,
                 text:'质控报表',
                 xclass:'iih.mr.qa.qa_reports.view.QaReportsListView',
                 viewConfig:{
                     typeFlag: 3
                 }
             },{
                 cd:'XAPM07.37',
                 baseMenu: true,
                 text:'待评分患者列表',//终末质控
                 xclass:'iih.mr.qa.score.view.ScoreQAPatientListView',
                 viewConfig:{
                     typeFlag: 1
                 }
             },{
                 cd:'XAPM07.54',
                 baseMenu: true,
                 text:'质控设置',
                 xclass:'iih.mr.qa.qa_divide_level.view.QaItmWorkView',
                 viewConfig:{}
             },{
                 cd:'XAPM07.41',
                 baseMenu: true,
                 text:'用户角色管理',
                 xclass:'iih.sy.userinfo.view.UserInfoManageView',
                 viewConfig:{}
             },{
                 cd:'XAPM07.74',
                 baseMenu: true,
                 text:'报表角色管理',
                 xclass:'iih.sy.userinfo.view.ReportRoleManageView',
                 viewConfig:{}
             },{
                 cd:'XAPM07.73',
                 baseMenu: true,
                 text:'系统参数设置',
                 xclass:'iih.sy.params.view.ParamsSetListView',
                 viewConfig:{}
             },{
            	 cd:'XAPM07.13',
            	 baseMenu: true,
            	 text:'质量自评',
            	 xclass:'iih.mr.qa.doctor_self_score.view.DoctorScoreWorkView',
            	 viewConfig:{}
             },{
            	 cd:'XAPM07.59',
            	 baseMenu: true,
            	 text:'待书写文书',
            	 xclass:'iih.mr.qa.need_write_mr.view.MrListView',
            	 viewConfig:{}
             },{
                 cd:'XAPM07.61',
                 baseMenu: true,
                 text:'诊断管理',
                 xclass:'iih.po.assistant.view.DiagnosisHelperView',
                 haveEncounter:true,
                 viewConfig:{}
             },{
                 cd:'XAPM07.62',
                 baseMenu: true,
                 text:'既往病历',
                 xclass:'iih.po.assistant.view.MrDocHelperView',
                 haveEncounter:true,
                 viewConfig:{}
             },{
                 cd:'XAPM07.63',
                 baseMenu: true,
                 text:'医嘱查询',
                 xclass:'iih.po.assistant.view.OrderListView',
                 haveEncounter:true,
                 viewConfig:{}
             },{
                 cd:'XAPM07.64',
                 baseMenu: true,
                 text:'检查信息',
                 xclass:'iih.po.assistant.view.ObservationReportView',
                 haveEncounter:true,
                 viewConfig:{}
             },{
                 cd:'XAPM07.65',
                 baseMenu: true,
                 text:'检验信息',
                 xclass:'iih.po.assistant.view.LabReportView',
                 haveEncounter:true,
                 viewConfig:{}
             },{
                 cd:'XAPM07.66',
                 baseMenu: true,
                 text:'生命体征',
                 xclass:'iih.po.assistant.view.VitalSignHelperView',
                 haveEncounter:true,
                 viewConfig:{}
             },{
                 cd:'XAPM07.58',
                 baseMenu: true,
                 text:'数据同步',
                 xclass:'iih.po.com.view.DataSyncView',
                 viewConfig:{}
             },{
                 cd:'XAPM07.69',
                 baseMenu: true,
                 text:'病历书写',
                 xclass:'iih.mr.wr.omr.view.OutMrWriteView',
                 viewConfig:{},
                 assistantConfig:{}
             },{
                 cd:'XAPM07.70',
                 baseMenu: true,
                 text:'门诊模板管理',
                 xclass:'iih.mr.tm.mr.view.MrTemplateListView',
                 viewConfig:{
                     'enTypeCode':'ENM01.01'
                 }
             },{
                 cd:'XAPM07.81',
                 baseMenu: true,
                 text:'病历书写',
                 xclass:'iih.mr.wr.omr.view.OutMrWriteView',
                 viewConfig:{},
                 itemView:{
                     cd:'XAPM07.82'
                 },
                 assistantConfig:{}
             },{
                 cd:'XAPM07.82',
                 text:'诊断录入',
                 xclass:'iih.mr.di.view.OutDiagnosisView',
                 isItem: true,
                 viewConfig:{}
             },{
                 cd:'XAPM07.88',
                 text:'组套维护',
                 xclass:'iih.mr.kr.csm.view.CSMKRView',
                 baseMenu: true,
                 viewConfig:{},
                 itemView:{
                     cd:'XAPM07.89'
                 }
             },{
                 cd:'XAPM07.89',
                 text:'组套分类',
                 xclass:'iih.mr.kr.csm.view.CSMCategoryView',
                 isItem: true,
                 viewConfig:{}
             },{
            	 cd:'XAPM07.59',
            	 baseMenu: true,
            	 text:'待书写文书',
            	 xclass:'iih.mr.qa.need_write_mr.view.MrListView',
            	 viewConfig:{}
             },{
                 cd:'XAPM07.91',
                 baseMenu: true,
                 text:'既往病历',
                 xclass:'iih.po.assistant.view.MrDocHelperView',
                 haveEncounter:true,
                 viewConfig:{}
             },{
                 cd:'XAPM07.85',
                 baseMenu: true,
                 text:'病历文书类型组设置',
                 xclass:'iih.mr.wr.mr.view.MrTypeCcatView',
                 viewConfig:{}
             },{
                 cd:'XAPM07.86',
                 baseMenu: true,
                 text:'病历文书类型设置',
                 xclass:'iih.mr.wr.mr.view.MrTypeView',
                 viewConfig:{}
             },{
                 cd:'XAPM07.93',
                 baseMenu: true,
                 text:'共享元素设置',
                 xclass:'iih.mr.wr.mr.view.MrShareElementView',
                 viewConfig:{}
             }/*,{
                 cd:'XAPM07.105',
                 baseMenu: true,
                 text:'牙齿及牙周组织检查',
                 xclass:'iih.mr.tth.view.TeethExamView',
                 viewConfig:{}
             }*/,{
                 cd:'XAPM07.107',
                 baseMenu: true,
                 text:'上传病历',
                 xclass:'iih.mr.archive.patient_mediclRecord_archive.view.PatientView',
                 viewConfig:{}
             },{
                 cd:'mrdoceditview',
                 //xclass:'iih.mr.wr.mr.view.MrDocEditView',
                 xclass:'iih.mr.wr.mr.view.MrWriteView',
                 editorInside: true,
                 closable:true,
                 assistantConfig:{}
             },{
                 cd:'mrbastpleditview',
                 xclass:'iih.mr.tm.bas.view.BasTemplateEditView',
                 editorInside: true,
                 closable:true
             },{
                 cd:'frtpleditview',
                 xclass:'iih.mr.tm.fr.view.FrTplEditView',
                 editorInside: true,
                 closable:true
             },{
                 cd:'mrtpleditview',
                 //xclass:'iih.mr.tm.mr.view.MrTemplateEditView',
                 xclass:'iih.mr.tm.mr.view.MrTemplateManageView',
                 editorInside: true,
                 closable:true
             },{
                 cd:'processQaDefectsView',
                 xclass:'iih.mr.qa.process_qa_patient.view.ProcessQaDefectsView',
                 editorInside: true,
                 closable:true
             },{
                 cd:'processQaWorkView',
                 xclass:'iih.mr.qa.process_qa_work.view.QaWorkView',
                 editorInside: true,
                 closable:true
             },{
                 cd:'terminalQaWorkView',
                 xclass:'iih.mr.qa.process_qa_work.view.QaWorkView',
                 editorInside: true,
                 closable:true
             },{
                 cd:'deptQaWorkView',
                 xclass:'iih.mr.qa.process_qa_work.view.QaWorkView',
                 editorInside: true,
                 closable:true
             },{
                 cd:'processQaDefectSearchView',
                 xclass:'iih.mr.qa.process_qa_search.view.ProcessQaDefectView',
                 editorInside: true,
                 closable:true
             },{
                 cd:'qaAutoDefectView',
                 xclass:'iih.mr.qa.process_qa_auto_search.view.QaAutoDefectView',
                 editorInside: true,
                 closable:true
             },{
                 cd:'processQaDefectView',
                 xclass:'iih.mr.qa.process_qa_track.view.ProcessQaDefectView',
                 editorInside: true,
                 closable:true
             },{
                 cd:'terminalQaDefectView',
                 xclass:'iih.mr.qa.process_qa_track.view.ProcessQaDefectView',
                 closable:true
             },{
                 cd:'departmentQaDefectView',
                 xclass:'iih.mr.qa.process_qa_track.view.ProcessQaDefectView',
                 closable:true
             },{
                 cd:'processRfmDefectView',
                 xclass:'iih.mr.qa.process_qa_reform.view.ProcessRfmDefectView',
                 editorInside: true,
                 closable:true
                
             },{
                 cd:'terminalRfmDefectView',
                 xclass:'iih.mr.qa.process_qa_reform.view.ProcessRfmDefectView',
                 editorInside: true,
                 closable:true
                
             },{
                 cd:'deptRfmDefectView',
                 xclass:'iih.mr.qa.process_qa_reform.view.ProcessRfmDefectView',
                 editorInside: true,
                 closable:true
                
             },
             {
                 cd:'scoreworkview',
                 xclass:'iih.mr.qa.score.view.ScoreWorkView',
                 editorInside: true,
                 closable:true
                
             },
             {
                 cd:'qareportview',
                 xclass:'iih.mr.qa.qa_reports.view.QaReportView',
                 closable:true
             },
             {
                 cd:'qareportwithoutconditionview',
                 xclass:'iih.mr.qa.qa_reports.view.QaReportWithoutConditionView',
                 closable:true
             },
             {
                 cd:'processqadefectview',
                 xclass:'iih.mr.qa.process_qa_search.view.ProcessQaDefectView',
                 editorInside: true,
                 closable:true
             },
             {
                 cd:'qaAutoConfigView',
                 xclass:'iih.mr.qa.qa_divide_level.view.QaAutoConfigView',
                 editorInside: true,
                 closable:true
             }],
             'assistant': [{
                 cd:'diagnosis_helper',
                 text:'诊断',
                 xclass:'iih.po.assistant.view.DiagnosisHelperView',
                 isQuery:false,
                 haveEncounter:true
             },{
                 cd:'mr_doc_helper',
                 text:'病历文书',
                 xclass:'iih.po.assistant.view.MrDocHelperView',
                 isQuery:false,
                 haveEncounter:true
             },{
                 cd:'mr_order_list',
                 text:'医嘱',
                 xclass:'iih.po.assistant.view.OrderListView',
                 isQuery:false,
                 haveEncounter:true
             },{
                 cd:'mr_observation',
                 text:'检查报告',
                 xclass:'iih.po.assistant.view.ObservationReportView',
                 isQuery:false,
                 haveEncounter:true
             },{
                 cd:'mr_lab',
                 text:'检验报告',
                 xclass:'iih.po.assistant.view.LabReportView',
                 isQuery:false,
                 haveEncounter:true
             },{
                 cd:'vital_sign_helper',
                 text:'生命体征',
                 xclass:'iih.po.assistant.view.VitalSignHelperView',
                 isQuery:true,
                 haveEncounter:true
             },{
                 cd:'personal_knowledge_helper',
                 text:'个人知识库',
                 xclass:'iih.po.assistant.view.PersonKnowledgeView',
                 isQuery:false,
                 haveEncounter:true
             }/*,{
                 cd:'todo_helper',
                 text:'任务/问题一览',
                 xclass:'iih.mr.qa.process_qa_reform.view.ProcessRfmNotificationView',
                 isQuery:false,
                 haveEncounter:false
             }*/]
		}
	},

    init: function() {
        // 监听网络数据
        Xap.ej.Net.on('data', function(conn, data) {
            var app = Ext.getCmp('commonappmain');
            var layout = app.getLayout();
            layout.setActiveItem(2);
            // conn网络连接，可以使用方法conn.send(d)向外界发送数据，数据格式是字符串或者JSON对象
            console.log('connection: ');
            console.log(conn);
            // 接受的数据
            console.log('data: ');
            console.log(data);
            var token = data.data.token;
            var userCd,uuid,pwd,portalCd,hosArea,deptCd,enSn,docSn,patientId;
            var temp=[];
            console.log(token);
            if(!Ext.isEmpty(token, false)){
                temp = token.split("|");
                patientId = data.patientId;
                
                var loginView = app.down('login');
                var callBack = function(temp){
                    userCd = temp[0];
                    pwd = temp[9]||'MTIzNA==';
                    uuid = temp[1];
                    portalCd = temp[2];
                    hosArea = temp[3];
                    deptCd = temp[4];
                    enSn = temp[6];
                    docSn = temp[7];
                    userId = temp[10];
                    var name = this.down('xaptextfield[name=username]');
                    var pass = this.down('xaptextfield[name=password]');
                    name.setValue(userCd);
                    pass.setValue(pwd);
                    IMER_GLOBAL.user.code = userId;
                    IMER_GLOBAL.user.name = userId;
                    IMER_GLOBAL.hospitalArea.code = hosArea||'SZLH';
                    IMER_GLOBAL.hospitalArea.name = hosArea;
                    IMER_GLOBAL.department.code = deptCd;
                    IMER_GLOBAL.department.name = deptCd;
                    IMER_GLOBAL.portal.code = portalCd;
                    IMER_GLOBAL.portal.name = portalCd;
                    if(IMER_GLOBAL.portal.code == IMER_CONSTANT.PORTAL_CD_2 || IMER_GLOBAL.portal.code == IMER_CONSTANT.PORTAL_CD_7 ||  IMER_GLOBAL.portal.code == IMER_CONSTANT.PORTAL_CD_1 ||  IMER_GLOBAL.portal.code == IMER_CONSTANT.PORTAL_CD_8 ||  IMER_GLOBAL.portal.code == IMER_CONSTANT.PORTAL_CD_9)
                        IMER_GLOBAL.encounterSn = enSn;
                    else
                        IMER_GLOBAL.encounterSn = null;
                    
					var chainLogin = this.getActionChain('autologin');
                    chainLogin.execute({
						'userCd':userId,
						'portalCd':portalCd,
						'hosArea':hosArea||'PKUHIT',
						'deptCd':deptCd,
						'encounterSn':IMER_GLOBAL.encounterSn
					});
                };
                var workarea = app.down('xaptabpanel[id=workareapageview]');
                workarea.callBack = {
                    method: callBack,
                    scope: loginView,
                    params: [temp]
                };
                workarea.closePages = null;
                var canvas = Xap.getCanvas();
                canvas.fireEvent("portalRender");
            }else{
            	console.log('token is empty.');
            }
        });
    }
})
Ext.define('iih.po.com.action.AddWorkAreaPageAction', {
	extend:  Xap.ej.action.Action ,
	
	/*
	* @Override
	*/
	execute: function(context) {
	    var me = this;
	    this.pageCode = context.pageCode;
        this.pageTitle = context.pageTitle;
        this.viewConfig = context.viewConfig;
	    var view = this.getOwner();
        var workarea = view.down('workareapageview');
        var tabs = workarea.items.items;
        var page = null;
        for (var i = 0; i < tabs.length; i++) {
            var tab = tabs[i];
            if (tab.tabId == this.pageCode) {
                page = tab;
                break;
            }
        };
        var config;
        var plugin = Xap.ej.platform.Plugin;
        var list = plugin.getExtensionPoint('functionlist');
        if(list.extensions.length > 0) {
            for(var i=0;i<list.extensions.length;i++){
                var item = list.extensions[i];
                if(this.pageCode == item.cd){
                    config = item;
                    break;
                }
            }
        };
        if(page){
            var workView = workarea.getMainPage(page.tabId);
            //Ext.apply(workView,this.viewConfig);
            workarea.setActiveTab(page);
            if(config && config.editorInside){
                var callBack = function(){
                    this.addPage(arguments[0]);
                };
                workarea.callBack = {
                    method: callBack,
                    scope: this,
                    params: [config]
                };
                var closePages = new Array();
                closePages.push(page);
                workarea.closePages = closePages;
                var canvas = Xap.getCanvas();
                canvas.fireEvent("portalRender");
            }
        }else{
            if(config){
                if(config.baseMenu){
                    var callBack = function(){
                        this.addPage(arguments[0]);
                    };
                    workarea.callBack = {
                        method: callBack,
                        scope: this,
                        params: [config]
                    };
                    workarea.closePages = null;
                    var canvas = Xap.getCanvas();
                    canvas.fireEvent("portalRender");
                }else{
                    this.addPage(config);
                }
                
            }
        };
        
        if(config.itemView){
            var canvas = Xap.getCanvas();
            canvas.fireEvent("addWorkPage",{pageCode:config.itemView.cd});
        }
       
    },
    	
    addPage: function(config){
        var view = this.getOwner();
        var workarea = view.down('workareapageview');
        if(config.assistantConfig){
            var tabConfig = {
                    xclass: 'iih.po.com.view.WorkPageView',
                    tabId: this.pageCode,
                    title: this.pageTitle?this.pageTitle:config.text,
                    closable: config.closable,
                    baseMenu: config.baseMenu,
                    isItem: config.isItem,
                    haveAssistant: true,
                    hideMode:'offsets'
            };
            var view =  Xap.create(tabConfig);
            
            var workContent = view.getBlock('workContent');
            workContent.removeAll();
            var workView =  Ext.create(config.xclass,config.viewConfig);
            Ext.apply(workView,this.viewConfig);
            Ext.apply(workView,{itemId:this.pageCode});
            if(IMER_GLOBAL.revisionCd){
                Ext.apply(workView,{revisionCd:IMER_GLOBAL.revisionCd});
                IMER_GLOBAL.revisionCd = null;
            };
            workContent.add(workView);
            
            var helpContent = view.getBlock('helpContent');
            var helpTab = helpContent.down('xaptabpanel');
            var plugin = Xap.ej.platform.Plugin;
            var list = plugin.getExtensionPoint('assistant');
            if(list.extensions.length > 0) {
                for(var i=0;i<list.extensions.length;i++){
                    var item = list.extensions[i];
                    var helpCfg = {
                        tabId: item.cd,
                        title: item.text,
                        xclass: item.xclass,
                        isQuery:item.isQuery,
                        haveEncounter:item.haveEncounter,
                        hideMode:'offsets'
                    };
                    helpTab.add(Ext.create(helpCfg));
                }
            };
            helpTab.setActiveTab(0);
        }else{
            var tabConfig = {
                        xclass: config.xclass,
                        tabId: this.pageCode,
                        title: this.pageTitle?this.pageTitle:config.text,
                        closable: config.closable,
                        baseMenu: config.baseMenu,
                        isItem: config.isItem,
                        hideMode:'offsets'
                };
            var view =  Xap.create(tabConfig);
            Ext.apply(view,this.viewConfig);
            Ext.apply(view,config.viewConfig);
            if(IMER_GLOBAL.revisionCd){
                Ext.apply(view,{revisionCd:IMER_GLOBAL.revisionCd});
                IMER_GLOBAL.revisionCd = null;
            };
        };
        var tabbar = workarea.getTabBar();
        var enContainer = tabbar.down('container[name=enContainer]');
        if(enContainer)
            tabbar.remove(enContainer);
        if(config.haveEncounter){
            tabbar.add({
                xtype: 'container',
                name: 'enContainer',
                layout: {
                    type: 'hbox',
                    align: 'middle',
                    pack: 'end'
                },
                flex: 1,
                items: [{
                    itemId: 'encounterCombox',
                    xtype: 'xapcombobox',
                    emptyText: '请选择就诊',
                    labelAlign: 'right',
                    editable:false,
                    width: 300,
                    allowBlank: true,
                    forceSelection: true,
                    listeners:{
                        afterrender: function(combo) {
                            var action = Xap.create({
                                xclass: 'iih.po.com.action.AssistantInitAction'
                            });
                            action.combo = combo;
                            Xap.runAction(action);
                        },
                        change : function(combo,newValue,oldValue) {
                            var tabpanel = combo.up('workareapageview');
                            var tab = tabpanel.getActiveTab();
                            if(tab)
                                tab.fireEvent("changeEncounter",newValue);
                        }
                    }
                },{
                    xtype: 'label',
                    width: 5
                }]
            });
        };
        //门诊病历书写添加“模板选择”按
        if((config.cd=='XAPM07.69'||config.cd=='XAPM07.82')){
            tabbar.add({
                xtype: 'container',
                name: 'enContainer',
                layout: {
                    type: 'hbox',
                    align: 'middle',
                    pack: 'end'
                },
                flex: 1,
                items: [{
                    xtype: 'button',
                    id:'erpSignBtn',
                    text: '电子签名',
                    disabled:true,
                    hidden:true,
                    handler : function() {
                    	var iemrEditor=document.getElementById('iemrEditor');//取到编辑器插件
                    	if(iemrEditor&&iemrEditor.valid){
    			    		if(iemrEditor.IsModified()){
    			                Ext.MessageBox.alert('提示', '当前修改未保存，请保存后重试！');
    			                return false;
    			            }
                    	}else{
                    		Ext.MessageBox.alert('提示', '请打开病历以后在签名！');
                    		return;
                    	}
                    	var pdfPath=iemrEditor.ExportPDF();
                    	pdfPath=pdfPath.replace('file:///','');
                    	var context={erpSignType:'erpSign',pdfPath:pdfPath} ;
                    	var outmrwriteview=Ext.getCmp('outmrwriteview');
                    	var createAction=outmrwriteview.getActionChain('createErpSign');
                    	createAction.execute(context);
                    }
                },{
                    xtype: 'label',
                    width: 5
                },{
                    xtype: 'button',
                    id:'serchErpSignBtn',
                    text: '浏览签名',
                    hidden:true,
                    disabled:true,
                    handler : function() {
                    	var context={erpSignType:'serchErpSign'} ;
                    	var outmrwriteview=Ext.getCmp('outmrwriteview');
                    	var createAction=outmrwriteview.getActionChain('createErpSign');
                    	createAction.execute(context);
                    }
                },{
                    xtype: 'label',
                    width: 5
                },{
                    xtype: 'button',
                    id:'reSelectTempBtn',
                    text: '重新选择模板',
                    disabled:true,
                    handler : function() {
                    	XapMessageBox.confirm2('重新选择模板会覆盖当前正在编辑的病历，是否继续？', function(id){
            				if(id=='yes'){
            					var context={opType:'reSelectTemp'} ;
                            	var outmrwriteview=Ext.getCmp('outmrwriteview');
                            	var createAction=outmrwriteview.getActionChain('create');
                            	createAction.execute(context);
            				}else{
            					me.enable();
            				}
            			});
                    }
                },{
                    xtype: 'label',
                    width: 5
                }]
            });
        };
        workarea.add(view).show();
        workarea.setActiveTab(view);
        if(config.isItem)
            workarea.setActiveTab(0);
    }
});
Ext.define('iih.po.com.action.AssistantInitAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
    * @Override
    */
    doExecute: function(context) {
        this.callParent();
        if(!IMER_GLOBAL.patientId)
            return;
        var operations = context.operations;
        var url = this.url||'mr/ens';
        var mclass = null;
        var condition = {
            patientId: IMER_GLOBAL.patientId,
            workScreen: '2'
        };
        var qs = Ext.Object.toQueryString(condition);
        url += '?' + qs;
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: mclass,
            method: METHODS.METHOD_GET,
            condition: condition,
            scope: this,
            success: this.onSuccess
        };
        operations.push(operation);
    },
    
    onSuccess: function(operation) {
        var m = operation.result;
		if(m){
		    var block = this.getBlock('helpContent');
		    if(block)
		        block.setEncouterData(m.dataList);
		    else
		        this.setEncouterData(m.dataList);
		}
    },
    
    setEncouterData: function(data){
        var combo = this.combo;
        if(combo){
            combo.clearValue();
            if(data){
                var array = new Array();
                Ext.each(data,function(rec){
                    if(rec){
                        var time = Ext.Date.parse(rec.currentDeptIntoTime, 'time');
                        var value = Ext.Date.format(time, 'Y-m-d H:i');
                        //var value = Ext.util.Format.date(rec.currentDeptIntoTime, "Y-m-d H:i:s");
                        value = value + '_';
                        value = value + rec.encounterTypeName;
                        if(rec.currentMainDiagnosisName){
                            value = value + '_';
                            value = value + rec.currentMainDiagnosisName;
                        }
                        array.push({'text':value,'value':rec.pk});
                    }
                });
                combo.setData(array);
                //var record = combo.getStore().getAt(0);
                //combo.select(record);
                combo.setValue(IMER_GLOBAL.encounterSn);
            }
        }
    }
});
/** 
* 修改自 haitao.tu的代码 http://tuhaitao.iteye.com/blog/653244
* 
*/ 
Ext.define('Xap.ej.util.Base64', {
	singleton: true,

	_keyStr: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",

	encode: function (input) {
		var _keyStr = this._keyStr; 
        var output = "";  
        var chr1, chr2, chr3, enc1, enc2, enc3, enc4;  
        var i = 0;  
        input = this._utf8_encode(input);  
        while (i < input.length) {  
            chr1 = input.charCodeAt(i++);  
            chr2 = input.charCodeAt(i++);  
            chr3 = input.charCodeAt(i++);  
            enc1 = chr1 >> 2;  
            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);  
            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);  
            enc4 = chr3 & 63;  
            if (isNaN(chr2)) {  
                enc3 = enc4 = 64;  
            } else if (isNaN(chr3)) {  
                enc4 = 64;  
            }  
            output = output +  
            _keyStr.charAt(enc1) + _keyStr.charAt(enc2) +  
            _keyStr.charAt(enc3) + _keyStr.charAt(enc4);  
        }  
        return output;  
    },

    _utf8_encode : function(string) {  
        string = string.replace(/\r\n/g,"\n");  
        var utftext = "";  
        for (var n = 0; n < string.length; n++) {  
            var c = string.charCodeAt(n);  
            if (c < 128) {  
                utftext += String.fromCharCode(c);  
            } else if((c > 127) && (c < 2048)) {  
                utftext += String.fromCharCode((c >> 6) | 192);  
                utftext += String.fromCharCode((c & 63) | 128);  
            } else {  
                utftext += String.fromCharCode((c >> 12) | 224);  
                utftext += String.fromCharCode(((c >> 6) & 63) | 128);  
                utftext += String.fromCharCode((c & 63) | 128);  
            }
        }  
        return utftext;  
    }
});
Ext.define('Xap.ej.action.LoginAction', {
	extend:  Xap.ej.action.Action ,

                                   

	/*
	* @Override
	*/
    execute:function(context){
        if(this.doExecute(context)) {
            var app = Xap.getApp();

            var url = app.getBaseUrl() + this.url;

            // 一个ajax form请求
            var requestOptions = {
                success: this.onSuccess,
                failure: this.onFailure,
                scope: this,
                url: url,
                method: 'POST'
                // params: context.data
            };

            if(this.timeout) {
                requestOptions.timeout = this.timeout * 1000;
            }
            this.basicHttpAuthorization(context.data.username, context.data.password, requestOptions);
            Ext.Ajax.request(requestOptions);
        }
    },

    doExecute: Ext.emptyFn,

    basicHttpAuthorization: function(username, password, options) {
        var token = username + ':' + password;
        var hash = Xap.ej.util.Base64.encode(token);
        if(!options.headers) {
            options.headers = {};
        }
        options.headers['Authorization'] = 'Basic ' + hash;
    },

    /* 
    * 成功的回调
    * @param data 后端服务返回的结果
    */
    // onSuccess: Ext.emptyFn,
    onSuccess: function(o) {
        Xap.debug('login request success returned');
        // TODO localstorage
        var sid = o.getResponseHeader('xap-sessionId');
        if(sid) {
            Ext.util.Cookies.set('xap-sessionId', sid);
        }

        var info = Ext.JSON.decode(o.responseText, true);
        if(info && info.userId) {
            this.onLoginSuccess(info);
        }
        else {
            this.onLoginFailure(info);
        }
    },

    // 失败的回调
    // onFailure: Ext.emptyFn
    onFailure: function(o) {
        Xap.debug('login request failed returned');
        this.onLoginFailure();
    },

    onLoginSuccess: Ext.emptyFn,

    onLoginFailure: Ext.emptyFn
});

Ext.define('iih.po.com.action.AutoLoginAction', {
	extend:  Xap.ej.action.LoginAction ,

	url: 'xap_login',
	
	/*
	* @Override
	*/
	doExecute: function(context) {
    	this.callParent();
		var userCd = context.userCd;
		var portalCd = context.portalCd;
		var hosArea = context.hosArea;
		var deptCd = context.deptCd;
		var encounterSn = context.encounterSn;
		IMER_GLOBAL.user.code = userCd;
		IMER_GLOBAL.user.name = userCd;
		IMER_GLOBAL.hospitalArea.code = hosArea||'PKUHIT';
		IMER_GLOBAL.hospitalArea.name = hosArea;
		IMER_GLOBAL.department.code = deptCd;
		IMER_GLOBAL.department.name = deptCd;
		IMER_GLOBAL.portal.code = portalCd;
		IMER_GLOBAL.portal.name = portalCd;
		IMER_GLOBAL.encounterSn = encounterSn;

    	var operations = context.operations;
    	var loginBlock = this.getBlock('lvblock');
    	var data = loginBlock.getForm().getValues();
    	var sp = this.getOwner();
    	if((data!=undefined)||(data!=null)){
    		data = loginBlock.getForm().getValues();
    	}else{
    		data = null;
    	};
    	var login = this.getOwner();
        var app = login.ownerCt;
        var layout = app.getLayout();
    	var name,pass,showInfo;
    	if(!Ext.isEmpty(data, false)){
    		name = data.username;
    		pass = data.password;
    		showInfo = loginBlock.down('xapdisplayfield');
    		//进行前台登录框验证
    		if(Ext.isEmpty(name, false)){
    			showInfo.setValue('<font color=red>用户名不能为空!</font>');
    			layout.setActiveItem(0);
    			return null;
    		}else{
	    		if(Ext.isEmpty(pass, false)){
	    			showInfo.setValue('<font color=red>密码不能为空!</font>');
	    			layout.setActiveItem(0);
	    			return null;
	    		}else{
	    			//用户登录后台验证
	    			context.data = data;
	    			context.data.username = data.username;
	    		}
    		}
    	}
    	return true;
    },

	onLoginSuccess : function(info) {
	    IMER_GLOBAL.user.code = info.userId;
        IMER_GLOBAL.user.name = info.userName;
		var login = this.getOwner();
		var app = login.ownerCt;
		var layout = app.getLayout();
		if(Ext.isEmpty(IMER_GLOBAL.portal.code, false)){
		    var portal = app.down('selectportal');
	        var chain = portal.getActionChain('init')
			chain.execute();
			layout.setActiveItem(1);
		}else{
		    this.initPortal();
		}
		
		var loginBlock = this.getBlock('lvblock');
		var data = loginBlock.getForm().getValues();
		if(data.rememberInfo){
		    var expires = new Date(new Date().getTime() + (1000 * 60 * 60 * 24 * 30)); //30天
	        Ext.util.Cookies.set('userId', data.username, expires);
	        Ext.util.Cookies.set('password', data.password, expires);
		}else{
		    Ext.util.Cookies.clear('userId');
		    Ext.util.Cookies.clear('password');
		}
	},

	onLoginFailure : function(error) {
	    var login = this.getOwner();
	    var app = login.ownerCt;
        var layout = app.getLayout();
        layout.setActiveItem(0);
		var block = this.getBlock('lvblock');
		var showInfo = block.down('xapdisplayfield');
		var errorText = null;
		if(error) {
			errorText = error.desc;
		}
		if(!errorText) {
			// TODO 系统故障描述应该也从框架得到
			errorText = '系统故障';
		}
		showInfo.setValue('<font color=red>' + errorText + '</font>');
	},
	
	initPortal: function() {
	    var login = this.getOwner();
        var app = login.ownerCt;
        var chain = this.getChain();
        var param = {
            'id': IMER_GLOBAL.hospitalArea.code
        };
        var url = 'organization/' + IMER_GLOBAL.hospitalArea.code;
        chain.execute({
            operations: [],
            params: [param],
            url: url,
            callback: function(data) {
                IMER_GLOBAL.hospitalArea.name = data.name;
                var enTypeCode; 
                if(IMER_GLOBAL.portal.code == IMER_CONSTANT.PORTAL_CD_1 || IMER_GLOBAL.portal.code == IMER_CONSTANT.PORTAL_CD_8){ 
                            enTypeCode = 'ENM01.01'; 
                  }else if(IMER_GLOBAL.portal.code == IMER_CONSTANT.PORTAL_CD_2){ 
                           enTypeCode = 'ENM01.04'; 
                  } 
                param = { 
                       'id': IMER_GLOBAL.encounterSn
                     ,  'enTypeCode':enTypeCode 
                 }; 
                 url = '/mr/amr/getfromthird/'  + IMER_GLOBAL.encounterSn;
                chain.execute({
                    operations: [],
                    params: [param],
                    url: url,
                    callback: function(data) {
                        var portal = app.down('portalview');
                        var initChain = portal.getActionChain('init')
                        initChain.execute({
                            hospitalAreaCode:IMER_GLOBAL.hospitalArea.code,
                            hospitalAreaName:IMER_GLOBAL.hospitalArea.name,
                            departmentCode:IMER_GLOBAL.department.code,
                            departmentName:IMER_GLOBAL.department.name,
                            portalCode:IMER_GLOBAL.portal.code,
                            portalName:IMER_GLOBAL.portal.name,
                            patient:data
                        });
                    }
                });
            }
        });
	},
	
	getChain: function() {
        if(!this.chain) {
            // TODO 构造函数创建
            this.chain = Xap.create({
                xclass: 'Xap.ej.action.Chain'
            });
            var action = Xap.create({
                xclass: 'Xap.ej.action.IntelligentInputAction'
            });
            this.chain.addAction(action);
        }
        return this.chain;
    }
	
});

Ext.define('iih.po.com.action.BackPortalAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override
	*/
	doExecute: function(context) {
    	this.callParent();
    	var sp = this.getOwner();
    	var app = sp.ownerCt;
    	//console.log(app);
    	var layout = app.getLayout();
    	layout.setActiveItem(0);
    }
});

Ext.define('iih.po.com.action.CloseWorkPageAction', {
	extend:  Xap.ej.action.Action ,
	
	requires: [],
	
	/*
	* @Override
	*/
	execute: function(context) {
	    this.callParent();
	    var portal = this.getOwner();
	    var workArea = portal.down('xaptabpanel[id=workareapageview]');
	    var callBack = workArea.callBack;
	    var closePages = workArea.closePages;
	    if(closePages){
	        if(closePages.length > 0){
	            workArea.closeWorkPage = true;
	            workArea.remove(closePages[0]);
	            return;
	        }
	    }else{
	        var tabs = workArea.items.items;
            if(tabs.length > 0){
                workArea.closeWorkPage = true;
                workArea.remove(0);
                return;
            }
	    };
	    var callBack = workArea.callBack;
        workArea.closeWorkPage = false;
        if(callBack){
            var method = callBack.method;
            var scope = callBack.scope;
            var params = callBack.params;
            if(method && Ext.isFunction(method)){
                method.apply(scope, params);
                workArea.callBack = null;
                workArea.closePages = null;
            }
        }
	}
});
Ext.define('iih.po.com.action.FunctionTreeInitAction', {
    extend:  Xap.ej.action.ServiceInvocation ,
    
    /*
    * @Override
    */
    doExecute: function(context) {
        this.callParent();
        this.menuCd = context.menuCd;
        var operations = context.operations;
        var block = this.getBlock('content');
        var url = this.url;
        var mclass = null;
        var condition = {
           userId: IMER_GLOBAL.user.code,
           orgCd: IMER_GLOBAL.department.code,
           portalCd: IMER_GLOBAL.portal.code
        };
        var qs = Ext.Object.toQueryString(condition);
        url += '?' + qs;
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: mclass,
            method: METHODS.METHOD_GET,
            condition: condition,
            scope: this,
            success: this.onSuccess
        };
        operations.push(operation);
    },
    
    onSuccess: function(operation) {
        var portal = this.getOwner();
        var block = portal.down('functionnavigationblock');
        var m = operation.result;
        if(m){
            block.setData(m.root.children,this.menuCd);
        }
    }
});
Ext.define('iih.po.com.action.JumpFunctionAction', {
	extend:  Xap.ej.action.ServiceInvocation ,

	requires: [],
	
	/*
	* @Override
	*/
	doExecute: function(context) {
	    this.callParent();
	    var view = this.getOwner();
        var operations = context.operations;
	    var data = context.data;
	    this.portalCd = data.portalCd;
	    this.menuCd = data.menuCd;
	    this.revisionCd = data.revisionCd;
	    var url = 'validateUser';
        var mclass = null;
        var condition = {
           userId: IMER_GLOBAL.user.code,
           orgCd: IMER_GLOBAL.department.code,
           portalCd: this.portalCd,
           menuCd: this.menuCd
        };
        var qs = Ext.Object.toQueryString(condition);
        url += '?' + qs;
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: mclass,
            method: METHODS.METHOD_GET,
            condition: condition,
            scope: this,
            success: this.onSuccess
        };
        operations.push(operation);
    },
    
    onSuccess: function(operation) {
        var data = operation.result.data;
        var result = data.validate;
        if(result == 'true'){
            //关闭弹出窗体
            var windows = Ext.ComponentQuery.query('window');
            Ext.each(windows,function(w){
                if(w.modal)w.close();
            });
            
            var portalCd = this.portalCd;
            var menuCd = this.menuCd;
            var revisionCd = this.revisionCd;
            var portal = Ext.getCmp('portalview');
            var workArea = portal.down('xaptabpanel[id=workareapageview]');
            var callBack = function(){
                IMER_GLOBAL.portal.code = portalCd;
                IMER_GLOBAL.revisionCd = revisionCd;
                var chain = this.getActionChain('init');
                chain.execute({
                    hospitalAreaCode:IMER_GLOBAL.hospitalArea.code,
                    hospitalAreaName:IMER_GLOBAL.hospitalArea.name,
                    departmentCode:IMER_GLOBAL.department.code,
                    departmentName:IMER_GLOBAL.department.name,
                    portalCode:IMER_GLOBAL.portal.code,
                    portalName:IMER_GLOBAL.portal.name,
                    menuCd:menuCd
                });
            };
            workArea.callBack = {
                method: callBack,
                scope: portal,
                params: []
            };
            workArea.closePages = null;
            var canvas = Xap.getCanvas();
            canvas.fireEvent("portalRender");
        }else{
            XapMessageBox.warn('用户没有处理权限！');
        }
    }
});

Ext.define('iih.po.com.action.LoginAction', {
	extend:  Xap.ej.action.LoginAction ,

	url: 'xap_login',
	
	/*
	* @Override
	*/
	doExecute: function(context) {
    	this.callParent();
    	var operations = context.operations;
    	var loginBlock = this.getBlock('lvblock');
    	var data = loginBlock.getForm().getValues();
    	var sp = this.getOwner();
    	if((data!=undefined)||(data!=null)){
    		data = loginBlock.getForm().getValues();
    	}else{
    		data = null;
    	}
    	var name,pass,showInfo;
    	if(!Ext.isEmpty(data, false)){
    		name = data.username;
    		pass = data.password;
    		showInfo = loginBlock.down('xapdisplayfield');
    		//进行前台登录框验证
    		if(Ext.isEmpty(name, false)){
    			showInfo.setValue('<font color=red>用户名不能为空!</font>');
    			return null;
    		}else{
	    		if(Ext.isEmpty(pass, false)){
	    			showInfo.setValue('<font color=red>密码不能为空!</font>');
	    			return null;
	    		}else{
	    			//用户登录后台验证
	    			context.data = data;
	    			context.data.username = data.username;
	    		}
    		}
    	}
    	return true;
    },

	onLoginSuccess : function(info) {
	    IMER_GLOBAL.user.code = info.userId;
        IMER_GLOBAL.user.name = info.userName;
		var login = this.getOwner();
		var app = login.ownerCt;
		var layout = app.getLayout();
		if(Ext.isEmpty(IMER_GLOBAL.portal.code, false)){
		    var portal = app.down('selectportal');
	        var chain = portal.getActionChain('init')
			chain.execute();
			layout.setActiveItem(1);
		}else{
		    var portal = app.down('portalview');
            var chain = portal.getActionChain('init')
			chain.execute({
			    hospitalAreaCode:IMER_GLOBAL.hospitalArea.code,
	            hospitalAreaName:IMER_GLOBAL.hospitalArea.name,
	            departmentCode:IMER_GLOBAL.department.code,
	            departmentName:IMER_GLOBAL.department.name,
	            portalCode:IMER_GLOBAL.portal.code,
	            portalName:IMER_GLOBAL.portal.name
		    });
			layout.setActiveItem(2);
		}
		
		var loginBlock = this.getBlock('lvblock');
		var data = loginBlock.getForm().getValues();
		if(data.rememberInfo){
		    var expires = new Date(new Date().getTime() + (1000 * 60 * 60 * 24 * 30)); //30天
	        Ext.util.Cookies.set('userId', data.username, expires);
	        Ext.util.Cookies.set('password', data.password, expires);
		}else{
		    Ext.util.Cookies.clear('userId');
		    Ext.util.Cookies.clear('password');
		}
	},

	onLoginFailure : function(error) {
		var block = this.getBlock('lvblock');
		var showInfo = block.down('xapdisplayfield');
		var errorText = null;
		if(error) {
			errorText = error.desc;
		}
		if(!errorText) {
			// TODO 系统故障描述应该也从框架得到
			errorText = '系统故障';
		}
		showInfo.setValue('<font color=red>' + errorText + '</font>');
	}
});

Ext.define('iih.po.com.action.LoginInitAction', {
    extend:  Xap.ej.action.ServiceInvocation ,

    doExecute: function(context) {
        var view = this.getOwner();
        var username = view.down('textfield[name=username]');
        var password = view.down('textfield[name=password]');
        var rememberInfo = view.down('checkbox[name=rememberInfo]');
        var userId = Ext.util.Cookies.get('userId');
        if(userId){
            username.setValue(userId);
            var psw = Ext.util.Cookies.get('password');
            password.setValue(psw);
            rememberInfo.setValue(true);
        }
        password.focus(false, 100);
        
        var METHODS = this.getInvocationMethods();
        var url = this.url;
        var operation = {
            url: url,
            method: METHODS.METHOD_POST,
            scope: this,
            success: this.onSuccess,
            fail: this.onFailure
        };
        //context.operations.push(operation);
    },

    onSuccess: function(operation) {
        var info = operation.result;
        //console.log(info);
        if(info.userId) {
            var login = this.getOwner();
            var app = login.ownerCt;
            var layout = app.getLayout();
            var portal = app.down('selectportal');
            var chain = portal.getActionChain('init');
            chain.execute();
            layout.setActiveItem(1);
        }
        this.callParent();
    }
});

Ext.define('iih.po.com.action.LoginKeyAction', {
	extend:  Xap.ej.action.Action ,
	
	/*
	* @Override
	*/
	execute: function(context) {
    	this.callParent();
    	var event = context.event;
    	var args = event.arguments;
        var e = args[1];
        var sp = this.getOwner();
        var chain = sp.getActionChain(args[0]);
        if(e.keyCode==Ext.EventObject.ENTER){
        	if(!chain) {
                chain = sp.getActionChain('login');
            }
            if(chain) {
                chain.execute(context);
            }
        }
    }
});

Ext.define('iih.po.com.action.LoginResetAction', {
	extend:  Xap.ej.action.Action ,
	
	/*
	* @Override
	*/
	execute: function(context) {
    	this.callParent();
        var loginview = this.getBlock('lvblock');
        if(loginview) {
        	loginview.getForm().reset();
        }
    	/*var login = this.getOwner();
    	var app = login.ownerCt;
    	app.close();*/
    }
});

Ext.define('Xap.ej.action.LogoutAction', {
	extend:  Xap.ej.action.ServiceInvocation ,

    doExecute: function(context) {
        var operations = context.operations;
        if(!operations) 
            return;
        var url = this.url || 'logout';
        var operation = {
            url: url,
            method: 'post',
            scope: this,
            success: this.onSuccess
        };
        operations.push(operation);
    },

    onSuccess: Ext.emptyFn,

    onFailure: Ext.emptyFn
});

Ext.define('iih.po.com.action.LogoutAction', {
	extend:  Xap.ej.action.LogoutAction ,

	url: 'logout',

	onSuccess : function() {
		//window.location.reload(true);
	    /*IMER_GLOBAL.user.code = null;
        IMER_GLOBAL.user.name = null;
        IMER_GLOBAL.hospitalArea.code = null;
        IMER_GLOBAL.hospitalArea.name = null;
        IMER_GLOBAL.department.code = null;
        IMER_GLOBAL.department.name = null;
        IMER_GLOBAL.portal.code = null;
        IMER_GLOBAL.portal.name = null;
        IMER_GLOBAL.encounterSn = null;*/
	    var app = Ext.getCmp('commonappmain');
        var layout = app.getLayout();
        layout.setActiveItem(0);
        Ext.TaskManager.stopAll();
	}
});

Ext.define('iih.po.com.action.MessageDeleteAction', {
    extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override
	*/
	doExecute: function(context) {
	    this.callParent();
	    var block = this.getBlock('content');
        var grid = block.down('xapgrid');
        var rs = grid.getSelectionModel().getSelection();
        var select = [];
        if (rs.length > 0) {
            for (i = 0; i < rs.length; i++) {
                select[i] = rs[i].data;
            }
            var data = {'ids':select};
            var operations = context.operations;
            if(!operations) {
                return;
            }
            var url = this.url;
            var operation = {
                url: url,
                method: 'delete',
                data:data,
                scope: this,
                success: this.onSuccess
            };
            operations.push(operation);
        }else{
            XapMessageBox.warn('请选择消息！');
        };
    },
    
    onSuccess: function(operation) {
        var m = operation.result;
        if(m){
            var view = this.getOwner();
            var chain = view.getActionChain('search');
            chain.execute(); 
            
            var portal = Ext.getCmp('portalview');
            var refreshMsg = portal.getActionChain('refreshMsg');
            refreshMsg.execute();
        }
    }
});
Ext.define('iih.po.com.action.MessageDetailSearchAction', {
    extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override
	*/
	doExecute: function(context) {
	    this.callParent();
    	var operations = context.operations;
    	var mesId = context.msg.mesId;
    	this.status = context.msg.status;
    	this.revisionCd = context.msg.revisionCd;
    	var url = this.url + '/' + mesId;
    	var mclass = null;
    	var METHODS = this.getInvocationMethods();
    	var operation = {
    	    url: url,
    	    method: METHODS.METHOD_GET,
            scope: this,
            success: this.onSuccess
    	};
    	operations.push(operation);
    },
    
    onSuccess: function(operation) {
        var block = this.getBlock('content');
        var m = operation.result;
        if(m && m.data && block){
            var data = m.data;
            var v = data.sendDate;
            var time = Ext.Date.parse(v, 'time');
            var sendDate = Ext.Date.format(time, 'Y-m-d H:i');
            data.sendDate = sendDate;
            block.setData(m.data);
            var txt = block.down('xaptextfield[name=revisionCd]');
            txt.setValue(this.revisionCd);
            if(this.status){
                var btn = block.down('button[name=confim]');
                btn.show();
            }
        }
    }
});
Ext.define('iih.po.com.block.MessageDetailBlock', {
    extend :  Xap.ej.block.FormBlock ,
    
                                                   
                                               
                                                
                                                   
                                                

    alias:'widget.messagedetailblock',

    layout: {
        type: 'table',
        columns: 2,
        tableAttrs: {
            border: 0,
            cellpadding: 5,
            cellspacing: 1,
            align: 'center'
        },
        tdAttrs: {
            valign: 'left'
        }
    },
    
    border:false,
    
    defaults:{
        labelWidth:60,
        width: 190,
        xtype:'xapdisplayfield'
    },
    
    items:[{
        xtype:'xaptextfield',
        name:'mesId',
        hidden: true
    },{
        xtype:'xapdisplayfield',
        name:'sendUserName',
        fieldLabel:'发送人'
    },{
        xtype:'xapdisplayfield',
        name:'sendDate',
        fieldLabel:'发送时间'
    },{
        xtype:'xaptextarea',
        name:'content',
        fieldLabel:'消息内容',
        width:600,
        height : 150,
        colspan:2
    },{
        xtype:'xaptextfield',
        name:'portalCd',
        hidden: true
    },{
        xtype:'xaptextfield',
        name:'menuCd',
        hidden: true
    },{
        xtype:'xaptextfield',
        name:'revisionCd',
        hidden: true
    }],
    
    buttons:[{
        xtype: "button",
        name: 'confim',
        method:'confim',
        text: '去处理',
        hidden:true,
        handler:function(btn,e){
            var form = btn.up('messagedetailblock');
            var data = form.getData();
            var view = form.up('messagedetailview');
            var chain = view.getActionChain('jump');
            chain.execute({
                data:data
            });
        }
    },{
        xtype: "button",
        name: 'close',
        method:'close',
        text: '关闭',
        handler:function(btn,e){
            var win = this.up('window');
            win.close();
        }
    }],
    
    initComponent: function() {
        this.callParent();
    }
})
Ext.define('iih.po.com.view.MessageDetailView', {
    extend :  Xap.ej.template.BaseTemplate ,

    requires: [],

    alias:'widget.messagedetailview',
    
    border: 0,
    
    layout: 'fit',

    xapConfig: {
        blocks: {
            'content': {
                xclass: 'iih.po.com.block.MessageDetailBlock'
            }
        },

        actions: {
            'search': {
                xclass: 'iih.po.com.action.MessageDetailSearchAction',
                url:'message',
                blocks: {
                    content: 'content'
                }
            },
            'jump': {
                xclass: 'iih.po.com.action.JumpFunctionAction',
                blocks: {
                    content: 'content'
                }
            }
        },

        chains: {
            'search': ['search'],
            'jump': ['jump']
        },

        connections: {
            /*'content': [{
                selector: 'button[name=confim]',
                event: 'click',
                chain: 'jump'
            }]*/
        }
    }
})
Ext.define('iih.po.com.action.MessageOpenAction', {
	extend:  Xap.ej.action.PopAction ,

	                                                
	
	/*
	* @Override
	*/
	execute: function(context) {
	    var view = this.getOwner();
    	var config = {
    	    modal: true,           
    		width: 650,
    		height:290,
    		title :'消息详情',
    		id:'messageDetailwin',
    		contentConfig: {
    			xtype: 'messagedetailview',
    			initChain: {
    				name: 'search',
    				context: context
    			}
    		}
    	};
    	this.callParent([config]);
    	var chain = view.getActionChain('read');
        chain.execute();
    }
});

Ext.define('iih.po.com.block.MessageListBlock', {
    extend :  Xap.ej.block.Block ,

                                          
                                                         
                                                  

    alias:'widget.messagelistblock',

    layout: 'fit',
    
    border: 0,
    
    flex: 1,

    items: [{
        xtype:'xapgrid',
        layout: 'fit',
        border:false,
        checkboxShow : true,
        showHeaderCheckbox:true,
        pageShow:true,
        mode: 'multi',
        pageSize:20,
        flex:1,
        CM_JR_Record: [{
            header:'标识',
            dataIndex:'readFlag',
            align: 'center',
            renderer : function(value) {
                return (value == 0)?"<img src='css/images/message/letter.png' />":"<img src='css/images/message/letter_open.png' />";
            },
            width:70
        },{
            header:'重要性',
            renderer : function(value) {
                return (value == 1)?'重要':'一般';
            },
            dataIndex:'mesLevel',
            width:70
        },{
            header:'发送人',
            dataIndex:'sendUserName',
            width:70
        },{
            header:'内容',
            dataIndex:'content',
            alink:true,
            flex:1
        },{
            header:'发送时间',
            dataIndex:'sendDate',
            xtype:'xapdatecolumn',
            width:120
        },{
            xtype:'xapactioncolumn',
            text:'操作',
            layout: {
                type: 'hbox',
                align: 'middle'
            },
            width:60,
            defectStore: null,
            items:[{
                //altText:'去处理',
                text:'去处理',
                //icon:'css/images/icons/arrow_right.png',
                handler: function(grid, rowIndex, colIndex) {
                    var store = grid.getStore();
                    var rec = store.getAt(rowIndex); 
                    var view = grid.up('messageview');
                    grid.getSelectionModel().select(rowIndex);
                    var chain2 = view.getActionChain('read');
                    chain2.execute();
                    var chain1 = view.getActionChain('jump');
                    chain1.execute({
                        data:rec.raw
                    });
                },
                getClass : function(v,m,record) {
                    if(!record.raw.status){
                        return 'x-hidden';
                    }                           
                }
            }]
        },{
            dataIndex:'mesId',
            hidden:true
        },{
            dataIndex:'portalCd',
            hidden:true
        },{
            dataIndex:'menuCd',
            hidden:true
        },{
            dataIndex:'status',
            hidden:true
        },{
            dataIndex:'revisionCd',
            hidden:true
        }],
        listeners: {
            itemdblclick: function(grid, rec, item, index) {
                var view = grid.up('messageview');
                var chain = view.getActionChain('open');
                chain.execute({
                    msg: rec.data
                });
            },
            linkClick: function(rec) {
                var view = this.up('messageview');
                var chain = view.getActionChain('open');
                chain.execute({
                    msg: rec
                });
            }
        },
        tbar:[{
            xtype: "button",
            name: 'read',
            text: '已读',
            iconCls: 'icon-send',
            handler:function(btn,e){
                var win = this.up('window');
                var view = this.up('messageview');
                var grid = this.up('xapgrid');
                var record = grid.getSelectionModel().getSelection();
                if(record && record.length>0){
                    var chain = view.getActionChain('read');
                    chain.execute();
                }else{
                    XapMessageBox.warn('请选择消息！','',win);
                }
            }
        },{
            xtype: "button",
            name: 'delete',
            text: '删除',
            iconCls: 'icon-Delete',
            handler:function(btn,e){
                var win = this.up('window');
                var view = this.up('messageview');
                var grid = this.up('xapgrid');
                var record = grid.getSelectionModel().getSelection();
                if(record && record.length>0){
                    XapMessageBox.confirm2('是否确认删除选中的消息？',
                        function(btn, text){
                            if (btn == 'yes') {
                                var chain = view.getActionChain('delete');
                                chain.execute();
                            } 
                        },win
                    );
                }else{
                    XapMessageBox.warn('请选择消息！','',win);
                }
            }
        }]
    }]
});
Ext.define('iih.po.com.action.MessageSearchAction', {
    extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override
	*/
	doExecute: function(context) {
	    this.callParent();
	    
	    var pageNum; 
        var pageSize = 20;
        if(context.event && context.event.name == 'turnpage'){
            pageNum = context.event.arguments[0]; 
            pageSize = context.event.arguments[1];
        }
        this.turnpage = false;
        if(pageNum)
            this.turnpage = true;
        
    	var operations = context.operations;
    	var url = this.url;
    	var mclass = null;
    	var condition = {
    	   userCd: IMER_GLOBAL.user.code,
    	   pageSize: pageSize,
           pageNum: pageNum
    	};
    	var qs = Ext.Object.toQueryString(condition);
    	url += '?' + qs;
    	var METHODS = this.getInvocationMethods();
    	var operation = {
    	    url: url,
    	    mclass: mclass,
    	    method: METHODS.METHOD_GET,
    	    condition: condition,
            scope: this,
            success: this.onSuccess
    	};
    	operations.push(operation);
    },
    
    onSuccess: function(operation) {
        var view = this.getOwner();
        var m = operation.result;
        var grid = view.down('xapgrid');
        if(m && m.dataList && grid){
            if(this.turnpage)
                grid.setData(m.dataList);
            else
                grid.setPageData(m);
        }
    }
});
Ext.define('iih.po.com.action.MessageReadAction', {
    extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override
	*/
	doExecute: function(context) {
	    this.callParent();
	    var block = this.getBlock('content');
        var grid = block.down('xapgrid');
        var rs = grid.getSelectionModel().getSelection();
        var select = [];
        if (rs.length > 0) {
            for (i = 0; i < rs.length; i++) {
                select[i] = rs[i].data;
            }
            var data = {'ids':select};
            var operations = context.operations;
            if(!operations) {
                return;
            }
            var url = this.url;
            var operation = {
                url: url,
                method: 'put',
                data:data,
                scope: this,
                success: this.onSuccess
            };
            operations.push(operation);
        }else{
            XapMessageBox.warn('请选择消息！');
        };
    },
    
    onSuccess: function(operation) {
        var m = operation.result;
        if(m){
            var view = this.getOwner();
            var chain = view.getActionChain('search');
            chain.execute();
            
            var portal = Ext.getCmp('portalview');
            var refreshMsg = portal.getActionChain('refreshMsg');
            refreshMsg.execute();
        }
    }
});
Ext.define('iih.po.com.view.MessageView', {
    extend :  Xap.ej.template.BaseTemplate ,

    requires: [],

    alias:'widget.messageview',
    
    border: 0,
    
    layout: 'fit',

    xapConfig: {
        blocks: {
            'content': {
                xclass: 'iih.po.com.block.MessageListBlock'
            }
        },

        actions: {
            'search': {
                xclass: 'iih.po.com.action.MessageSearchAction',
                url: 'message',
                blocks: {
                    content: 'content'
                }
            },
            'read': {
                xclass: 'iih.po.com.action.MessageReadAction',
                url: 'message/batch',
                blocks: {
                    content: 'content'
                }
            },
            'delete': {
                xclass: 'iih.po.com.action.MessageDeleteAction',
                url: 'message/batch',
                blocks: {
                    content: 'content'
                }
            },
            'open': {
                xclass: 'iih.po.com.action.MessageOpenAction',
                blocks: {
                    content: 'content'
                }
            },
            'jump': {
                xclass: 'iih.po.com.action.JumpFunctionAction',
                blocks: {
                    content: 'content'
                }
            }
        },

        chains: {
            'search': ['search'],
            'read': ['read'],
            'delete': ['delete'],
            'open': ['open'],
            'jump': ['jump']
        },

        connections: {
            'content': [{
                event: 'afterrender',
                chain: 'search'
            },{
                selector: 'xapgrid',
                event: 'turnpage',
                chain: 'search'
            }]
        }
    }
})
Ext.define('iih.po.com.action.MessagePopAction', {
	extend:  Xap.ej.action.PopAction ,

	                                          
	
	/*
	* @Override
	*/
	execute: function(context) {
	    var view = this.getOwner();
    	var config = {
    	    modal: true,           
    		width: 800,
    		height:600,
    		title :'消息列表',
    		name:'messagewin',
    		contentConfig: {
    			xtype: 'messageview',
    			initChain: {
    				name: 'search'
    			}
    		}
    	};
    	this.callParent([config]);
    }
});

Ext.define('iih.po.com.action.MessageRefreshAction', {
    extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override
	*/
	doExecute: function(context) {
	    this.callParent();
    	var operations = context.operations;
    	var url = this.url;
    	var mclass = null;
    	var condition = {
    	   userCd: IMER_GLOBAL.user.code
    	};
    	var qs = Ext.Object.toQueryString(condition);
    	url += '?' + qs;
    	var METHODS = this.getInvocationMethods();
    	var operation = {
    	    url: url,
    	    mclass: mclass,
    	    method: METHODS.METHOD_GET,
    	    condition: condition,
            scope: this,
            success: this.onSuccess
    	};
    	operations.push(operation);
    },
    
    onSuccess: function(operation) {
        var portal = this.getOwner();
        var m = operation.result;
        if(m && m.dataList){
            var msgArea = portal.down('container[name=msgArea]');
            if(msgArea){
                msgArea.removeAll();
                var msgBtn = Ext.create('Ext.button.Button',{
                    text:m.dataList.length>0?'<span class="message-count">'+m.dataList.length+'</span>':'',
                    //cls:'message-count',
                    iconCls: m.dataList.length>0?'message_05':'message_06',
                    scale: 'large',
                    tooltip: '消息',
                    margin: '20 20 5 0',
                    handler: function(){
                        var chain = portal.getActionChain('messagePop');
                        chain.execute();
                    }
                });
                msgArea.add(msgBtn);
                /*if(m.dataList.length > 0){
                    var msgTxt = Ext.create('Ext.form.Label',{
                        text: '( ' + m.dataList.length + ' )'
                    });
                    msgArea.add(msgTxt);
                };*/
            }
        }
    }
});
Ext.define('iih.po.com.action.PatientGridInitAction', {
    extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override
	*/
	doExecute: function(context) {
	    this.callParent();
	    this.showLoading();
    	var operations = context.operations;
    	var pageNum; 
        var pageSize = 30;
        if(context.event && context.event.name == 'turnpage'){
            pageNum = context.event.arguments[0]; 
            pageSize = context.event.arguments[1];
        }
        this.turnpage = false;
        if(pageNum)
            this.turnpage = true;
        var block = this.getBlock('content');
        var tabpanel = block.down('xaptabpanel');
        var grid = tabpanel.getActiveTab();
        var groupType = grid.groupType;
    	var url = this.url;
    	var mclass = null;
    	var enTpCd;
    	if(IMER_GLOBAL.portal.code == IMER_CONSTANT.PORTAL_CD_1)
    	    enTpCd = IMER_CONSTANT.OUTPATIENT;
    	if(IMER_GLOBAL.portal.code == IMER_CONSTANT.PORTAL_CD_2)
    	    enTpCd = IMER_CONSTANT.INPATIENT;
    	var condition = {
    	   workScreen: '1',
    	   userId: IMER_GLOBAL.user.code,
    	   deptCd: IMER_GLOBAL.department.code,
    	   enTpCd: enTpCd,
    	   groupType: groupType,
    	   pageSize: pageSize,
    	   pageNum: pageNum
    	};
    	var searchblock = this.getBlock('search');
    	var form = searchblock.down('xapform');
    	condition = Ext.apply(condition,form.getData());
    	if(context.curMgDctId)
            condition = Ext.apply(condition,{'curMgDctId':context.curMgDctId});
    	var qs = Ext.Object.toQueryString(condition);
    	url += '?' + qs;
    	var METHODS = this.getInvocationMethods();
    	var operation = {
    	    url: url,
    	    mclass: mclass,
    	    method: METHODS.METHOD_GET,
    	    condition: condition,
            scope: this,
            success: this.onSuccess
    	};
    	operations.push(operation);
    },
    
    onSuccess: function(operation) {
        var block = this.getBlock('content');
        var panel = block.down('xaptabpanel');
        if(!panel)return;
        var grid = panel.getActiveTab();
        var m = operation.result;
		if(m){
		    if(this.turnpage)
		        grid.setData(m.dataList);
		    else
		        grid.setPageData(m);
		    /*var store = grid.getStore();
            if(grid.groupType == '6')
                store.sort('finishTime','DESC');
            else
                store.sort('currentBedCode','ASC');*/
		}
    }
});
/** 
 *
 * 时间范围编辑框
 * @extends Ext.form.field.Date
 * @author：mengxinhua<meng_xinhua@founder.com>
 * 
 *
 */
Ext.define('Xap.ej.element.field.RangeDateField', {
	extend:  Ext.form.FieldContainer ,

	                                                                       
	
	alias: 'widget.rangedatefield',
	
	layout: 'hbox',
	
	colspan: 2,
	
	initComponent: function() {
		var config = this.initialConfig;
		this.initConfig(config);
		this.items = [Ext.apply(config.startConfig || {}, this.getStartConfig()), {
			xtype: 'container',
			margin: '2 1 2 1',
			html: '~'
			}, Ext.apply(config.endConfig || {}, this.getEndConfig())];
		
	    this.callParent();
	},
	
	//初始化开始结束验证配置
	initConfig: function(config) {
		config.startConfig = Ext.apply(config.startConfig || {}, {
			xtype: 'container',
			vtype: 'startValue'
		});
		
		config.endConfig = Ext.apply(config.endConfig || {}, {
			xtype: 'container',
			vtype: 'endValue'
		});
	},
	
	getStartConfig: function() {
		return {
			xtype: 'xapdatefield',
			name: 'startDate',
			editable:false,
			fieldType: 'date',
			width: 100
		};
	},
	
	getEndConfig: function() {
		return {
			xtype: 'xapdatefield',
			name: 'endDate',
			editable:false,
			fieldType: 'date',
			width: 100
		};
	}
});
Ext.define('iih.po.com.block.SearchPatientBlock', {
    extend :  Xap.ej.block.Block ,

                                           
                                          
                                          
                                                     
                                                   
                                                
                                                 
                                                    

    alias:'widget.searchpatientblock',

    layout: {
        type: 'vbox',
        align: 'stretch'
    },
    
    height: 90,
    
    border:false,

    items:[{
        xtype: 'xapform',
        flex: 1,
        layout: {
            type: 'hbox',
            align: 'middle'
        },
        border:false,
        defaults: {
            labelWidth:60,
            labelAlign:'right'
        },
        items:[{
            xtype:'xaptextfield',
            name:'currentBedCode',
            fieldLabel:'床位号',
            width:160,
            listeners:{
                specialkey : function(field, e) {  
                    if (e.getKey() == Ext.EventObject.ENTER) {  
                        var view = this.up('patientpopview');
                        var initChain = view.getActionChain('init');
                        initChain.execute({}); 
                    }  
                }
            }
        },{
            xtype:'xaptextfield',
            name:'amrNo',
            fieldLabel:'住院号',
            width:160,
            listeners:{
                specialkey : function(field, e) {  
                    if (e.getKey() == Ext.EventObject.ENTER) {  
                        var view = this.up('patientpopview');
                        var initChain = view.getActionChain('init');
                        initChain.execute({}); 
                    }  
                }
            }
        },{
            xtype:'xaptextfield',
            name:'patientName',
            fieldLabel:'姓名',
            width:160,
            listeners:{
                specialkey : function(field, e) {  
                    if (e.getKey() == Ext.EventObject.ENTER) {  
                        var view = this.up('patientpopview');
                        var initChain = view.getActionChain('init');
                        initChain.execute({}); 
                    }  
                }
            }
        },{
            xtype:'comboxgrid',
            name:'curMgDctId',
            disabled: true,
            fieldLabel:'主管医师',
            url: 'employee',
            width:160,
            listWidth:210,
            valueField : 'id',
            displayField: 'name',
            searchParam: {'deptCd': IMER_GLOBAL.department.code},
            columns: [{
               text: '人员id',
               dataIndex: 'id',
               width:70
            },{
               text: '医师姓名',
               flex:1,
               dataIndex: 'name'
            }],
            callback:function(newValue,oldValue,record){
                var view = this.up('patientpopview');
                var initChain = view.getActionChain('init');
                initChain.execute({
                    curMgDctId:newValue
                });
            }
        },{
            xtype:'rangedatefield',
            name:'finishTime',
            disabled: true,
            fieldLabel:'出院时间'
        }]
    },{
        xtype: 'xaptoolbarblock',
        height: 30,
        items: [{
            xtype: 'button',
            iconCls: 'icon-reset',
            text: '重置',
            action: 'reset',
            handler:function(btn,e){
                var block = btn.up('searchpatientblock');
                var form = block.down('xapform');
                form.getForm().reset();
                var startDate = block.down('xapdatefield[name=startDate]');
                var endDate = block.down('xapdatefield[name=endDate]');
                startDate.setMaxValue(null);
                endDate.setMinValue(null);
                var view = btn.up('patientpopview');
                var block = btn.up('searchpatientblock');
                var form = block.down('xapform');
                if(form.getForm().isValid()){
                    var chain = view.getActionChain('init');
                    chain.execute();
                }
            }
        },{
            xtype: 'button',
            iconCls: 'icon-Search',
            text: '查询',
            action: 'search',
            handler:function(btn,e){
                var view = btn.up('patientpopview');
                var block = btn.up('searchpatientblock');
                var form = block.down('xapform');
                if(form.getForm().isValid()){
                    var chain = view.getActionChain('init');
                    chain.execute();
                }
            }
        }]
    }],
    
    initComponent: function() {
        this.callParent();
        var curMgDctId = this.down('comboxgrid[name=curMgDctId]');
        curMgDctId.searchParam = {'deptCd': IMER_GLOBAL.department.code};
    }
})
Ext.define('iih.po.com.block.PatientPopBlock', {
    extend :  Xap.ej.block.FormBlock ,
    
                                          
                                          
                                                 
                                                    

    alias:'widget.patientpopblock',

    layout: 'fit',
    
    flex: 1,
    
    border:false,
    
    items:[{
        xtype:'xaptabpanel',
        layout: {
            type:'vbox',
            align:'stretch'
        },
        border:false,
        defaults:{
            xtype:'xapgrid',
            selectBy:'pk',
            layout: 'fit',
            border:false,
            pageShow:true,
            pageSize:30,
            flex:1,
            listeners: {
                itemdblclick: function(grid, rec, item, index) {
                    var win = grid.up('window');
                    var block = win.down('patientpopblock');
                    block.changePatient(win,rec.raw);
                }
            }
        },
        items:[{
            title:'本人患者',
            groupType:1
        },{
            title:'本诊疗组',
            hidden:true,
            groupType:4
        },{
            title:'全科患者',
            groupType:2
        },{
            title:'跨科患者',
            hidden:true,
            groupType:5
        },{
            title:'转出患者',
            hidden:true,
            groupType:3
        },{
            title:'出院未完成患者',
            //hidden:true,
            groupType:6
        },{
            title:'全部患者',
            groupType:7
        }],
        tabBar: {
            items:[{
                xtype: 'container',
                layout: {
                    type: 'hbox',
                    align: 'middle',
                    pack: 'end',
                    padding: '2 0 0 0'
                },
                flex: 1,
                items: [{
                    xtype: 'tool',
                    itemId: 'refreshBtn',
                    type: 'refresh',
                    tooltip: '刷新',
                    callback:function(owner,tool){
                        var view = owner.up('patientpopview');
                        var chain = view.getActionChain('init');
                        chain.execute();
                    }
                },{
                    xtype: 'label',
                    width: 5
                }]
            }]
        },
        listeners:{
            tabchange: function(tabPanel, newCard, oldCard) {
                var block = tabPanel.up('patientpopblock');
                var btn = block.down('button[itemId=doctorBtn]');
                if(newCard.groupType == 1){
                    btn.setDisabled(false);
                }else{
                    btn.setDisabled(true);
                };
                var view = tabPanel.up('patientpopview');
                var curMgDctId = view.down('comboxgrid[name=curMgDctId]');
                var startDate = view.down('xapdatefield[name=startDate]');
                var endDate = view.down('xapdatefield[name=endDate]');
                var finishTime = view.down('rangedatefield[name=finishTime]');
                if(newCard.groupType == 6 || newCard.groupType == 7){
                    if(curMgDctId)curMgDctId.setDisabled(false);
                    if(finishTime)finishTime.setDisabled(false);
                }else{
                    if(curMgDctId){
                        curMgDctId.setDisabled(true);
                        curMgDctId.reset();
                    };
                    if(finishTime){
                        finishTime.setDisabled(true);
                        startDate.reset();
                        startDate.setMaxValue(null);
                        endDate.reset();
                        endDate.setMinValue(null);
                    };
                }
            }
        }
    }],
    
    buttons:[{
        xtype: "container",
        flex: 1,
        layout: {
            type: 'hbox',
            align: 'middle',
            pack: 'start'
        },
        items: [{
            xtype: "button",
            itemId: 'doctorBtn',
            text: '三级检诊医师',
            handler:function(btn,e){
                var win = this.up('window');
                var view = this.up('patientpopview');
                var tabpanel = win.down('xaptabpanel');
                var grid = tabpanel.getActiveTab();
                var record = grid.getSelectionModel().getSelection();
                if(record && record.length>0){
                    var rec = record[0].raw;
                    var chain = view.getActionChain('setDoctor');
                    chain.execute({
                        patient: rec
                    });
                }else{
                    XapMessageBox.warn('请选择患者！','',win);
                }
            }
        }]
    },{
        xtype: "container",
        flex: 1,
        layout: {
            type: 'hbox',
            align: 'middle',
            pack: 'end'
        },
        items: [{
            xtype: "button",
            name: 'confim',
            method:'confim',
            width: 75,
            text: '确认',
            style : 'margin-right:10px',
            handler:function(btn,e){
                var win = this.up('window');
                var block = win.down('patientpopblock');
                var tabpanel = win.down('xaptabpanel');
                var grid = tabpanel.getActiveTab();
                var record = grid.getSelectionModel().getSelection();
                if(record && record.length>0){
                    var rec = record[0].raw;
                    block.changePatient(win,rec);
                }else{
                    XapMessageBox.warn('请选择患者！','',win);
                }
            }
        },{
            xtype: "button",
            name: 'cancel',
            method:'cancel',
            width: 75,
            text: '取消',
            handler:function(btn,e){
                var win = this.up('window');
                if(IMER_GLOBAL.encounterSn){
                    win.close();
                }else{
                    XapMessageBox.warn('请选择患者！','',win);
                }
            }
        }]
    }],
    
    initComponent: function() {
        var me = this;
        Ext.each(me.items[0].items,function(item){
            item.CM_JR_Record = me.createGridColumn(item.groupType);
        });
        me.callParent();
    },
    
    createGridColumn: function(groupType) {
        var columnConfig = [{
            dataIndex:'pk',
            hidden:true
        },{
            dataIndex:'patientId',
            hidden:true
        },{
            header:'床号',
            dataIndex:'currentBedCode',
            width:70
        },{
            header:'住院号',
            dataIndex:'amrNo',
            width:100
        },{
            header:'姓名',
            dataIndex:'patientName',
            width:80
        },{
            header:'性别',
            dataIndex:'sexName',
            width:50
        },{
            header:'年龄',
            dataIndex:'age',
            width:50
        },{
            header:'入科时间',
            xtype:'xapdatecolumn',
            dataIndex:'currentDeptIntoTime',
            flex:2
        },{
            header:'出院时间',
            xtype:'xapdatecolumn',
            dataIndex:'finishTime',
            hidden:((groupType==6 || groupType==7)?false:true),
            flex:2
        },{
            header:'经治医师',
            dataIndex:'currentManageDoctorName',
            width:100
        },{
            header:'主治医师',
            dataIndex:'majorDoctorName',
            width:100
        },{
            header:'主任医师',
            dataIndex:'directorDoctorName',
            width:100
        }];
        return columnConfig;
    },
    
    changePatient: function(win,rec){
        var pk = rec.pk;
        if(pk == IMER_GLOBAL.encounterSn){
            win.close();
        }else{
            var workArea = Ext.getCmp('workareapageview');
            var closePages = new Array();
            var tabs = workArea.items.items;
            Ext.each(tabs,function(item){
                if(!item.baseMenu)
                    closePages.push(item);
            });
            if(closePages && closePages.length>0){
                var callBack = function(patient){
                    var canvas = Xap.getCanvas();
                    canvas.fireEvent("updatePatient",{patient:patient});
                    this.close();
                };
                workArea.callBack = {
                    method: callBack,
                    scope: win,
                    params: [rec]
                };
                workArea.closePages = closePages;
                var canvas = Xap.getCanvas();
                canvas.fireEvent("portalRender");
            }else{
                var canvas = Xap.getCanvas();
                canvas.fireEvent("updatePatient",{patient:rec});
                win.close();
            }
        }
    }
})
Ext.define('iih.po.com.action.SelectPatientAction', {
	extend:  Xap.ej.action.Action ,
	
	requires: [],
	
	/*
	* @Override
	*/
	execute: function(context) {
	    //切换患者
        var event = context.event;
        var patient;
        if(event) {
            var args = event.arguments;
            var node = args[1];
            patient = node.raw;
            var canvas = Xap.getCanvas();
            canvas.fireEvent("updatePatient",{patient:patient});
            this.getOwner().ownerCt.close();
        }else{
            patient = context.patient;
            var canvas = Xap.getCanvas();
            canvas.fireEvent("updatePatient",{patient:patient});
        };
    }
});
Ext.define('iih.po.com.block.SetDoctorPopBlock', {
    extend :  Xap.ej.block.FormBlock ,
    
                                                   
                                               
                                                
                                                    

    alias:'widget.setdoctorpopblock',

    layout: {
        type: 'table',
        columns: 3,
        tableAttrs: {
            border: 0,
            cellpadding: 5,
            cellspacing: 1,
            align: 'center'
        },
        tdAttrs: {
            valign: 'left'
        }
    },
    
    border:false,
    
    parent:null,
    
    defaults:{
        labelWidth:60,
        width: 190,
        xtype:'xapdisplayfield'
    },
    
    items:[{
        xtype:'xaptextfield',
        name:'pk',
        hidden: true
    },{
        xtype:'xapdisplayfield',
        name:'inpatientNo',
        fieldLabel:'住院号'
    },{
        xtype:'xapdisplayfield',
        name:'patientName',
        fieldLabel:'患者姓名',
        colspan: 2
    },{
        xtype:'xapdisplayfield',
        name:'currentManageDoctorName',
        fieldLabel:'经治医师'
    },{
        xtype:'comboxgrid',
        name:'curMojDctId',
        fieldLabel:'主治医师',
        url: 'employee',
        listWidth:210,
        valueField : 'id',
        displayField: 'name',
        searchParam: {'deptCd': IMER_GLOBAL.department.code},
        columns: [{
           text: '人员id',
           dataIndex: 'id',
           width:70
        },{
           text: '医师姓名',
           flex:1,
           dataIndex: 'name'
        }],

    },{
        xtype:'comboxgrid',
        name:'curDrcDctId',
        fieldLabel:'主任医师',
        url: 'employee',
        listWidth:210,
        valueField : 'id',
        displayField: 'name',
        searchParam: {'deptCd': IMER_GLOBAL.department.code},
        columns: [{
           text: '人员id',
           dataIndex: 'id',
           width:70
        },{
           text: '医师姓名',
           flex:1,
           dataIndex: 'name'
        }],
    }],
    
    buttons:[{
        xtype: "button",
        name: 'confim',
        method:'confim',
        text: '确认'
    },{
        xtype: "button",
        name: 'cancel',
        method:'cancel',
        text: '取消',
        handler:function(btn,e){
            var win = this.up('window');
            win.close();
        }
    }],
    
    initComponent: function() {
        this.callParent();
        var curMojDct = this.down('comboxgrid[name=curMojDctId]');
        curMojDct.searchParam = {'deptCd': IMER_GLOBAL.department.code};
        var curDrcDct = this.down('comboxgrid[name=curDrcDctId]');
        curDrcDct.searchParam = {'deptCd': IMER_GLOBAL.department.code};
    }
})
Ext.define('iih.po.com.action.SetDoctorInitAction', {
	extend:  Xap.ej.action.ServiceInvocation ,

	requires: [],
	
	/*
	* @Override
	*/
	execute: function(context) {
	    var view = this.getOwner();
	    var block = view.getBlock('content');
	    block.setData(context.patient);
    }
});

Ext.define('iih.po.com.action.SetDoctorSaveAction', {
    extend:  Xap.ej.action.ServiceInvocation ,
    
    /*
    * @Override
    */
    doExecute: function(context) {
        this.callParent();
        this.showSubmitProgressBar();
        var operations = context.operations;
        var block = this.getBlock('content');
        var data = block.getData();
        var url = this.url;
        url+= '/' + data.pk;
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: null,
            method: METHODS.METHOD_UPDATE,
            condition: null,
            data:data,
            scope: this,
            success: this.onSuccess
        };
        operations.push(operation);
    },
    
    onSuccess: function(operation) {
        var view = this.getOwner();
        var win = view.up('window');
        var parent = Ext.getCmp('patientpopview');
        var fn = function(){
            win.close();
            if(parent){
                var chain = parent.getActionChain('init');
                chain.execute();
            }
        };
        if(Ext.isObject(operation.data) && win){
            XapMessageBox.info('三级医师设置成功！',fn,win);
        }
    }
});
Ext.define('iih.po.com.view.SetDoctorPopView', {
    extend :  Xap.ej.template.BaseTemplate ,

    requires: [],

    alias:'widget.setdoctorpopview',
    
    border: 0,
    
    layout: 'fit',

    xapConfig: {
        blocks: {
            'content': {
                xclass: 'iih.po.com.block.SetDoctorPopBlock'
            }
        },

        actions: {
            'init': {
                xclass: 'iih.po.com.action.SetDoctorInitAction',
                blocks: {
                    content: 'content'
                }
            },
            'save': {
                xclass: 'iih.po.com.action.SetDoctorSaveAction',
                url: 'setDoctor',
                blocks: {
                    content: 'content'
                }
            }
        },

        chains: {
            'init': ['init'],
            'save': ['save']
        },

        connections: {
            'content': [{
                selector: 'button[name=confim]',
                event: 'click',
                chain: 'save'
            }]
        }
    }
})
Ext.define('iih.po.com.action.SetDoctorPopAction', {
	extend:  Xap.ej.action.PopAction ,

	                                               
	
	/*
	* @Override
	*/
	execute: function(context) {
	    var parent = context.parent;
	    var patient = context.patient;
    	var config = {
    	    modal: true,           
    		width: 650,
    		height:150,
    		title :'三级医师设置',
    		contentConfig: {
    			xtype: 'setdoctorpopview',
    			initChain: {
                    name: 'init',
                    context: {
                        patient: patient
                    }
                }
    		}
    	};
    	this.callParent([config]);
    }
});

Ext.define('iih.po.com.view.PatientPopView', {
    extend :  Xap.ej.template.BaseTemplate ,

    requires: [],

    alias:'widget.patientpopview',
    
    border: 0,
    
    layout: {
        type: 'vbox',
        align: 'stretch'
    },
    
    id: 'patientpopview',

    xapConfig: {
        blocks: {
            'search': {
                xclass: 'iih.po.com.block.SearchPatientBlock'
            },
            'content': {
                xclass: 'iih.po.com.block.PatientPopBlock'
            }
        },

        actions: {
            'init': {
                xclass: 'iih.po.com.action.PatientGridInitAction',
                url: 'mr/ens',
                blocks: {
                    search: 'search',
                    content: 'content'
                }
            },
            'selectPatient': {
                xclass: 'iih.po.com.action.SelectPatientAction',
                blocks: {
                    content: 'content'
                }
            },
            'setDoctor': {
                xclass: 'iih.po.com.action.SetDoctorPopAction',
                blocks: {
                    content: 'content'
                }
            }
        },

        chains: {
            'init': ['init'],
            'selectPatient': ['selectPatient'],
            'setDoctor': ['setDoctor']
        },

        connections: {
            'content': [{
                selector: 'xapgrid[groupType=1]',
                event: 'turnpage',
                chain: 'init'
            },{
                selector: 'xapgrid[groupType=2]',
                event: 'turnpage',
                chain: 'init'
            },{
                selector: 'xapgrid[groupType=6]',
                event: 'turnpage',
                chain: 'init'
            },{
                selector: 'xapgrid[groupType=7]',
                event: 'turnpage',
                chain: 'init'
            },{
                selector: 'xaptabpanel',
                event: 'tabchange',
                chain: 'init'
            }]
        }
    }
})
Ext.define('iih.po.outp.block.OutpPatientSearchBlock', {
extend :  Xap.ej.block.FormBlock ,
    
                                           
                                          
                                          
                                                
                                                     
                                                   
                                                
                                                 
                                                    

    alias:'widget.outppatientsearchblock',

    layout: {
        type: 'vbox',
        align: 'stretch'
    },
    
    height: 640,
    
    border:false,
    
    items:[{
        xtype: 'xapform',
        height: 40,
        layout: {
            type: 'hbox',
            align: 'middle'
        },
        border:false,
        defaults: {
            labelWidth:70,
            labelAlign:'right'
        },
        items:[{
            xtype:'xaptextfield',
            name:'patientName',
            fieldLabel:'患者姓名',
            listeners:{
                specialkey : function(field, e) {  
                    if (e.getKey() == Ext.EventObject.ENTER) {  
                        var view = this.up('outppatientview');
                        var chain = view.getActionChain('search');
                        chain.execute({}); 
                    }  
                }
            }
        },{
            xtype:'xapdatefield',
            name:'enDate',
            fieldLabel:'就诊时间',
            editable:false,
            //value: new Date(),
            listeners:{
                change : function(dateField, newValue, oldValue, e) {
                    var view = this.up('outppatientview');
                    var chain = view.getActionChain('search');
                    chain.execute();
                }
            }
        }]
    },{
        xtype: 'xaptoolbarblock',
        items: [{
            xtype: 'button',
            iconCls: 'icon-reset',
            text: '重置',
            action: 'reset',
            handler:function(btn,e){
                var block = btn.up('outppatientsearchblock');
                var form = block.down('xapform');
                form.getForm().reset();
                var view = btn.up('outppatientview');
                if(form.getForm().isValid()){
                    var chain = view.getActionChain('search');
                    chain.execute();
                }
            }
        },{
            xtype: 'button',
            iconCls: 'icon-Search',
            text: '查询',
            action: 'search',
            handler:function(btn,e){
                var view = btn.up('outppatientview');
                var block = btn.up('outppatientsearchblock');
                var form = block.down('xapform');
                if(form.getForm().isValid()){
                    var chain = view.getActionChain('search');
                    chain.execute();
                }
            }
        }]
    },{
        xtype:'xaptabpanel',
        flex: 1,
        layout: {
            type:'vbox',
            align:'stretch'
        },
        border:false,
        defaults:{
            xtype:'xapgrid',
            selectBy:'pk',
            layout: 'fit',
            border:false,
            pageShow:true,
            pageSize:30,
            flex:1,
            listeners: {
                itemdblclick: function(grid, rec, item, index) {
                    var win = grid.up('window');
                    var block = win.down('outppatientsearchblock');
                    block.changePatient(win,rec.raw);
                }
            }
        },
        items:[{
            title:'待诊患者',
            groupType:1,
            CM_JR_Record: [{
                dataIndex:'pk',
                hidden:true
            },{
                dataIndex:'patientId',
                hidden:true
            },{
                header:'门诊号',
                dataIndex:'amrNo',
                width:80
            },{
                header:'姓名',
                dataIndex:'patientName',
                width:100
            },{
                header:'性别',
                dataIndex:'sexName',
                width:60
            },{
                header:'年龄',
                dataIndex:'age',
                width:60
            },{
                header:'就诊时间',
                xtype:'xapdatecolumn',
                dataIndex:'receiveTime',
                width:120
            },{
                header:'就诊次',
                dataIndex:'encounterCount',
                width:60
            },{
                header:'患者身份',
                dataIndex:'paInsurNm',
                width:100
            },{
                header:'主诊断',
                dataIndex:'currentMainDiagnosisName',
                flex:1
            }]
        },{
            title:'已诊患者',
            groupType:2,
            CM_JR_Record: [{
                dataIndex:'pk',
                hidden:true
            },{
                dataIndex:'patientId',
                hidden:true
            },{
                header:'门诊号',
                dataIndex:'amrNo',
                width:80
            },{
                header:'姓名',
                dataIndex:'patientName',
                width:100
            },{
                header:'性别',
                dataIndex:'sexName',
                width:60
            },{
                header:'年龄',
                dataIndex:'age',
                width:60
            },{
                header:'就诊时间',
                xtype:'xapdatecolumn',
                dataIndex:'receiveTime',
                width:120
            },{
                header:'就诊次',
                dataIndex:'encounterCount',
                width:60
            },{
                header:'患者身份',
                dataIndex:'paInsurNm',
                width:100
            },{
                header:'主诊断',
                dataIndex:'currentMainDiagnosisName',
                flex:1
            }]
        },{
            title:'全科患者',
            groupType:3,
            CM_JR_Record: [{
                dataIndex:'pk',
                hidden:true
            },{
                dataIndex:'patientId',
                hidden:true
            },{
                header:'门诊号',
                dataIndex:'amrNo',
                width:80
            },{
                header:'姓名',
                dataIndex:'patientName',
                width:100
            },{
                header:'性别',
                dataIndex:'sexName',
                width:60
            },{
                header:'年龄',
                dataIndex:'age',
                width:60
            },{
                header:'就诊时间',
                xtype:'xapdatecolumn',
                dataIndex:'receiveTime',
                width:120
            },{
                header:'就诊次',
                dataIndex:'encounterCount',
                width:60
            },{
                header:'患者身份',
                dataIndex:'paInsurNm',
                width:100
            },{
                header:'主诊断',
                dataIndex:'currentMainDiagnosisName',
                flex:1
            }]
        }],
        tabBar: {
            items:[{
                xtype: 'container',
                layout: {
                    type: 'hbox',
                    align: 'middle',
                    pack: 'end',
                    padding: '2 0 0 0'
                },
                flex: 1,
                items: [{
                    xtype: 'tool',
                    itemId: 'refreshBtn',
                    type: 'refresh',
                    tooltip: '刷新',
                    callback:function(owner,tool){
                        var view = owner.up('outppatientview');
                        var chain = view.getActionChain('search');
                        chain.execute();
                    }
                },{
                    xtype: 'label',
                    width: 5
                }]
            }]
        }
    }],
    
    buttons:[{
        xtype: "button",
        name: 'confim',
        method:'confim',
        width: 75,
        text: '确认',
        style : 'margin-right:10px',
        handler:function(btn,e){
            var win = this.up('window');
            var block = win.down('outppatientsearchblock');
            var tabpanel = block.down('xaptabpanel');
            var grid = tabpanel.getActiveTab();
            var record = grid.getSelectionModel().getSelection();
            if(record && record.length>0){
                var rec = record[0].raw;
                block.changePatient(win,rec);
            }else{
                XapMessageBox.warn('请选择患者！','',win);
            }
        }
    },{
        xtype: "button",
        name: 'cancel',
        method:'cancel',
        width: 75,
        text: '取消',
        handler:function(btn,e){
            var win = this.up('window');
            if(IMER_GLOBAL.encounterSn){
                win.close();
            }else{
                XapMessageBox.warn('请选择患者！','',win);
            }
        }
    }],
    
    initComponent: function() {
        var me = this;
        me.callParent();
    },
    
    changePatient: function(win,rec){
        var pk = rec.pk;
        if(pk == IMER_GLOBAL.encounterSn){
            win.close();
        }else{
            var workArea = Ext.getCmp('workareapageview');
            var closePages = new Array();
            var tabs = workArea.items.items;
            Ext.each(tabs,function(item){
                if(!item.baseMenu && !item.isItem)
                    closePages.push(item);
            });
            if(closePages && closePages.length>0){
                var callBack = function(patient){
                    var canvas = Xap.getCanvas();
                    canvas.fireEvent("updatePatient",{patient:patient});
                    this.close();
                };
                workArea.callBack = {
                    method: callBack,
                    scope: win,
                    params: [rec]
                };
                workArea.closePages = closePages;
                var canvas = Xap.getCanvas();
                canvas.fireEvent("portalRender");
            }else{
                var canvas = Xap.getCanvas();
                canvas.fireEvent("updatePatient",{patient:rec});
                win.close();
            }
        }
    }
});
Ext.define('iih.po.outp.action.OutpPatientSearchAction', {
    extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override
	*/
	doExecute: function(context) {
	    this.callParent();
	    this.showLoading();
    	var operations = context.operations;
    	var pageNum; 
        var pageSize = 30;
        if(context.event && context.event.name == 'turnpage'){
            pageNum = context.event.arguments[0]; 
            pageSize = context.event.arguments[1];
        }
        this.turnpage = false;
        if(pageNum)
            this.turnpage = true;
        var block = this.getBlock('content');
        var form = block.down('xapform');
        var tabpanel = block.down('xaptabpanel');
        var grid = tabpanel.getActiveTab();
        var groupType = grid.groupType;
        
    	var url = this.url;
    	var mclass = null;
    	var condition = {
    	   workScreen: '3',
    	   groupType: groupType,
    	   userId: IMER_GLOBAL.user.code,
    	   deptCd: IMER_GLOBAL.department.code,
    	   pageSize: pageSize,
    	   pageNum: pageNum
    	};
    	condition = Ext.apply(condition,form.getData());
    	//if(context.deptCd)
    	    //condition = Ext.apply(condition,{'deptCd':context.deptCd});
    	var qs = Ext.Object.toQueryString(condition);
    	url += '?' + qs;
    	var METHODS = this.getInvocationMethods();
    	var operation = {
    	    url: url,
    	    mclass: mclass,
    	    method: METHODS.METHOD_GET,
    	    condition: condition,
            scope: this,
            success: this.onSuccess
    	};
    	operations.push(operation);
    },
    
    onSuccess: function(operation) {
        var block = this.getBlock('content');
        var tabpanel = block.down('xaptabpanel');
        var grid = tabpanel.getActiveTab();
        if(!grid)return;
        var m = operation.result;
		if(m){
		    if(this.turnpage)
		        grid.setData(m.dataList);
		    else
		        grid.setPageData(m);
		}
    }
});
Ext.define('iih.po.outp.view.OutpPatientView', {
    extend :  Xap.ej.template.BaseTemplate ,

    requires: [],

    alias:'widget.outppatientview',
    
    border: 0,
    
    layout: 'fit',
    
    id: 'outppatientview',

    xapConfig: {
        blocks: {
            'content': {
                xclass: 'iih.po.outp.block.OutpPatientSearchBlock'
            }
        },

        actions: {
            'search': {
                xclass: 'iih.po.outp.action.OutpPatientSearchAction',
                url: 'mr/ens',
                blocks: {
                    content: 'content'
                }
            },
            'selectPatient': {
                xclass: 'iih.po.com.action.SelectPatientAction',
                blocks: {
                    content: 'content'
                }
            }
        },

        chains: {
            'search': ['search'],
            'selectPatient': ['selectPatient']
        },

        connections: {
            'content': [{
                selector: 'xapgrid[groupType=1]',
                event: 'turnpage',
                chain: 'search'
            },{
                selector: 'xapgrid[groupType=2]',
                event: 'turnpage',
                chain: 'search'
            },{
                selector: 'xapgrid[groupType=3]',
                event: 'turnpage',
                chain: 'search'
            },{
                selector: 'xaptabpanel',
                event: 'tabchange',
                chain: 'search'
            }]
        }
    }
})
Ext.define('iih.po.com.action.PatientPopAction', {
	extend:  Xap.ej.action.PopAction ,

	                                                                                
	
	/*
	* @Override
	*/
	execute: function(context) {
	    var view = this.getOwner();
	    if(IMER_GLOBAL.portal.code == IMER_CONSTANT.PORTAL_CD_1 || IMER_GLOBAL.portal.code == IMER_CONSTANT.PORTAL_CD_8){
	        var config = {
                modal: true,           
                width: 950,
                height:640,
                title :'患者列表',
                contentConfig: {
                    xtype: 'outppatientview',
                    initChain: {
                        name: 'search'
                    }
                }
            };
	    }else{
	        var config = {
                modal: true,           
                width: 950,
                height:640,
                title :'患者列表',
                contentConfig: {
                    xtype: 'patientpopview',
                    initChain: {
                        name: 'init'
                    }
                }
            };
	    }
    	
    	this.callParent([config]);
    }
});

Ext.define('iih.po.com.action.PatientTreeInitAction', {
    extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override
	*/
	doExecute: function(context) {
	    this.callParent();
    	var operations = context.operations;
    	var url = this.url;
    	var mclass = null;
    	var enTpCd;
    	if(IMER_GLOBAL.portal.code == IMER_CONSTANT.PORTAL_CD_1)
    	    enTpCd = IMER_CONSTANT.OUTPATIENT;
    	if(IMER_GLOBAL.portal.code == IMER_CONSTANT.PORTAL_CD_2)
    	    enTpCd = IMER_CONSTANT.INPATIENT;
    	var condition = {
    	   workScreen: '1',
    	   userId: IMER_GLOBAL.user.code,
    	   deptCd: IMER_GLOBAL.department.code,
    	   enTpCd: enTpCd     
    	};
    	var form = this.getBlock('search');
    	condition = Ext.apply(condition,form.getData());
    	var qs = Ext.Object.toQueryString(condition);
    	url += '?' + qs;
    	console.log(url);
    	var METHODS = this.getInvocationMethods();
    	var operation = {
    	    url: url,
    	    mclass: mclass,
    	    method: METHODS.METHOD_GET,
    	    condition: condition,
            scope: this,
            success: this.onSuccess
    	};
    	operations.push(operation);
    },
    
    onSuccess: function(operation) {
        var block = this.getBlock('list');
        var m = operation.result;
		if(m){
		    //console.log(m.dataList);
			block.setData(m.dataList);
			var view = this.getOwner();
            var list = view.down('dataview');
            var store = list.getStore();
            var btn = view.down('splitbutton[name=sort]');
            var menu = btn.down('menu');
            var sort;
            Ext.each(menu.items.items,function(item){
                if(item.checked)
                    sort=item.name;
            });
            store.sort(sort,'ASC');
		}
    }
});
Ext.define('iih.po.com.action.PortalInitAction', {
    extend:  Xap.ej.action.Action ,
    
    /*
    * @Override
    */
    execute: function(context) {
        IMER_GLOBAL.hospitalArea.code = context.hospitalAreaCode;
        IMER_GLOBAL.hospitalArea.name = context.hospitalAreaName;
        IMER_GLOBAL.department.code = context.departmentCode;
        IMER_GLOBAL.department.name = context.departmentName;
        IMER_GLOBAL.portal.code = context.portalCode;
        IMER_GLOBAL.portal.name = context.portalName;
        var patientInfo = context.patient;
        
        this.callParent();
        //添加全局事件
        var canvas = Xap.getCanvas();
        canvas.addEvents("addWorkPage");
        canvas.addEvents("updatePatient");
        var view = this.getOwner();
        var block = this.getBlock('portal');
        //读取功能菜单
        var funcChain = view.getActionChain('functionRefresh');
        funcChain.execute({
            menuCd:context.menuCd
        });
        //设置工作区
        var workarea = block.down('workareapageview');
        workarea.removeAll(true);
        //设置top区域
        var top = block.down('topview');
        var topChain = top.getActionChain('init');
        topChain.execute({
            patientInfo:patientInfo
        });
        //显示portal
        var app = block.up('app');
        var layout = app.getLayout();
        layout.setActiveItem(2);
        if(view.popWindow){
            view.popWindow.destroy();
            view.popWindow = null;
        }
        //关闭弹出窗体
        /*var windows = Ext.ComponentQuery.query('window');
        Ext.each(windows,function(w){
            if(w.modal)w.close();
        });*/
        //弹出患者列表
        if(!IMER_GLOBAL.encounterSn && (IMER_GLOBAL.portal.code == IMER_CONSTANT.PORTAL_CD_1 || IMER_GLOBAL.portal.code == IMER_CONSTANT.PORTAL_CD_2 || IMER_GLOBAL.portal.code == IMER_CONSTANT.PORTAL_CD_8)){
            var patientChain = view.getActionChain('patientPop');
            patientChain.execute();
        };
        //弹出患者列表
        if(!IMER_GLOBAL.encounterSn && IMER_GLOBAL.portal.code == IMER_CONSTANT.PORTAL_CD_7){
            var patientChain = view.getActionChain('InpPatientPop');
            patientChain.execute();
        };
        //门诊时功能导航栏收起
        var functionBlock = view.down('functionnavigationblock');
        if(IMER_GLOBAL.portal.code == IMER_CONSTANT.PORTAL_CD_1 || IMER_GLOBAL.portal.code == IMER_CONSTANT.PORTAL_CD_8 || IMER_GLOBAL.portal.code == IMER_CONSTANT.PORTAL_CD_9)
            functionBlock.collapse();
        else
            functionBlock.expand();
        
    }
});
Ext.define('iih.po.com.action.SaveDeptAction', {
    extend:  Xap.ej.action.ServiceInvocation ,
	
	requires: [],
	
	/*
	* @Override
	*/
	doExecute: function(context) {
	    this.callParent();
        var url = this.url;
        var mclass = null;
        var condition = {
            deptId: IMER_GLOBAL.department.code,
            orgCd: IMER_GLOBAL.hospitalArea.code
        };
        var qs = Ext.Object.toQueryString(condition);
        url += '?' + qs;
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: mclass,
            method: METHODS.METHOD_GET,
            condition: condition,
            scope: this
        };
        var operations = context.operations;
        operations.push(operation);
    }
});
Ext.define('iih.po.com.action.SavePatientAction', {
    extend:  Xap.ej.action.ServiceInvocation ,
	
	requires: [],
	
	/*
	* @Override
	*/
	doExecute: function(context) {
	    this.callParent();
        var enSn = context.enSn;
        var url = this.url;
        var mclass = null;
        var condition = {
           enSn: enSn
        };
        var qs = Ext.Object.toQueryString(condition);
        url += '?' + qs;
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: mclass,
            method: METHODS.METHOD_GET,
            condition: condition,
            scope: this
        };
        var operations = context.operations;
        operations.push(operation);
    }
});
Ext.define('iih.po.com.action.SearchDepartmentAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	                                            
	/*
	* @Override
	*/
	doExecute: function(context) {
	    this.callParent();
	    var operations = context.operations;
	    var orgCd;
	    var event = context.event;
	    if(event){
	        var args = event.arguments;
	        orgCd = args[1];
	    }else{
	        orgCd = IMER_GLOBAL.hospitalArea.code;
	    }
	    var url = this.url;
        var mclass = null;
        var condition = {
            userId: IMER_GLOBAL.user.code,
            orgTpCd: IMER_CONSTANT.ORG_TYPE_CD_4,
            parOrgCd: orgCd
        };
        var qs = Ext.Object.toQueryString(condition);
        url += '?' + qs;
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: mclass,
            method: METHODS.METHOD_GET,
            condition: condition,
            scope: this,
            success: this.onSuccess
        };
        operations.push(operation);
    },
	onSuccess : function(operation) {
	    var data = operation.result;
	    if(data){
	        var block = this.getBlock("context");
	        block.setDepartmentData(data);
	    }
	}
});

Ext.define('iih.po.com.action.SearchHospitalAreaAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	                                            
	/*
	* @Override
	*/
	doExecute: function(context) {
	    this.callParent();
	    var operations = context.operations;
	    var url = this.url;
        var mclass = null;
        var condition = {
            userId: IMER_GLOBAL.user.code,
            orgTpCd: IMER_CONSTANT.ORG_TYPE_CD_2
        };
        var qs = Ext.Object.toQueryString(condition);
        url += '?' + qs;
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: mclass,
            method: METHODS.METHOD_GET,
            condition: condition,
            scope: this,
            success: this.onSuccess
        };
        operations.push(operation);
    },
	onSuccess : function(operation) {
		var view = this.getOwner();
		var combo = view.down('xapcombobox[name=hosArea]');
		combo.clearValue();
		var data = operation.result;
		if(data){
		    var array = new Array();
		    Ext.each(data,function(rec){
		        if(rec)
		            array.push({'text':rec.name,'value':rec.code});
		    });
		    combo.setData(array);
		    var record = combo.getStore().getAt(0);
		    combo.select(record);
		}else{
            combo.clearValue();
        }
	}
});

Ext.define('iih.po.com.action.SearchPortalAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	                                            
	/*
	* @Override
	*/
	doExecute: function(context) {
	    this.callParent();
	    var operations = context.operations;
	    var orgCd;
        var event = context.event;
        if(event){
            var args = event.arguments;
            orgCd = args[1];
        }else{
            orgCd = IMER_GLOBAL.department.code;
        }
	    var url = this.url;
        var mclass = null;
        var condition = {
            userId: IMER_GLOBAL.user.code,
            orgCd: orgCd
        };
        var qs = Ext.Object.toQueryString(condition);
        url += '?' + qs;
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: mclass,
            method: METHODS.METHOD_GET,
            condition: condition,
            scope: this,
            success: this.onSuccess
        };
        operations.push(operation);
    },
	onSuccess : function(operation) {
	    var data = operation.result;
        var block = this.getBlock("context");
        block.setPortalData(data);
	}
});

Ext.define('iih.po.com.action.SelectDeptAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override
	*/
	doExecute: function(context) {
		console.log('----------------SelectDeptAction-------------------');
		var sp = this.getOwner();
    	var app = sp.ownerCt;
    	var layout = app.getLayout();
    	var operations = context.operations;
		var selectBlock = this.getBlock('selectportals');
    	var sp = this.getOwner();
        var button = context;
    	var hosArea,deptCd,portalInfo,portalCd,portalNm;
    	deptCd = button.action;
    	deptNm = button.tooltip;
    	hosArea = IMER_GLOBAL.hospitalArea.code;
    	portalCd = IMER_GLOBAL.portal.code;
    	portalNm = IMER_GLOBAL.portal.name;
    	console.log('deptCd=='+deptCd+'--deptNm=='+deptNm+'--hosArea=='+hosArea+'--portalCd=='+portalCd+'--portalNm=='+portalNm);
    	this.prepareOperations(operations, hosArea, deptCd, portalNm, portalCd);
    	this.callParent();
    },  

	 prepareOperations : function(operations, hosArea, deptCd, portalNm, portalCd) {
		 var condition ='?hosArea='+hosArea+ '&deptCd='+deptCd+'&portalNm='+portalNm+'&portalCd='+portalCd;   
		var url = this.url+condition;
		//url += '/' + hosArea+'/'+deptCd+'/'+portalCd;
		var METHODS = this.getInvocationMethods();
		var operation = {
			url : url,
			mclass : null,
			method : METHODS.METHOD_GET,
			condition : null,
			data : null,
			scope : this,
			success : this.onSuccess,
			fail: this.onFail
		};
		operations.push(operation);
	},

	onSuccess : function(operation) {
		var block = this.getBlock('selectportals');
		var portalInfo = block.down('xapdisplayfield');
		var m = operation.result;
		if(!Ext.isEmpty(m, false)){
			var data = m.data;
			var portalNm = m.portalNm;
			var deptName = m.deptName;
			var deptCd = m.deptCd;
			var loginName = m.loginName;
			var userName = m.userName;
			var portals = m.portals;
			var depts = m.depts;
			if(data=='success'){
				var login = this.getOwner();
				var app = login.ownerCt;
				var layout = app.getLayout();
				var portal = app.down('portalview');
		        var chain = portal.getActionChain('init');
		        var portalSel = app.down('selectportal');
		        var chainPortal = portalSel.getActionChain('selectportals');
		        var chainDept = portalSel.getActionChain('selectdepts');
		        chain.execute();
		        var topview = app.down('topview');
		        //var label = topview.down('label[id=portalName]');
		        var selectPorBtn = topview.down('container[id=selectPorBtn]');
		        var selectDeptBtn = topview.down('container[id=selectDeptBtn]');
		        console.log('-----------dept------------');
		        //console.log(depts);
		        selectPorBtn.removeAll(true);
		        selectDeptBtn.removeAll(true);
		        var items,resultPortal=[],resultDept=[],size,deptSize;
		        if(!Ext.isEmpty(portals, false)){
		        	size = m.size;
		        	if(size>1){
		        		for(var i=0;i<portals.length;i++){
		        			resultPortal[i] = {
	        	            		text: portals[i].nm,
	        	            		tooltip:portals[i].nm,
	        	            		action: portals[i].poCd,
	        	            		handler:function(btn,e){
	        	            			chainPortal.execute(btn);
	        	            		}
	        					};
		        		}
	        			items = Ext.create('Ext.button.Split',{
        					text: portalNm,
							margin: '0 0 0 3',
							menu: Ext.create('Ext.menu.Menu', {
								cls: 'top-base',
								frame: true,
		        				margin: 0,
		        				padding: 0,
						        items: resultPortal
							})
	        			});
		        	}else{
		        		items = Ext.create('Ext.form.Label',{
		        	        forId: 'portalNm',
		        	        text: portalNm,
		        	        margin: '0 0 0 3'
		        		});
		        	}
		        	selectPorBtn.add(items);
			    }
		        if(!Ext.isEmpty(depts, false)){
		        	deptSize = m.deptSize;
		        	if(deptSize>1){
		        		for(var i=0;i<depts.length;i++){
		        			resultDept[i] = {
	        	            		text: depts[i].DEPT_NM,
	        	            		tooltip:depts[i].DEPT_NM,
	        	            		action: depts[i].DEPT_CD,
	        	            		handler:function(btn,e){
	        	            			chainDept.execute(btn);
	        	            		}
	        					};
		        		}
	        			items = Ext.create('Ext.button.Split',{
        					text: deptName,
							margin: '0 5 0 0',
							menu: Ext.create('Ext.menu.Menu', {
								cls: 'top-base',
								frame: true,
		        				margin: 0,
		        				padding: 0,
						        items: resultDept
							})
	        			});
		        	}else{
		        		items = Ext.create('Ext.button.Button',{
		        	        forId: 'deptNm',
		        	        text: deptName,
		        	        margin: '0 5 0 0'
		        		});
		        	}
		        	selectDeptBtn.add(items);
			    }
		        //存储全局用户信息属性
		        IMER_GLOBAL.portal.name = portalNm;
		        IMER_GLOBAL.department.name = deptName;
		        IMER_GLOBAL.department.code = deptCd;
		        IMER_GLOBAL.user.code = userName;
		        IMER_GLOBAL.user.name = loginName;
		        
		        var iemrUser = topview.down('button[id=iemrUser]');
		        iemrUser.setText(loginName);
                layout.setActiveItem(2);
			}else{
				portalInfo.setValue('<font color=red>系统故障!</font>');
			}
		}
	},
	onFail : function(operation) {
		var block = this.getBlock('selectportals');
		var portalInfo = block.down('xapdisplayfield');
		portalInfo.setValue('<font color=red>系统故障!</font>');
	}
});

Ext.define('iih.po.com.action.SelectFunctionAction', {
	extend:  Xap.ej.action.Action ,
	
	requires: [],
	
	/*
	* @Override
	*/
	execute: function(context) {
	    var pageCode = context.pageCode;
        var canvas = Xap.getCanvas();
        canvas.fireEvent("addWorkPage",{pageCode:pageCode});
    }
});
Ext.define('iih.po.com.action.SelectPortalAction', {
    extend:  Xap.ej.action.Action ,
	
	/*
	* @Override
	*/
	execute: function(context) {
	    var block = this.getBlock('selectportals');
	    var hospitalArea = block.down('xapcombobox[name=hosArea]');
	    var department = block.down('xapcombobox[name=dept]');
	    var messageInfo = block.down('xapdisplayfield');
	    if(Ext.isEmpty(hospitalArea.getValue(), false)){
	        messageInfo.setValue('<font color=red>请选择院区!</font>');
            return null;
	    };
	    if(Ext.isEmpty(department.getValue(), false)){
	        messageInfo.setValue('<font color=red>请选择科室!</font>');
            return null;
        };
        IMER_GLOBAL.hospitalArea.code = hospitalArea.getValue();
        IMER_GLOBAL.hospitalArea.name = hospitalArea.rawValue;
        IMER_GLOBAL.department.code = department.getValue();
        IMER_GLOBAL.department.name = department.rawValue;
        IMER_GLOBAL.portal.code = context.action;
        IMER_GLOBAL.portal.name = context.tooltip;
        
        var app = block.up('app');
        var portal = app.down('portalview');
        var chain = portal.getActionChain('init');
        chain.execute({
            hospitalAreaCode:IMER_GLOBAL.hospitalArea.code,
            hospitalAreaName:IMER_GLOBAL.hospitalArea.name,
            departmentCode:IMER_GLOBAL.department.code,
            departmentName:IMER_GLOBAL.department.name,
            portalCode:IMER_GLOBAL.portal.code,
            portalName:IMER_GLOBAL.portal.name
        });
    	this.callParent();
    }
});

Ext.define('iih.po.com.action.SelectPortalChangeAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override
	*/
	doExecute: function(context) {
		console.log('----------------SelectPortalChangeAction-------------------');
		var selectBlock = this.getBlock('selectportals');
		var newValue = context.event.arguments[0].value
		var operations = context.operations;
		this.prepareOperations(operations,newValue);
    	this.callParent();
    },
    prepareOperations : function(operations,newValue) {
    	var condition = '?newValue='+newValue;
		var url = this.url+condition;
		var METHODS = this.getInvocationMethods();
		var operation = {
			url : url,
			mclass : null,
			method : METHODS.METHOD_GET,
			condition : null,
			data : null,
			scope : this,
			success : this.onSuccess,
			fail: this.onFail
		};
		operations.push(operation);
	},
	onSuccess : function(operation) {
		var block = this.getBlock('selectportals');
		var com = block.down('[name=dept]');
		var m = operation.result;
		console.log('-------------SelectPortalInit------------------')
		var data,portals,deptCd;
		var select = block.down('container[name=selectButtons]');
		if(!Ext.isEmpty(m, false)){
			data = m.data;
			deptCd = m.deptCd;
			if(data) {
				com.setData(eval(data));
				com.setValue(deptCd);
			}
			//根据条件查询portal页面
			portals = m.portals;
			//console.log(portals);
			select.removeAll(true);
			var login = this.getOwner();
			var app = login.ownerCt;
			var layout = app.getLayout();
			var portal = app.down('selectportal');
			var chainSelect = portal.getActionChain('selectportals');
			var chainBack = portal.getActionChain('back');
			if(!Ext.isEmpty(portals, false)){
				for(var i=0;i<portals.length;i++){
					var item = Ext.create('Ext.button.Button',{cls: portals[i].shortNmEn,
											tooltip:portals[i].nm,
											height: 100,
											width: 100,
											margin: '0 0 0 10',
											action: portals[i].poCd,
											handler:function(btn,e){
												chainSelect.execute(btn);
											}});
					//console.log(portals[i].nm);
					select.add(item);
				}
			}
		}
	},
	onFail : function(operation) {
		var block = this.getBlock('selectportals');
		var showInfo = block.down('xapdisplayfield');
		showInfo.setValue('<font color=red>系统故障!</font>');
	}
});

Ext.define('iih.po.com.action.SelectPortalInitAction', {
	extend:  Xap.ej.action.Action ,
	
	/*
	* @Override
	*/
	execute: function(context) {
    	this.callParent();
    	var view = this.getOwner();
    	var chain = view.getActionChain('searchHospitalArea');
    	chain.execute();
    }
});

Ext.define('iih.po.com.action.SyncAmrAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
    * @Override
    */
    doExecute: function(context) {
        this.callParent();
        this.getBlock('portal').openMask();
        var operations = context.operations;
        var url = this.url;
        var mclass = null;
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: mclass,
            method: METHODS.METHOD_GET,
            scope: this,
            success: this.onSuccess
        };
        operations.push(operation);
    },
    
    onSuccess: function(operation) {
        this.getBlock('portal').closeMask();
        XapMessageBox.info('数据同步完成！','',this.getBlock('portal'));
    }
});
Ext.define('iih.po.com.action.SyncOrgAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
    * @Override
    */
    doExecute: function(context) {
        this.callParent();
        var operations = context.operations;
        var url = this.url;
        var mclass = null;
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: mclass,
            method: METHODS.METHOD_GET,
            scope: this,
            success: this.onSuccess
        };
        operations.push(operation);
    },
    
    onSuccess: function(operation) {
        
    }
});
Ext.define('iih.po.com.action.SyncUserAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
    * @Override
    */
    doExecute: function(context) {
        this.callParent();
        var operations = context.operations;
        var url = this.url;
        var mclass = null;
        var METHODS = this.getInvocationMethods();
        var operation = {
            url: url,
            mclass: mclass,
            method: METHODS.METHOD_GET,
            scope: this,
            success: this.onSuccess
        };
        operations.push(operation);
    },
    
    onSuccess: function(operation) {
        
    }
});
Ext.define('iih.po.com.action.TopBaseButtonsAction', {
	extend:  Xap.ej.action.Action ,
	
	/*
	* @Override
	*/
	execute: function(context) {
	    var global = window.global;
	    var gui = require('nw.gui');
	    var block = this.getOwner();
	    switch (context.action) {
        case 'skin' : break;
        case 'minimum':
            
            global.mainWindow = gui.Window.get();
            if (global && global.mainWindow) {
                global.mainWindow.minimize();
            }
            break;
        case 'restore':
            this.maximize();
            break;
        case 'maximize':
            this.maximize();
            break;
        case 'close':
            // TODO 临时方案 
            XapMessageBox.confirm2('确定退出定制病历资料管理系统？',function(btn){
                if(btn == 'yes') {
                    //window.opener = null;
                    //window.open('', '_self');
                    //window.close();
                    var portal = block.up('portalview');
                    var workArea = portal.down('xaptabpanel[id=workareapageview]');
                    var callBack = function(item){
                        item.close();
                    };
                    workArea.callBack = {
                        method: callBack,
                        scope: btn,
                        params: [gui.Window.get()]
                    };
                    workArea.closePages = null;
                    var canvas = Xap.getCanvas();
                    canvas.fireEvent("portalRender");
                }
            },window);
            break;
        default:
            break;
        }
    },
    
    maximize: function() {
        if (window.global) {
            if (window.maxmized) {
                window.resizeTo(window.original.width, window.original.height);
                window.moveTo(window.original.x, window.original.y);
                window.maxmized = false;
                Ext.getCmp('topbase-buttons').down('button[action=restore]').hide();
                Ext.getCmp('topbase-buttons').down('button[action=maximize]').show();
                IMER_CONSTANT.WORKAREA_WIDTH = Math.max(IMER_CONSTANT.CONSTRAIN_WIDTH, document.body.clientWidth) - IMER_CONSTANT.FIXED_WIDTH;
            } else if (!window.maxmized) {
                window.original = {
                    x: window.screenLeft,
                    y: window.screenTop,
                    width: window.outerWidth,
                    height: window.outerHeight
                };
                window.resizeTo(window.screen.availWidth, window.screen.availHeight);
                window.maxmized = true;
                Ext.getCmp('topbase-buttons').down('button[action=maximize]').hide();
                Ext.getCmp('topbase-buttons').down('button[action=restore]').show();
                IMER_CONSTANT.WORKAREA_WIDTH = window.screen.width - IMER_CONSTANT.FIXED_WIDTH;
            }
        }
    }
});
Ext.define('iih.po.com.action.TopInitAction', {
    extend:  Xap.ej.action.Action ,
	
	/*
	* @Override
	*/
    patientInfo: null,
    execute: function(context) {
    	this.callParent();
    	var view = this.getOwner();
    	var portal = view.up('portalview');
    	var workArea = portal.down('xaptabpanel[id=workareapageview]');
    	var top = this.getBlock('tview');
        top.removeAll(true);
    	this.patientInfo = context.patientInfo;
        if(this.patientInfo){
            console.log(this.patientInfo);
            IMER_GLOBAL.encounterSn = this.patientInfo.pk;
            IMER_GLOBAL.patientId = this.patientInfo.patientId;
            IMER_GLOBAL.mainDiCd = this.patientInfo.currentManageDoctorId;
            if(IMER_GLOBAL.portal.code == IMER_CONSTANT.PORTAL_CD_2 || IMER_GLOBAL.portal.code == IMER_CONSTANT.PORTAL_CD_6 || IMER_GLOBAL.portal.code == IMER_CONSTANT.PORTAL_CD_7){
                item = Xap.create('iih.po.com.view.PatientTopPage');
                var model = Ext.create('iih.po.model.PatientModel',this.patientInfo);
                var content = item.info.apply(model.getData());
                var info = Ext.getCmp('inpatientTop_info');
            }else{
                item = Xap.create('iih.po.outp.view.OutpPatientTopPage');
                var model = Ext.create('iih.po.model.PatientModel',this.patientInfo);
                var content = item.info.apply(model.getData());
                var info = Ext.getCmp('outpatientTop_info');
            };
            info.update(content);
        }else{
            item = Xap.create('iih.po.com.view.NoPatientTopPage');
            IMER_GLOBAL.encounterSn = null;
            IMER_GLOBAL.patientId = null;
            IMER_GLOBAL.mainDiCd = null;
        }
        top.add(item);
        
        //患者与功能切换按钮
        var switchBtn = top.down('container[name=switchBtn]');
        switchBtn.removeAll();
        if(IMER_GLOBAL.portal.code == IMER_CONSTANT.PORTAL_CD_2 || IMER_GLOBAL.portal.code == IMER_CONSTANT.PORTAL_CD_6){
            var patientBtn = Ext.create('Ext.button.Button',{
                name: 'switchPatient',
                //disabled:(IMER_GLOBAL.portal.code == IMER_CONSTANT.PORTAL_CD_2),
                iconCls: 'icon-Patient',
                scale: 'large',
                text: '患者',
                tooltip: '患者',
                margin: '20 20 5 0',
                handler:function(btn,e){
                    if(IMER_GLOBAL.portal.code == IMER_CONSTANT.PORTAL_CD_2){
                        var patientChain = portal.getActionChain('patientPop');
                        patientChain.execute();
                    }else{
                        var callBack = function(){
                            IMER_GLOBAL.portal.code = IMER_CONSTANT.PORTAL_CD_2;
                            var chain = this.getActionChain('init');
                            chain.execute({
                                hospitalAreaCode:IMER_GLOBAL.hospitalArea.code,
                                hospitalAreaName:IMER_GLOBAL.hospitalArea.name,
                                departmentCode:IMER_GLOBAL.department.code,
                                departmentName:IMER_GLOBAL.department.name,
                                portalCode:IMER_GLOBAL.portal.code,
                                portalName:IMER_GLOBAL.portal.name
                            });
                        };
                        workArea.callBack = {
                            method: callBack,
                            scope: portal,
                            params: []
                        };
                        workArea.closePages = null;
                        var canvas = Xap.getCanvas();
                        canvas.fireEvent("portalRender");
                    }
                }
            });
            switchBtn.add(patientBtn);
            var functionBtn = Ext.create('Ext.button.Button',{
                name: 'switchFunction',
                //disabled:(IMER_GLOBAL.portal.code == IMER_CONSTANT.PORTAL_CD_6),
                iconCls: 'icon-Function',
                scale: 'large',
                text: '功能',
                tooltip: '功能',
                margin: '20 20 5 0',
                handler:function(btn,e){
                    if(IMER_GLOBAL.portal.code == IMER_CONSTANT.PORTAL_CD_2){
                        var callBack = function(){
                            IMER_GLOBAL.portal.code = IMER_CONSTANT.PORTAL_CD_6;
                            var chain = this.getActionChain('init');
                            chain.execute({
                                hospitalAreaCode:IMER_GLOBAL.hospitalArea.code,
                                hospitalAreaName:IMER_GLOBAL.hospitalArea.name,
                                departmentCode:IMER_GLOBAL.department.code,
                                departmentName:IMER_GLOBAL.department.name,
                                portalCode:IMER_GLOBAL.portal.code,
                                portalName:IMER_GLOBAL.portal.name
                            });
                        };
                        workArea.callBack = {
                            method: callBack,
                            scope: portal,
                            params: []
                        };
                        workArea.closePages = null;
                        var canvas = Xap.getCanvas();
                        canvas.fireEvent("portalRender");
                    }
                }
            });
            switchBtn.add(functionBtn);
        };
        if(IMER_GLOBAL.portal.code == IMER_CONSTANT.PORTAL_CD_1 || IMER_GLOBAL.portal.code == IMER_CONSTANT.PORTAL_CD_8){
            var patientBtn = Ext.create('Ext.button.Button',{
                name: 'switchPatient',
                iconCls: 'icon-Patient',
                scale: 'large',
                text: '患者',
                tooltip: '患者',
                margin: '20 20 5 0',
                handler:function(btn,e){
                    var patientChain = portal.getActionChain('patientPop');
                    patientChain.execute();
                }
            });
            switchBtn.add(patientBtn);
        };
        if(IMER_GLOBAL.portal.code == IMER_CONSTANT.PORTAL_CD_7){
            var patientBtn = Ext.create('Ext.button.Button',{
                name: 'switchPatient',
                //disabled:(IMER_GLOBAL.portal.code == IMER_CONSTANT.PORTAL_CD_2),
                iconCls: 'icon-Patient',
                scale: 'large',
                text: '患者',
                tooltip: '患者',
                margin: '20 20 5 0',
                handler:function(btn,e){
                    if(IMER_GLOBAL.portal.code == IMER_CONSTANT.PORTAL_CD_7){
                       var patientChain = portal.getActionChain('InpPatientPop');
                       patientChain.execute();
                    }else{
                        var callBack = function(){
                            IMER_GLOBAL.portal.code = IMER_CONSTANT.PORTAL_CD_2;
                            var chain = this.getActionChain('init');
                            chain.execute({
                                hospitalAreaCode:IMER_GLOBAL.hospitalArea.code,
                                hospitalAreaName:IMER_GLOBAL.hospitalArea.name,
                                departmentCode:IMER_GLOBAL.department.code,
                                departmentName:IMER_GLOBAL.department.name,
                                portalCode:IMER_GLOBAL.portal.code,
                                portalName:IMER_GLOBAL.portal.name
                            });
                        };
                        workArea.callBack = {
                            method: callBack,
                            scope: portal,
                            params: []
                        };
                        workArea.closePages = null;
                        var canvas = Xap.getCanvas();
                        canvas.fireEvent("portalRender");
                    }
                }
            });
            switchBtn.add(patientBtn);
        };
        //患者照片
        var photoArea = top.down('container[name=photoArea]');
        if(photoArea && this.patientInfo){
            var src = this.patientInfo.sexCode == IMER_CONSTANT.SEX_NAM?'css/images/man.png':'css/images/woman.png';
            photoArea.removeAll();
            var photoBtn = Ext.create('Ext.Img',{
                cls: 'inpatienttop-border-div',
                src: src,
                height: 50,
                width: 60
            });
            photoArea.add(photoBtn);
        }
        //top显示院区
    	var hospitalArea = view.down('button[name=orgName]');
    	hospitalArea.setText(IMER_GLOBAL.hospitalArea.name);
    	//top显示门户
    	var portalChain = view.getActionChain("searchPortal");
    	portalChain.execute();
    	//top显示科室
    	var deptChain = view.getActionChain("searchDepartment");
    	deptChain.execute();
    	//top显示登录用户
    	var userBtn = view.down('button[name=iemrUser]');
        userBtn.setText(IMER_GLOBAL.user.name);
        //刷新消息区域
        var task_checkMessage;//任务变量
        task_checkMessage = {
            run: function(){
                if(IMER_GLOBAL.portal.code == IMER_CONSTANT.PORTAL_CD_2){
                    var chain = portal.getActionChain('refreshMsg');
                    chain.execute();
                }
            },//执行任务时执行的函数
            interval: 30000//任务间隔，毫秒为单位，这里是30秒
        };
        Ext.TaskManager.start(task_checkMessage);//启动任务
    }
});
Ext.define('iih.po.com.view.TopBase', {
    extend:  Ext.container.Container ,

                                                 
    
    alias: 'widget.topbase',
    
    border: 0,
    
    layout: {
        type: 'vbox',
        align: 'stretch'
    },
    
    baseCls: '',
    
    header: false,
    
    defaultType: 'container',
    
    initComponent: function() {
        this.items = [{
            items: [this.getToolBarArea()]
        },{
            flex: 1,
            items: [this.getContentArea()]
        }];
        
        this.callParent();
    },
    
    //top页面的工具条
    getToolBarArea: function() {
        var titleArea = this.getExtraTitle();
        var buttonArea = this.getButtonArea();
        //var items = titleArea != null ? [titleArea, this.getExtraContent()] : [this.getExtraContent()];
        return Ext.create('Ext.container.Container', {
            header: false,
            border: false,
            layout: {
                type: 'hbox',
                align: 'stretch'
            },
            baseCls: '',
            items: [titleArea,buttonArea]
        });
    },
    //top页面的内容区域
    getContentArea: function() {
        var extraContent = this.getExtraContent();
        var switchArea = this.getSwitchArea();
        //var items = titleArea != null ? [titleArea, this.getExtraContent()] : [this.getExtraContent()];
        return Ext.create('Ext.container.Container', {
            header: false,
            border: false,
            layout: {
                type: 'hbox',
                align: 'stretch'
            },
            baseCls: '',
            items: [extraContent,switchArea]
        });
    },
    //设置title区域内容
    getExtraTitle: function() {
        var baseUrl;
        var app = Xap.getApp();
        var tmpArray = app.baseUrl.split('/');
        if(tmpArray.length>2)
            baseUrl = tmpArray[2];
        return Ext.create('Ext.container.Container', {
            flex: 1,
            border: false,
            baseCls: '',
            cls: 'topHeader',
            layout: {
                type: 'hbox',
                align: 'stretch',
                padding: '2 0 5 2'
            },
            items: [{
                xtype: 'image',
                imgCls: this.iconCls || '',
                src: this.icon || '',
                width: 16,
                height: 16,
                margin: '2 5 0 4'
            },{
                xtype: 'label',
                text: IMER_CONSTANT.SYSTEMNAME
            },{
                xtype: 'label',
                text: IMER_CONSTANT.VERSION
            },{
                xtype: 'label',
                text: baseUrl?'(Server : '+baseUrl+')':IMER_CONSTANT.IP
            },{
                xtype: 'container',
                cls: 'topHeader',
                flex: 1,
                style: {
                    height: '100%'
                }
            }]
        });
    },
    //top页面的内容区域，子类需重写该方法配置区域内容
    getExtraContent: function() {
        return Ext.create('Ext.container.Container', { flex:1, border: false, baseCls: '' });
    },
    
    //top区域右侧按钮区域
    getButtonArea: function() {
        var global = window.global;
        //var webkitMaxmized = global && global.mainWindow && global.maxmized;
        var webkitMaxmized = global && global.maxmized;
        return Ext.create('Ext.container.Container', {
            flex: 1,
            header: false,
            border: false,
            baseCls: '',
            id: 'topbase-buttons',
            layout: {
                type: 'vbox',
                align: 'stretch'
            },
            defaultType: 'container',
            items: [{
                layout: {
                    type: 'hbox',
                    align: 'middle',
                    pack: 'end',
                    padding: '0 0 0 0'
                },
                border: 0,
                baseCls: '',
                defaults: {
                    border: false,
                    margin: '0 4 0 4',
                    padding: 0
                },
                items: [{
                    xtype: 'container',
                    name:'selectPorBtn',
                    margin: '0 5 0 0'
                },{
                    xtype: 'button',
                    name:'orgName',
                    margin: '0 5 0 0'
                },{
                    xtype: 'container',
                    name:'selectDeptBtn',
                    margin: '0 5 0 0'
                },{
                    xtype: 'button',
                    name:'iemrUser',
                    margin: '0 5 0 0',
                    menu: {
                        cls: 'top-base',
                        frame: true,
                        margin: 0,
                        padding: 0,
                        minWidth: 70,
                        items: [{
                            iconCls: 'home_16',
                            text: '首页',
                            action: 'homepage',
                            hidden: true,
                        },{
                            iconCls: 'logout_16',
                            text: '注销',
                            action: 'logout'
                        },{
                            iconCls: 'config_16',
                            text: '设置',
                            action: 'config'
                        },{
                            iconCls: 'help_16',
                            text: '帮助',
                            action: 'help'
                        }],
                        listeners: {
                            click: function(menu, item, e) {
                                var button = menu.ownerButton;
                                var portal = button.up('portalview');
                                var workArea = portal.down('xaptabpanel[id=workareapageview]');
                                if(item.action=='logout'){
                                    XapMessageBox.confirm2('是否要注销？', function(buttonId) {
                                        if (buttonId == 'yes') {
                                            IMER_GLOBAL.user.code = null;
                                            IMER_GLOBAL.user.name = null;
                                            IMER_GLOBAL.hospitalArea.code = null;
                                            IMER_GLOBAL.hospitalArea.name = null;
                                            IMER_GLOBAL.department.code = null;
                                            IMER_GLOBAL.department.name = null;
                                            IMER_GLOBAL.portal.code = null;
                                            IMER_GLOBAL.portal.name = null;
                                            IMER_GLOBAL.encounterSn = null;
                                            var callBack = function(){
                                                var logout = Xap.create({
                                                    xclass: 'iih.po.com.action.LogoutAction'
                                                });
                                                Xap.runAction(logout);
                                            };
                                            workArea.callBack = {
                                                method: callBack,
                                                scope: buttonId,
                                                params: []
                                            };
                                            workArea.closePages = null;
                                            var canvas = Xap.getCanvas();
                                            canvas.fireEvent("portalRender");
                                            
                                            /*var portal = button.up('portalview');
                                            var app = portal.ownerCt;
                                            var layout = app.getLayout();
                                            layout.setActiveItem(0);*/
                                        }
                                    });
                                }else if(item.action=='config'){
                                }else if(item.action=='help'){
                                    var gui = require('nw.gui');
                                    //gui.Shell.openItem("help.chm");
                                    /*var gui = require('nw.gui');
                                    if(gui){
                                        if(!global.helpWindow){
                                            var win = gui.Window.get();
                                            //var width = win.width;
                                            //var height = win.height;
                                            var width = IMER_CONSTANT.WORKAREA_MIN_WIDTH;
                                            var height = IMER_CONSTANT.WORKAREA_MIN_HEIGHT;
                                            global.helpWindow = gui.Window.open('help.chm', {
                                                'position': 'center',
                                                'width':width,
                                                'height':height,
                                                'toolbar':false,
                                                'focus':true
                                            });
                                            global.helpWindow.on('close', function () {
                                                global.helpWindow = null;
                                                this.close(true);
                                            });
                                        }else{
                                            global.helpWindow.show();
                                        }
                                    }*/
                                }
                            }
                        }
                    }
                },{
                    margin: '0 5 0 0'
                },{
                    xtype: 'button',
                    iconCls: 'skin_16',
                    tooltip: '换肤',
                    height: 19,
                    width: 28,
                    margin: '0 0 0 10',
                    action: 'skin'
                },{
                    xtype: 'button',
                    iconCls: 'minimize_16',
                    hidden: IMER_CONSTANT.CLIENT == 'browser' ? true : false,
                    tooltip: '最小化',
                    height: 19,
                    width: 28,
                    margin: 0,
                    action: 'minimum',
                    handler:function(btn,e){
                        var top = this.up('topview');
                        var chain = top.getActionChain('topBaseButtons');
                        chain.execute({
                            action: btn.action
                        });
                    }
                },{
                    xtype: 'button',
                    iconCls: 'restore_16',
                    hidden: IMER_CONSTANT.CLIENT == 'browser' ? true : (!(!!webkitMaxmized)),
                    tooltip: '还原',
                    height: 19,
                    width: 28,
                    margin: 0,
                    action: 'restore',
                    handler:function(btn,e){
                        var top = this.up('topview');
                        var chain = top.getActionChain('topBaseButtons');
                        chain.execute({
                            action: btn.action
                        });
                    }
                },{
                    xtype: 'button',
                    iconCls: 'maximize_16',
                    hidden: IMER_CONSTANT.CLIENT == 'browser' ? true : (webkitMaxmized || false),
                    tooltip: '最大化',
                    height: 19,
                    width: 28,
                    margin: 0,
                    action: 'maximize',
                    handler:function(btn,e){
                        var top = this.up('topview');
                        var chain = top.getActionChain('topBaseButtons');
                        chain.execute({
                            action: btn.action
                        });
                    }
                },{
                    xtype: 'button',
                    iconCls: 'close_16',
                    hidden: IMER_CONSTANT.CLIENT == 'browser' ? true : false,
                    tooltip: '关闭',
                    height: 19,
                    width: 48,
                    margin: 0,
                    action: 'close',
                    handler:function(btn,e){
                        var top = this.up('topview');
                        var chain = top.getActionChain('topBaseButtons');
                        chain.execute({
                            action: btn.action
                        });
                    }
                }]
            }]
        });
    },
    
    getSwitchArea: function(){
        return Ext.create('Ext.container.Container', {
            width: 300,
            header: false,
            border: false,
            baseCls: '',
            layout: {
                type: 'hbox',
                align: 'middle',
                pack: 'end'
            },
            defaultType: 'container',
            items: [{
                name:'msgArea',
                border: 0,
                baseCls: '',
                defaults: {
                    border: false
                },
                items: []
            },{
                name:'switchBtn',
                border: 0,
                baseCls: '',
                defaults: {
                    border: false
                },
                items: []
            }]
        });
    }
});
/**
 * 一体化住院医生工作平台TOP页面
 * 创建人：白斌
 * 时间：2013-04-15
 * 日志：
 * 		2013-04-15		新建
 */
Ext.define('iih.po.com.view.PatientTopPage', {
	extend:  iih.po.com.view.TopBase ,
	
	                                     
	
	alias: 'widget.patienttoppage',
	
	border: 0,
	
	icon: 'css/images/top/InpatientTop/icon.png',
	
	initComponent: function() {
    	this.title = '一体化电子病历系统';//FuiLocale.get('title', IemrUser.portal.key);
    	this.info = new Ext.XTemplate(
    			'<table cellSpacing = "0" cellPadding = "0"><tr>',
    			'<td>',
    			'<div class="inpatienttop-border-div">',
				'<table height = "48" border = 0>',
				'<tr align = "left">',
					'<th name="patient" colspan=2>{patientName}</th>',
					'<th>&nbsp{sexName}</th>',
					'<th>{age}&nbsp</th>',
				'</tr>',
				'<tr align = "left">',
    				'<td>床位号：</td>',
                    '<td id="bed_no" name="bedNo">{currentBedCode}</td>',
				    '<td>&nbsp住院号：</td>',
				    '<td>{amrNo}&nbsp</td>',
				'</tr>',
				'</table>',
				'</div>',
    			'</td>',
    			'<td name="encounter">',
    			'<div class="inpatienttop-border-div" style="margin-left:5px">',
				'<table height = "48" border = 0>',
				'<tr align = "left">',
				    '<td>入院诊断：</td><td colspan=3>{currentMainDiagnosisName}&nbsp</td>',
				'</tr>',
				'<tr align = "left">',
				    '<td>入院时间：</td><td>{currentDeptIntoTime}</td>',
				    '<td>&nbsp病案状态：</td><td>{statusName}&nbsp</td>',
                '</tr>',
				'</table>',
				'</div>',
    			'</td>',
				'</tr></table>'
		);
    	this.callParent();
    },
	
	getExtraContent: function() {
		var container = Ext.create('Ext.container.Container', {
			baseCls: 'page-head',
			flex: 1,
			layout: {
				type: 'hbox',
				align: 'middle'
			},
			defaults: {
				margins: '0 0 0 5',
			},
			defaultType: 'container',
			items: [{
			    name: 'photoArea',
			    border: 0,
                baseCls: '',
                defaults: {
                    border: false
                },
                items: []
			},{
				width: 1000,
				height: 50,
				id: 'inpatientTop_info'
			}]
		});
		return container;
	}
});
Ext.define('iih.po.com.action.UpdatePatientAction', {
    extend:  Xap.ej.action.ServiceInvocation ,
	
	                                             
	
	/*
	* @Override
	*/
	doExecute: function(context) {
	    this.callParent();
	    var view = this.getOwner();
        var top = view.down('topview');
        var patient = context.patient;
        if(patient && patient.pk){
            var operations = context.operations;
            var url = 'mr/ens/' + patient.pk;
            var mclass = null;
            param = {
                'id': patient.pk
            };
            var METHODS = this.getInvocationMethods();
            var operation = {
                url: url,
                mclass: mclass,
                params: [param],
                method: METHODS.METHOD_GET,
                scope: this,
                success: this.onSuccess
            };
            operations.push(operation);
        }else{
            IMER_GLOBAL.encounterSn = null;
            IMER_GLOBAL.patientId = null;
            IMER_GLOBAL.mainDiCd = null;
            var chain = top.getActionChain('init');
            chain.execute();
        }
    },
    
    onSuccess: function(operation){
        var m = operation.result;
        var view = this.getOwner();
        var top = view.down('topview');
        if(m){
            var patient = m.data;
            IMER_GLOBAL.encounterSn = patient.pk;
            IMER_GLOBAL.patientId = patient.patientId;
            IMER_GLOBAL.mainDiCd = patient.currentManageDoctorId;
            if(IMER_GLOBAL.portal.code == IMER_CONSTANT.PORTAL_CD_2){
                var info = Ext.getCmp('inpatientTop_info');
                var model = Ext.create('iih.po.model.PatientModel',patient);
            }else{
                var info = Ext.getCmp('outpatientTop_info');
                var model = Ext.create('iih.po.model.PatientModel',patient);
            };
            if(info){
                var content = item.info.apply(model.getData());
                info.update(content);
                //患者照片
                var photoArea = top.down('container[name=photoArea]');
                if(photoArea){
                    var src = patient.sexCode == IMER_CONSTANT.SEX_NAM?'css/images/man.png':'css/images/woman.png';
                    photoArea.removeAll();
                    var photoBtn = Ext.create('Ext.Img',{
                        cls: 'inpatienttop-border-div',
                        src: src,
                        height: 50,
                        width: 60
                    });
                    photoArea.add(photoBtn);
                }
            }else{
                var chain = top.getActionChain('init');
                chain.execute({
                    'patientInfo': patient
                });  
            }
        };
        var workarea = view.down('workareapageview');
        var enContainer = workarea.down('container[name=enContainer]');
        if(enContainer){
            var encounterCombox = enContainer.down('xapcombobox[itemId=encounterCombox]');
            if(encounterCombox){
                var action = Xap.create({
                    xclass: 'iih.po.com.action.AssistantInitAction'
                });
                action.combo = encounterCombox;
                Xap.runAction(action);
            }
        };
        var tabs = workarea.items.items;
        for (var i = 0; i < tabs.length; i++) {
            var tab = tabs[i];
            var page = workarea.getMainPage(tab.tabId);
            page.fireEvent("pageRefresh");
            page.fireEvent("selectEncounter");
            var helpBlock = tab.down('assistantblock');
            if(helpBlock){
                var chain = tab.getActionChain('assistantInit');
                chain.execute();
            }
        };
    }
});
Ext.define('iih.po.com.block.FunctionNavigationBlock',{
    extend :  Xap.ej.element.panel.Panel ,

                                           

    alias:'widget.functionnavigationblock',
    
    title: '功能导航栏',

    layout: 'accordion',

    items: [],

    setData : function(data,menuCd) {
        var me = this;
        var fstBtn;
        var portal = me.up('portalview');
        me.removeAll();
        Ext.each(data,function(node){
            var panel = Ext.create('Xap.ej.element.panel.Panel',{
                title: node.text,
                layout: {
                    type: 'vbox',
                    align: 'stretch'
                }
            });
            var children = node.children;
            Ext.each(children,function(c){
                var text = '<span style=\'padding-left:5px;font-size:14px;font-weight:800;font-family:微软雅黑;\'>'+c.text+'</span>';
                var button = Ext.create('Ext.button.Button',{
                    code: c.data.code,
                    iconCls: c.data.nmEn,
                    scale: 'large',
                    text: text,
                    textAlign:'left',
                    tooltip: c.text,
                    handler:function(btn,e){
                        var block = btn.up('functionnavigationblock');
                        var btnComponents = block.query('button');
                        Ext.Array.each(btnComponents, function(item) {
                            item.removeCls('menu_button_active');
                        });
                        btn.addCls('menu_button_active');
                        var chain = portal.getActionChain('selectFunction');
                        chain.execute({
                            pageCode: btn.code
                        }); 
                    }
                });
                //if(menuCd == c.data.code)
                //if(!fstBtn)fstBtn = button;
                panel.add(button)
            });
            me.add(panel);
        });
        if(menuCd){
            var panels = me.query('xappanel');
            Ext.each(panels,function(p){
                var buttons = p.query('button');
                Ext.each(buttons,function(b){
                    if(b.code == menuCd){
                        p.expand();
                        b.addCls('menu_button_active');
                        var chain = portal.getActionChain('selectFunction');
                        chain.execute({
                            pageCode: b.code
                        });
                    }
                });
            });
        }else{
            var firstPanel = me.query('xappanel')[0];
            if(firstPanel){
                var firstButton = firstPanel.query('button')[0];
                if(firstButton){
                    firstButton.addCls('menu_button_active');
                    var chain = portal.getActionChain('selectFunction');
                    chain.execute({
                        pageCode: firstButton.code
                    });
                }
            }
        }
    }
        
})
Ext.define('iih.po.com.block.KnowledgeData', {
    extend :  Ext.view.View ,

    requires: [],

    alias:'widget.knowledgedata',

    tpl: [
        '<tpl for=".">',
        '<div class="knowledgedata">',
        '<table width="100%">',
        '<tr><td style="padding-left: 0"><textarea name="knowledgeArea" rows="5" cols="25">{fragmentTplContent}</textarea></td>',
        '</tr>',
        '</table>',
        '</div>',
        '</tpl>'
    ],
    
    itemSelector: 'div.knowledgedata'
})
Ext.define("iih.po.model.KnowledgeModel",{
	extend:  Ext.data.Model ,
	alias:'widget.knowledgemodel',
	fields: ['ownerTypeCd',
	         'ownerCd',
	         'fragmentTplCd',
	         'fragmentTplNm',
	         'fragmentTplContent',
	         'fragmentTplTypeCd',
	         'fragmentTplTypeNm']
});

Ext.define('iih.po.com.block.KnowledgeListBlock', {
    extend :  Xap.ej.block.Block ,

                                                                               

    alias:'widget.knowledgelistblock',

    layout: 'fit',
    
    border: 0,
    
    initComponent: function() {
        var store = Ext.create('Ext.data.Store', {
            model: 'iih.po.model.KnowledgeModel'
        });
        var knowledgeList = this.createKnowledgeView({ store: store });
        this.items = [knowledgeList];
        this.callParent();
    },
    
    createKnowledgeView: function(info) {
        info = info || {};
        var view = 'iih.po.com.block.KnowledgeData';
        var store = Ext.data.StoreManager.lookup(info.store);
        var knowledgeView = Ext.create(view, {
            cls: 'patientnavigationview-list',
            autoScroll: true,
            flex: 1,
            padding: 0,
            store: store,
            trackOver: true,
            overItemCls: 'x-item-over'
        });
        return knowledgeView;
    },
    
    setData : function(data) {
        var v = this.down('dataview');
        var store = v.getStore();
        if(data)
            store.loadData(data);
        else
            store.loadData({});
    }
})
Ext.define('iih.po.com.block.LoginBlock',{
	extend :  Xap.ej.block.FormBlock ,

	           
		                                             
                                         
                                           
	  

	alias:'widget.loginblock',
	
	bodyStyle: {
		background:'#ffffff',
		border:'1px solid #000000'
	},
	layout: {
		type: 'table',
		tableAttrs: {
            border: 0,
            cellpadding: 5,
            cellspacing: 1,
            align: 'center'
        },
        tdAttrs: {
            valign: 'middle'
        }
	},
	items:[
	   {
		xtype:'panel',
		width:1024,
		height:768,
		layout: {
			type: 'table',
			columns: 16,
			tableAttrs: {
	            border: 0,
	            align: 'right'
	        },
	        tdAttrs: {
	        	width:20,
	            valign: 'middle'
	        }
		},
		bodyStyle:{
			background:'url(css/images/login/login.png) no-repeat'
		},
		items: [
		{
			xtype:'panel',
			height:200,
			border:0,
			colspan:16,
			margin:'0 0 0 0',
			bodyStyle:'background:#FCFCFC'
		},
		
		{
			html:'<div></div>',
			border:0,
			colspan:16,
			margin:'0 0 0 30',
			width:332,
			height:36,
			bodyStyle:{
				fontSize:'36px',
				fontFamily:'微软雅黑',
				fontWeight:'bold',
				color:'#0174B6',
				background:'url(css/images/login/login-title.jpg) no-repeat'
			}
		},
		
		{
			xtype:'panel',
			height:30,
			border:0,
			colspan:16,
			margin:'0 0 0 50',
			bodyStyle:'background:#FCFCFC'
			
		},
		
		{
			html:'<div style=\'width:60px;margin:0 10px 0 30px;background:#FCFCFC;color:#7C7C7C;font-weight:bold;font-size:16px;font-family:黑体\'>用户名</div>',
			border:0,
			margin:'0 0 0 30',
			bodyStyle:'background:#FCFCFC'
			
			
		},{
			xtype: 'xaptextfield',
			colspan:15,
			name:'username',
			allowBlank:false,
			height:40,
			width:200,
			margin:'0 0 0 0',
		},
		
		{
			xtype:'panel',
			colspan:16,
			height:15,
			border:0,
			margin:'0 0 0 30',
			bodyStyle:'background:#FCFCFC'
		},
		
		{
			html:'<div style=\'width:50px;margin:0 10px 0 43px;background:#FCFCFC;color:#7C7C7C;font-weight:bold;font-size:16px;font-family:黑体\'>密码</div>',
			border:0,
			margin:'0 0 0 30',
			bodyStyle:'background:#FCFCFC'
		},{
			xtype: 'xaptextfield',
			colspan:15,
			name:'password', 
	        inputType:'password',
	        allowBlank:false, 
	        enableKeyEvents:true,  
	        height:40,
			width:200,
			margin:'0 0 0 0',
		},
		
		{
			xtype:'panel',
			height:15,
			border:0,
			colspan:16,
			margin:'0 0 0 30',
			bodyStyle:'background:#FCFCFC'
			
		},
		
		{
			xtype: 'xapcheckboxgroup',
			vertical: true,
			colspan:16,
			items: [
				{ boxLabel: '记住我的登录信息', name: 'rememberInfo', inputValue: '1' ,style:'height:20px;lineHeight:20px;font-size:18px;color:#7C7C7C'}
			],
			margin:'0 0 0 70'
		},
		
		{
			xtype: 'xapdisplayfield',
			fieldLabel: '',
			colspan:16,
			vertical: true,
			name:'showInfo',
			value: '',
			margin:'0 0 0 0'
		},
		
		{
			xtype:'panel',
			height:20,
			border:0,
			colspan:16,
			margin:'0 0 0 30',
			bodyStyle:'background:#FCFCFC'
			
		},
		
		{
			xtype:'button',
	        colspan:12,
	        style:{
	        	width:'201px',
	        	height:'40px',
	        	background:'url(css/images/login/login-button.png) no-repeat'
	        },
	        method: 'login',
	        action:'login',
	        margin:'0 0 0 30'
	        
	    },{
			xtype:'button',
			cls:'button_edit',
	        colspan:4,
	        //iconCls: 'icon-reset',
	        method: 'reset',
	        action:'reset',
	        margin:'0 0 0 30',
	        style:{
	        	width:'95px',
	        	height:'40px',
	        	background:'url(css/images/login/login-reset.png) no-repeat'
	        }
	    }]
	}],

	setData: function(data) {
	    this.callParent(arguments);
	},
    getData: function() {
        this.callParent(arguments);
    }

})
Ext.define('iih.po.com.block.NavigationBlock', {
    extend :  Xap.ej.element.tab.Panel ,

    requires: [],

    alias:'widget.navigationblock',

    layout: 'fit',
    
    tabBar: {
        layout: {
            type: 'hbox',
            align: 'stretch'
        }
    },
    
    initComponent: function() {
        this.callParent();
        var me = this;
        var bar = me.getTabBar();
        bar.add({
            xtype: 'container',
            layout: {
                type: 'hbox',
                pack: 'end'
            },
            flex: 1,
            items:[{
                xtype: 'tool',
                type:'left',
                handler: function(event, toolEl, header, tool) {
                    var panel = header.ownerCt.ownerCt;
                    panel.collapse();
                }
            }]
        });
    },
    
    maximize: function() {
        this.setHeight(150);
    },
    
    minimize: function() {
        this.setHeight(32);
    },
})
Ext.define('iih.po.com.block.PatientListBlock', {
    extend :  Xap.ej.block.Block ,

                                           

    alias:'widget.patientlistblock',

    layout: 'fit',
    
    border: 0,
    
    flex: 1,

    items: [{
        xtype: 'xaptree',
        border:0
    }],
    
    setData : function(data) {
        var tree = this.down('xaptree');
        tree.setData(data);
    }
})
Ext.define('iih.po.com.block.PatientNavigationBlock',{
    extend :  Xap.ej.block.Block ,

                                           

    alias:'widget.patientnavigationblock',

    layout: 'fit',

    items: [{
        id: 'patienttree',
        xtype: 'xaptree'
    }],
    
    setData : function(data) {
        var tree = this.down('xaptree');
        tree.setData(data);
    }
        
})
Ext.define('iih.po.com.view.WorkAreaPageView', {
	extend:  Xap.ej.element.tab.Panel ,

	requires: [],

	alias:'widget.workareapageview',

	layout: 'fit',
	
	id: 'workareapageview',
	
	defaults: {
	  border: false  
	},

    items: [],
    
    tabBar: {
       height: 28
    },

    initComponent: function() {
    	this.callParent();
    },
    
    getMainPage: function(itemId) {
        var view;
        var mainPage;
        Ext.each(this.items.items,function(tab){
            if(itemId == tab.tabId){
                view = tab;
            }
        });
        if(view){
            mainPage = view.down('container[itemId='+itemId+']');
            if(!mainPage)
                return view;
        }
        return mainPage;
    },
    
    showConfirm: function(yesCallback, noCallback, cancelCallback) {
        var me = this;
        XapMessageBox.confirm('是否保存对当前页面的修改？',
            function(btn, text){
                if (btn == 'yes') {
                    return me.callMethod(yesCallback, me);
                } else if (btn == 'no') {
                    return me.callMethod(noCallback, me);
                } else if (btn == 'cancel') {
                    return me.callMethod(cancelCallback, me);
                }
            },me
        );
    },
    
    callMethod: function(method, scope, params) {
        if (Ext.isFunction(method)) {
            return method.apply(scope || window, Array.prototype.slice.call(params || [], 0));
        }
    },
    
    callControllerMethod: function(owner,callBack) {
        if (!owner) {
            return;
        }
        var chain = owner.getActionChain('doSave');
        if(chain){
            chain.callBack = callBack;
            chain.execute();
        }
    },
    
    listeners: {
        beforeremove: function(tabPanel, tab, e) {
            if (tab.ensureRemove) {
                return;
            };
            var page = tabPanel.getMainPage(tab.tabId);
            if (tabPanel.getActiveTab() != tab) {
                tab.ensureRefresh = false;
                tabPanel.setActiveTab(tab);
            };
            if(page.hasEdit && Ext.isFunction(page.hasEdit)){
                if(page.hasEdit()){
                    tabPanel.showConfirm(function() {
                        page._removeTab = tab;
                        page._tabPanel = tabPanel;
                        tabPanel.callControllerMethod(page, function(page) {
                            page._removeTab.ensureRemove = true;
                            page._tabPanel.remove(page._removeTab);
                        });
                    }, function() {
                        tab.ensureRemove = true;
                        tabPanel.remove(tab);
                    }, function() {
                        tabPanel.callBack = null;
                        tabPanel.closePages = null;
                        tabPanel.closeWorkPage = false;
                    });
                    return false;
                }
            }
        },
        remove: function(tabPanel, tab, e) {
            if(tabPanel.closeWorkPage){
                if(tabPanel.closePages){
                    tabPanel.closePages.splice(0,1);
                };
                var canvas = Xap.getCanvas();
                canvas.fireEvent("portalRender");
            };
            if(IMER_GLOBAL.portal.code == IMER_CONSTANT.PORTAL_CD_4 || IMER_GLOBAL.portal.code == IMER_CONSTANT.PORTAL_CD_6){
                if(tab.closable){
                    var portal = tabPanel.up('portalview');
                    var top = portal.down('topview');
                    var topChain = top.getActionChain('init');
                    topChain.execute();
                } 
            }
        },
        tabchange: function(tabPanel, newCard, oldCard, e) {
            if(!tabPanel.closeWorkPage){
                var mainPage;
                if(newCard.haveAssistant)
                    mainPage = this.getMainPage(newCard.tabId);
                else
                    mainPage = newCard;
                if(mainPage)
                    mainPage.fireEvent("pageRefresh");
            }
        }
    }
})
/**
 * 系统管理top页面
 * 创建人:白斌
 * 时间:2013-04-15
 * 日志:
 * 		2013-04-15		新建
 */
Ext.define('iih.po.com.view.NoPatientTopPage', {
	extend:  iih.po.com.view.TopBase ,
	
	                                     
	
	alias: 'widget.nopatienttoppage',
	
	border: 0,
	
	icon: 'css/images/top/InpatientTop/icon.png',
	
	initComponent: function() {
		this.title = '一体化电子病历系统';//FuiLocale.get('title', IemrUser.portal.key);
    	
    	this.callParent();
    },
    
    getExtraContent: function() {
		return Ext.create('Ext.container.Container', {
		    id: 'extraContent',
		    flex: 1,
			border: false,
			baseCls: '',
			cls: 'topHeader',
			margin: '0 0 0 50px',
			items: [{
				xtype: 'image',
				height: 50,
				src: 'css/images/top/TopBase/logo.png'
			}]
		});
	}
});
/**
 * 门户TOP页面
 * 创建人：白斌
 * 时间：2013-04-15
 * 日志：
 * 		2013-04-15		新建
 */
Ext.define('iih.po.com.view.TopPage', {
	extend:  Xap.ej.block.Block ,
	
	          
	                                             
	                                          
	            
	
	alias: 'widget.toppage',
	
	border: 0,
	
	baseCls: 'page-head',
	
	layout: 'fit',
	
	initComponent: function() {
		this.items = [{
		    xtype: 'nopatienttoppage'
		}];
    	
    	this.callParent();
    },
    
    setDepartmentData: function(results){
        var data = results.dataList;
        var selectDeptBtn = this.down('container[name=selectDeptBtn]');
        var portal = this.up('portalview');
        var workArea = portal.down('xaptabpanel[id=workareapageview]');
        var portalInit = portal.getActionChain('init');
        if(!Ext.isEmpty(data, false)){
            var resultDept=[],items,deptNm;
            if(data.length>1){
                for(var i=0;i<data.length;i++){
                    if(data[i].code == IMER_GLOBAL.department.code)
                        deptNm = data[i].name;
                        IMER_GLOBAL.department.name = deptNm;
                        resultDept[i] = {
                            name: data[i].code,
                            text: data[i].name,
                            group: 'topDept',
                            checked: (data[i].code == IMER_GLOBAL.department.code)
                        };
                };
                items = Ext.create('Ext.button.Button',{
                    name: 'topDept',
                    text: deptNm,
                    border:0,
                    menu: Ext.create('Ext.menu.Menu', {
                        items: resultDept,
                        frame: true,
                        margin: 0,
                        cls: 'top-base',
                        padding: 0,
                        frame: true,
                        listeners: {
                            click: function(menu, item, e) {
                                var button = menu.ownerButton;
                                var callBack = function(item){
                                    var portal = this.up('portalview');
                                    var chain = portal.getActionChain('init');
                                    this.setText(item.text);
                                    IMER_GLOBAL.department.code = item.name;
                                    chain.execute({
                                        hospitalAreaCode:IMER_GLOBAL.hospitalArea.code,
                                        hospitalAreaName:IMER_GLOBAL.hospitalArea.name,
                                        departmentCode:IMER_GLOBAL.department.code,
                                        departmentName:item.text,
                                        portalCode:IMER_GLOBAL.portal.code,
                                        portalName:IMER_GLOBAL.portal.name
                                    });
                                };
                                workArea.callBack = {
                                    method: callBack,
                                    scope: button,
                                    params: [item]
                                };
                                workArea.closePages = null;
                                var canvas = Xap.getCanvas();
                                canvas.fireEvent("portalRender");
                            }
                        }
                    })
                });
            }else{
                items = Ext.create('Ext.button.Button',{
                    name: 'topDept',
                    cls: 'top-base',
                    border:0,
                    text: data[0].name
                });
                IMER_GLOBAL.department.name = data[0].name;
            };
            selectDeptBtn.removeAll();
            selectDeptBtn.add(items);
        }
    },
    
    setPortalData: function(data){
        var selectPorBtn = this.down('container[name=selectPorBtn]');
        var portal = this.up('portalview');
        var workArea = portal.down('xaptabpanel[id=workareapageview]');
        var portalInit = portal.getActionChain('init');
        if(!Ext.isEmpty(data, false)){
            var resultPortal=[],items;
            if(data.length>1){
                for(var i=0;i<data.length;i++){
                    resultPortal[i] = {
                        name: data[i].code,
                        text: data[i].name,
                        group: 'topPortal',
                        checked: (data[i].code == IMER_GLOBAL.portal.code)
                    };
                    if(data[i].code == IMER_GLOBAL.portal.code)
                        IMER_GLOBAL.portal.name = data[i].name;
                };
                items = Ext.create('Ext.button.Button',{
                    name: 'topPortal',
                    text: IMER_GLOBAL.portal.name,
                    border:0,
                    menu: Ext.create('Ext.menu.Menu', {
                        items: resultPortal,
                        frame: true,
                        margin: 0,
                        padding: 0,
                        cls: 'top-base',
                        frame: true,
                        listeners: {
                            click: function(menu, item, e) {
                                var button = menu.ownerButton;
                                var callBack = function(item){
                                    var portal = this.up('portalview');
                                    var chain = portal.getActionChain('init');
                                    this.setText(item.text);
                                    IMER_GLOBAL.portal.code = item.name;
                                    chain.execute({
                                        hospitalAreaCode:IMER_GLOBAL.hospitalArea.code,
                                        hospitalAreaName:IMER_GLOBAL.hospitalArea.name,
                                        departmentCode:IMER_GLOBAL.department.code,
                                        departmentName:IMER_GLOBAL.department.name,
                                        portalCode:IMER_GLOBAL.portal.code,
                                        portalName:item.text
                                    });
                                };
                                workArea.callBack = {
                                    method: callBack,
                                    scope: button,
                                    params: [item]
                                };
                                workArea.closePages = null;
                                var canvas = Xap.getCanvas();
                                canvas.fireEvent("portalRender");
                            }
                        }
                    })
                });
            }else{
                items = Ext.create('Ext.button.Button',{
                    name: 'topPortal',
                    cls: 'top-base',
                    border:0,
                    text: data[0].name
                });
                IMER_GLOBAL.portal.name = data[0].name;
            }
            selectPorBtn.removeAll();
            selectPorBtn.add(items);
        }
    }
	
});
Ext.define('iih.po.com.view.TopView', {
	extend:  Xap.ej.template.BaseTemplate ,

	                                      

	alias:'widget.topview',
	
	layout:'fit',
	
	border: 0,

	xapConfig: {
		blocks: {
		    'tview': {
		    	xclass: 'iih.po.com.view.TopPage'
            }
		},
		actions: {
		    'init': {
		        xclass: 'iih.po.com.action.TopInitAction',
		        url: 'search_topinfo',
                blocks:{
                    tview: 'tview'
                }
		    },
		    'searchDepartment': {
                xclass: 'iih.po.com.action.SearchDepartmentAction',
                url:'user/departments',
                blocks:{
                    context: 'tview'
                }
            },
            'searchPortal': {
                xclass: 'iih.po.com.action.SearchPortalAction',
                url:'searchPortal',
                blocks:{
                    context: 'tview'
                }
            },
            'topBaseButtons': {
                xclass: 'iih.po.com.action.TopBaseButtonsAction',
                blocks:{
                    context: 'tview'
                }
            }
		},

		chains: {
		    'init':['init'],
		    'searchDepartment':['searchDepartment'],
            'searchPortal':['searchPortal'],
            'topBaseButtons':['topBaseButtons']
		},

		connections: {
			'tview': [{
			    chain: 'init'
			}]
		}
	}
	
})
Ext.define('iih.po.com.block.PortalBlock', {
    extend :  Xap.ej.block.FormBlock ,

                                                  
                                                          
                                         
                                           

    alias:'widget.portalblock',
    
    layout: 'border',

    items: [{
        region: 'north',
        xtype: 'topview',
        height: 85
    }, {
        region:'west',
        xtype: 'functionnavigationblock',
        split: true,
        header:true,
        collapsible: true,
        collapseMode: 'undefined',
        width: 170
    }, {
        region: 'center',
        xtype: 'workareapageview',
        layout: 'fit'
    }],

    initComponent: function() {
        this.callParent();
    },
    
    addWorkPage: function(config){
        var workarea = this.down('workareapageview');
        var tabId = config.tabId;
        var tabs = workarea.items.items;
        var view = null;
        for (var i = 0; i < tabs.length; i++) {
            var tab = tabs[i];
            if (tab.tabId == tabId) {
                view = tab;
                break;
            }
        };
        if(!view){
            var tabConfig = {
                    xclass: 'iih.po.com.view.WorkPageView',
                    tabId: tabId,
                    title: config.title,
                    closable: true,
                    hideMode:'offsets'
            };
            var view =  Xap.create(tabConfig);
            var workContent = view.getBlock('workContent');
            workContent.removeAll();
            var workView =  Ext.create(config.xclass,config.viewConfig);
            Ext.apply(workView,{itemId:tabId});
            workContent.add(workView);
            if(config.assistantConfig){
                var assistantBlock = view.getBlock('helpContent');
                Ext.apply(assistantBlock,config.assistantConfig);
                var helpContent = assistantBlock.down('xaptabpanel');
                helpContent.removeAll(true);
                
                var plugin = Xap.ej.platform.Plugin;
                var list = plugin.getExtensionPoint('assistant');
                if(list.extensions.length > 0) {
                    for(var i=0;i<list.extensions.length;i++){
                        var item = list.extensions[i];
                        var config = {
                            tabId: item.cd,
                            title: item.text,
                            xclass: item.xclass,
                            isQuery:item.isQuery,
                            haveEncounter:item.haveEncounter
                        };
                        helpContent.add(Ext.create(config));
                    }
                };
                
                var up = helpContent.down('tool[itemId=up]');
                var down = helpContent.down('tool[itemId=down]');
                down.addListener('click', function() {
                    assistantBlock.minimize();
                    up.show();
                    down.hide();
                });
                up.addListener('click', function() {
                    assistantBlock.maximize(300);
                    up.hide();
                    down.show();
                });
                var tbar = helpContent.getTabBar();
                tbar.addListener('dblclick', function(tabBar, e) {
                    if(down.hidden==false){
                       assistantBlock.minimize();
                       up.show();
                       down.hide();
                    }else{
                       assistantBlock.maximize(300);
                       up.hide();
                       down.show();
                    }
                });
                helpContent.addListener('tabchange', function(p,n,o) {
                    var mrCombo = p.down('xapcombobox[itemId=encounterCombox]');
                    mrCombo.setDisabled(!n.haveEncounter);
                    var writeButton = p.down('button[itemId=writeToMrDocButton]');
                    writeButton.setDisabled(!n.haveEncounter);
                    var queryButton = p.down('button[itemId=queryButton]');
                    queryButton.setDisabled(!n.isQuery);
                    if(n.isQuery){
                        queryButton.addListener('click', function() {
                            var chain = n.getActionChain('searchwindowpopup');
                            chain.execute();
                        });
                    };
                });
                assistantBlock.minimize();
                helpContent.setActiveTab(0);
            }else{
                var assistantBlock = view.getBlock('helpContent');
                assistantBlock.removeAll();
            }
            workarea.add(view).show();
        }else{
            workarea.setActiveTab(view);
            var block = view.getBlock('workContent');
            var items = block.items.items;
            var workView = items[0];
            workView.fireEvent("refreshWorkArea",config);
        };
    }
})
Ext.define('iih.po.com.block.SelectPortalBlock',{
	extend :  Xap.ej.block.FormBlock ,

	           
		                                             
		                                 
		                                    
		                               
	  

	alias:'widget.selectportalblock',

	bodyStyle: 'background:#FFFFFF;',
	layout: {
		type: 'table',
		columns: 3,
		//width: 1024,
		tableAttrs: {
            border: 0,
            cellpadding: 5,
            cellspacing: 1,
            align: 'center'
        },
        tdAttrs: {
            valign: 'middle'
        }
	},
	
	items:[
	   {
		xtype:'panel',
		width:1024,
		height:768,
		bodyStyle: {
			background:'url(css/images/portal/select_portal_bg.png) no-repeat',
			//marginTop:'40px',
			border:0
		},
		layout: {
			type: 'vbox',
			
		},

		items: [
			{
				xtype:'container',
				width:500,
				height:50,
				name:'selectButtons1',
				border:0,
				margin:'50px 0 0 50px',
				layout: {
					type: 'table',
					columns: 6,
					//width: 1024,
					tableAttrs: {
			            border: 0,
			            cellpadding: 0,
			            cellspacing: 0,
			            //width: '100%',
						align: 'left'
			        },
			        tdAttrs: {
			            valign: 'middle'
			        }
				},
				items:[
					{
						xtype: 'label',
						text: '院区',
						colspan: 1,
						margin:'0 20 0 0',
						style:{
							color:'#ffffff',
							fontSize:'16px',
							fontFamily:'黑体',
							fontWeight:'800'
						}
					},{
						xtype: 'xapcombobox',
						name: 'hosArea',
						colspan: 2,
						width:150,
						height:22,
						margin:'2 40 0 0',
						forceSelection:true,
						style:{'text-align':'center','line-height':'18px'}
					},{
						xtype: 'label',
						text: '科室',
						colspan: 1,
						margin:'0 20 0 0',
						style:{
							width:50,
							color:'#ffffff',
							fontSize:'16px',
							fontFamily:'黑体',
							fontWeight:'800'
						}
					},{
						xtype:'xapcombobox',
						name: 'dept',
						width:150,
						height:22,
						colspan: 2,
						margin:'2 0 0 0',
						forceSelection:true,
						style:{'text-align':'center','line-height':'18px'}
					},{
						xtype: 'xapdisplayfield',
						fieldLabel: '',
						colspan: 6,
						vertical: true,
						name:'portalInfo',
						value: ''
					}
				]
			},{
				xtype:'container',
				width:600,
				height:370,
				name:'selectButtons',
				conspan:3,
				border:0,
				layout: {
					type: 'table',
					columns: 3,
					//width: 1024,
					tableAttrs: {
			            border: 0,
			            cellpadding: 0,
			            cellspacing: 0,
			            //width: '100%',
						align: 'left'
			        },
			        tdAttrs: {
			            valign: 'top'
			        }
				}		
			},{
				xtype:'container',
				width:600,
				height:80,
				name:'backButtons',
				conspan:3,
				border:0,
				layout: {
					type: 'table',
					columns: 3,
					//width: 1024,
					tableAttrs: {
			            border: 0,
			            cellpadding: 0,
			            cellspacing: 0,
			            //width: '100%',
						align: 'left'
			        },
			        tdAttrs: {
			            valign: 'top'
			        }
				}		
			}
		]
	},
	{bodyStyle: 'background:#DDECFF;',border:0}],
	
	setDepartmentData: function(data){
	    var combo = this.down('xapcombobox[name=dept]');
	    if(data && data.dataList){
            var array = new Array();
            Ext.each(data.dataList,function(rec){
                if(rec)
                    array.push({'text':rec.name,'value':rec.code});
            });
            combo.setData(array);
            var record = combo.getStore().getAt(0);
            combo.select(record);
        }else{
            combo.clearValue();
        }
	},
	
	setPortalData: function(data){
	    var view = this.up('selectportal');
        var portallist = this.down('container[name=selectButtons]');
        var backbutton = this.down('container[name=backButtons]');
        var chain = view.getActionChain('enterPortal');
        if(data){
            portallist.removeAll(true);
            for(var i=0;i<data.length;i++){
                var item = Ext.create('Ext.button.Button',{
                    cls: data[i].shortEnglishName,
                    tooltip:data[i].name,
                    height: 130,
                    width: 130,
                    margin: '35 0 0 50',
                    border:0,
                    action: data[i].code,
                    handler:function(btn,e){
                        chain.execute(btn);
                    }
                });
                portallist.add(item);
            }
        }
        
        var back = Ext.create('Ext.button.Button',{
            cls: 'BACK_LOGIN',
            tooltip: locale.login.back,
            height: 100,
            width: 100,
            margin: '10 0 0 60',
            action: 'back',
            border:0,
            handler:function(btn,e){
                var logout = Xap.create({
                    xclass: 'iih.po.com.action.LogoutAction'
                });
                Xap.runAction(logout);
            }
        });
        backbutton.removeAll(true);
        backbutton.add(back);
    }	
})
 Ext.define("iih.po.com.hisToiemrUtil", {
	     singleton: true, 
	     
	     ownerType:'',
	     
	     ownerCode:'',
	     
	     diCode:'',
	     
	     diName:'',
	     
	     hisMessage:'',
	     
	     setOwnerTypeCd:'',
	     
	     medicalTempletes:[],
	     
	     medicalTempleOpen:false,
	 
	     statics: {
        	 ownerType:'',
        	 ownerCode:''
         },
         
	    setGloeVar:function(ownerType,ownerCode){
       	  this.ownerType = ownerType;
       	  this.ownerCode = ownerCode;
       	 // alert(this.ownerType+"   "+this.ownerCode);
         },
         
        setStaticGloeVar:function(ownerType,ownerCode){
          	  this.statics().ownerType = ownerType;
          	  this.statics().ownerCode = ownerCode;
          	
         },
         
         
        getStaticOwnerType: function(){
             return this.statics().ownerType; 
        },
        
        getStaticOwnerCode: function(){
            return this.statics().ownerCode; 
        },
         
         getOwnerType:function(){
       	   return this.ownerCode;
         },
         
         getOwnerCode:function(){
        	return this.ownerCode;  
         },
         
         
         refreshOrder:function(xmlstring){
        	 

        	 
			     if (window.ActiveXObject)
				  {
					  var xmlobject =new ActiveXObject("Microsoft.XMLDOM");
					  xmlobject.async="false";
					  xmlobject.loadXML(xmlstring);
				  }
				else
				  {
					  var parser=new DOMParser();
					  var xmlobject =parser.parseFromString(xmlstring,"text/xml");
				  }
				  
				 var root = xmlobject.getElementsByTagName('message')[0];
		
				 var objects = root.getElementsByTagName("object");
				 
				 
				 var codeFn = objects[0].getAttribute("code");
				 
				
				 console.log('codeFn......'+codeFn);
				
				 
			  
        	
        	 if(codeFn =='ORDER'){
			     //刷新处方,处置
        		 var outmrwriteview = Ext.getCmp('outmrwriteview');
        		 var right=outmrwriteview.getBlock('right');
        		 var getSystemConfig = right.getActionChain('getSystemConfig');
        		 getSystemConfig.execute();
        		
			 }
         },
         
         
         getHisMessage:function(xmlstring){
        	 
        	  if (window.ActiveXObject)
			  {
				  var xmlobject =new ActiveXObject("Microsoft.XMLDOM");
				  xmlobject.async="false";
				  xmlobject.loadXML(xmlstring);
			  }
			else
			  {
				  var parser=new DOMParser();
				  var xmlobject =parser.parseFromString(xmlstring,"text/xml");
			  }
			  
			 var root = xmlobject.getElementsByTagName('message')[0];
	
			 var objects = root.getElementsByTagName("object");		
			 
			 var hisMessage = objects[0].getAttribute("proc");
			 
			 /*if(hisMessage!=undefined){
				 iih.kr.cs.csa.glove.GloveVar.hisMessage = hisMessage;
			 }*/
         },
         
         
         
         getIemrMessage:function(){
        	 Ext.MessageBox.show({
                 title:'提示',
                 msg:'HIS MZCPR 消息接收服务异常，请到【医生工作台】界面手动刷新',
                 icon : Ext.Msg.INFO,
                 buttons : Ext.Msg.OK
             });
         }
       
  });
 
     
Ext.define('iih.po.com.view.Login', {
	extend:  Xap.ej.template.BaseTemplate ,
	           
	                                         
	                                           
	                                               
	                                              
	                                               
	             

	alias:'widget.login',
	layout:'fit',
	
	xapConfig: {
		blocks: {
			'loginblock': {
				xclass: 'iih.po.com.block.LoginBlock'
			}
		},

		actions: {
			'reset': {
				xclass: 'iih.po.com.action.LoginResetAction',
				blocks: {
					lvblock: 'loginblock'
				}
			},
			'login': {
				xclass: 'iih.po.com.action.LoginAction',
				// url:'login',
				blocks: {
					lvblock: 'loginblock'
				}
			},
			'loginKey': {
				xclass: 'iih.po.com.action.LoginKeyAction'
			},
			'init': {
				xclass: 'iih.po.com.action.LoginInitAction',
				blocks: {
					lvblock: 'loginblock'
				}
			},
			'autologin': {
                xclass: 'iih.po.com.action.AutoLoginAction',
                blocks: {
                    lvblock: 'loginblock'
                }
            }
		},

		chains: {
			'reset':['reset'],
			'login':['login'],
			'init':['init'],
			'loginKey':['loginKey'],
			'autologin':['autologin']
		},

		connections: {
			'loginblock': [{
				selector: 'button[action=reset]',
				event: 'click',
				chain: 'reset'
			},{
				selector: 'button[action=login]',
				event: 'click',
				chain: 'login'
			},{
				selector: 'textfield[name=password]',
				event: 'keypress',
				chain: 'loginKey'
			},{
				event: 'afterrender',
				chain: 'init'
			}]
		}
	}
})
Ext.define('iih.po.com.view.SelectPortal', {
	extend:  Xap.ej.template.BaseTemplate ,
	
	                                            
	
	alias:'widget.selectportal',
	
	layout: 'fit',

	xapConfig: {
		blocks: {
			'selectportalview': {
				xclass: 'iih.po.com.block.SelectPortalBlock'
			}
		},

		actions: {
			'init': {
				xclass: 'iih.po.com.action.SelectPortalInitAction',
				blocks:{
					selectportals: 'selectportalview'
				}
			},
			'searchHospitalArea': {
                xclass: 'iih.po.com.action.SearchHospitalAreaAction',
                url:'searchHospitalArea',
                blocks:{
                    context: 'selectportalview'
                }
            },
            'searchDepartment': {
                xclass: 'iih.po.com.action.SearchDepartmentAction',
                url:'user/departments',
                blocks:{
                    context: 'selectportalview'
                }
            },
            'searchPortal': {
                xclass: 'iih.po.com.action.SearchPortalAction',
                url:'searchPortal',
                blocks:{
                    context: 'selectportalview'
                }
            },
            'enterPortal': {
                xclass: 'iih.po.com.action.SelectPortalAction',
                blocks:{
                    selectportals: 'selectportalview'
                }
            },
            'back': {
                xclass: 'iih.po.com.action.BackPortalAction'
            }
		},

		chains: {
			'init':['init'],
			'searchHospitalArea':['searchHospitalArea'],
			'searchDepartment':['searchDepartment'],
			'searchPortal':['searchPortal'],
			'enterPortal':['enterPortal'],
            'back':['back']
		},

		connections: {
			'selectportalview': [{
				selector: 'xapcombobox[name=hosArea]',
				event: 'change',
				chain: 'searchDepartment'
			},{
                selector: 'xapcombobox[name=dept]',
                event: 'change',
                chain: 'searchPortal'
            }]
		}
	}
})
// TODO 确保展示的视图唯一，不会重复弹出
Ext.define('Xap.ej.action.PopHideAction', {
	extend:  Xap.ej.action.Action ,
	
	           
                               
                                            
      

    defaultConfig: {
        width: 800,
        height: 600,
        layout : 'fit',
        modal: true,
		closeAction: 'hide'
    },
	 
    execute: function(context) {
        this.callParent();
		if(this.popWindow){
			this.popWindow.show();
			return;
		}
        if(this.viewConfig) {
            var config = this.viewConfig;
            Xap.create(config).show();
        }
        else if(context && context.contentConfig && context.contentConfig.xtype) {
            // TODO xtype?
            var windowConfig = Ext.apply({}, this.defaultConfig);
            if(context.width) {
                windowConfig.width = context.width;
                context.width = null;
            }
            if(context.height) {
                windowConfig.height = context.height;
                context.height = null;
            }
            if(context.title) {
                windowConfig.title = context.title;
                context.title = null;
            }

            // 弹出窗口
            var window = Ext.create('Ext.window.Window', windowConfig);
			this.popWindow = window;

            var contentConfig = context.contentConfig;
            var initChainConfig = contentConfig.initChain;
            contentConfig.initChain = null;

            window.add(contentConfig);
            window.show();

            // 调用初始化Action
            if(initChainConfig) {
                var content = window.down(contentConfig.xtype);
                var chain = content.getActionChain(initChainConfig.name);
                if(chain) {
                    var ctx = initChainConfig.context || {};
                    ctx.parentWindow = window;
                    chain.execute(ctx);
                }
            }
        }
    }
});

Ext.define('iih.po.inp.block.PatientSearchBlock', {
    extend :  Xap.ej.block.FormBlock ,
    
                                           
                                          
                                          
                                                     
                                                   
                                                
                                                 
                                                    

    alias:'widget.patientsearchblock',

    layout: {
        type: 'vbox',
        align: 'stretch'
    },
    
    height: 520,
    
    border:false,
    
    items:[{
        xtype: 'xapform',
        height: 60,
        layout: {
            type: 'hbox',
            align: 'middle'
        },
        border:false,
        defaults: {
            labelWidth:50,
            labelAlign:'right'
        },
        items:[{
            xtype: 'comboxgrid',
            name: 'deptCd',
            fieldLabel: '科室',
            url: 'organization/keyword',//科室查询的url
            listWidth:230,    //gird的宽度
            width:200,        //combo的宽度
            valueField : 'code',//科室编码的字段名
            displayField: 'name',//科室名称的字段名
            columns: [{              //grid的column配置
               text: '科室编码',
               dataIndex: 'code',
               width:80
            },{
               text: '科室',
               flex:1,
               dataIndex: 'name'
            }],
            callback:function(newValue,oldValue,record){
                var view = this.up('inppatientsearchview');
                var initChain = view.getActionChain('init');
                initChain.execute({
                    deptCd:newValue
                });
            }
        },{
            xtype:'rangedatefield',
            fieldLabel:'时间'
        },{
            xtype:'xaptextfield',
            name:'amrNo',
            fieldLabel:'住院号',
            listeners:{
                specialkey : function(field, e) {  
                    if (e.getKey() == Ext.EventObject.ENTER) {  
                        var view = this.up('inppatientsearchview');
                        var initChain = view.getActionChain('init');
                        initChain.execute({}); 
                    }  
                }
            }
        },{
            xtype:'xaptextfield',
            name:'patientName',
            fieldLabel:'姓名',
            listeners:{
                specialkey : function(field, e) {  
                    if (e.getKey() == Ext.EventObject.ENTER) {  
                        var view = this.up('inppatientsearchview');
                        var initChain = view.getActionChain('init');
                        initChain.execute({}); 
                    }  
                }
            }
        }]
    },{
        xtype: 'xaptoolbarblock',
        items: [{
            xtype: 'button',
            iconCls: 'icon-reset',
            text: '重置',
            action: 'reset',
            handler:function(btn,e){
                var block = btn.up('patientsearchblock');
                var form = block.down('xapform');
                form.getForm().reset();
                var startField = form.down('xapdatefield[name=startDate]');
                var endField = form.down('xapdatefield[name=endDate]');
                startField.setMaxValue(null);
                endField.setMinValue(null);
                var view = btn.up('inppatientsearchview');
                var block = btn.up('patientsearchblock');
                var form = block.down('xapform');
                if(form.getForm().isValid()){
                    var chain = view.getActionChain('init');
                    chain.execute();
                }
            }
        },{
            xtype: 'button',
            iconCls: 'icon-Search',
            text: '查询',
            action: 'search',
            handler:function(btn,e){
                var view = btn.up('inppatientsearchview');
                var block = btn.up('patientsearchblock');
                var form = block.down('xapform');
                if(form.getForm().isValid()){
                    var chain = view.getActionChain('init');
                    chain.execute();
                }
            }
        }]
    },{
        xtype: 'xapgrid',
        flex: 1,
        autoScroll:true,
        pageSize : 30,
        pageShow : true,
        CM_JR_Record: [{
            dataIndex:'pk',
            hidden:true
        },{
            dataIndex:'patientId',
            hidden:true
        },{
            header:'床号',
            dataIndex:'currentBedCode',
            width:60
        },{
            header:'住院号',
            dataIndex:'amrNo',
            width:100
        },{
            header:'姓名',
            dataIndex:'patientName',
            width:80
        },{
            header:'性别',
            dataIndex:'sexName',
            width:50
        },{
            header:'年龄',
            dataIndex:'age',
            width:50
        },{
            header:'入院时间',
            xtype:'xapdatecolumn',
            dataIndex:'currentDeptIntoTime',
            flex:1
        },{
            header:'出院时间',
            xtype:'xapdatecolumn',
            dataIndex:'finishTime',
            flex:1
        },{
            header:'经治医师',
            dataIndex:'currentManageDoctorName',
            width:80
        },{
            header:'主诊断',
            dataIndex:'currentMainDiagnosisName',
            flex:1
        }],
        listeners: {
            itemdblclick: function(grid, rec, item, index) {
                var win = grid.up('window');
                var block = win.down('patientsearchblock');
                block.changePatient(win,rec.raw);
            }
        }
    }],
    
    buttons:[{
        xtype: "button",
        name: 'confim',
        method:'confim',
        width: 75,
        text: '确认',
        style : 'margin-right:10px',
        handler:function(btn,e){
            var win = this.up('window');
            var block = win.down('patientsearchblock');
            var grid = block.down('xapgrid');
            var record = grid.getSelectionModel().getSelection();
            if(record && record.length>0){
                var rec = record[0].raw;
                block.changePatient(win,rec);
            }else{
                XapMessageBox.warn('请选择患者！','',win);
            }
        }
    },{
        xtype: "button",
        name: 'cancel',
        method:'cancel',
        width: 75,
        text: '取消',
        handler:function(btn,e){
            var win = this.up('window');
            if(IMER_GLOBAL.encounterSn){
                win.close();
            }else{
                XapMessageBox.warn('请选择患者！','',win);
            }
        }
    }],
    
    initComponent: function() {
        var me = this;
        me.callParent();
    },
    
    changePatient: function(win,rec){
        var pk = rec.pk;
        if(pk == IMER_GLOBAL.encounterSn){
            win.close();
        }else{
            var workArea = Ext.getCmp('workareapageview');
            var closePages = new Array();
            var tabs = workArea.items.items;
            Ext.each(tabs,function(item){
                if(!item.baseMenu)
                    closePages.push(item);
            });
            if(closePages && closePages.length>0){
                var callBack = function(patient){
                    var canvas = Xap.getCanvas();
                    canvas.fireEvent("updatePatient",{patient:patient});
                    this.close();
                };
                workArea.callBack = {
                    method: callBack,
                    scope: win,
                    params: [rec]
                };
                workArea.closePages = closePages;
                var canvas = Xap.getCanvas();
                canvas.fireEvent("portalRender");
            }else{
                var canvas = Xap.getCanvas();
                canvas.fireEvent("updatePatient",{patient:rec});
                win.close();
            }
        }
    }
})
Ext.define('iih.po.inp.action.PatientGridInitAction', {
    extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override
	*/
	doExecute: function(context) {
	    this.callParent();
	    this.showLoading();
    	var operations = context.operations;
    	var pageNum; 
        var pageSize = 30;
        if(context.event && context.event.name == 'turnpage'){
            pageNum = context.event.arguments[0]; 
            pageSize = context.event.arguments[1];
        }
        this.turnpage = false;
        if(pageNum)
            this.turnpage = true;
        var block = this.getBlock('content');
        var form = block.down('xapform');
    	var url = this.url;
    	var mclass = null;
    	var enTpCd;
    	if(IMER_GLOBAL.portal.code == IMER_CONSTANT.PORTAL_CD_1)
    	    enTpCd = IMER_CONSTANT.OUTPATIENT;
    	if(IMER_GLOBAL.portal.code == IMER_CONSTANT.PORTAL_CD_2)
    	    enTpCd = IMER_CONSTANT.INPATIENT;
    	var condition = {
    	   workScreen: '1',
    	   userId: null,
    	   deptCd: null,
    	   enTpCd: enTpCd,
    	   pageSize: pageSize,
    	   pageNum: pageNum
    	};
    	condition = Ext.apply(condition,form.getData());
    	if(context.deptCd)
    	    condition = Ext.apply(condition,{'deptCd':context.deptCd});
    	var qs = Ext.Object.toQueryString(condition);
    	url += '?' + qs;
    	var METHODS = this.getInvocationMethods();
    	var operation = {
    	    url: url,
    	    mclass: mclass,
    	    method: METHODS.METHOD_GET,
    	    condition: condition,
            scope: this,
            success: this.onSuccess
    	};
    	operations.push(operation);
    },
    
    onSuccess: function(operation) {
        var block = this.getBlock('content');
        var grid = block.down('xapgrid');
        if(!grid)return;
        var m = operation.result;
		if(m){
		    if(this.turnpage)
		        grid.setData(m.dataList);
		    else
		        grid.setPageData(m);
		}
    }
});
Ext.define('iih.po.inp.view.InpPatientSearchView', {
    extend :  Xap.ej.template.BaseTemplate ,

    requires: [],

    alias:'widget.inppatientsearchview',
    
    border: 0,
    
    id: 'inppatientsearchview',

    xapConfig: {
        blocks: {
            'content': {
                xclass: 'iih.po.inp.block.PatientSearchBlock'
            }
        },

        actions: {
            'init': {
                xclass: 'iih.po.inp.action.PatientGridInitAction',
                url: 'mr/ens',
                blocks: {
                    content: 'content'
                }
            },
            'selectPatient': {
                xclass: 'iih.po.com.action.SelectPatientAction',
                blocks: {
                    content: 'content'
                }
            }
        },

        chains: {
            'init': ['init'],
            'selectPatient': ['selectPatient']
        },

        connections: {
            'content': [{
                event: 'afterrender',
                chain: 'init'
            },{
                selector: 'xapgrid',
                event: 'turnpage',
                chain: 'init'
            }]
        }
    }
})
Ext.define('iih.po.inp.action.InpPatientPopAction', {
	extend:  Xap.ej.action.PopHideAction ,

	                                                   
	
	/*
	* @Override
	*/
	execute: function(context) {
	    var view = this.getOwner();
    	var config = {
    	    modal: true,           
    		width: 950,
    		height:560,
    		title :'患者查询',
    		contentConfig: {
    			xtype: 'inppatientsearchview'
    		}
    	};
    	this.callParent([config]);
    }
});

Ext.define('iih.po.com.view.PortalView', {
    extend :  Xap.ej.template.BaseTemplate ,

                                                                              

    alias:'widget.portalview',

    layout: 'fit',
    
    id:'portalview',
    
    border: 0,

    xapConfig: {
        blocks: {
            'content': {
                xclass: 'iih.po.com.block.PortalBlock'
            }
        },

        actions: {
            'refresh': {
                xclass: 'iih.po.com.action.PortalInitAction',
                blocks: {
                    portal: 'content'
                }
            },
            'savePatient': {
                xclass: 'iih.po.com.action.SavePatientAction',
                url: 'savePatient',
                blocks: {
                    portal: 'content'
                }
            },
            'saveDept': {
                xclass: 'iih.po.com.action.SaveDeptAction',
                url: 'saveDepartment',
                blocks: {
                    portal: 'content'
                }
            },
            'updatePatient': {
                xclass: 'iih.po.com.action.UpdatePatientAction',
                blocks: {
                    portal: 'content'
                }
            },
            'addWorkAreaPage': {
                xclass: 'iih.po.com.action.AddWorkAreaPageAction',
                blocks: {
                    portal: 'content'
                }
            },
            'closeWorkPage': {
                xclass: 'iih.po.com.action.CloseWorkPageAction',
                blocks: {
                    portal: 'content'
                }
            },
            'functionRefresh': {
                xclass: 'iih.po.com.action.FunctionTreeInitAction',
                url: 'poral/menus',
                blocks: {
                    portal: 'content'
                }
            },
            'selectFunction': {
                xclass: 'iih.po.com.action.SelectFunctionAction',
                blocks: {
                    portal: 'content'
                }
            },
            'patientPop': {
                xclass: 'iih.po.com.action.PatientPopAction',
                blocks: {
                    portal: 'content'
                }
            },
            'InpPatientPop': {
                xclass: 'iih.po.inp.action.InpPatientPopAction',
                blocks: {
                    portal: 'content'
                }
            },
            'refreshMsg': {
                xclass: 'iih.po.com.action.MessageRefreshAction',
                url: 'message/read',
                blocks: {
                    portal: 'content'
                }
            },
            'messagePop': {
                xclass: 'iih.po.com.action.MessagePopAction',
                blocks: {
                    portal: 'content'
                }
            }
        },

        chains: {
            'init': ['saveDept','refresh'],
            'savePatient': ['savePatient'],
            'updatePatient': ['updatePatient'],
            'addWorkAreaPage': ['addWorkAreaPage'],
            'closeWorkPage': ['closeWorkPage'],
            'functionRefresh': ['functionRefresh'],
            'selectFunction': ['selectFunction'],
            'patientPop': ['patientPop'],
            'InpPatientPop': ['InpPatientPop'],
            'refreshMsg': ['refreshMsg'],
            'messagePop': ['messagePop']
        },

        connections: {
            'content': [{
                event: 'activate',
                chain: 'refreshMsg'
            }]
        }
    },
    
    initComponent : function() {
        var me = this;
        this.callParent();
        var canvas = Xap.getCanvas();
        this.relayEvents(canvas, ['addWorkPage']);
        this.addListener('addWorkPage', function(config) {
            var chain = me.getActionChain('addWorkAreaPage');
            chain.execute(config);
        });
        this.relayEvents(canvas, ['updatePatient']);
        this.addListener('updatePatient', function(config) {
            var chain = me.getActionChain('updatePatient');
            chain.execute(config);
        });
        this.relayEvents(canvas, ['portalRender']);
        this.addListener('portalRender', function() {
            var chain = me.getActionChain('closeWorkPage');
            chain.execute();
        });
    }
})
Ext.define('iih.po.com.view.App', {
	extend:  Ext.panel.Panel ,

	           
	                                   
	                                          
	                                       
	             

	alias:'widget.app',
	
	id:'commonappmain',
	
	border: 0,
	
	layout:'card',
	
	items: [{
        id: 'login',
        xtype: 'login'
    },{
        id: 'selectportal',
        xtype: 'selectportal'
    },{
        id: 'portalview',
        xtype: 'portalview'
    }],
    
    initComponent: function() {
    	this.callParent();
    	Ext.getDoc().on('keydown',function(e) {
    		if(e.getKey() == 8 && e.getTarget().type =='text' && !e.getTarget().readOnly){
    	    }else if(e.getKey() == 8 && e.getTarget().type =='textarea' && !e.getTarget().readOnly){
    	    }else if(e.getKey() == 8 && e.getTarget().type =='password' && !e.getTarget().readOnly){
    	    }else if(e.getKey() == 8){    
    	        e.preventDefault();
    	        return false;
    	    }    
        });
    }
})
Ext.define('iih.po.com.view.FunctionNavigationView', {
    extend :  Xap.ej.template.BaseTemplate ,

                                          
                                                        

    alias:'widget.functionnavigationview',
    
    title: '功能导航栏',

    layout: 'fit',

    xapConfig: {
        blocks: {
            'functiontree': {
                xclass: 'iih.po.com.block.FunctionNavigationBlock'
            }
        },

        actions: {
            'refresh': {
                xclass: 'iih.po.com.action.FunctionTreeInitAction',
                url: 'app/searchPortalMenus',
                blocks: {
                    tree: 'functiontree'
                }
            },
            'selectFunction': {
                xclass: 'iih.po.com.action.SelectFunctionAction',
                blocks: {
                    tree: 'functiontree'
                }
            },
            'createMenu': {
                xclass: 'iih.po.com.action.CreateMenuAction',
                blocks: {
                    tree: 'functiontree'
                }
            },
            'createMr': {
                xclass: 'iih.mr.wr.mr.action.CreateMrDocAction'
            },
            'openMr': {
                xclass: 'iih.mr.wr.mr.action.OpenMrDocAction'
            },
            'mrProperty': {
                xclass: 'iih.mr.wr.mr.action.MrDocPropertyAction'
            }
        },

        chains: {
            'init': ['refresh'],
            'selectFunction': ['selectFunction'],
            'createMenu': ['createMenu'],
            'createMr': ['createMr'],
            'openMr': ['openMr'],
            'mrProperty': ['mrProperty']
        },

        connections: {
            'functiontree': [{
                chain: 'init'
            }]
        }
    },
    
    initComponent : function() {
        var me = this;
        this.callParent();
        this.addEvents("mrTreeRefresh");//为视图添加事件
        this.addListener('mrTreeRefresh', function() {//添加监听事件
            var chain = me.getActionChain('init');
            chain.execute();
        });
    }
})
Ext.define('iih.po.com.view.PatientNavigationView', {
    extend :  Xap.ej.stl.view.TopBottomContainerTemplate ,

                                           

    alias:'widget.patientnavigationview',
    
    title: '患者',
    
    border: 0,

    xapConfig: {
        blocks: {
            'top': {
                xclass: 'iih.po.com.block.PatientSearchBlock'
            },
            'bottom': {
                xclass: 'iih.po.com.block.PatientListBlock'
            }
        },

        actions: {
            'refresh': {
                xclass: 'iih.po.com.action.PatientTreeInitAction',
                url: 'mr/ens',
                blocks: {
                    tree: 'bottom'
                }
            },
            'selectPatient': {
                xclass: 'iih.po.com.action.SelectPatientAction',
                blocks: {
                    portal: 'bottom'
                }
            }
        },

        chains: {
            'init': ['refresh'],
            'selectPatient': ['selectPatient']
        },

        connections: {
            'bottom': [{
                chain: 'init'
            },{
                selector: 'xaptree',
                event: 'itemclick',
                chain: 'selectPatient'
            }]
        }
    }
});
Ext.define('iih.po.com.view.WorkPageView', {
    extend :  Xap.ej.template.BaseTemplate ,

                                           
    
    alias:'widget.workpageview',
    
    layout: 'border',
    
    xapConfig: {
        blocks: {
            'workContent': {
                xclass: 'Xap.ej.stl.view.PlaceHolderBlock',
                region: 'center',
                layout: 'fit',
                border: false,
                padding: '1 1 1 1',
                flex:1
            },
            'helpContent': {
                xclass: 'iih.po.com.block.AssistantBlock',
                region: 'south',
                split: {
                    border: true,
                    collapseOnDblClick: false,
                    style: 'background:#f1f1f1;border-color:#d0d0d0;color:black;font-size:12px;font-size:normal;border-width:0;border-style:solid'
                },
                header: false,
                layout: 'fit',
                border: false,
                padding: '1 1 1 1',
                header: false,
                height:32
            }
        },

        actions: {
            'assistantInit': {
                xclass: 'iih.po.com.action.AssistantInitAction',
                url: 'mr/ens',
                blocks:{
                    helpContent: 'helpContent'
                }
            }
        },

        chains: {
            'assistantInit':['assistantInit']
        },

        connections: {
            'helpContent': [{
                selector: 'combo[itemId=encounterCombox]',
                event: 'afterrender',
                chain: 'assistantInit'
            }]
        }
    },
    
    initComponent : function() {
        this.callParent();
        this.addEvents("refreshWorkArea");
        var block = this.getBlock('helpContent');
        this.addListener('refreshWorkArea', function(parms) {
            //console.log(block);
            //console.log(parms);
        });
    }
})
Ext.define('IMER_CONSTANT', {
	singleton: true,
	
	TOP_HEIGHT: 80,
	ASSISTANT_HEIGHT: 150,
	PORTALLEFT_WIDTH: 200,
	WORKAREA_PADDING: 40,
	WORKAREA_MIN_WIDTH: 740,
	WORKAREA_MIN_HEIGHT: 250,
	BUTTON_MIN_WIDTH: 75,
	BUTTON_MIN_HEIGHT: 21,
	QUERY_COLUMNS: 4,
	PORTLET_WIDTH: 340,
	PORTLET_HEIGHT: 340,
	
	CONSTRAIN_WIDTH: 800,
	CONSTRAIN_HEIGHT: 600,
	FIXED_WIDTH: 242,		//2*parseInt(WORKAREA_PADDING) + PORTALLEFT_WIDTH + 2,
	WORKAREA_WIDTH: 400,	//CONSTRAIN_WIDTH - FIXED_WIDTH,
	BODY_TOP_PADDING: '5 0 0 0',
	BODY_LEFT_PADDING: '0 5 0 0',
	
	SYSTEMNAME: '定制病历资料管理系统',
	VERSION: '(版本2.2.2.28.20151126)',
	IP: '(Server:172.18.98.71:8086)',

	//CLIENT: 'browser',
	CLIENT: 'webkit',
	
	FORM_URL: '',
	
	SERVER_URL: 'http://172.18.96.226:8080/AjaxPatient.json',
	
	/********************宏元素编码********************/
	//姓名
    MR_ELEMENT_CD_1 :'MR.M.013.D.1',
    //  性别
    MR_ELEMENT_CD_2 : 'MR.M.013.D.2',
    //  年龄
    MR_ELEMENT_CD_3 : 'MR.M.013.D.3',
    //  婚姻状况
    MR_ELEMENT_CD_4 : 'MR.M.013.D.4',
    //  民族
    MR_ELEMENT_CD_5 : 'MR.M.013.D.5',
    //  职业
    MR_ELEMENT_CD_6 : 'MR.M.013.D.6',
    //  出生地
    MR_ELEMENT_CD_7 : 'MR.M.013.D.7',
    //  工作单位
    MR_ELEMENT_CD_8 : 'MR.M.013.D.8',
    //  身份证号
    MR_ELEMENT_CD_9 : 'MR.M.013.D.9',
    //现住址
    MR_ELEMENT_CD_10 : 'MR.M.013.D.10',
    //电话
    MR_ELEMENT_CD_11 : 'MR.M.013.D.11',
    //ID号
    MR_ELEMENT_CD_12 : 'MR.M.013.D.12',
    //住院号
    MR_ELEMENT_CD_13 : 'MR.M.013.D.13',
    //住院次
    MR_ELEMENT_CD_14 : 'MR.M.013.D.14',
    //床号
    MR_ELEMENT_CD_15 : 'MR.M.013.D.15',
    //入院日期
    MR_ELEMENT_CD_16 : 'MR.M.013.D.16',
    //出院日期
    MR_ELEMENT_CD_17 : 'MR.M.013.D.17',
    //科室
    MR_ELEMENT_CD_18 : 'MR.M.013.D.18',
    //病区
    MR_ELEMENT_CD_19 : 'MR.M.013.D.19',
    //住院目的
    MR_ELEMENT_CD_20 : 'MR.M.013.D.20',
    //入院情况
    MR_ELEMENT_CD_21 : 'MR.M.013.D.21',
    //主要诊断
    MR_ELEMENT_CD_22 : 'MR.M.013.D.22',
    //费别
    MR_ELEMENT_CD_23 : 'MR.M.013.D.23',
    //主任医师
    MR_ELEMENT_CD_24 : 'MR.M.013.D.24',
    //主治医师
    MR_ELEMENT_CD_25 : 'MR.M.013.D.25',
    //住院医师
    MR_ELEMENT_CD_26 : 'MR.M.013.D.26',
    //医师签名
    MR_ELEMENT_CD_27 : 'MR.M.013.D.27',
    //业务时间
    MR_ELEMENT_CD_28 : 'MR.M.013.D.28',
    //业务时间
    MR_ELEMENT_CD_29 : 'MR.M.013.D.29',
    //心率
    MR_ELEMENT_CD_30 : 'MR.M.013.D.30',
    //体重
    MR_ELEMENT_CD_31 : 'MR.M.013.D.31',
    //上级医生
    MR_ELEMENT_CD_32 : 'MR.M.013.D.32',
    //门诊卡号
    MR_ELEMENT_CD_33 : 'MR.M.013.D.33',
    //血氧
    MR_ELEMENT_CD_34 : 'MR.M.013.D.34',
    //患者ID
    MR_ELEMENT_CD_35 : 'MR.M.013.D.35',
    //就诊日期
    MR_ELEMENT_CD_36 : 'MR.M.013.D.36',
    //体温
    MR_ELEMENT_CD_101 : 'MR.M.013.D.101',
    //呼吸
    MR_ELEMENT_CD_102 : 'MR.M.013.D.102',
    //脉搏
    MR_ELEMENT_CD_103 : 'MR.M.013.D.103',
    //收缩压
    MR_ELEMENT_CD_104 : 'MR.M.013.D.104',
    //舒张压
    MR_ELEMENT_CD_105 : 'MR.M.013.D.105',
    //上级查房医师名称
    MR_ELEMENT_CD_106 : 'MR.M.013.D.106',
    //门诊卡号
    MR_ELEMENT_CD_107 : 'MR.M.013.D.107',
    //急诊病历编号
    MR_ELEMENT_CD_110 : 'MR.M.013.D.110',
    //全部诊断
    MR_ELEMENT_CD_111 : 'MR.M.013.D.111',
    
    /***************************医疗记录类型编码****************************/
    //病案首页
    MRM_MR_TYPE_CD_1 : 'MRM003.1',
    //初次入院记录
    MRM_MR_TYPE_CD_2 : 'MRM003.2',
    //首次病程记录
    MRM_MR_TYPE_CD_3 : 'MRM003.3',
    //日常病程记录
    MRM_MR_TYPE_CD_4 : 'MRM003.4',
    //抢救记录
    MRM_MR_TYPE_CD_5 : 'MRM003.5',
    //交（接）班记录
    MRM_MR_TYPE_CD_6 : 'MRM003.6',
    //转科记录
    MRM_MR_TYPE_CD_7 : 'MRM003.7',
    //阶段小结
    MRM_MR_TYPE_CD_8 : 'MRM003.8',
    //会诊记录
    MRM_MR_TYPE_CD_9 : 'MRM003.9',
    //疑难病例讨论记录
    MRM_MR_TYPE_CD_10 : 'MRM003.10',
    //有创诊疗操作记录
    MRM_MR_TYPE_CD_11 : 'MRM003.11',
    //上级医师首次查房记录
    MRM_MR_TYPE_CD_12 : 'MRM003.12',
    //专科病历
    MRM_MR_TYPE_CD_13 : 'MRM003.13',
    //手术记录
    MRM_MR_TYPE_CD_14 : 'MRM003.14',
    //术前讨论记录
    MRM_MR_TYPE_CD_15 : 'MRM003.15',
    //死亡记录
    MRM_MR_TYPE_CD_16 : 'MRM003.16',
    //出院记录
    MRM_MR_TYPE_CD_17 : 'MRM003.17',
    //基本要求及医嘱单
    MRM_MR_TYPE_CD_18 : 'MRM003.18',
    //手术知情同意书
    MRM_MR_TYPE_CD_19 : 'MRM003.19',
    //麻醉知情同意书
    MRM_MR_TYPE_CD_20 : 'MRM003.20',
    //病危（重）通知书
    MRM_MR_TYPE_CD_21 : 'MRM003.21',
    //输血治疗知情同意书
    MRM_MR_TYPE_CD_22 : 'MRM003.22',
    //三测单
    MRM_MR_TYPE_CD_23 : 'MRM003.23',
    //医嘱单
    MRM_MR_TYPE_CD_24 : 'MRM003.24',
    //护理记录
    MRM_MR_TYPE_CD_25 : 'MRM003.25',
    //再次或多次入院记录
    MRM_MR_TYPE_CD_26 : 'MRM003.26',
    //门(急)诊复诊病历
    MRM_MR_TYPE_CD_27 : 'MRM003.27',
    //门(急)诊初诊病历
    MRM_MR_TYPE_CD_28 : 'MRM003.28',
    //24小时内出入院记录
    MRM_MR_TYPE_CD_29 : 'MRM003.29',
    //24小时内入院死亡记录
    MRM_MR_TYPE_CD_30 : 'MRM003.30',
    //上级医师日常查房记录
    MRM_MR_TYPE_CD_31 : 'MRM003.31',
    //术前小结
    MRM_MR_TYPE_CD_32 : 'MRM003.32',
    //麻醉记录
    MRM_MR_TYPE_CD_33 : 'MRM003.33',
    //手术记录
    MRM_MR_TYPE_CD_34 : 'MRM003.34',
    //手术清点记录
    MRM_MR_TYPE_CD_35 : 'MRM003.35',
    //手术安全核查记录
    MRM_MR_TYPE_CD_36 : 'MRM003.36',
    //术后首次病程记录
    MRM_MR_TYPE_CD_37 : 'MRM003.37',
    //麻醉术后访视记录
    MRM_MR_TYPE_CD_38 : 'MRM003.38',
    //死亡病例讨论记录
    MRM_MR_TYPE_CD_39 : 'MRM003.39',
    //其他知情同意书
    MRM_MR_TYPE_CD_40 : 'MRM003.40',
    //手术记录
    MRM_MR_TYPE_CD_41 : 'MRM003.41',
    //有创诊疗操作记录
    MRM_MR_TYPE_CD_42 : 'MRM003.42',
    //手术同意书
    MRM_MR_TYPE_CD_43 : 'MRM003.43',
    //麻醉同意书
    MRM_MR_TYPE_CD_44 : 'MRM003.44',
    //输血治疗知情同意书
    MRM_MR_TYPE_CD_45 : 'MRM003.45',
    //麻醉记录
    MRM_MR_TYPE_CD_46 : 'MRM003.46',
    //病危（病重）通知书
    MRM_MR_TYPE_CD_47 : 'MRM003.47',
    //其他知情同意书
    MRM_MR_TYPE_CD_48 : 'MRM003.48',
    //诊断证明书
    MRM_MR_TYPE_CD_49 : 'MRM003.49',
    //出院证明书
    MRM_MR_TYPE_CD_50 : 'MRM003.50',
    //死亡证明
    MRM_MR_TYPE_CD_51 : 'MRM003.51',
    //转诊申请单
    MRM_MR_TYPE_CD_52 : 'MRM003.52',
    //休假证明书
    MRM_MR_TYPE_CD_53 : 'MRM003.53',
    //留观登记
    MRM_MR_TYPE_CD_54 : 'MRM003.54',
    
    /***************************医疗记录自定义类型编码****************************/
    //门诊病历
    MRM_MR_CUST_CLA_CD_1 : 'MRM002.1',
    //入院记录
    MRM_MR_CUST_CLA_CD_2 : 'MRM002.2',
    //病程记录
    MRM_MR_CUST_CLA_CD_3 : 'MRM002.3',
    //会诊资料
    MRM_MR_CUST_CLA_CD_4 : 'MRM002.4',
    //手术资料
    MRM_MR_CUST_CLA_CD_5 : 'MRM002.5',
    //手术资料
    MRM_MR_CUST_CLA_CD_6 : 'MRM002.6',
    //知情同意书
    MRM_MR_CUST_CLA_CD_7 : 'MRM002.7',
    //讨论记录
    MRM_MR_CUST_CLA_CD_8 : 'MRM002.8',
    //出院(死亡)记录
    MRM_MR_CUST_CLA_CD_9 : 'MRM002.9',
    //辅助检查
    MRM_MR_CUST_CLA_CD_10 : 'MRM002.10',
    //护理文书
    MRM_MR_CUST_CLA_CD_11 : 'MRM002.11',
    //其他
    MRM_MR_CUST_CLA_CD_12 : 'MRM002.12',
    //有创诊疗操作记录
    MRM_MR_CUST_CLA_CD_13 : 'MRM002.13',
    //知情同意书
    MRM_MR_CUST_CLA_CD_14 : 'MRM002.14',
    //有创诊疗操作记录
    MRM_MR_CUST_CLA_CD_15 : 'MRM002.15',
    //其他
    MRM_MR_CUST_CLA_CD_16 : 'MRM002.16',
    /***************************编辑器工具栏id****************************/
    //提交按钮
    EMR_SUMBIT : 'com.founder.iemr.editor.toolbar:emrSubmit',
    //保存按钮
    EMR_SAVE : 'com.founder.iemr.editor.toolbar:emrSave',
    //撤回按钮
    EMR_REVOKE : 'com.founder.iemr.editor.toolbar:emrRevoke',
    //驳回按钮
    EMR_REJECT : 'com.founder.iemr.editor.toolbar:emrReject',
    //审签通过按钮
    EMR_APPROVE: 'com.founder.iemr.editor.toolbar:emrApprove',
    //审签撤回按钮
    EMR_AUDIT_APPROVE: 'com.founder.iemr.editor.toolbar:emrAuditRevoke',
    //删除按钮
    EMR_DOC_DELETE : 'com.founder.iemr.editor.toolbar:emrDocDelete',
    //刷新宏元素按钮
    EMR_REFRESH_MACRO: 'com.founder.iemr.editor.toolbar:emrRefreshMacro',
    //刷新诊断按钮
    EMR_REFRESH_DIAGNOSIS : 'com.founder.iemr.editor.toolbar:emrRefreshDiagnosis',
    //图片库按钮
    EMR_IMAGE_LIB : 'com.founder.iemr.editor.toolbar:emrImageLibraries',
    //月经史公式编辑
    IDD_MEDICAL_HISTORY : 'com.founder.iemr.editor.toolbar:IDD_MEDICAL_HISTORY',
    //续打按钮
    EMR_CONTINUE_PRINT : 'com.founder.iemr.editor.toolbar:emrContinuePrint',
    //选页打印按钮
    EMR_SELECT_CONTINUE_PRINT : 'com.founder.iemr.editor.toolbar:emrSelectContinuePrint',
    //病历另存为模板
    EMR_SAVE_AS_TEMPLATE : 'com.founder.iemr.editor.toolbar:emrSaveAsTemplate',
    //属性
    EMR_DOC_PROPERTY : 'com.founder.iemr.editor.toolbar:emrDocProperty',
    //发布
    EMR_RELEASE : 'com.founder.iemr.editor.toolbar:emrRelease',
    /***************************审签级别编码****************************/
    //无需审签
    NO_REVIEW_LVL : 'MRM005.01',
    //一级审签
    ONE_REVIEW_LVL : 'MRM005.02',
    //二级审签
    TWO_REVIEW_LVL : 'MRM005.03',
    //三级审签
    THREE_REVIEW_LVL : 'MRM005.04',
    /***************************病历文书状态编码****************************/
    //病历文书状态:新建
    MR_DOC_STATUS_CD_1 : 'MR.M.026.D.1',
    //病历文书状态:已提交
    MR_DOC_STATUS_CD_2 : 'MR.M.026.D.2',
    //病历文书状态:已驳回
    MR_DOC_STATUS_CD_3 : 'MR.M.026.D.3',
    //病历文书状态:主治医已审核
    MR_DOC_STATUS_CD_4 : 'MR.M.026.D.4',
    //病历文书状态:主任医生已审核
    MR_DOC_STATUS_CD_5 : 'MR.M.026.D.5',
    /***************************组织结构类型编码****************************/    
    //集团
    ORG_TYPE_CD_1: 'ORGM01.01',
    //院区
    ORG_TYPE_CD_2: 'ORGM01.02',
    //社区
    ORG_TYPE_CD_3: 'ORGM01.03',
    //部门
    ORG_TYPE_CD_4: 'ORGM01.04',
    //工作组
    ORG_TYPE_CD_5: 'ORGM01.05',
    /***************************门户编码****************************/    
    //门急诊病历
    PORTAL_CD_1: 'XAPM06.01',
    //住院医生站（患者）
    PORTAL_CD_2: 'XAPM06.02',
    //病历模板管理
    PORTAL_CD_3: 'XAPM06.03',
    //病历质控平台
    PORTAL_CD_4: 'XAPM06.04',
    //系统管理
    PORTAL_CD_5: 'XAPM06.05',
    //住院医生站（功能）
    PORTAL_CD_6: 'XAPM06.06',
    //病历浏览平台
    PORTAL_CD_7: 'XAPM06.07',
    //门急诊病历(组套)
    PORTAL_CD_8: 'XAPM06.08',
	//第三方病历浏览
    PORTAL_CD_9: 'XAPM06.09',
    /***************************任务状态编码****************************/    
    //已发送
    TASK_STATUS_CD_1: 'XAPM05.01',
    //已接收
    TASK_STATUS_CD_2: 'XAPM05.02',
    //已完成
    TASK_STATUS_CD_3: 'XAPM05.03',
    /***************************就诊类型编码****************************/    
    //门诊
    OUTPATIENT: 'ENM01.01',
    //急诊
    EMERGENCY: 'ENM01.02',
    //留观
    EMERGENCY_OBSERVATION: 'ENM01.03',
    //住院
    INPATIENT: 'ENM01.04',
    //体检
    PHYSICAL_EXAMINATION: 'ENM01.05',
    /***************************菜单类型****************************/    
    //功能菜单
    MENU_FUNCTION: 'function',
    //病历文书自定义分类
    MENU_MR_CATEGORY: 'mrCustcategory',
    //病历文书
    MENU_MR_DOC: 'mrDoc',
    /***************************资源对象****************************/    
    //基础模板
    BASE_TPL: 'MRK01',
    //病历模板
    MR_TPL: 'MRK02',
    //组合元素
    GROUP_ELEMENT: 'MRK06',
    /***************************菜单编码****************************/    
    //基础模板管理
    BASE_TPL_MGR: 'XAPM07.23',
    //病历模板管理
    MR_TPL_MGR: 'XAPM07.27',
    //组合元素管理
    GROUP_ELEMENT_MGR: 'XAPM07.24',
    /***************************性别编码****************************/    
    //男
    SEX_NAM: 'MDM05.01',
    //女
    SEX_WOMAN: 'MDM05.02',
    /***************************科室编码****************************/
    //住院临床科室
    INP_DEPT: 'ORGM02.01',
    //门诊科室
    OUT_DEPT: 'ORGM02.05',

    /***************************系统配置功能编码****************************/
    //是否启用就诊组
    AMR_GROUP_ENABLE:'SYSM01.1',
    //是否启用组套
    CSA_ENABLE:'SYSM01.2',
    //诊断是否自动提交
    DIAGNOSTIC_AUTO_SUBMIT_ENABLE:'SYSM01.3',
    //诊断是否同步到HIS中
    DIAGNOSTIC_AUTO_TO_HIS_ENABLE:'SYSM01.4',
    /***************************所属类型编码****************************/
    //全院
    OWNERTYPE_HOS: 'MDM08.01',
    //科室
    OWNERTYPE_DEPT: 'MDM08.03',
    //个人
    OWNERTYPE_PERSON: 'MDM08.02',
    /***************************门户编码****************************/
    PORTAL_OUTP:'XAPM06.01',
    PORTAL_OUTPGL:'XAPM06.08',
    PORTAL_INP:'XAPM06.02',
})
Ext.define('iih.po.inp.block.InpPatientData', {
    extend :  Ext.view.View ,

    requires: [],

    alias:'widget.inppatientdata',

    tpl: [
        '<tpl for=".">',
        '<div class="patientview">',
        '<table width="100%">',
        '<tr><td rowspan="2" style="padding-left: 0"><img src="css/images/man_48_1.png"/></td>',
            '<td class="thumb" colspan="3">',
            '{currentBedCode}' + '床',
        '</td></tr>',
        '<tr><td class="thumb patientNm">{patientName}</td><td class="thumb sexCd">{sexName}</td>',
        '<td class="thumb patientAge">',
            '{age}'+'岁',
        '</td></tr>',
        '</table>',
        '</div>',
        '</tpl>'
    ],
    
    itemSelector: 'div.patientview'
})
Ext.define("iih.po.model.PatientModel",{
	extend:  Ext.data.Model ,
	alias:'widget.patientmodel',
	fields: ['pk',
	         'amrNo',
	         'encounterTypeCode',
	         'encounterStatusCode',
	         'patientId',
	         'patientName',
	         'currentBedCode',
	         'sexCode',
	         'sexName',
	         'age',
             'currentManageDoctorId',
             'currentManageDoctorName',
             'currentMainDiagnosisName',
             'encounterCount',
             'statusName',
             'paInsurCd',
             'paInsurNm',
             {
                name:'currentDeptIntoTime',
                convert: function(v, record) {
                    if(v){
                        var time = Ext.Date.parse(v, 'time');
                        return Ext.Date.format(time, 'Y-m-d H:i');
                        //var time = Ext.util.Format.date(v, "Y-m-d H:i:s");
                        //return time;
                    }
                    return '';
                }
            },{
                name:'receiveTime',
                convert: function(v, record) {
                    if(v){
                        var time = Ext.Date.parse(v, 'time');
                        return Ext.Date.format(time, 'Y-m-d H:i');
                        //var time = Ext.util.Format.date(v, "Y-m-d H:i:s");
                        //return time;
                    }
                    return '';
                }
            }]
});

Ext.define('iih.po.inp.block.InpPatientListBlock', {
    extend :  Xap.ej.block.Block ,

               
                                          
                                   
      

    alias:'widget.inppatientlistblock',

    layout: 'fit',
    
    border: 0,
    
    initComponent: function() {
        var store = Ext.create('Ext.data.Store', {
            model: 'iih.po.model.PatientModel'
        });
        var patientList = this.createPatientView({ store: store });
        this.items = [patientList];
        this.callParent();
    },
    
    createPatientView: function(info) {
        info = info || {};
        var view = 'iih.po.inp.block.InpPatientData';
        var store = Ext.data.StoreManager.lookup(info.store);
        var patientView = Ext.create(view, {
            cls: 'patientnavigationview-list',
            autoScroll: true,
            flex: 1,
            padding: 0,
            store: store,
            trackOver: true,
            overItemCls: 'x-item-over'
        });
        return patientView;
    },
    
    setData : function(data) {
        var v = this.down('dataview');
        var store = v.getStore();
        if(data)
            store.loadData(data);
        else
            store.loadData({});
    }
})
Ext.define('iih.po.inp.block.InpPatientSearchBlock', {
    extend :  Xap.ej.block.FormBlock ,

                                                     

    alias:'widget.inppatientsearchblock',

    layout: {
        type: 'vbox',
        align: 'stretch'
    },
    
    border: 0,
    
    padding: '3 2 3 2',

    items: [{
        xtype: 'xaptrigger',
        name: 'inpsearch',
        onTriggerClick: function() {
            var view = this.up('inppatientnavigationview');
            var chain = view.getActionChain('searchPatient');
            chain.execute();
        },
        emptyText: '请输入床位号'
    },{
        layout: {
            type: 'hbox',
            align: 'stretch'
        },
        border: 0,
        items: [{
            xtype: 'splitbutton',
            name: 'group',
            text: '我的患者',
            flex: 1
        },{
            xtype: 'splitbutton',
            name: 'sort',
            width: 30
        }]
    }],
    
    createGroupMenu: function(me){
        var group = this.down('splitbutton[name=group]');
        return Ext.create('Ext.menu.Menu', {
            items: [{name: 'minePatient',text: '我的患者', checked: true, group: 'patient', value: 1},
                    {name: 'deptPatient',text: '科室患者', checked: false, group: 'patient', value: 2},
                    {name: 'tranfPatient',text: '转科患者', checked: false, group: 'patient', value: 3}],
            listeners: {
                click: function(menu, item, e) {
                    group.setText(item.text);
                    var view = me.up('inppatientnavigationview');
                    var chain = view.getActionChain('searchPatient');
                    chain.execute();
                }
            }
        })
    },
    
    createSortMenu: function(me){
        return Ext.create('Ext.menu.Menu', {
            items: [{name: 'currentBedCode',text: '床位号', checked: true, group: 'sort'},
                    {name: 'patientName',text: '患者姓名', checked: false, group: 'sort'},
                    {name: 'patientId',text: '住院号', checked: false, group: 'sort'}],
            listeners: {
                click: function(menu, item, e) {
                    var view = me.up('inppatientnavigationview');
                    var list = view.down('dataview');
                    var store = list.getStore();
                    store.sort(item.name);
                }
            }
        })
    },
    
    setData : function(data) {
        this.callParent(arguments);
    },
    
    getData : function() {
        var me = this;
        var trigger = me.down('xaptrigger');
        var group;
        var components = me.down('splitbutton[name=group]').menu.items.items;
        Ext.Array.each(components, function(item) {
            if(item.checked)
                group = item.value;
        });
        var sort;
        var components = me.down('splitbutton[name=sort]').menu.items.items;
        Ext.Array.each(components, function(item) {
            if(item.checked)
                sort = item.name;
        });
        var formData = {
            keyword: trigger.value,
            groupType: group,
            sort: sort
        };
        return formData;
    },
    
    initComponent: function() {
        this.callParent();
        var me = this;
        var group = this.down('splitbutton[name=group]');
        group.menu = this.createGroupMenu(me);
        var sort = this.down('splitbutton[name=sort]');
        sort.menu = this.createSortMenu(me);
    }
})
Ext.define('iih.po.inp.view.InpPatientNavigationView', {
    extend :  Xap.ej.stl.view.TopBottomContainerTemplate ,

               
                                          
                                                 
                                               
                                                  
                                                
                                                 
      

    alias:'widget.inppatientnavigationview',
    
    title: '患者',
    
    border: 0,

    xapConfig: {
        blocks: {
            'top': {
                xclass: 'iih.po.inp.block.InpPatientSearchBlock',
                height: 55
            },
            'bottom': {
                xclass: 'iih.po.inp.block.InpPatientListBlock',
                flex: 1
            }
        },

        actions: {
            'refresh': {
                xclass: 'iih.po.com.action.PatientTreeInitAction',
                url: 'mr/ens',
                blocks: {
                    search: 'top',
                    list: 'bottom'
                }
            },
            'selectPatient': {
                xclass: 'iih.po.com.action.SelectPatientAction',
                blocks: {
                    list: 'bottom'
                }
            },
            'searchPatient': {
                xclass: 'iih.po.com.action.PatientTreeInitAction',
                url: 'mr/ens',
                blocks: {
                    search: 'top',
                    list: 'bottom'
                }
            }
        },

        chains: {
            'init': ['refresh'],
            'selectPatient': ['selectPatient'],
            'searchPatient': ['searchPatient']
        },

        connections: {
            'bottom': [{
                chain: 'init'
            },{
                selector: 'inppatientdata',
                event: 'itemclick',
                chain: 'selectPatient'
            }],
            'top': [{
                chain: 'searchPatient'
            }]
        }
    }
})
Ext.define('iih.po.outp.block.OutpPatientData', {
    extend :  Ext.view.View ,

    requires: [],

    alias:'widget.outppatientdata',

    tpl: [
        '<tpl for=".">',
        '<div class="patientview">',
        '<table width="100%">',
        '<tr><td rowspan="2" style="padding-left: 0"><img src="css/images/man_48_1.png"/></td>',
            '<td class="thumb" colspan="3">',
            '{currentBedCode}' + '床',
        '</td></tr>',
        '<tr><td class="thumb patientNm">{patientName}</td><td class="thumb sexCd">{sexName}</td>',
        '<td class="thumb patientAge">',
            '{age}'+'岁',
        '</td></tr>',
        '</table>',
        '</div>',
        '</tpl>'
    ],
    
    itemSelector: 'div.patientview'
})
Ext.define('iih.po.outp.block.OutpPatientListBlock', {
    extend :  Xap.ej.block.Block ,

                                                   
                               
                                          
                                            

    alias:'widget.outppatientlistblock',

    layout: 'fit',
    
    border: 0,
    
    initComponent: function() {
        var wStore = Ext.create('Ext.data.Store', {
            model: 'iih.po.model.PatientModel'
        });
        var waitlist = this.createPatientView({
            itemId: 'waitlist',
            store: wStore
        });
        var cStore = Ext.create('Ext.data.Store', {
            model: 'iih.po.model.PatientModel'
        });
        var completedlist = this.createPatientView({
            itemId: 'completedlist',
            store: cStore
        });
        var pStore = Ext.create('Ext.data.Store', {
            model: 'iih.po.model.PatientModel'
        });
        var pauselist = this.createPatientView({
            itemId: 'pauselist',
            store: pStore
        });
        this.items = [{
            xtype:'xaptabpanel',
            border: false,
            defaults:{
                border: false,
                autoScroll: true
            },
            items: [{
                title: '待诊',
                statusCd: 'ENM02.02',
                items: [waitlist]
            },{
                title: '诊毕',
                statusCd: 'ENM02.05',
                items: [completedlist]
            },{
                title: '挂起',
                statusCd: 'ENM02.04',
                items: [pauselist]
            }]
        }];
        this.callParent();
    },
    
    createPatientView: function(info) {
        info = info || {};
        var view = 'iih.po.outp.block.OutpPatientData';
        var store = Ext.data.StoreManager.lookup(info.store);
        var patientView = Ext.create(view, {
            itemId: info.itemId,
            cls: 'patientnavigationview-list',
            autoScroll: true,
            flex: 1,
            padding: 0,
            store: store,
            trackOver: true,
            overItemCls: 'x-item-over'
        });
        return patientView;
    },
    
    setData : function(data) {
        console.log(data);
        if(data){
            var waitlist = this.down('dataview[itemId=waitlist]');
            var wStore = waitlist.getStore();
            var completedlist = this.down('dataview[itemId=completedlist]');
            var cStore = completedlist.getStore();
            var pauselist = this.down('dataview[itemId=pauselist]');
            var pStore = pauselist.getStore();
            Ext.each(data,function(rec){
                if(rec.encounterStatusCode == 'ENM02.02')
                    wStore.add(rec);
                if(rec.encounterStatusCode == 'ENM02.05')
                    cStore.add(rec);
                if(rec.encounterStatusCode == 'ENM02.04')
                    pStore.add(rec);
            });
        }
    }
})
Ext.define('iih.po.outp.view.OutpPatientNavigationView', {
    extend :  Xap.ej.stl.view.TopBottomContainerTemplate ,

                                                    

    alias:'widget.outppatientnavigationview',
    
    title: '患者',
    
    border: 0,

    xapConfig: {
        blocks: {
            'top': {
                xclass: 'iih.po.outp.block.OutpPatientSearchBlock',
                height: 50
            },
            'bottom': {
                xclass: 'iih.po.outp.block.OutpPatientListBlock',
                flex: 1
            }
        },

        actions: {
            'refresh': {
                xclass: 'iih.po.com.action.PatientTreeInitAction',
                url: 'mr/ens',
                blocks: {
                    search: 'top',
                    list: 'bottom'
                }
            },
            'selectPatient': {
                xclass: 'iih.po.com.action.SelectPatientAction',
                blocks: {
                    list: 'bottom'
                }
            },
            'searchPatient': {
                xclass: 'iih.po.com.action.PatientTreeInitAction',
                url: 'navigation_patient',
                blocks: {
                    search: 'top',
                    list: 'bottom'
                }
            }
        },

        chains: {
            'init': ['refresh'],
            'selectPatient': ['selectPatient'],
            'searchPatient': ['searchPatient']
        },

        connections: {
            'bottom': [{
                chain: 'init'
            },{
                selector: 'outppatientdata',
                event: 'itemclick',
                chain: 'selectPatient'
            }],
            'top': [{
                chain: 'searchPatient'
            }]
        }
    }
})
Ext.define('iih.po.outp.view.OutpPatientTopPage', {
	extend:  iih.po.com.view.TopBase ,
	
	                                     
	
	alias: 'widget.outppatienttoppage',
	
	border: 0,
	
	icon: 'css/images/top/InpatientTop/icon.png',
	
	initComponent: function() {
    	this.title = '一体化电子病历系统';//FuiLocale.get('title', IemrUser.portal.key);
    	this.info = new Ext.XTemplate(
    			'<table cellSpacing = "0" cellPadding = "0"><tr>',
    			'<td>',
    			'<div class="inpatienttop-border-div">',
				'<table height = "48" border = 0>',
				'<tr align = "left">',
					'<th name="patient">{patientName}</th>',
					'<th>{sexName}&nbsp</th>',
					'<th>{age}&nbsp</th>',
					'<th>{paInsurNm}&nbsp</th>',
				'</tr>',
				'<tr align = "left">',
				    '<td>门诊号：</td>',
				    '<td colspan=3>{amrNo}&nbsp</td>',
				'</tr>',
				'</table>',
				'</div>',
    			'</td>',
    			'<td name="encounter">',
    			'<div class="inpatienttop-border-div" style="margin-left:5px">',
				'<table height = "48" border = 0>',
				'<tr align = "left">',
				    '<td>诊断：</td><td colspan=3>{currentMainDiagnosisName}&nbsp</td>',
				'</tr>',
				'<tr align = "left">',
				    '<td>就诊时间：</td><td>{receiveTime}</td>',
				    '<td>&nbsp就诊次数：</td><td>{encounterCount}&nbsp</td>',
                '</tr>',
				'</table>',
				'</div>',
    			'</td>',
				'</tr></table>'
		);
    	this.callParent();
    },
	
	getExtraContent: function() {
		var container = Ext.create('Ext.container.Container', {
			baseCls: 'page-head',
			flex: 1,
			layout: {
				type: 'hbox',
				align: 'middle'
			},
			defaults: {
				margins: '0 0 0 5',
			},
			defaultType: 'container',
			items: [{
			    name: 'photoArea',
			    border: 0,
                baseCls: '',
                defaults: {
                    border: false
                },
                items: []
			},{
				width: 1000,
				height: 50,
				id: 'outpatientTop_info'
			}]
		});
		return container;
	}
});
Ext.define('iih.sy.userinfo.action.UserDeptRefreshAction', {
	extend:  Xap.ej.action.Action ,
	
	/*
	* @Override
	*/
	execute: function(context) {
    	this.callParent();
    	var block = this.getOwner();
//         var userId = block.userId;		//用户ID
         var userId = block.xapUserPk;		//用户ID
         console.log(this.getOwner());
         var operations = context.operations;
    	 if(!operations) {
    		 return;
    	 }
    	 var url = this.url;
        url += '?' + "userId="+userId;
    	var operation = {
            url: url,
    		method: 'get',
    		scope: this,
    		success: this.onSuccess
    	};
    	operations.push(operation);
    },
    onSuccess: function(operation) {
        var block = this.getOwner().down("xapgrid[name=deptgrid]");
        var m = operation.result;
        if(m instanceof Ext.data.Model) {
            block.setData({
                mclass: operation.mclass,
                data: m.getData(true)
            });
        } else {
            block.setData(m);
        }
    }
});

Ext.define('iih.sy.userinfo.action.TerminalResetAction', {
	extend:  Xap.ej.action.Action ,
	
	/*
	* @Override
	*/
	execute: function(context) {
    	this.callParent();
    	var param = this.getBlock('condition');
    	var form = param.down('xapform');
    	var deptCd = form.down('comboxgrid[name=deptCd]');
    	deptCd.reset();
    	param.getForm().reset();
    }
});

Ext.define('iih.sy.userinfo.action.UserToLeadAction', {
			extend :  Xap.ej.action.ServiceInvocation ,

			requires : [],

			/*
			 * @Override
			 */
			execute : function(context) {
				this.callParent();
				var rb = this.getBlock('result');
				var grid = rb.down('xapgrid');
				var selected = grid.getSelectionModel().getSelection();
				var select = {selects : []};
				if (selected.length > 0) {
					for (i = 0; i < selected.length; i++) {
						select.selects[i] = selected[i].data;
					}
					var operations = context.operations;
					if (!operations) {
						return;
					}
					this.prepareOperations(operations, select);
				} else {
					var message = '请选择人员！';
					XapMessageBox.info(message);
//					Xap.ej.util.MsgUtil.MsgBoxInfo(message);
				};
			},
			prepareOperations : function(operations, select) {
				var url = this.url;
				var METHODS = this.getInvocationMethods();
				var mclass = null;
				var operation = {
					url : url,
					method : METHODS.METHOD_UPDATE,
					data : select,
					scope : this,
					success : this.onSuccess
				};
				operations.push(operation);
			},
			onSuccess : function(operation) {
				//保存成功后关闭画面
				var owner = this.getOwner();
				var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
				var data = properties.getData();
				data.parentWindow.close();
				var b = data.sourceView;
				console.log(b);
				var initChain = b.getBlock('top').getBlock('left').getActionChain('init');
				initChain.execute({});
			}
		});

Ext.define('iih.sy.userinfo.action.UserToLeadInitAction', {
	extend:  Xap.ej.action.ServiceInvocation ,
	
	/*
	* @Override
	*/
	execute: function(context) {
    	var owner = this.getOwner();
        var properties = owner.getLayer(Xap.ej.block.Layer.PROPERTIES);
        properties.setData({
            parentWindow: context.parentWindow,
            sourceView: context.sourceView
        });
    	var operations = context.operations;
    	if(!operations) {
    		return;
    	}
    	this.prepareOperations(operations);
    },
    
    prepareOperations: function(operations) {
        var block = this.getBlock('condition');
    	var condition = block.getData();
        var url = this.url;
        if(condition) {
            var qs = Ext.Object.toQueryString(condition);
//            alert(qs);
            if(qs) {
                url += '?' + qs;
            }
            console.log(url);
        }
        var mclass = null;
        if(block.getModelClass) {
            mclass = block.getModelClass();
        }
    	var operation = {
            url: url,
    		mclass: mclass,
    		method: 'get',
    		condition: condition,
    		scope: this,
    		success: this.onSuccess
    	};
    	operations.push(operation);
    },

    onSuccess: function(operation) {
        var block = this.getBlock('result');
        var m = operation.result;
        // TODO 数据格式就这样了？
        if(m instanceof Ext.data.Model) {
            block.setData({
                mclass: operation.mclass,
                data: m.getData(true)
            });
        }
        else {
            block.setData(m);
        }
        // var r = rb.getData();
    }
});

Ext.define('iih.sy.userinfo.block.UserToLeadBlock',{
	extend :  Xap.ej.block.FormBlock ,
	
	           
		   		                                
		   		                                    
				                          
		   	  

	alias:'widget.usertoleadblock',

	items: [{
		title: '导入人员',
		xtype: 'xapform',
	layout: {
		type: 'table',
		columns: 3,
		//width: 1024,
		tableAttrs: {
            border: 0,
            cellpadding: 0,
            cellspacing: 1,
//            width: '100%',
            height:73
        },
        tdAttrs: {
            valign: 'left'
        }
	},
	items:[
	    {
			xtype:'xaptextfield',
	        name:'empId',
	        labelWidth:50,
	        labelAlign:'right',
	        fieldLabel:'人员ID'
		},{
			xtype:'xaptextfield',
	        name:'nm',
	        labelWidth:50,
	        labelAlign:'right',
	        fieldLabel:'姓名'
			
		},{
			//暂时替代辅助录入
	        xtype:'comboxgrid',
	        anchor: "90%",
	        width:180,
	        padding:'0 0 0 0',
	        name:'deptCd', 
	        method:'execDeptCd',
	        fieldLabel:'行政科室',
	        labelWidth:60,
	        labelAlign:'right',
	        valueField : 'code',
	        columns: [{
	            text: '科室编码',
	            dataIndex: 'code',
	            hidden:true
	        },{
	            text: '科室',
	            dataIndex: 'dept'
	        }],
	        displayField: 'dept',
	        parentXtype:'usertoleadblock',
	        dictionary:'ownerCdLoad'
		},{
			xtype: 'xapradiogroup',
			method:'changeTime',
			width:280,
			items: [
				{boxLabel: '未导入人员', name: 'userToLead', inputValue: 1, checked: true},
				{boxLabel: '已导入人员', name: 'userToLead', inputValue: 2}
			]
		}
		]
	}]
})
Ext.define('iih.sy.userinfo.block.UserToLeadGridBlock',{
	extend :  Xap.ej.block.Block ,
	
	           
	   		                          
	   	  

	alias:'widget.usertoleadgridblock',

    items:  [{
//       title: '用户列表',
       xtype:'xapgrid',
       pageShow : true,
       selType:'checkboxmodel',
  CM_JR_Record: [      
                { header: '人员ID', dataIndex: 'empId',field: 'textfield',type: 'string',flex:1},
                { header: '姓名', dataIndex: 'nm',field: 'textfield',type: 'string',flex:1 },
                { header: '性别', dataIndex: 'sexCd',field: 'textfield',type: 'string',flex:1 },
                { header: '行政科室', dataIndex: 'execDeptCd' ,field: 'textfield',type: 'string',flex:1},
                { header: '职称', dataIndex: 'occupationNm' ,field: 'textfield',type: 'string',flex:1}
        ],
   gridData:{
   	 'results':[
                   { 'empId': '1001', "nm":"李时珍", "sexCd":"男", "execDeptCd":"消化内科", "occupationNm":"住院医生" },
                   { 'empId': '1002', "nm":"华佗", "state":"男", "execDeptCd":"骨科" , "occupationNm":"住院医生" },
                   { 'empId': '1003', "nm":"孙思邈", "sexCd":"女", "execDeptCd":"骨伤科", "occupationNm":"住院医生"  }
               ]
}
    },{
    	xtype: 'xapform',
		width:'100%',
		dockedItems: [{
		    xtype: 'toolbar',
		    dock: 'bottom',
		    layout: {
				type: 'hbox',
				pack: 'end'
			},
		    items: [
		        { xtype: 'xapbutton', text: '导入',name: 'toLead',method: 'toLead'}
		    ]
		}]
	}] ,                   
        setData: function(data) {
        	if(data){
        		var grid = this.down('xapgrid');
    			grid.setData(data);
        	}
    	}               
})

Ext.define("iih.sy.userinfo.model.DeptModel",{
	extend:  Ext.data.Model ,
	fields:[
	    'roleList',
		'deptName'
		/*'editRow',
		'deleteRow'*/
		
	],
	idProperty: 'roleList'
});
Ext.define('iih.sy.userinfo.view.UserToLeadView',{
	extend :  Xap.ej.stl.view.SearchTemplate ,

	alias:'widget.usertoleadview',

	          
		                                        
		                                           
	  

	xapConfig: {
		blocks: {
			'condition':{
				xclass: 'iih.sy.userinfo.block.UserToLeadBlock'
			},
			'toolbar': {
				xclass: 'Xap.ej.block.ToolbarBlock',
				items: [{
					xtype: 'button',
					text: '检索',
					action: 'search'
				}]
			},
			'result':{
				xclass: 'iih.sy.userinfo.block.UserToLeadGridBlock'
			}
		},
		actions: {
			'init': {
				xclass: 'iih.sy.userinfo.action.UserToLeadInitAction',
				url: 'user_toLead_search',
				blocks: {
					condition: 'condition',
					result: 'result'
				}
			},
			'toLead': {
				xclass: 'iih.sy.userinfo.action.UserToLeadAction',
				url: 'user_toLead',
				blocks: {
					condition: 'condition',
					result: 'result'
				}
			},
			'search': {
				xclass: 'Xap.ej.stl.action.SimpleSearchAction',
				url: 'user_toLead_search',
				blocks: {
					condition: 'condition',
					result: 'result'
				}
			}
		},

		chains: {
			'init':['init'],
			'toLead':['toLead'],
			'search':['search']
		},

		connections: {
			'result': [{
				event: 'afterrender',
				chain: 'init'
			},{
				selector:'xapbutton[method=toLead]',
				event: 'click',
				chain: 'toLead'
			}],
			'toolbar': [{
				selector: 'button[action=search]',
				event: 'click',
				chain: 'search'
			}]
		}
	}
})
Ext.define('Xap.ej.block.DefaultLayerCreator', {
	                                  

	create: function(config) {
		return Xap.create({
			xclass: 'Xap.ej.block.Layer'
		});
	}
});
Ext.define('Xap.ej.block.CanvasLayerCreator', {
	                                  

	create: function(config) {
		var canvas = Xap.getCanvas();
		return canvas.getLayer('default');
	}
});
Ext.define('Xap.ej.action.DictionaryAction', {
	extend:  Xap.ej.action.ServiceInvocation ,

                                     

    doExecute: function(context) {
        this.prepareOperations(context);
    },

    prepareOperations: function(context) {
        var operations = context.operations;
        if(!operations) 
            return;
        var params = context.params;
        if(params && params.length >= 1) {
            var param = params[0];
            if(param) {
				 //var url = 'app/dictionary';
                var url = 'dictionary';
                url += '?' + Ext.Object.toQueryString(param);
                var operation = {
                    url: url,
                    method: 'get',
                    scope: this,
                    success: this.onSuccess,
                    // TODO 更好的Callback方案，目前的实现只是为了跑通
                    callback: context.callback
                };
                operations.push(operation);
            }
        }
    },

    onSuccess: function(operation) {
        var result = operation.result;
        if(Ext.isArray(result)) {
            var data = {};
            for(var i = 0; i < result.length; i++) {
                var d = result[i];
                if(d.id) {
                    data[d.id] = d;
                }
            }
            if(operation.callback && Ext.isFunction(operation.callback)) {
                operation.callback(data);
            }
        }
    }
});

Ext.define('Xap.ej.block.DictionaryLayer', {
	extend :  Xap.ej.block.Layer ,

	           
		                      
		                                 
		                               
	  

	getData: function() {
		if(!this.data) {
			this.data = {};
		}
		var canvas = Xap.getCanvas();
		var canvasLayer = canvas.getLayer(Xap.ej.block.Layer.DEFAULT);
		var global = canvasLayer.getData();
		for(var name in this.data) {
			var d = this.data[name];
			if(d && !d.data) {
				var gd = global[name];
				if(gd && gd.data) {
					d.data = gd.data;
				}
			}
		}
		return this.data;
	},

	setData: function(data, callback) {
		// TODO call parent
		if(!this.data) {
			this.data = {};
		}
		
		if(data) {
			this.data = Ext.apply(this.data, data);
		}

		var to = {};
		for(var name in this.data) {
			var d = this.data[name];
			to[name] = d;
			// 如果没有数据，需要从全局Canvas取得
			/*
			if(d && (!d.data || d.data.length <= 0)) {
				to[name] = d;
			}*/
		}
		var canvas = Xap.getCanvas();
		var canvasLayer = canvas.getLayer(Xap.ej.block.Layer.DEFAULT);
		canvasLayer.setData(to);
		canvas.refresh(callback);
	},

	render: function() {
		// TODO 这里假设Owner是Form，需要修改支持更多组件
		var owner = this.getOwner();
		// TODO 监听comboxready事件，然后初始化所有下拉列表
		// TODO仅针对grid和form监听
		owner.on('combochange', this.onInputChanged, this);
		owner.on('comboxready', function(combos){
			// 收集数据
			var data = {};
			for(var n in combos) {
				var combo = combos[n];
				if(combo.dictionary && combo instanceof Xap.ej.element.field.ComboBox) {
					data[combo.dictionary] = {
						data: combo.getData()
					};
				}
			}
			// 初始化Layer，成功后填充字典相关组件
			this.setData(data, function(canvasLayer) {
				var d = canvasLayer.getData();
				for(var n in combos) {
					var combo = combos[n];
					var obj = d[combo.dictionary];
					if(obj) {
						combo.setData(obj.data);
					}
				}
				if(owner instanceof Xap.ej.element.grid.Grid) {
					var comboxs = owner.query("xapcombobox");
					Ext.Array.forEach(comboxs,function(combox,index,array){
						combox.setData(combos[combox.dictionary].getData());
					});
				}
			});
		}, this);
		// 字典相关
		// var components = Ext.ComponentQuery.query("xapcombobox", owner);
	},

	// @Override
	/*
	setOwner: function(owner) {
		this.callParent([owner]);
		// 找到所有Comboxgrid，监听inputchange事件
		var combogrids = Ext.ComponentQuery.query("comboxgrid", owner);
		Ext.Array.forEach(combogrids, function(cg, index, array) {
			if(cg.dictionary) {
				// scope设置为组件对象
				cg.on('combochange', this.onInputChanged, this);
			}
		}, this);

		var grids = Ext.ComponentQuery.query("xapgrid", owner);
		Ext.Array.forEach(grids, function(grid, index, array) {
			grid.on('combochange', this.onInputChanged, this);
		}, this);
	},*/

	onInputChanged: function(obj, combo) {
		var component = combo;
		var chain = this.getChain();
		// TODO 支持多参数
		var param = {
			id: obj.dictionary
		};
		param[obj.searchParam[0]] = obj.searchValue;
		chain.execute({
			operations: [],
			params: [param],
			callback: function(data) {
				for(var n in data) {
					var d = data[n];
					if(d) {
						component.setData(d.data);
						break;
					}
				}
			}
		});
	},

	getChain: function() {
		if(!this.chain) {
			// TODO 构造函数创建
			this.chain = Xap.create({
				xclass: 'Xap.ej.action.Chain'
			});
			var action = Xap.create({
				xclass: 'Xap.ej.action.DictionaryAction'
			});
			this.chain.addAction(action);
		}
		return this.chain;
	}
});
Ext.define('Xap.ej.block.DictionaryLayerCreator', {
	                                            

	create: function() {
		return Xap.create({
			xclass: 'Xap.ej.block.DictionaryLayer'
		});
	}
});
Ext.define('Xap.ej.CorePlugin', {
	extend:  Xap.ej.platform.Plugin ,

	           
		                                   
		                                  
		                                     
	  

	pluginConfig: {
		extensions: {
			'xap.core.block.layer.creators': [{
				name: 'default',
				xclass: 'Xap.ej.block.DefaultLayerCreator'
			}, {
				name: 'canvas',
				xclass: 'Xap.ej.block.CanvasLayerCreator'
			}, {
				name: 'dictionary',
				xclass: 'Xap.ej.block.DictionaryLayerCreator'
			}]
		}
	}
})
/**
 * @class Xap
 * @singleton
 * @author: wenliming
 */

if (!console) {
	console = {
		log: function() {}
	};
}

var Xap = Xap || {};
(function() {
	
	
    Xap.test = function(){
//    	alert('test');
	};
	
	Xap.mode = 'debug';
	
	/**
	 * 使用该方法输出调试信息.
	 * @param {String} msg 调试信息
	 * @public
	 */
	Xap.debug = function(msg) {
		if(Xap.mode == 'debug') {
			var method = this.debug.caller, prefix='>> ';
			if (method.$owner) {
				prefix = method.$owner.$className + '#' + method.$name + prefix;
			} 
			console.log(prefix + msg);
		}
	};

	Xap.create = function(config) {
		return Ext.create(config);
	};
	
	/*
	Xap.create = function(objectType, config) {
		return Ext.widget(objectType, config);
	};
	*/

	Xap.createAction= function(actionType, config) {
		var action = Ext.widget(actionType,config);
		
    	return Ext.create('Ext.Action',{
    		text: action.text,
    	    handler: function(){
    	        action.execute();
    	    },
    	    iconCls: action.iconCls,
    	    itemId: action.itemId
		});
	};
	
	Xap.doRequest = function(data, callback, scope) {
    	console.log(data);
    	
    	if (Ext.isFunction(callback)) {
    		if (Ext.isFunction(simulateTest)) {
    			data = simulateTest(data);
    			console.log(data);
    			callback.call(scope || null, data);
    		}
    	}
	};

	Xap.getCanvas = function() {
		return Xap.ej.block.Canvas;
	};

	Xap.getLayerFactory = function() {
		return Xap.ej.block.LayerFactory;
	};

	Xap.getApp = function() {
		if(!this.app) {
			this.app = Xap.create({
				xclass: 'Xap.ej.app.Application'
			});
		}
		return this.app;
	};

	Xap.runAction = function(action, context) {
		if(action) {
			var chain = Xap.create({
				xclass: 'Xap.ej.action.Chain'
			});
			chain.addAction(action);
			chain.execute(context || {});
		}
	};
}());
Ext.define('Xap.ej.action.CloseAction', {
	extend:  Xap.ej.action.Action ,
	
	           
                              
      
	 
    execute: function(context) {
        this.callParent();
        if(this.targetBlock) {
            this.targetBlock.close();
        }
    }
});

Ext.define('Xap.ej.model.Command', {
	extend:  Ext.data.Model ,

	fields: ['name', 'operations'],
	
	/*
	proxy: {
        type: 'ajax',
        url : '/xxxx'
    }
	*/
});
Ext.define('Xap.ej.action.RemoteProxy', {
    extend:  Ext.data.proxy.Rest ,

    alias: 'proxy.xapremoteproxy',

    reader: {
        type: 'json'
        // root: 'data'
    },

    writer: {
        type: 'json'
    },

    listeners: {
        exception: function(proxy, response, operation) {
            if (response.status == 404) {
                // FuiMessageBox.fail(FuiLocale.get('connect', 'connectFailure'));
				Xap.debug('404');
            } else if (response.status == 500) {
                Xap.debug('500');
            } else {
				Xap.debug('unknown');
            }
        }
    }
});
// RemoteChainExecutor.baseUrl="http://172.18.96.159:9080"
Ext.define('Xap.ej.action.RemoteChainExecutor', {
    extend:  Xap.ej.action.LocalChainExecutor ,

               
                               
		                           
      

    // @Override
    doExecute: function(flow, context) {
		var self = this;
        // TODO 
        var command = {
			operations: []
		};
        // 清空所有模型数据
        // 遍历Action列表
        for(var i = 0; i < flow.length; i++) {
            var action = flow[i];
            self.preRequest(action, command, context);
        }
        // 只有operations有值，才执行远程调用
        if(command.operations && command.operations.length > 0) {
            this.doRemote(command);
        }
    },

    doRemote: function(command) {
        var self = this;
        var payload = {
            operations: []
        };
        for(var i = 0; i < command.operations.length; i++) {
            var o = command.operations[i];
            payload.operations.push({
                url: o.url
            });
        }
        // 发起请求
        var cm = Ext.create('Xap.ej.model.Command', payload);
        // TODO 不必每次都创建
        var proxy = Ext.create('Xap.ej.action.RemoteProxy', {
            // url: 'http://172.18.96.159:9080',
            url: this.baseUrl,
            model: 'Xap.ej.model.Command'
        });
        var o = Ext.create('Ext.data.Operation', {
            action: 'create',
            records: [cm]
        });
        proxy.doRequest(o, function(o) {
            var data = cm.getData();
            var operations = command.operations;
            for(var i = 0; i < operations.length; i++) {
                var operation = operations[i];
                // TODO 只取结果？
                operation.result = data.operations[i].result;
            }
            self.afterRequest(command);
        });
    },

    preRequest: function(action, command, context) {
        var ctx = {
            operations: []
        };
        ctx = Ext.apply(ctx, context);
        action.execute(ctx);
        if(action instanceof Xap.ej.action.ServiceInvocation) {
            Ext.Array.push(command.operations, ctx.operations);
        }
    },

    /*
    * @param action Action对象
    * @param data 后端返回的数据，与此Action对象对应
    */
    afterRequest: function(command) {
        var operations = command.operations;
        for(var i = 0; i < operations.length; i++) {
            var operation = operations[i];
            this.doOperationCallback(operation);
        }
    }
});
/** 
 *
 * 
 * @author ：chenyajie<chen_yajie@founder.com>
 * 消息工具类
 *
 */
Ext.define('Xap.ej.util.MsgUtil', {
	singleton: true,
	/*
	*消息提示框
	*/
	MsgBoxInfo: function (InfoText,callback) {
		Ext.Msg.show({
			title : '提示',
			msg : InfoText,
			model:true,
			fn:callback,
			buttons : Ext.Msg.OK,
			icon : Ext.Msg.INFO
		}); 
    },
	/*
	*询问提示框
	*/
	MsgBoxQst: function (MsgText,callback) {
		Ext.Msg.show({
			title : '询问',
			msg : MsgText,
			model:true,
			buttons : Ext.Msg.YESNO,
			fn:callback,
			icon : Ext.Msg.QUESTION
		});
    }

});

Ext.define('Xap.ej.action.RemoteChainExecutor2', {
    extend:  Xap.ej.action.RemoteChainExecutor ,

               
                                          
		                     
      

    doRemote: function(command) {
        var serviceInvocation = Xap.ej.action.ServiceInvocation;
        var self = this;
        var payload = {
            operations: []
        };
		//用于记录提示信息 add by chenyajie 2014年12月4日14:47:39
		var errorMsgs = '';
		var operLength = command.operations.length;
        for(var i = 0; i < operLength; i++) {
            var co = command.operations[i];
            co.data = co.data || {};
			var baseUrl = this.baseUrl || "";
            var url = co.url;
            if(url && url.indexOf('http://') < 0) {
                url = baseUrl + url;
            }
            var method = co.method;
            if(!method) {
                method = serviceInvocation.METHOD_GET;
            }
            // 兼容旧的方式
            else if(method == 'save') {
                method = method = serviceInvocation.METHOD_POST;
            }
            else if(method == 'get') {
                method = method = serviceInvocation.METHOD_GET;
            }

            // TODO 更合适的位置调用
            Xap.getApp().fireEvent('beforerequest');

            var headers = {};
            var sessionId = Ext.util.Cookies.get('xap-sessionId');
            if(sessionId) {
                headers['xap-sessionId'] = sessionId;
            }
            else {
                headers['xap-header'] = '1';
            }
            Ext.Ajax.request({
                url: url,
                params: co.params || {},
                jsonData: co.data || {},
                method: method,
                headers: headers,
				co: co,
				sort: i+1,
                success: function(response, opts) {
					var operation = opts.co;
					var sort = opts.sort;
                    Xap.debug('success');
                    var obj = Ext.JSON.decode(response.responseText);
                    // Xap.debug(response);
                    // TODO
                    if(obj && obj.result) {
                        operation.result = obj.result;
                    }
                    else if(obj) {
                        operation.result = obj;
                    }
					if(operation.scope){
						operation.scope.hideLoading();
						operation.scope.closeSubmitProgressBar();
					}
					if(operLength==sort){
						var chain = self.getChain();
						if(chain.callBack && Ext.isFunction(chain.callBack)){
							chain.callBack(operation.scope.getOwner());
							chain.callBack = null;
						}
					}

                    self.doOperationCallback(operation);
                    // TODO 更合适的位置调用
                    Xap.getApp().fireEvent('afterrequest', 'success');
                },
                failure: function(response, opts) {
					var operation = opts.co;
					var sort = opts.sort;
                    Xap.debug('fail');
                    Xap.debug(response);

                    // TODO 更合适的位置调用
                    Xap.getApp().fireEvent('afterrequest', 'failure');
					
					//用于记录提示信息 add by chenyajie 2014年12月4日14:47:39
					if(404==response.status){//404
						errorMsgs += '请求的资源不存在！<br/>';
					}else if(500==response.status){//500
						var obj = Ext.decode( response.responseText ) ;
						if(obj.errorMsg){
							Ext.Array.forEach(obj.errorMsg,function(errorMsg,index,array){ 
								errorMsgs += errorMsg.msg+ '<br/>';
							});
						}else{
							errorMsgs += '请求的资源内部发生错误！<br/>';
						}
					};
					//最后一次遍历时 提示出错误信息 add by chenyajie 2014年12月4日14:58:21
					if(operLength==sort){
						operation.scope.doFailureCallback();
						Xap.ej.util.MsgUtil.MsgBoxInfo(errorMsgs);
					};

					if(operation.scope){
						operation.scope.hideLoading();
						operation.scope.closeSubmitProgressBar();
					}
                }
            });
        }
    }
});
// TODO 此类仅供测试代码用，需要一套访问存储服务的代码接口
Ext.define('Xap.ej.action.StorageServiceInvocation', {
	extend:  Xap.ej.action.Action ,

	/*
	* @Override
	*/
    execute:function(context){
        var options = context.options;
        if(!options) 
            options = {};
        if(!options.data)
            return;

        var app = Xap.getApp();
        var url = app.getBaseUrl() + this.url;
        options.url = url;
        options.headers = {'xap-header': 1};
        if(!options.scope) {
            options.success = this.onSuccess;
            options.failure = this.onFailure;
            options.scope = this;
        }
        if(!options.method) {
            return;
        }
        else if(options.method == 'GET') {
            if(!options.jsonData) {
                options.jsonData = {};
            }
            options.binary = true;
        }
        else if(options.method == 'POST') {
            // if(options.binaryData) {
            //     options.binary = true;
            // }
            // TODO find mime
            options.headers['Content-Type'] = 'image/jpeg';
            options.rawData = options.data;
        }
        Ext.Ajax.request(options);
    },

    doExecute: Ext.emptyFn,

    onSuccess: function(o) {
        console.log(o);
    },

    onFailure: function(o) {
    }
});
Ext.define('Xap.ej.stl.action.DictionaryAction', {
	extend:  Xap.ej.action.ServiceInvocation ,

                                     

    doExecute: function(context) {
        this.prepareOperations(context);
    },

    prepareOperations: function(context) {
        var operations = context.operations;
        if(!operations) 
            return;
        var layer = this.getCanvasLayer();
        var data = layer.getData();

        var params = [];
        for(var name in data) {
            params.push(name);
        }
        if(params.length <= 0)
            return;
         var url = '/dictionary';
        if(params.length > 0) {
            url += '?id=' + params.toString();
        }

    	var operation = {
            url: url,
    		method: 'get',
    		scope: this,
    		success: this.onSuccess,
            // TODO 更好的Callback方案，目前的实现只是为了跑通
            callback: context.callback
    	};
    	operations.push(operation);
    },

    onSuccess: function(operation) {
        var result = operation.result;
        var layer = this.getCanvasLayer();
        if(Ext.isArray(result)) {
            var data = {};
            for(var i = 0; i < result.length; i++) {
                var d = result[i];
                if(d.id) {
                    data[d.id] = d;
                }
            }
            result = data;
        }
        layer.setData(result);
        // TODO 更好的Callback方案，目前的实现只是为了跑通
        if(operation.callback && Ext.isFunction(operation.callback)) {
            operation.callback(layer);
        }
    },

    getCanvasLayer: function() {
        var block = this.getBlock('target');
        var layer = block.getLayer(Xap.ej.block.Layer.DEFAULT);
        return layer;
    }
});

Ext.define('Xap.ej.stl.STLPlugin', {
	extend:  Xap.ej.platform.Plugin ,

	           
		                                    
	  

	constructor: function() {
		this.callParent();
		var canvas = Xap.getCanvas();
		var action = Xap.create({
			xclass: 'Xap.ej.stl.action.DictionaryAction'
		});
		action.addBlock('target', canvas);
		canvas.addAction(action);
	},

	pluginConfig: {
		extensions: {
		}
	}
})
// 全局唯一的画布
Ext.define('Xap.ej.block.Canvas', {
	extend :  Xap.ej.block.Block ,

	// requires: ['Xap.ej.action.DictionaryAction'],

	singleton: true,

	initBlock : function() {
		/*
		var action = Xap.create({
			xclass: 'Xap.ej.action.DictionaryAction'
		});
		action.addBlock('target', this);
		*/

		this.chain = Xap.create({
			xclass: 'Xap.ej.action.Chain'
		});
		/*
		this.chain.addAction(action);
		*/
	},

	refresh: function(callback) {
		this.chain.execute({
			operations: [],
			callback: callback
		});
	},

	addAction: function(action) {
		if(action) {
			this.chain.addAction(action);
		}
	}
});
Ext.define('Xap.ej.app.Application', {
	           
		                         
		                      
		                                     
		                    
		                       
		                     
	  

	mixins: [
		 Ext.util.Observable 
	],

    launch: function() {
		 	
        // 加载插件
        var plugin = Xap.ej.platform.Plugin;
        plugin.load([
            'Xap.ej.CorePlugin',
            'Xap.ej.stl.STLPlugin'
        ]);

        if(!this.chainExecutor) {
			this.chainExecutor = Xap.create({
				xclass: 'Xap.ej.action.RemoteChainExecutor2'
			});
        }
        if(!this.baseUrl) {
        	this.baseUrl = "http://localhost:8081/";
        }
        this.chainExecutor.baseUrl = this.baseUrl;
		
		Xap.ej.action.Chain.setExecutor(this.chainExecutor);

		if(this.mainView) {
	        // 创建Viewport
	        Ext.create('Ext.container.Viewport', {
	            layout: 'fit',
	            items: [{
	                xtype: this.mainView.xtype
	            }]
	        });
		}
		//*************************************************
		//*****修改基类js默认值 主要解决object挡住遮罩*****
		//*****addby chenyajie 2014.10.22******************
		//****************开始*****************************
		Ext.useShims=true;
		//****************结束***************************** 
    },
	
	loadPlugins: function(plugins) {
        var plugin = Xap.ej.platform.Plugin;
        plugin.load(plugins);
	},

	getBaseUrl: function() {
		// TODO 不是以'/'结尾的话，加上
		return this.baseUrl;
	}
});
Ext.define('Xap.ej.app.BaseApplication', {
    extend:  Ext.app.Application ,

    launch: function() {
        console.log('launch BaseApplication!');
    }
});
Ext.define('Xap.ej.app.BaseController', {
    extend:  Ext.app.Controller ,

    init: function() {
        console.log('Initialized BaseController! This happens before the Application launch function is called');
    }
});


/** 
 * 
 * @extends Ext.button.Button
 * Split按钮 
 * @author ：chenyajie<chen_yajie@founder.com>
 */ 
Ext.define('Xap.ej.element.button.SplitButton', {
	extend:  Ext.button.Split ,
	alias: 'widget.xapsplitbutton'
});
Ext.define('Xap.ej.element.container.BorderViewport', {
    extend:  Ext.container.Viewport ,
    layout: 'border',
    autoscroll: false,
    items:[
        {
        	id: 'maintop',
	        region: 'north',
	        html: '<h1 class="x-panel-header">Top Page</h1>',
	        border: false,
	        margins: '2 2 0 2'
	    }, {
	    	id: 'mainleft',
	        region: 'west',
	        collapsible: true,
	        split: true,	
	        width: 150,
	        margins: '0 0 2 2',
	        html: '<h1 class="x-panel-header">left</h1>'
	    }, {
	    	id: 'mainbottom',
	        region: 'south',
	        html: 'Information goes here',
	        border: false,
	        height: 0,
	        minHeight: 0
	    }, {
	    	id: 'mainright',
	        region: 'east',
	        collapsible: false,
	        border: false,
	        split: false,
	        width: 0
	    }, {
	    	id: 'mainworkarea',
	        region: 'center',
	        layout:'fit',
	        margins: '0 2 2 0',
	        minWidth: 600
	    }
    ],
    	
    initComponent: function() {
//    	alert(2);
//    	Ext.Msg.alert('Status', 'Viewport');
        this.callParent();
    }
});

/** 
 * 
 * @extend: 'Ext.form.field.Date',
 * 日期区间编辑框
 * @author ：chenyajie
 */  
Ext.define('Xap.ej.element.datetimefield.RangDate', {
	extend:  Ext.panel.Panel ,
	alias: 'widget.rangdate',
	//frame:true,  
	border:false,
	layout: {
		type: 'table',
		columns:4,
		tableAttrs: {　　
			cellpadding: 2,
			cellspacing: 1
		},
		tdAttrs: {　　
			valign: 'left'
		}
	},
    items: [
		{
			xtype: "xaplabel",
			html: '从'
		},{
			xtype: 'xapdatefield',
			name: 'startDate',
			format: 'Y-m-d',
			emptyText: '请选择日期 ...', 
			listeners: {
				change: function( v, newValue, oldValue, eOpts ) {
					var endData = this.up('panel').down('xapdatefield[name=endData]');
					endData.setMinValue( this.getValue( ) );
				}
			}
		},{
			xtype: "xaplabel",
			html: '至'
		}, {
			xtype: 'xapdatefield',
			name: 'endData',
			emptyText: '请选择日期 ...', 
			format: 'Y-m-d',
			listeners: {
				change: function( v, newValue, oldValue, eOpts ) {
					var startDate = this.up('panel').down('xapdatefield[name=startDate]');
					startDate.setMaxValue( this.getValue( ) );
				}
			}
		}
	]
});
/** 
 *
 * 联想多列下拉框，选中下拉框值时会触发combochange带newValue, oldValue, 和recordData参数;并执行callback函数。
 * @extend: 'Ext.form.field.ComboBox'
 * @author：chenyajie<chen_yajie@founder.com>
 * 
 *原comboBoxGrid在treeColumn中出现bug 修改
 *
 *
 */
Ext.define('Xap.ej.element.field.ComboBoxGrid2', {
	extend:  Ext.form.field.ComboBox ,
	alias: 'widget.comboxgrid2',
	          
		                             
		                                      
	  
	/** 
     * @cfg {String} 为该ComboBox指定字典类型。
     */ 
	dictionary: null,
	url: null,
	gridPageSize: 20,
	//是否可编辑
	editable : this.editable||true,
	//ComboBox加载数据方式
	queryMode : 'local',
    //放置到空表单项中的默认文本
    emptyText : this.emptyText||"请输入",
    allowBlank : this.allowBlank||true,
    //如果 allowBlank 校验失败时需要显示的出错信息
    blankText : this.blankText||"必须输入!",
    //当触发器被点击时需要执行的操作。 
    triggerAction : 'all',
	width : 150,
	//联想结果宽度
	listWidth : null,
    displayField : 'text',
    valueField : 'value',
	//点击行数据
	comboRecord : null,
    //隐藏值 只有被展开并选定值时才重置该值
    comboxHiddenValue : null,
	//失去焦点时 赋值
	blurSetValue : false,
	//combo父组件 如果指定 让该父组件抛出事件
    parentXtype : null,
    //查询的字段 默认按照displayField 如果不是searchParam : ['',''],
    searchParam : null,
    tpl : '',
    grid: null,
    //默认显示grid表头
    hideHeaders : false,
    columns: [],
	//键盘监听启用
	enableKeyEvents : true ,
	//设置键按起时进行查询
	listEmptyText: true ,
	//第一次时，先有'steel-id' DOM 再render render以后改为false
	first : true ,
	//用于本地setData
	comboData : null,
	//下拉选择器(picker)的宽度是否要准确地和表单项的宽度一致。默认值是true。
	matchFieldWidth : false,
    
    onSelect : Ext.emptyFn,
	initComponent : function() {
		var me = this;
		//初始化Store 
		this.store = Ext.create('Xap.ej.element.store.Store', {
			fields: [],
			data : [[]]
		});
		
		this.tpl = "<tpl for='.'><div id='steel-"+this.getId()+"'></div></tpl>";
		
		
		//初始化grid
		this.init_grid();
		//如果单列显示结果信息 宽度跟下拉框对齐
		if(me.hideHeaders||!this.listWidth){
			me.matchFieldWidth = true;
		}
		//监听展开事件
		this.on('expand',this.expandEvent,this);
		//监听键盘按下
		this.on('keydown',this.keydownEvent,this);
		this.on('keyup',this.keyup,this);
		//监听change事件
		this.on('change',this.changeEvent,this);
		//监听失去焦点事件
		this.on('blur',this.blurEvent,this);
		this.callParent(arguments);
	},
	/**     
	* 初始化grid
	*/
	init_grid: function() {
		var me = this;
		this.grid = Ext.create('Xap.ej.element.grid.Grid', {
			height : 200,
        	searchBar: true,
        	checkBox : false,
			pageComboxButton: false,
			//分页条的刷新按钮是否显示 
			pageRefreshButton : false,
			hideHeaders : me.hideHeaders,
			gridData : me.gridData,
			CM_JR_Record:me.columns
		});
		//如果非单列显示结果信息 宽度按指定宽度
		if(!me.hideHeaders){
			this.grid.width = me.listWidth;
		}
		//给grid注册rowclick事件
        this.grid.on('itemclick', me.grid_itemclick,this);
		//给grid注册cellkeydown事件
        this.grid.on('cellkeydown', me.grid_cellkeydown,this);
	},
	/**     
	* 给grid注册rowclick事件
	*/
	grid_cellkeydown: function(grid, td, cellIndex, record, tr, rowIndex, e, eOpts) {
		var me = this;
		//处理回车按键 让combox选择选中数据
		if('13'==e.getKey()){
			this.combox_select(record,rowIndex);
		}
	},
	/**     
	* 给grid注册rowclick事件
	*/
	grid_itemclick: function(grid,record,item, rowIndex, e) {
		var me = this;
		this.combox_select(record,rowIndex);
	},
	/**     
	* 让combox选择选中数据
	*/
	combox_select: function(record,rowIndex) {
		var me = this;
		if(me.fireEvent('beforeselect', me, record, rowIndex) !== false){
			me.collapse();
			//me.fireEvent('select', me, record, rowIndex);
			me.callback(record.data[me.valueField],me.comboxHiddenValue,record.raw);
			me.setRecordData(record.data);
		}
	},
	
	/**     
	* 得到选中的值
	*/
	getValue: function() {
		return this.comboxHiddenValue;
	},
	getSubmitValue: function() {
		return this.comboxHiddenValue;
	},
	reset: function() {
		var record = {};
		record[this.valueField] = '';
		record[this.displayField] = '';
		this.setRecordData(record);
	},
    /**     
	* overwrite 
	* 
	*/
	doQuery: function(q, forceAll) {
		//判断是否已展开
    	if(this.isExpanded){
    		this.collapse();
    	}
        this.expand();
		//第一次时，先有'steel-id' DOM 再render
		if(this.first){
			this.grid.render('steel-'+this.getId());
			//判断是否已展开
			if(this.isExpanded){
				this.collapse();
			}
			this.expand();
			this.first = false;
		}
		
	},
	
	/**     
	* 监听展开事件 执行的方法
	* 
	*/
	expandEvent : function(){
		//如果本地setData
		if(this.comboData){
			this.grid.setData(this.comboData);
		};
		var me = this;
		var component = this.getGrid();
		if(!this.getRawValue() && this.getData().length==0){
			if(this.dictionary){
				var searchObject={
					dictionary: this.dictionary,
					searchParam: this.searchParam||[this.displayField],
					searchValue: this.getRawValue()
				};
				if(this.parentXtype){
					this.up(this.parentXtype).fireEvent('combochange',searchObject,this);
				}
			}else{
				var chain = this.getChain();
				var param = {
					'pageSize': this.gridPageSize
				};
				Ext.apply(param,this.searchParam||{});
				chain.execute({
					operations: [],
					params: [param],
					url: this.url,
					callback: function(data) {
						if(data) {
							component.setData(data);
						}
					}
				});
			}
		}
	},
	
	/**     
	* 监听按键 执行的方法
	*/
	keydownEvent : function(me,e){
		//监听按下40键 自动选中第一行
		this.submitQuery = false;
		if(e.getKey()==40){
			var count = this.grid.getStore().getCount();
			if(count>0){
				this.grid.selectFirstRange();
			}
		}
	},
	/**     
	* 监听按键 执行的方法
	*/
	keyup : function(){
		var me = this;
		//如果文本框时，全部值，制空
		if(!this.getRawValue()){
			this.reset();
		}
		if(this.dictionary){
			var searchObject={
				dictionary: this.dictionary,
				searchParam: this.searchParam||[this.displayField],
				searchValue: this.getRawValue()
			};
			if(this.parentXtype){
				this.up(this.parentXtype).fireEvent('combochange',searchObject,this);
			}
		}else{
			this.submitQuery = true;
			setTimeout(function(){
				me.submit();
			},500);
		}
		this.fireEvent('combochange',this);
	},
	
	/**     
	* 监听change事件 执行的方法
	*/
	changeEvent : function( v, newValue, oldValue, eOpts ){
		console.log('newValue:'+newValue+',oldValue:'+oldValue+',RecordData:'+this.getRecord().data);
		/*var searchObject={
			dictionary: this.dictionary,
			searchParam: [this.displayField],
			searchValue: this.getRawValue()
		}*/
		//this.fireEvent('inputchange',searchObject);
		//this.fireEvent('combochange',newValue,oldValue,this.getRecord().data,searchObject);
		//this.callback(newValue,oldValue,this.getRecord().data);
		
	},
	
	/**     
	* 监听失去焦点事件 执行的方法
	*/
	blurEvent : function(combo, the, eOpts){
		if(this.blurSetValue){
			combo.comboxHiddenValue = combo.getRawValue();
		}
	},
	
	/**     
	* 得到该grid
	* 
	* @return grid 
	*/
	getGrid : function(){
		return this.grid;
	},
	
	/**     
	* 给该combo赋新值  
	* @param {data} [{},{}] 
	*/
	setData : function(data){
		this.comboData = data;
		this.doQuery();
		this.expand();
	},
	/**     
	* 获取该combo 数据 
	* @param {data} [{},{}] 
	*/
	getData : function(){
		var data = [];
		if(this.getGrid().getData()){
			data = this.getGrid().getData();
		}
		
		return data;
	},
	/**     
	* 该combo改变值后 回调函数 
	* @param {newValue} 
	*/
	callback : function(newValue,oldValue,record){
		
	},
	
	/**     
	* 得到选中行的Record，隐藏值也可以从这里取。
	* export JAVA_LIBRARY_PATH=$HADOOP_HOME/lib/native
	* @return Record 
	*/
	getRecord : function(){
		return this.comboRecord;
	},
	/**     
	* 给该combo赋新Record值  
	* @param {Object} {} 
	*/
	setRecordData : function(record){
		this.comboRecord = record;
		this.comboxHiddenValue = record[this.valueField];
		this.setRawValue(record[this.displayField]);
	},	
	/**     
	* 给该combo赋新值  
	* @param {String}  
	*/
	setValue : function(v){
		//this.callParent(arguments);
        //this.value = v;
		//this.fireEvent('combochange',this);
		var me = this;
		var component = this.getGrid();
		if(v){
			var chain = this.getChain();
			var param = {
				'keyword': v
			};
			chain.execute({
				operations: [],
				params: [param],
				url: this.url,
				callback: function(data) {
					if(data && data.length > 0) {
						me.setRecordData(data[0]);
						component.setData(data);
					}
				}
			});
		}
        return this;
    },
	
	submit: function() {
		if(this.submitQuery){
			var me = this;
			var component = this.getGrid();
			var chain = this.getChain();
			var param = {
				'keyword': this.getRawValue(),
				'pageSize': this.gridPageSize
			};
			Ext.apply(param,this.searchParam||{});
			chain.execute({
				operations: [],
				params: [param],
				url: this.url,
				callback: function(data) {
					if(data) {
						component.setData(data);
						if(data.length==1)
							me.setRecordData(data[0]);
					}
				}
			});
		}
	},

	getChain: function() {
		if(!this.chain) {
			// TODO 构造函数创建
			this.chain = Xap.create({
				xclass: 'Xap.ej.action.Chain'
			});
			var action = Xap.create({
				xclass: 'Xap.ej.action.IntelligentInputAction'
			});
			this.chain.addAction(action);
		}
		return this.chain;
	}
});
/** 
 *
 *  时间范围编辑框
 * @extends Ext.button.Button
 * @author：chenyajie<chen_yajie@founder.com>
 * 
 *
 */
Ext.define('Xap.ej.element.field.RangeTimeField', {
	extend:  Ext.form.field.Time ,
	alias: 'widget.rangetimefield',
	
	minValue: '6:00 AM',
	maxValue: '8:00 PM',
	increment: 30,
	anchor: '100%'
});
/** 
 *
 * 时间编辑框
 * @extends Ext.form.field.Time
 * @author：chenyajie<chen_yajie@founder.com>
 * 
 *
 */
Ext.define('Xap.ej.element.field.TimeField', {
	extend:  Ext.form.field.Time ,
	alias: 'widget.xaptimefield'
});

/** 
 *
 * 一个用于简化列定义的子类，适用于布尔类型的渲染。
 * @extends Ext.grid.column.Boolean
 * 
 * @author ：chenyajie<chen_yajie@founder.com>
 **/

Ext.define('Xap.ej.element.grid.column.Boolean', {
	extend :  Ext.grid.column.Boolean ,
	alias : ['widget.xapbooleancolumn']
});


/** 
 *
 * 一个用于简化列定义的子类，可通过配置tpl(XTemplate) 来把Model's data转换为需显示的值。
 * @extends Ext.grid.column.Template
 * 
 * @author ：chenyajie<chen_yajie@founder.com>
 **/

Ext.define('Xap.ej.element.grid.column.Template', {
	extend :  Ext.grid.column.Template ,
	alias : ['widget.xaptemplatecolumn']
});


/** 
 *
 * 流程grid
 * @class Xap.ej.element.grid.FlowGrid
 * @extends Xap.ej.element.grid.Grid
 * @author ：chenyajie<chen_yajie@founder.com>
 *
 *## example flowgrid
 *
 *     @example 
 *     Ext.onReady(function() {							
 *     	Ext.create('Ext.panel.Panel', {						
 *     		title: 'Panel',					
 *     		items: [{					
 *     			xtype: 'flowgrid',				
 *     			title: 'flowgrid',				
 *     			//url: 'MyGrid.json',				
 *     			processInfo: [				
 *     				{xtype: "button",text: '新建',method: 'create',handler: function() {console.log('click create');}},			
 *     				{xtype: "button",text: '保存',process: true,method: 'save'},			
 *     				{xtype: "button",text: '提交',process: true,method: 'submit'}			
 *     			],				
 *     			CM_JR_Record: [				
 *     				{ header: '姓名',  dataIndex: 'name', field: 'textfield' ,     type: 'string'},			
 *     				{ header: 'Email', dataIndex: 'email', flex: 1,     type: 'string'},			
 *     				{ header: '编号', dataIndex: 'personNumber',     type: 'string' }			
 *     			],				
 *     			gridData : {'results':[				
 *     				{ 'name': 'Lisa',  "email":"lisa@simpsons.com",  "personNumber":"555-111-1"  ,			
 *     					processTask:{		
 *     						processId:'',	
 *     						executingTask:[	
 *     							{name:'',method:'save',id:''}
 *     						]	
 *     					}		
 *     				},			
 *     				{ 'name': 'Bart',  "email":"bart@simpsons.com",  "personNumber":"555-222-2" },			
 *     				{ 'name': 'Homer', "email":"home@simpsons.com",  "personNumber":"555-222-3"  ,			
 *     					processTask:{		
 *     						processId:'',	
 *     						executingTask:[	
 *     							{name:'',method:'save',id:''},{name:'',method:'submit',id:''}
 *     						]	
 *     					}		
 *     				},			
 *     				{ 'name': 'Lisa',  "email":"lisa@simpsons.com",  "personNumber":"555-111-1"  ,			
 *     					processTask:{		
 *     						processId:'',	
 *     						executingTask:[	
 *     							{name:'',method:'submit',id:''}
 *     						]	
 *     					}		
 *     				},			
 *     				{ 'name': 'Bart',  "email":"bart@simpsons.com",  "personNumber":"555-222-2" },			
 *     				{ 'name': 'Marge', "email":"marge@simpsons.com", "personNumber":"555-222-4"  }			
 *     			]},				
 *     							
 *     			height: 300,				
 *     			width: 900				
 *     		}],					
 *     		renderTo: Ext.getBody()					
 *     	});						
 *     });							

 * 
 * 
 **/


Ext.define('Xap.ej.element.grid.customization.JobGrid', {
    extend:  Xap.ej.element.grid.Grid ,
    alias: 'widget.jobgrid',
	
	initComponent: function() {
		var me = this;
		//初始化列
		this.init_CM_JR_Record(this.CM_JR_Record);
		
        this.callParent(arguments);
    },
    /**     
	* 初始化复选框
	*/
	init_CM_JR_Record:function(CM_JR_Record){
		var xapactioncolumn = { 
			xtype:'xapactioncolumn',
			text:'状态',
			width : 40,
			items: [
				{
					icon:'img/error.png',
					getClass : function(view,m,record) {
						if(record.data.data>record.data.jobdata){
							return 'x-hidden';
						}else if((record.data.jobdata-record.data.data)>2999999999){
							return 'x-hidden';
						}
					}
				},{
					icon:'img/exclamation.png',
					getClass : function(view,m,record) {
						if(record.data.data>record.data.jobdata){
							return 'x-hidden';
						}else if((record.data.jobdata-record.data.data)<3000000000){
							return 'x-hidden';
						}
					}	
				}
			]
		};
		CM_JR_Record.unshift(xapactioncolumn);
		CM_JR_Record.push({ header: 'jobdata', dataIndex: 'jobdata', xtype: 'xapdatecolumn' /*,    hidden: true*/});
    },    
});


/** 
 *
 * UtilGrid
 * @class Xap.ej.element.grid.customization.UtilGrid
 * @extends Xap.ej.element.grid.Grid
 * @author ：chenyajie<chen_yajie@founder.com>
 *
 *## example flowgrid
 *
 *     @example 
 *     Ext.onReady(function() {							
 				
 *     });							
 * 
 * 
 **/


Ext.define('Xap.ej.element.grid.customization.UtilGrid', {
    extend:  Xap.ej.element.grid.Grid ,
    alias: 'widget.utilgrid',
	/**
	 * @cfg {boolean} 
	 * 是否显示写回病历按钮
	 */
	echo : true,
	/**
	 * @cfg {boolean} 
	 * 是否显示高级查询按钮
	 */
	search : true,
	initComponent: function() {
		var me = this;
		//初始化按钮
		this.init_tbar();
		
        this.callParent(arguments);
    },
    /**     
	* 初始化按钮
	*/
	init_tbar:function(){
		var me = this;
		var tbar = [];
		tbar.push('->');
		if(me.echo){
			tbar.push({
				xtype: "button",
				text: '写回病历'
			});
		}
		if(me.search){
			tbar.push({
				xtype: "button",
				text: '高级查询'
			});
		}
		this.tbar = tbar;
    },    
});

/** 
 *图像
 * @extends Ext.Img
 * @author ：chenyajie<chen_yajie@founder.com>
 * 
 *
 */
Ext.define('Xap.ej.element.image.Image', {
	extend:  Ext.Img ,
	alias: 'widget.xapimage'
});
/** 
 *链接
 * @extends Xap.ej.element.button.Button
 * @author ：chenyajie<chen_yajie@founder.com>
 *
 *
 */
Ext.define('Xap.ej.element.linkbutton.LinkButton', {
	extend:  Xap.ej.element.button.Button ,
	alias: 'widget.linkbutton',
	
	text: 'linkButton',
    url:'http://www.baidu.com',
    handler: function() {
        
		window.location.href = url;
		//var httpAdapter = window.ActiveXObject ? new ActiveXObject("Microsoft.XMLHTTP") : new XMLHttpRequest();
	
	   // httpAdapter.Open("POST",'http://www.baidu.com', false); alert('You clicked the linkButton111111111111!');
	    //httpAdapter.SetRequestHeader ("Content-Type","text/xml; charset=gb2312");
		//alert('You clicked the linkButton222222222222222!');
	    //httpAdapter.SetRequestHeader ("SOAPAction","http://www.baidu.com"); 
		//alert('You clicked the linkButton33333333333333!');
	   // httpAdapter.Send(''); 
		//alert('You clicked the linkButton444444444444!');
	    //return httpAdapter;
    }
});
/** 
 *标签
 * @extends Ext.form.Label
 * @author ：chenyajie<chen_yajie@founder.com>
 * 
 *
 */
Ext.define('Xap.ej.element.menu.Menu', {
	extend:  Ext.menu.Menu ,
	alias: 'widget.xapmenu'
});
/** 
 *
 * @author ：chenyajie<chen_yajie@founder.com>
 * ext工具类
 */
/*
*提示提示框
*/
function MsgBoxInfo(InfoText,callback)
{   
	Ext.Msg.show({
		title : '提示',
		msg : InfoText,
		model:true,
		fn:callback,
		buttons : Ext.Msg.OK,
		icon : Ext.Msg.INFO
	});
};
/*
*询问提示框
*/
function MsgBoxQst(MsgText,callback)
{   
	Ext.Msg.show({
		title : '询问',
		msg : MsgText,
		model:true,
		buttons : Ext.Msg.YESNO,
		fn:callback,
		icon : Ext.Msg.QUESTION
	});
};
/** 
 * 遮罩类。
 * @author ：白斌(mengxinhua)
 * @extends Ext.LoadMask
 */
Ext.define('Xap.ej.element.window.LoadMask', {
	extend:  Ext.LoadMask ,
	
	requires: [],
	
	alias: 'widget.xaploadmask',
	
	icon: 'css/images/loading.gif',
	
	msg: 'loading',
	
	tpl: '<table>' +
		 '<tr><td align="center"><img src={icon} width="20" height="20"></td>' +
		 '<td align="center">{msg}</td></tr>' +
		 '</table>',
	
	constructor: function() {
		if (arguments.length > 1) this.callParent(arguments);
		else {
			var comp = Ext.getBody();
			var config = {};
			if (arguments.length == 1) {
				if (!arguments[0].isComponent && !Ext.isString(arguments[0])) {
					config = arguments[0];
				} else comp = arguments[0];
			}
			this.callParent([comp, config]);
		}
	},
	
	initComponent: function() {
		var config = this.initialConfig;
		var msg = '加载中...';
		this.data = {
			icon: config.icon || this.icon,
			msg: msg == '' ? config.msg || this.msg : msg
		};
		var tpl = Ext.create('Ext.XTemplate', this.tpl);
		this.msg = tpl.apply(this.data);
		
		this.callParent();
	}
});
/** 
 *一个指定的打算作为一个应用程序窗口的面板。
 * @author ：chenyajie<chen_yajie@founder.com>
 * @extends Ext.window.Window
 */

Ext.define('Xap.ej.element.window.Window', {
    extend:  Ext.window.Window ,
    alias: 'widget.xapwindow'
})	

Ext.define('Xap.ej.message.Message', {
	alias:'widget.xapmessage',
	config:{
		id:null,
		text:null,
		ids:[],
		params:[]
	},
			
	constructor:function(config){
		this.initConfig(config);
	},
	
	getText:function(){
		
	}
	
});
Ext.define('Xap.ej.message.MessageResource', {
	alias:'widget.xapmessageresource',
		
	constructor:function(config){
		this.initConfig(config);
	},
		
	load:function(){
		console.log('loaded message resource.');
	}	
});
Ext.define('Xap.ej.message.Messages', {
	alias:'widget.xapmessages',
	config:{
		messages:[]
	},
			
	constructor:function(config){
		this.initConfig(config);
	}	
});
Ext.define('Xap.ej.model.BaseModel', {
    extend:  Ext.data.Model ,
    
});
Ext.define('Xap.ej.model.FunctionModel', {
    extend:  Xap.ej.model.BaseModel ,
    fields:[
    	{name:'name',type:'string'},
    	{name:'leaf',type:'boolean'},
    	{name:'functionId',type:'string'}
    ]
});

/*
* 抽象出重置逻辑
*/
Ext.define('Xap.ej.stl.action.MigrationAction', {
	extend:  Xap.ej.action.Action ,
	
	/*
	* @Override
	*/
	execute: function(context) {
    	this.callParent();
        var content = this.getBlock('content');
        if(content) {
            this.doReset(content);
        }
    },

    /*
    * TODO 实现
    */
    doReset: Ext.emptyFn
});

/*
* 用于画面迁移的Action，可以被各种Portal实现
*/
Ext.define('Xap.ej.stl.action.MigrationAction', {
	extend:  Xap.ej.action.Action ,
	
	/*
	* @Override
	*/
	execute: function(context) {
    	this.callParent();
        var target = this.getBlock('target');
        if(target) {
            this.beforeMigration(target);
            this.doMigration(target);
        }
    },

    /*
    * TODO 实现
    */
    beforeMigration: Ext.emptyFn,

    /*
    * TODO 实现
    */
    doMigration: Ext.emptyFn
});

// TODO 修改类名
Ext.define('Xap.ej.stl.action.ProcessDispatchAction', {
	extend:  Xap.ej.action.Action ,
	
	/*
	* @Override
	*/
	execute: function(context) {
    	this.callParent();
    	// tasksubmit
    	var event = context.event;
    	// TODO 从event中取得
    	var method = event.arguments[0];
    	var owner = this.getOwner();
    	var chain = owner.getActionChain(method);
        if(!chain) {
            chain = owner.getActionChain('task');
        }
    	if(chain) {
            // TODO Context
            chain.execute(context);
    	}
    }
});

Ext.define('Xap.ej.stl.action.ProcessTaskAction', {
	extend:  Xap.ej.action.ServiceInvocation ,

    doExecute: function(context) {
        this.callParent();
        var data = this.getData(context);
        if(!data)
            // TODO 
            return false;
        var METHODS = this.getInvocationMethods();
        var o = {};
        o.data = data;
        o.url = this.getUrl(context);
        o.method = METHODS.METHOD_UPDATE;
        context.operations.push(o);
        return true;
    },

    getData: function(context) {
        var data = context.data;
        if(!data && context.event) {
            var event = context.event;
            // TODO 目前只考虑了Event的第二个参数
            var args = event.arguments;
            if(args.length >= 2) {
                data = args[1];
            }
        }
        if(data && (data instanceof Ext.data.Model)) {
            data = data.getData(true);
        }
        return data;        
    },

    getUrl: function(context) {
        var url = "process";
        if(context.event) {
            var event = context.event;
            var args = event.arguments;
            if(args.length >= 3) {
                task = args[2];
                var processId = task.processId;
                var taskName = task.method;
                // TODO 使用taskId
                var taskId = task.id;
                url += '/' + processId;
                url += '/task/' + taskName;
            }
        }
        return url;
    }
});
Ext.define('Xap.ej.stl.block.FlowGridBlock',{
	extend :  Xap.ej.element.grid.FlowGrid ,

	           
		                               
		                                      
		                                         
	  

	alias:'widget.xapflowgridblock',

	// TODO baseTemplate
	mixins : {
		'baseTemplate':  Xap.ej.template.BaseTemplate 
	},

	// TODO 使用mixins时都需要再实现一次initComponent，研究不需要重复实现initComponent的方法
	initComponent: function() {
		this.callParent();
		this.initBlock();
	},

	defaultXapConfig: {
		blocks: {
		},

		// TODO 大部分Action是单例
		actions: {
			'dispatch': {
				xclass: 'Xap.ej.stl.action.ProcessDispatchAction'
			},
			'task': {
				xclass: 'Xap.ej.stl.action.ProcessTaskAction'
			}
		},

		chains: {
			'dispatch': ['dispatch'],
			// TODO 单实例
			'task': ['task']
		}

		// TODO connections可以绑定this的事件
	},

	initBlock: function() {
		this.mixins.baseTemplate.initBlock.call(this);
		// TODO 在配置connnections中定义事件绑定
		this.connect(
			'tasksubmit', 
			this.getActionChain('dispatch')
		);
	}
})
Ext.define('Xap.ej.model.ProcessTaskModel', {
	extend :  Xap.ej.model.BaseModel ,
	fields : [ {
		name : 'processId',
		type : 'string'
	}, {
		name : 'executingTask'
	} ],
	hasMany : {
		model : 'ExecutingTaskModel',
		name : 'executingTask'
	}
});
Ext.define('Xap.ej.model.ExecutingTaskModel', {
	extend :  Xap.ej.model.BaseModel ,
	fields : [ {
		name : 'id',
		type : 'string'
	}, {
		name : 'name',
		type:'string'
	}, {
		name : 'method',
		type:'string'
	} ]
});
Ext.define('Xap.ej.model.ProcessTaskModel', {
	extend :  Xap.ej.model.BaseModel ,
	fields : [ {
		name : 'processId',
		type : 'string'
	}, {
		name : 'executingTask'
	} ],
	hasMany : {
		model : 'ExecutingTaskModel',
		name : 'executingTask'
	}
});
Ext.define('Xap.ej.model.ExecutingTaskModel', {
	extend :  Xap.ej.model.BaseModel ,
	fields : [ {
		name : 'id',
		type : 'string'
	}, {
		name : 'name',
		type:'string'
	}, {
		name : 'method',
		type:'string'
	} ]
});
Ext.define('Xap.ej.model.ProcessTask', {
	extend :  Ext.data.Model ,
	fields : [ {
		name : 'processId',
		type : 'string'
	}, {
		name : 'name',
		type:'string'
	}, {
		name : 'method',
		type:'string'
	}],

	
	hasMany : {
		model : 'Xap.ej.model.ProcessTask',
		name : 'followings'
	}
});
Ext.define('Xap.ej.stl.view.PopUpTemplate', {
	extend :  Ext.window.Window ,

	            
		                                   
		                            
		                                     
		                          
	  

	alias : 'widget.xappopuptpl',

	mixins: [ Xap.ej.config.Configable ],
	
	defaultXapConfig: {
		blocks: {
			'content': {
				xclass: 'Xap.ej.stl.view.PlaceHolderBlock',
				height:100
			}
		},

		actions: {
			'close': {
				xclass: 'Xap.ej.stl.action.PopUpCloseAction'
			}
		},

		chains: {
			'close': ['close']
		},

		extConfig: {
			border : 0,

			layout : 'fit',

			width: 800,

			height: 600,
		}
	},

	initComponent : function() {
		// TODO 这种方式？加一个noral？
		var extConfig = this.defaultXapConfig.extConfig;
        if(this.xapConfig) {
        	extConfig = Ext.apply(extConfig, this.xapConfig.extConfig);
        }
        Ext.apply(this, extConfig);

		this.callParent();

        this.actions = {};
        this.chains = {};
        this.blocks = {};
        if(this.doCheckXapConfig) {
            this.doCheckXapConfig();
        }
        this.doXapConfig();

		var ca = this.getAction('close');
		if(ca && ca instanceof Xap.ej.stl.action.PopUpCloseAction) {
			ca.setTarget(this);
		}
	},

	getContentBlock : function() {
		return this.getBlock('content');
	}
});

Ext.define('Xap.ej.stl.view.MessageBox', {
	extend :  Xap.ej.stl.view.PopUpTemplate ,

	            
		                                   
		                                     
		                            
		                    
	  

	alias : 'widget.xapmessagebox',

	defaultXapConfig: {
		blocks: {
			'content': {
				xclass: 'Xap.ej.stl.view.PlaceHolderBlock',
				flex: 1
			},

			'toolbar': {
				xclass: 'Xap.ej.block.ToolbarBlock',
				items: [{
					xtype: 'button',
					text: '确定',
					action: 'confirm'
				}, {
					xtype: 'button',
					text: '取消',
					action: 'cancel'
				}],
				height: 30
			}
		},

		actions: {
			'close': {
				xclass: 'Xap.ej.stl.action.PopUpCloseAction'
			}
		},

		chains: {
			'close': ['close']
		},

		connections: {
			'toolbar': [{
				selector: 'button[action=cancel]',
				event: 'click',
				chain: 'close'
			}, {
				selector: 'button[action=confirm]',
				event: 'click',
				chain: 'close'
			}]
		},

		extConfig: {
			height: 300,

			width: 500,

			closable: false,

			layout : {
				type: 'vbox',
				align : 'stretch'
			}
		}
	}
});
/**
 * @author tian_yuyan<tian_yuyan@founder.com>
 * @docauthor tian_yuyan<tian_yuyan@founder.com>
 * 该模板是border布局的容器模板。
 */
Ext.define('Xap.ej.stl.view.TopBottomSplitTemplate', {
	extend :  Xap.ej.template.BaseTemplate ,

	            
		                                  
	  

	alias : 'widget.xaptopbottomsplittemplate',

	border : 0,

	layout: 'border', 
	
	defaultXapConfig: {
		blocks: {	
			/*
			 * south,east,north,南,东,北三种布局默认不加到模板中，
			 * 如果有需要，需要在实现中自己实现
			 */
			'top': {
				xclass: 'Xap.ej.element.panel.Panel',				
				region: 'center'
			},
			'bottom': {	
				xclass: 'Xap.ej.element.panel.Panel',	
				region:'south',
				split: true
			},
		}
	},

	initBlock : function() {
		this.callParent();
	},

	doCheckXapConfig: function() {
		// TODO 必须包括的Action等等...
	},
	
	//getWestBlock,getCenterBlock,默认提供拿到'west'和'center'的block方法
	getWestBlock : function() {
		return this.getBlock('west');
	},
	
	getCenterBlock : function() {
		return this.getBlock('center');
	}
});

Ext.define('Xap.ej.template.BasePanelTemplate', {
    extend:  Xap.ej.block.PanelBlock ,

                                           

    alias: 'widget.xapbasetemplate',

    border: 0,

    mixins: [ Xap.ej.config.Configable ],

    initBlock: function() {
        this.callParent();
        this.actions = {};
        this.chains = {};
        this.blocks = {};
        if(this.doCheckXapConfig) {
            this.doCheckXapConfig();
        }
        this.doXapConfig();
    }
});

/*
This file is part of Ext JS 4.2

Copyright (c) 2011-2013 Sencha Inc

Contact:  http://www.sencha.com/contact

GNU General Public License Usage
This file may be used under the terms of the GNU General Public License version 3.0 as
published by the Free Software Foundation and appearing in the file LICENSE included in the
packaging of this file.

Please review the following information to ensure the GNU General Public License version 3.0
requirements will be met: http://www.gnu.org/copyleft/gpl.html.

If you are unsure which license is appropriate for your use, please contact the sales department
at http://www.sencha.com/contact.

Build date: 2013-05-16 14:36:50 (f9be68accb407158ba2b1be2c226a6ce1f649314)
*/
//
// Definitions of enums referenced in documentation.
//

/**
 * @enum [Ext.enums.Layout=layout.*]
 * Enumeration of all layout types.
 */

/**
 * @enum [Ext.enums.Widget=widget.*]
 * Enumeration of all xtypes.
 */

/**
 * @enum [Ext.enums.Plugin=plugin.*]
 * Enumeration of all ptypes.
 */

/**
 * @enum [Ext.enums.Feature=feature.*]
 * Enumeration of all ftypes.
 */


